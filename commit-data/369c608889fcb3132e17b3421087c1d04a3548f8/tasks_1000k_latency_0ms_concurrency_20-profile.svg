<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1542" onload="init(evt)" viewBox="0 0 1200 1542" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1525"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1525"> </text>
<g id="frames">
<g>
<title>all (1,156 samples, 100.00%)</title><rect x="10.0" y="1491.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1502.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.09%)</title><rect x="10.0" y="1475.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.17%)</title><rect x="11.0" y="1475.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.0" y="1486.0"></text>
</g>
<g>
<title>_int_malloc (2 samples, 0.17%)</title><rect x="11.0" y="1459.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (258 samples, 22.32%)</title><rect x="13.1" y="1475.0" width="263.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.1" y="1486.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.17%)</title><rect x="15.1" y="1459.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.1" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.17%)</title><rect x="15.1" y="1443.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.17%)</title><rect x="15.1" y="1427.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.1" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.17%)</title><rect x="15.1" y="1411.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.17%)</title><rect x="15.1" y="1395.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="16.1" y="1379.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="16.1" y="1363.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="16.1" y="1347.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="16.1" y="1331.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="16.1" y="1315.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="16.1" y="1299.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.09%)</title><rect x="16.1" y="1283.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.09%)</title><rect x="16.1" y="1267.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.09%)</title><rect x="16.1" y="1251.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.09%)</title><rect x="16.1" y="1235.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.09%)</title><rect x="16.1" y="1219.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (253 samples, 21.89%)</title><rect x="17.1" y="1459.0" width="258.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.1" y="1470.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.43%)</title><rect x="17.1" y="1443.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.43%)</title><rect x="17.1" y="1427.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.1" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/809236260.accept (5 samples, 0.43%)</title><rect x="17.1" y="1411.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.43%)</title><rect x="17.1" y="1395.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.1" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.43%)</title><rect x="17.1" y="1379.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.1" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.43%)</title><rect x="17.1" y="1363.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.1" y="1374.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (5 samples, 0.43%)</title><rect x="17.1" y="1347.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.1" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.35%)</title><rect x="22.2" y="1443.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.2" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.35%)</title><rect x="22.2" y="1427.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.35%)</title><rect x="22.2" y="1411.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.2" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.35%)</title><rect x="22.2" y="1395.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.2" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="23.3" y="1379.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.3" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="23.3" y="1363.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.3" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="23.3" y="1347.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="1358.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="23.3" y="1331.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="26.3" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.17%)</title><rect x="24.3" y="1331.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.3" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="24.3" y="1315.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.3" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="25.3" y="1299.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.3" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/131460451.test (1 samples, 0.09%)</title><rect x="25.3" y="1283.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.3" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.09%)</title><rect x="26.3" y="1443.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.3" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="26.3" y="1427.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.3" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="26.3" y="1411.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.3" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="26.3" y="1395.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.3" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="26.3" y="1379.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.3" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="26.3" y="1363.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.3" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="26.3" y="1347.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.3" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="26.3" y="1331.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.3" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="26.3" y="1315.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.3" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="26.3" y="1299.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.3" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$251/2101712721.test (1 samples, 0.09%)</title><rect x="26.3" y="1283.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (196 samples, 16.96%)</title><rect x="27.4" y="1443.0" width="200.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.4" y="1454.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/251689173.accept (190 samples, 16.44%)</title><rect x="27.4" y="1427.0" width="193.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.4" y="1438.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (189 samples, 16.35%)</title><rect x="28.4" y="1411.0" width="192.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.4" y="1422.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.09%)</title><rect x="28.4" y="1395.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.4" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (153 samples, 13.24%)</title><rect x="29.4" y="1395.0" width="156.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.4" y="1406.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (153 samples, 13.24%)</title><rect x="29.4" y="1379.0" width="156.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.4" y="1390.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (153 samples, 13.24%)</title><rect x="29.4" y="1363.0" width="156.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.4" y="1374.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (153 samples, 13.24%)</title><rect x="29.4" y="1347.0" width="156.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.4" y="1358.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (153 samples, 13.24%)</title><rect x="29.4" y="1331.0" width="156.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.4" y="1342.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (153 samples, 13.24%)</title><rect x="29.4" y="1315.0" width="156.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.4" y="1326.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (100 samples, 8.65%)</title><rect x="70.2" y="1299.0" width="102.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.2" y="1310.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.61%)</title><rect x="70.2" y="1283.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 0.61%)</title><rect x="70.2" y="1267.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 0.61%)</title><rect x="70.2" y="1251.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.95%)</title><rect x="77.4" y="1283.0" width="11.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (11 samples, 0.95%)</title><rect x="77.4" y="1267.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.35%)</title><rect x="81.5" y="1251.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.5" y="1262.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.35%)</title><rect x="81.5" y="1235.0" width="4.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="84.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.26%)</title><rect x="85.5" y="1251.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (82 samples, 7.09%)</title><rect x="88.6" y="1283.0" width="83.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="91.6" y="1294.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (82 samples, 7.09%)</title><rect x="88.6" y="1267.0" width="83.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.6" y="1278.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="88.6" y="1251.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 6.83%)</title><rect x="89.6" y="1251.0" width="80.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.6" y="1262.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 6.83%)</title><rect x="89.6" y="1235.0" width="80.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.6" y="1246.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (76 samples, 6.57%)</title><rect x="92.7" y="1219.0" width="77.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.7" y="1230.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (68 samples, 5.88%)</title><rect x="93.7" y="1203.0" width="69.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="96.7" y="1214.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="94.7" y="1187.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="97.7" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="96.8" y="1187.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="99.8" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 3.89%)</title><rect x="98.8" y="1187.0" width="45.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="101.8" y="1198.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.26%)</title><rect x="144.7" y="1187.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="147.7" y="1198.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.30%)</title><rect x="147.8" y="1187.0" width="15.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="150.8" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.43%)</title><rect x="163.1" y="1203.0" width="5.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="166.1" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="168.2" y="1203.0" width="2.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="171.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="170.3" y="1251.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="173.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.61%)</title><rect x="172.3" y="1299.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (7 samples, 0.61%)</title><rect x="172.3" y="1283.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.61%)</title><rect x="172.3" y="1267.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="175.3" y="1278.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="176.4" y="1251.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="179.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.35%)</title><rect x="179.4" y="1299.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.35%)</title><rect x="179.4" y="1283.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="179.4" y="1267.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="181.5" y="1267.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="181.5" y="1251.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="182.5" y="1251.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.5" y="1262.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="183.5" y="1299.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="186.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.09%)</title><rect x="185.6" y="1395.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.6" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.09%)</title><rect x="185.6" y="1379.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.6" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.09%)</title><rect x="186.6" y="1395.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.6" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="186.6" y="1379.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="189.6" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="186.6" y="1363.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.6" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (33 samples, 2.85%)</title><rect x="187.6" y="1395.0" width="33.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.6" y="1406.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 2.85%)</title><rect x="187.6" y="1379.0" width="33.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.6" y="1390.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.43%)</title><rect x="210.1" y="1363.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="210.1" y="1347.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.1" y="1358.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="210.1" y="1331.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.1" y="1342.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="210.1" y="1315.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="213.1" y="1326.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.17%)</title><rect x="211.1" y="1347.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="212.1" y="1331.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.17%)</title><rect x="213.1" y="1347.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.1" y="1358.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="215.2" y="1363.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="218.2" y="1374.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.43%)</title><rect x="216.2" y="1363.0" width="5.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="219.2" y="1374.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="221.3" y="1427.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="224.3" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.43%)</title><rect x="222.3" y="1427.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="225.3" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.26%)</title><rect x="224.4" y="1411.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.26%)</title><rect x="224.4" y="1395.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.26%)</title><rect x="224.4" y="1379.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.4" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (3 samples, 0.26%)</title><rect x="224.4" y="1363.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.4" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.26%)</title><rect x="224.4" y="1347.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 4.07%)</title><rect x="227.4" y="1443.0" width="48.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.4" y="1454.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 4.07%)</title><rect x="227.4" y="1427.0" width="48.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.4" y="1438.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (32 samples, 2.77%)</title><rect x="228.4" y="1411.0" width="32.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.4" y="1422.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="228.4" y="1395.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="228.4" y="1379.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/275554500.shouldBlock (1 samples, 0.09%)</title><rect x="228.4" y="1363.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.09%)</title><rect x="228.4" y="1347.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.09%)</title><rect x="228.4" y="1331.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.4" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.09%)</title><rect x="228.4" y="1315.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.4" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="228.4" y="1299.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.4" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="228.4" y="1283.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.4" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="228.4" y="1267.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.4" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="228.4" y="1251.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.4" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="228.4" y="1235.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.4" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="228.4" y="1219.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="228.4" y="1203.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="228.4" y="1187.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.4" y="1198.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.09%)</title><rect x="228.4" y="1171.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="231.4" y="1182.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="228.4" y="1155.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="231.4" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="228.4" y="1139.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="231.4" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.09%)</title><rect x="228.4" y="1123.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="231.4" y="1134.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.09%)</title><rect x="228.4" y="1107.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="231.4" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.09%)</title><rect x="228.4" y="1091.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="231.4" y="1102.0"></text>
</g>
<g>
<title>ConstantPool::klass_ref_at(int, Thread*) (1 samples, 0.09%)</title><rect x="228.4" y="1075.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="231.4" y="1086.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle, int, Thread*) (1 samples, 0.09%)</title><rect x="228.4" y="1059.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="231.4" y="1070.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.09%)</title><rect x="228.4" y="1043.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="231.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (31 samples, 2.68%)</title><rect x="229.5" y="1395.0" width="31.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.5" y="1406.0">or..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="229.5" y="1379.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.5" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="229.5" y="1363.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.5" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="229.5" y="1347.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (29 samples, 2.51%)</title><rect x="230.5" y="1379.0" width="29.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.5" y="1390.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (27 samples, 2.34%)</title><rect x="230.5" y="1363.0" width="27.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.5" y="1374.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (27 samples, 2.34%)</title><rect x="230.5" y="1347.0" width="27.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.5" y="1358.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 1.12%)</title><rect x="234.6" y="1331.0" width="13.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.87%)</title><rect x="234.6" y="1315.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.87%)</title><rect x="234.6" y="1299.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.87%)</title><rect x="234.6" y="1283.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.87%)</title><rect x="234.6" y="1267.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.87%)</title><rect x="234.6" y="1251.0" width="10.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.87%)</title><rect x="234.6" y="1235.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.87%)</title><rect x="234.6" y="1219.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.26%)</title><rect x="244.8" y="1315.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.26%)</title><rect x="244.8" y="1299.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.87%)</title><rect x="247.8" y="1331.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.09%)</title><rect x="247.8" y="1315.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 0.78%)</title><rect x="248.9" y="1315.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.17%)</title><rect x="252.9" y="1299.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.9" y="1310.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.17%)</title><rect x="252.9" y="1283.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.26%)</title><rect x="255.0" y="1299.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.0" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.26%)</title><rect x="255.0" y="1283.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="258.0" y="1294.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="257.0" y="1267.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="260.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="258.0" y="1363.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="258.0" y="1347.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="261.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.09%)</title><rect x="258.0" y="1331.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.0" y="1342.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="258.0" y="1315.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="258.0" y="1299.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="258.0" y="1283.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="258.0" y="1267.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="258.0" y="1251.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.0" y="1262.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="258.0" y="1235.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.0" y="1246.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="258.0" y="1219.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="261.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="259.1" y="1363.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="262.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.09%)</title><rect x="260.1" y="1379.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.09%)</title><rect x="261.1" y="1411.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.09%)</title><rect x="261.1" y="1395.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.09%)</title><rect x="261.1" y="1379.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="261.1" y="1363.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1991282176.accept (1 samples, 0.09%)</title><rect x="261.1" y="1347.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.52%)</title><rect x="262.1" y="1411.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.35%)</title><rect x="262.1" y="1395.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.35%)</title><rect x="262.1" y="1379.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.35%)</title><rect x="262.1" y="1363.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.35%)</title><rect x="262.1" y="1347.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.26%)</title><rect x="262.1" y="1331.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.1" y="1342.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="262.1" y="1315.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="265.1" y="1326.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="262.1" y="1299.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="265.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.17%)</title><rect x="263.1" y="1315.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.17%)</title><rect x="263.1" y="1299.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.17%)</title><rect x="263.1" y="1283.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.1" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.17%)</title><rect x="263.1" y="1267.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.1" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="264.2" y="1251.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.2" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="264.2" y="1235.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="264.2" y="1219.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.09%)</title><rect x="264.2" y="1203.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.2" y="1214.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="264.2" y="1187.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="267.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceive (1 samples, 0.09%)</title><rect x="265.2" y="1331.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.2" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="265.2" y="1315.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.2" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="265.2" y="1299.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.17%)</title><rect x="266.2" y="1395.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.17%)</title><rect x="266.2" y="1379.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.17%)</title><rect x="266.2" y="1363.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.2" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.17%)</title><rect x="266.2" y="1347.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.2" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.17%)</title><rect x="266.2" y="1331.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.17%)</title><rect x="266.2" y="1315.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="266.2" y="1299.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.09%)</title><rect x="266.2" y="1283.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.09%)</title><rect x="266.2" y="1267.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.toStruct (1 samples, 0.09%)</title><rect x="267.2" y="1299.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.toStruct (1 samples, 0.09%)</title><rect x="267.2" y="1283.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.09%)</title><rect x="267.2" y="1267.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.09%)</title><rect x="267.2" y="1251.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="267.2" y="1235.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="267.2" y="1219.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.52%)</title><rect x="268.3" y="1411.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.3" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.52%)</title><rect x="268.3" y="1395.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.17%)</title><rect x="269.3" y="1379.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1958470945.accept (2 samples, 0.17%)</title><rect x="269.3" y="1363.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.17%)</title><rect x="269.3" y="1347.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="269.3" y="1331.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="270.3" y="1331.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="270.3" y="1315.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="270.3" y="1299.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="271.3" y="1379.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="271.3" y="1363.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="274.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="271.3" y="1347.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.3" y="1358.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.09%)</title><rect x="271.3" y="1331.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="274.3" y="1342.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="271.3" y="1315.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="272.3" y="1379.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.09%)</title><rect x="273.4" y="1379.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.4" y="1390.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="273.4" y="1363.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="276.4" y="1374.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="273.4" y="1347.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="276.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="274.4" y="1411.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.4" y="1395.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.4" y="1379.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="277.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.4" y="1363.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="274.4" y="1347.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="274.4" y="1331.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.09%)</title><rect x="274.4" y="1315.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.4" y="1326.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="275.4" y="1459.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="278.4" y="1470.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="275.4" y="1443.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="278.4" y="1454.0"></text>
</g>
<g>
<title>java/lang/Thread.run (673 samples, 58.22%)</title><rect x="276.4" y="1475.0" width="687.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.4" y="1486.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (673 samples, 58.22%)</title><rect x="276.4" y="1459.0" width="687.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.4" y="1470.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (673 samples, 58.22%)</title><rect x="276.4" y="1443.0" width="687.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.4" y="1454.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.52%)</title><rect x="282.5" y="1427.0" width="6.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="285.5" y="1438.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="283.6" y="1411.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="286.6" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1387199738.run (463 samples, 40.05%)</title><rect x="288.7" y="1427.0" width="472.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.7" y="1438.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (463 samples, 40.05%)</title><rect x="288.7" y="1411.0" width="472.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.7" y="1422.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (463 samples, 40.05%)</title><rect x="288.7" y="1395.0" width="472.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.7" y="1406.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (449 samples, 38.84%)</title><rect x="288.7" y="1379.0" width="458.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.7" y="1390.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedule..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (22 samples, 1.90%)</title><rect x="288.7" y="1363.0" width="22.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.7" y="1374.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (22 samples, 1.90%)</title><rect x="288.7" y="1347.0" width="22.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.7" y="1358.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/1706917919.get (22 samples, 1.90%)</title><rect x="288.7" y="1331.0" width="22.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.7" y="1342.0">c..</text>
</g>
<g>
<title>java/lang/Long.valueOf (22 samples, 1.90%)</title><rect x="288.7" y="1315.0" width="22.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.7" y="1326.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="288.7" y="1299.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="291.7" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="288.7" y="1283.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="291.7" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="288.7" y="1267.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="291.7" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="288.7" y="1251.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="291.7" y="1262.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="288.7" y="1235.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="291.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/Long.&lt;init&gt; (21 samples, 1.82%)</title><rect x="289.7" y="1299.0" width="21.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.7" y="1310.0">j..</text>
</g>
<g>
<title>java/lang/Number.&lt;init&gt; (21 samples, 1.82%)</title><rect x="289.7" y="1283.0" width="21.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.7" y="1294.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (3 samples, 0.26%)</title><rect x="296.8" y="1267.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="299.9" y="1267.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.9" y="1278.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.09%)</title><rect x="299.9" y="1251.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="302.9" y="1262.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.87%)</title><rect x="300.9" y="1267.0" width="10.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="303.9" y="1278.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.87%)</title><rect x="300.9" y="1251.0" width="10.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="303.9" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (145 samples, 12.54%)</title><rect x="311.1" y="1363.0" width="148.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.1" y="1374.0">com/linecorp/decato..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="325.4" y="1347.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="328.4" y="1358.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.87%)</title><rect x="326.4" y="1347.0" width="10.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="329.4" y="1358.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.69%)</title><rect x="328.5" y="1331.0" width="8.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="331.5" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (119 samples, 10.29%)</title><rect x="336.6" y="1347.0" width="121.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="339.6" y="1358.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (119 samples, 10.29%)</title><rect x="336.6" y="1331.0" width="121.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.6" y="1342.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="336.6" y="1315.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="339.6" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="336.6" y="1299.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="339.6" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="336.6" y="1283.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="339.6" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="336.6" y="1267.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="339.6" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="336.6" y="1251.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="339.6" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="336.6" y="1235.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="339.6" y="1246.0"></text>
</g>
<g>
<title>Thread::is_VM_thread() const (1 samples, 0.09%)</title><rect x="336.6" y="1219.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="339.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (118 samples, 10.21%)</title><rect x="337.7" y="1315.0" width="120.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.7" y="1326.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (118 samples, 10.21%)</title><rect x="337.7" y="1299.0" width="120.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.7" y="1310.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (118 samples, 10.21%)</title><rect x="337.7" y="1283.0" width="120.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="340.7" y="1294.0">com/fasterxml/j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="337.7" y="1267.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="340.7" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (26 samples, 2.25%)</title><rect x="338.7" y="1267.0" width="26.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="341.7" y="1278.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.09%)</title><rect x="345.8" y="1251.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="348.8" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.09%)</title><rect x="345.8" y="1235.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.8" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="345.8" y="1219.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="345.8" y="1203.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="348.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="345.8" y="1187.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="345.8" y="1171.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="348.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.09%)</title><rect x="345.8" y="1155.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="348.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 1.56%)</title><rect x="346.9" y="1251.0" width="18.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.9" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (10 samples, 0.87%)</title><rect x="352.0" y="1235.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.17%)</title><rect x="352.0" y="1219.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.0" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.17%)</title><rect x="352.0" y="1203.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (8 samples, 0.69%)</title><rect x="354.0" y="1219.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="357.0" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (8 samples, 0.69%)</title><rect x="354.0" y="1203.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.17%)</title><rect x="360.1" y="1187.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.1" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="360.1" y="1171.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="363.1" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="360.1" y="1155.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="363.1" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="360.1" y="1139.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="363.1" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="360.1" y="1123.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="363.1" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="360.1" y="1107.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="363.1" y="1118.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="361.1" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="364.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (3 samples, 0.26%)</title><rect x="362.2" y="1235.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (83 samples, 7.18%)</title><rect x="365.2" y="1267.0" width="84.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.2" y="1278.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.52%)</title><rect x="365.2" y="1251.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.52%)</title><rect x="365.2" y="1235.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.61%)</title><rect x="371.3" y="1251.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.61%)</title><rect x="371.3" y="1235.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="374.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.61%)</title><rect x="371.3" y="1219.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.61%)</title><rect x="371.3" y="1203.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.43%)</title><rect x="378.5" y="1251.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.5" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.43%)</title><rect x="378.5" y="1235.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.5" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (5 samples, 0.43%)</title><rect x="378.5" y="1219.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.5" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (5 samples, 0.43%)</title><rect x="378.5" y="1203.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.5" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (5 samples, 0.43%)</title><rect x="378.5" y="1187.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.35%)</title><rect x="379.5" y="1171.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="382.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (65 samples, 5.62%)</title><rect x="383.6" y="1251.0" width="66.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="386.6" y="1262.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (24 samples, 2.08%)</title><rect x="384.6" y="1235.0" width="24.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="387.6" y="1246.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.69%)</title><rect x="384.6" y="1219.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="387.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.69%)</title><rect x="384.6" y="1203.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="387.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.69%)</title><rect x="384.6" y="1187.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.6" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.95%)</title><rect x="392.8" y="1219.0" width="11.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="395.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (5 samples, 0.43%)</title><rect x="404.0" y="1219.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.0" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (5 samples, 0.43%)</title><rect x="404.0" y="1203.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (40 samples, 3.46%)</title><rect x="409.1" y="1235.0" width="40.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.1" y="1246.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (40 samples, 3.46%)</title><rect x="409.1" y="1219.0" width="40.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="412.1" y="1230.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (40 samples, 3.46%)</title><rect x="409.1" y="1203.0" width="40.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="412.1" y="1214.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.56%)</title><rect x="419.3" y="1187.0" width="18.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.3" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.43%)</title><rect x="422.4" y="1171.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.69%)</title><rect x="427.5" y="1171.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="430.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.69%)</title><rect x="427.5" y="1155.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="430.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.69%)</title><rect x="427.5" y="1139.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="430.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.52%)</title><rect x="429.5" y="1123.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="435.7" y="1171.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="435.7" y="1155.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="438.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.17%)</title><rect x="435.7" y="1139.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.61%)</title><rect x="437.7" y="1187.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.61%)</title><rect x="437.7" y="1171.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="440.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.61%)</title><rect x="437.7" y="1155.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="440.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.61%)</title><rect x="437.7" y="1139.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="440.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.61%)</title><rect x="437.7" y="1123.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.7" y="1134.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.61%)</title><rect x="437.7" y="1107.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.7" y="1118.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor24.newInstance (3 samples, 0.26%)</title><rect x="441.8" y="1091.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="444.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.43%)</title><rect x="444.8" y="1187.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.8" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.43%)</title><rect x="444.8" y="1171.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="447.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.43%)</title><rect x="444.8" y="1155.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="447.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.69%)</title><rect x="449.9" y="1267.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.9" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.69%)</title><rect x="449.9" y="1251.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.9" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.69%)</title><rect x="449.9" y="1235.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.9" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.69%)</title><rect x="449.9" y="1219.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="452.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.69%)</title><rect x="449.9" y="1203.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.09%)</title><rect x="458.1" y="1347.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="461.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.09%)</title><rect x="458.1" y="1331.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="461.1" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="458.1" y="1315.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="461.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (282 samples, 24.39%)</title><rect x="459.1" y="1363.0" width="287.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="462.1" y="1374.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (49 samples, 4.24%)</title><rect x="461.2" y="1347.0" width="50.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="464.2" y="1358.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (49 samples, 4.24%)</title><rect x="461.2" y="1331.0" width="50.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.2" y="1342.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (46 samples, 3.98%)</title><rect x="464.2" y="1315.0" width="47.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="467.2" y="1326.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (23 samples, 1.99%)</title><rect x="464.2" y="1299.0" width="23.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="467.2" y="1310.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (23 samples, 1.99%)</title><rect x="464.2" y="1283.0" width="23.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="467.2" y="1294.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (14 samples, 1.21%)</title><rect x="473.4" y="1267.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="476.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (14 samples, 1.21%)</title><rect x="473.4" y="1251.0" width="14.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="476.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (14 samples, 1.21%)</title><rect x="473.4" y="1235.0" width="14.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="476.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.43%)</title><rect x="487.7" y="1299.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.43%)</title><rect x="487.7" y="1283.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.43%)</title><rect x="487.7" y="1267.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.7" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.17%)</title><rect x="490.8" y="1251.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="493.8" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (18 samples, 1.56%)</title><rect x="492.8" y="1299.0" width="18.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="495.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.09%)</title><rect x="501.0" y="1283.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="504.0" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 0.78%)</title><rect x="502.0" y="1283.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="505.0" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.78%)</title><rect x="502.0" y="1267.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="505.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.35%)</title><rect x="506.1" y="1251.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="509.1" y="1262.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="510.2" y="1251.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="513.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.61%)</title><rect x="511.2" y="1347.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="514.2" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="514.3" y="1331.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="517.3" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="514.3" y="1315.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="517.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="517.3" y="1331.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="520.3" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (148 samples, 12.80%)</title><rect x="518.3" y="1347.0" width="151.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="521.3" y="1358.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (148 samples, 12.80%)</title><rect x="518.3" y="1331.0" width="151.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="521.3" y="1342.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="522.4" y="1315.0" width="4.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="525.4" y="1326.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="523.4" y="1299.0" width="3.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="526.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (55 samples, 4.76%)</title><rect x="526.5" y="1315.0" width="56.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="529.5" y="1326.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (53 samples, 4.58%)</title><rect x="527.5" y="1299.0" width="54.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="530.5" y="1310.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 3.46%)</title><rect x="532.6" y="1283.0" width="40.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.6" y="1294.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (27 samples, 2.34%)</title><rect x="541.8" y="1267.0" width="27.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="544.8" y="1278.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (27 samples, 2.34%)</title><rect x="541.8" y="1251.0" width="27.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="544.8" y="1262.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (27 samples, 2.34%)</title><rect x="541.8" y="1235.0" width="27.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="544.8" y="1246.0">j..</text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="547.9" y="1219.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="550.9" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (16 samples, 1.38%)</title><rect x="549.0" y="1219.0" width="16.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="552.0" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (2 samples, 0.17%)</title><rect x="550.0" y="1203.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="553.0" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="550.0" y="1187.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="553.0" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="551.0" y="1187.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="554.0" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.52%)</title><rect x="552.0" y="1203.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="555.0" y="1214.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="552.0" y="1187.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="555.0" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="552.0" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="555.0" y="1182.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.43%)</title><rect x="553.0" y="1187.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="556.0" y="1198.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (5 samples, 0.43%)</title><rect x="553.0" y="1171.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="556.0" y="1182.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.17%)</title><rect x="553.0" y="1155.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="556.0" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.17%)</title><rect x="553.0" y="1139.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="556.0" y="1150.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.17%)</title><rect x="555.1" y="1155.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="558.1" y="1166.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="557.1" y="1155.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="560.1" y="1166.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="558.1" y="1203.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="561.1" y="1214.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.52%)</title><rect x="559.2" y="1203.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="562.2" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.35%)</title><rect x="560.2" y="1187.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="563.2" y="1198.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="562.2" y="1171.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="565.2" y="1182.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="562.2" y="1155.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="565.2" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="563.3" y="1171.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="566.3" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="564.3" y="1187.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="567.3" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="565.3" y="1219.0" width="3.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="568.3" y="1230.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.09%)</title><rect x="568.4" y="1219.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="571.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.26%)</title><rect x="569.4" y="1267.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="572.4" y="1278.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="572.4" y="1267.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="575.4" y="1278.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="573.5" y="1283.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="576.5" y="1294.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.61%)</title><rect x="574.5" y="1283.0" width="7.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="577.5" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="581.6" y="1299.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="584.6" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="581.6" y="1283.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="584.6" y="1294.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="581.6" y="1267.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="584.6" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="581.6" y="1251.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="584.6" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="581.6" y="1235.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="584.6" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="581.6" y="1219.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="584.6" y="1230.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="581.6" y="1203.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="584.6" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="581.6" y="1187.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="584.6" y="1198.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="581.6" y="1171.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="584.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="582.6" y="1315.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="583.7" y="1315.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.7" y="1326.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="583.7" y="1299.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="586.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="583.7" y="1283.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="586.7" y="1294.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="583.7" y="1267.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="586.7" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (10 samples, 0.87%)</title><rect x="584.7" y="1315.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="587.7" y="1326.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.26%)</title><rect x="584.7" y="1299.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="587.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.26%)</title><rect x="584.7" y="1283.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="587.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.61%)</title><rect x="587.8" y="1299.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.52%)</title><rect x="587.8" y="1283.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="590.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="593.9" y="1283.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="596.9" y="1294.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (73 samples, 6.31%)</title><rect x="594.9" y="1315.0" width="74.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="597.9" y="1326.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (71 samples, 6.14%)</title><rect x="596.9" y="1299.0" width="72.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="599.9" y="1310.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 1.90%)</title><rect x="596.9" y="1283.0" width="22.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="599.9" y="1294.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (22 samples, 1.90%)</title><rect x="596.9" y="1267.0" width="22.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="599.9" y="1278.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (13 samples, 1.12%)</title><rect x="606.1" y="1251.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (13 samples, 1.12%)</title><rect x="606.1" y="1235.0" width="13.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="609.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (13 samples, 1.12%)</title><rect x="606.1" y="1219.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.1" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (49 samples, 4.24%)</title><rect x="619.4" y="1283.0" width="50.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="622.4" y="1294.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (41 samples, 3.55%)</title><rect x="627.6" y="1267.0" width="41.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="630.6" y="1278.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.17%)</title><rect x="630.6" y="1251.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="633.6" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.26%)</title><rect x="632.7" y="1251.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.26%)</title><rect x="632.7" y="1235.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.7" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.85%)</title><rect x="635.7" y="1251.0" width="33.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="638.7" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="659.2" y="1235.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="662.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.43%)</title><rect x="660.2" y="1235.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="663.2" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="664.3" y="1219.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="667.3" y="1230.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.35%)</title><rect x="665.3" y="1235.0" width="4.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="668.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (54 samples, 4.67%)</title><rect x="669.4" y="1347.0" width="55.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.4" y="1358.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (54 samples, 4.67%)</title><rect x="669.4" y="1331.0" width="55.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="672.4" y="1342.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1412965736.process (21 samples, 1.82%)</title><rect x="673.5" y="1315.0" width="21.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="676.5" y="1326.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (19 samples, 1.64%)</title><rect x="673.5" y="1299.0" width="19.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="676.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.47%)</title><rect x="674.5" y="1283.0" width="17.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="677.5" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="674.5" y="1267.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="677.5" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="675.5" y="1267.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="678.5" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="675.5" y="1251.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="678.5" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="675.5" y="1235.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="678.5" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="675.5" y="1219.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="678.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="675.5" y="1203.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="678.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="675.5" y="1187.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="678.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.52%)</title><rect x="676.6" y="1267.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="679.6" y="1278.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.52%)</title><rect x="676.6" y="1251.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="679.6" y="1262.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.52%)</title><rect x="676.6" y="1235.0" width="6.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="679.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.78%)</title><rect x="682.7" y="1267.0" width="9.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="685.7" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="690.8" y="1251.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="693.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="690.8" y="1235.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="693.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="691.9" y="1283.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="694.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="691.9" y="1267.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="694.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="691.9" y="1251.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="694.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="691.9" y="1235.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.9" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="692.9" y="1299.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="695.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="694.9" y="1315.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="697.9" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="694.9" y="1299.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.9" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 0.35%)</title><rect x="698.0" y="1315.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="701.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 0.35%)</title><rect x="698.0" y="1299.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="701.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1922027100.get$Lambda (4 samples, 0.35%)</title><rect x="698.0" y="1283.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="701.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1922027100.&lt;init&gt; (4 samples, 0.35%)</title><rect x="698.0" y="1267.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="701.0" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.95%)</title><rect x="702.1" y="1315.0" width="11.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="705.1" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.87%)</title><rect x="703.1" y="1299.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="706.1" y="1310.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.52%)</title><rect x="703.1" y="1283.0" width="6.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="706.1" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.35%)</title><rect x="709.2" y="1283.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.2" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.17%)</title><rect x="713.3" y="1315.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="716.3" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.17%)</title><rect x="713.3" y="1299.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="716.3" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (9 samples, 0.78%)</title><rect x="715.3" y="1315.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="718.3" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="722.5" y="1299.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="725.5" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="722.5" y="1283.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="725.5" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="722.5" y="1267.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="725.5" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="722.5" y="1251.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="725.5" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="722.5" y="1235.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="725.5" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="723.5" y="1299.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="726.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.90%)</title><rect x="724.5" y="1347.0" width="22.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="727.5" y="1358.0">j..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.61%)</title><rect x="730.7" y="1331.0" width="7.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="733.7" y="1342.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.52%)</title><rect x="731.7" y="1315.0" width="6.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="734.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.78%)</title><rect x="737.8" y="1331.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="740.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.52%)</title><rect x="740.9" y="1315.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="743.9" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1783717717.accept (6 samples, 0.52%)</title><rect x="740.9" y="1299.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="743.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (6 samples, 0.52%)</title><rect x="740.9" y="1283.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="743.9" y="1294.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (6 samples, 0.52%)</title><rect x="740.9" y="1267.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="743.9" y="1278.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (6 samples, 0.52%)</title><rect x="740.9" y="1251.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="743.9" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="743.9" y="1235.0" width="2.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="746.9" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="744.9" y="1219.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="747.9" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="746.0" y="1235.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="749.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="747.0" y="1379.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="750.0" y="1390.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="747.0" y="1363.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="750.0" y="1374.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="747.0" y="1347.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.0" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="747.0" y="1331.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="750.0" y="1342.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="747.0" y="1315.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="750.0" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.12%)</title><rect x="748.0" y="1379.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="751.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.12%)</title><rect x="748.0" y="1363.0" width="13.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="751.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.95%)</title><rect x="749.0" y="1347.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="752.0" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$270/818099840.accept (11 samples, 0.95%)</title><rect x="749.0" y="1331.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="752.0" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (11 samples, 0.95%)</title><rect x="749.0" y="1315.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="752.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1330510765.complete (11 samples, 0.95%)</title><rect x="749.0" y="1299.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (11 samples, 0.95%)</title><rect x="749.0" y="1283.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="752.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (11 samples, 0.95%)</title><rect x="749.0" y="1267.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="752.0" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 0.95%)</title><rect x="749.0" y="1251.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="752.0" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 0.95%)</title><rect x="749.0" y="1235.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="752.0" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (11 samples, 0.95%)</title><rect x="749.0" y="1219.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="752.0" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (11 samples, 0.95%)</title><rect x="749.0" y="1203.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="759.2" y="1187.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="762.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="760.3" y="1347.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="763.3" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (198 samples, 17.13%)</title><rect x="761.3" y="1427.0" width="202.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="764.3" y="1438.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (198 samples, 17.13%)</title><rect x="761.3" y="1411.0" width="202.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="764.3" y="1422.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (178 samples, 15.40%)</title><rect x="781.7" y="1395.0" width="181.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="784.7" y="1406.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.43%)</title><rect x="786.8" y="1379.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="789.8" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5 samples, 0.43%)</title><rect x="786.8" y="1363.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (167 samples, 14.45%)</title><rect x="791.9" y="1379.0" width="170.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="794.9" y="1390.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (150 samples, 12.98%)</title><rect x="809.3" y="1363.0" width="153.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.3" y="1374.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="817.4" y="1347.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="820.4" y="1358.0"></text>
</g>
<g>
<title>Unsafe_Park (139 samples, 12.02%)</title><rect x="819.5" y="1347.0" width="141.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="822.5" y="1358.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="823.5" y="1331.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="826.5" y="1342.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="824.6" y="1331.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="827.6" y="1342.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.73%)</title><rect x="825.6" y="1331.0" width="20.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="828.6" y="1342.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 0.95%)</title><rect x="829.7" y="1315.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="832.7" y="1326.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="831.7" y="1299.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="834.7" y="1310.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.52%)</title><rect x="832.7" y="1299.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="835.7" y="1310.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="836.8" y="1283.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="839.8" y="1294.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="838.9" y="1299.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="841.9" y="1310.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.43%)</title><rect x="840.9" y="1315.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="843.9" y="1326.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="846.0" y="1331.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="849.0" y="1342.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="848.0" y="1331.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="851.0" y="1342.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.09%)</title><rect x="851.1" y="1331.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="854.1" y="1342.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.95%)</title><rect x="852.1" y="1331.0" width="11.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="855.1" y="1342.0"></text>
</g>
<g>
<title>__lll_unlock_wake (25 samples, 2.16%)</title><rect x="863.4" y="1331.0" width="25.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="866.4" y="1342.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 4.41%)</title><rect x="888.9" y="1331.0" width="52.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="891.9" y="1342.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.52%)</title><rect x="940.9" y="1331.0" width="6.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="943.9" y="1342.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.35%)</title><rect x="947.1" y="1331.0" width="4.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="950.1" y="1342.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="951.1" y="1331.0" width="3.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="954.1" y="1342.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.35%)</title><rect x="954.2" y="1331.0" width="4.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="957.2" y="1342.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="958.3" y="1331.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="961.3" y="1342.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="960.3" y="1331.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="963.3" y="1342.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="961.3" y="1347.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="964.3" y="1358.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="962.4" y="1379.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="965.4" y="1390.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.09%)</title><rect x="963.4" y="1475.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="966.4" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="964.4" y="1475.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="967.4" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="964.4" y="1459.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="967.4" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="964.4" y="1443.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="967.4" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="964.4" y="1427.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="967.4" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="964.4" y="1411.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="967.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="964.4" y="1395.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="967.4" y="1406.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="964.4" y="1379.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="967.4" y="1390.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="964.4" y="1363.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="967.4" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="964.4" y="1347.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="967.4" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.09%)</title><rect x="964.4" y="1331.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="967.4" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.09%)</title><rect x="964.4" y="1315.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="967.4" y="1326.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.09%)</title><rect x="964.4" y="1299.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="967.4" y="1310.0"></text>
</g>
<g>
<title>start_thread (220 samples, 19.03%)</title><rect x="965.4" y="1475.0" width="224.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="968.4" y="1486.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (220 samples, 19.03%)</title><rect x="965.4" y="1459.0" width="224.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="968.4" y="1470.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.82%)</title><rect x="965.4" y="1443.0" width="21.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="968.4" y="1454.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (10 samples, 0.87%)</title><rect x="965.4" y="1427.0" width="10.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="968.4" y="1438.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.78%)</title><rect x="965.4" y="1411.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.4" y="1422.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.35%)</title><rect x="965.4" y="1395.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="968.4" y="1406.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.43%)</title><rect x="969.5" y="1395.0" width="5.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="972.5" y="1406.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="974.6" y="1411.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="977.6" y="1422.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 0.87%)</title><rect x="975.6" y="1427.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.6" y="1438.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.09%)</title><rect x="975.6" y="1411.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.6" y="1422.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="975.6" y="1395.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="978.6" y="1406.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.61%)</title><rect x="976.7" y="1411.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.7" y="1422.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="976.7" y="1395.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.7" y="1406.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.26%)</title><rect x="976.7" y="1379.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="979.7" y="1390.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="977.7" y="1363.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.7" y="1374.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="978.7" y="1363.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.7" y="1374.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.35%)</title><rect x="979.7" y="1395.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.7" y="1406.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.26%)</title><rect x="979.7" y="1379.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="982.7" y="1390.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="982.8" y="1379.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.8" y="1390.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="982.8" y="1363.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.8" y="1374.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.17%)</title><rect x="983.8" y="1411.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="986.8" y="1422.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.17%)</title><rect x="983.8" y="1395.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="986.8" y="1406.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.17%)</title><rect x="983.8" y="1379.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.8" y="1390.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.17%)</title><rect x="983.8" y="1363.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="986.8" y="1374.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.17%)</title><rect x="983.8" y="1347.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="986.8" y="1358.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.17%)</title><rect x="983.8" y="1331.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="986.8" y="1342.0"></text>
</g>
<g>
<title>Monitor::notify_all() (1 samples, 0.09%)</title><rect x="985.8" y="1427.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.8" y="1438.0"></text>
</g>
<g>
<title>JavaThread::run() (197 samples, 17.04%)</title><rect x="986.9" y="1443.0" width="201.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.9" y="1454.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (197 samples, 17.04%)</title><rect x="986.9" y="1427.0" width="201.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.9" y="1438.0">JavaThread::thread_main_in..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (196 samples, 16.96%)</title><rect x="986.9" y="1411.0" width="200.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="989.9" y="1422.0">CompileBroker::compiler_th..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (195 samples, 16.87%)</title><rect x="986.9" y="1395.0" width="199.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.9" y="1406.0">CompileBroker::invoke_comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (194 samples, 16.78%)</title><rect x="986.9" y="1379.0" width="198.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.9" y="1390.0">C2Compiler::compile_method..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (194 samples, 16.78%)</title><rect x="986.9" y="1363.0" width="198.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.9" y="1374.0">Compile::Compile(ciEnv*, C..</text>
</g>
<g>
<title>Compile::Code_Gen() (112 samples, 9.69%)</title><rect x="986.9" y="1347.0" width="114.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="989.9" y="1358.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.26%)</title><rect x="986.9" y="1331.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="989.9" y="1342.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.17%)</title><rect x="986.9" y="1315.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="989.9" y="1326.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="988.9" y="1315.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="991.9" y="1326.0"></text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.09%)</title><rect x="988.9" y="1299.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="991.9" y="1310.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.43%)</title><rect x="989.9" y="1331.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.9" y="1342.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="992.0" y="1315.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.0" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="992.0" y="1299.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.0" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="992.0" y="1283.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.0" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.17%)</title><rect x="993.0" y="1315.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.0" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.17%)</title><rect x="993.0" y="1299.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="996.0" y="1310.0"></text>
</g>
<g>
<title>Matcher::Matcher() (1 samples, 0.09%)</title><rect x="995.0" y="1331.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="998.0" y="1342.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="995.0" y="1315.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="998.0" y="1326.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 0.87%)</title><rect x="996.1" y="1331.0" width="10.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="999.1" y="1342.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.09%)</title><rect x="996.1" y="1315.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.1" y="1326.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.78%)</title><rect x="997.1" y="1315.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1000.1" y="1326.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.35%)</title><rect x="999.1" y="1299.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.1" y="1310.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.17%)</title><rect x="1003.2" y="1299.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.2" y="1310.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1004.2" y="1283.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1007.2" y="1294.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1004.2" y="1267.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1007.2" y="1278.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.09%)</title><rect x="1004.2" y="1251.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1007.2" y="1262.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="1005.2" y="1299.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1008.2" y="1310.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1005.2" y="1283.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1008.2" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.52%)</title><rect x="1006.3" y="1331.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.3" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.52%)</title><rect x="1006.3" y="1315.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.3" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1006.3" y="1299.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.3" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.17%)</title><rect x="1007.3" y="1299.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1010.3" y="1310.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1007.3" y="1283.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1010.3" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="1008.3" y="1283.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1011.3" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1009.3" y="1299.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1012.3" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1010.3" y="1299.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1013.3" y="1310.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::ideal_Opcode() const (1 samples, 0.09%)</title><rect x="1011.4" y="1299.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.4" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.09%)</title><rect x="1012.4" y="1331.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1015.4" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (86 samples, 7.44%)</title><rect x="1013.4" y="1331.0" width="87.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1016.4" y="1342.0">PhaseChait..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1013.4" y="1315.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1016.4" y="1326.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="1014.4" y="1315.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1017.4" y="1326.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1015.4" y="1315.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1018.4" y="1326.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1016.5" y="1315.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1019.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.26%)</title><rect x="1017.5" y="1315.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1020.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.26%)</title><rect x="1017.5" y="1299.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1020.5" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1018.5" y="1283.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1021.5" y="1294.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1019.5" y="1283.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1022.5" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.26%)</title><rect x="1020.6" y="1315.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1023.6" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1020.6" y="1299.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1023.6" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.17%)</title><rect x="1021.6" y="1299.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.6" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (15 samples, 1.30%)</title><rect x="1023.6" y="1315.0" width="15.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1026.6" y="1326.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1034.8" y="1299.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1037.8" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.09%)</title><rect x="1035.9" y="1299.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1038.9" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.09%)</title><rect x="1035.9" y="1283.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.9" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1036.9" y="1299.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1039.9" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1036.9" y="1283.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.9" y="1294.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1036.9" y="1267.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.9" y="1278.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.09%)</title><rect x="1037.9" y="1299.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1040.9" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 1.04%)</title><rect x="1038.9" y="1315.0" width="12.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1041.9" y="1326.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1042.0" y="1299.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.0" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.61%)</title><rect x="1043.0" y="1299.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.0" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.43%)</title><rect x="1045.1" y="1283.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1048.1" y="1294.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="1050.2" y="1299.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.2" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1051.2" y="1315.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1054.2" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1051.2" y="1299.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1054.2" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.61%)</title><rect x="1052.2" y="1315.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1055.2" y="1326.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1056.3" y="1299.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.3" y="1310.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1057.3" y="1299.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1060.3" y="1310.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.09%)</title><rect x="1058.3" y="1299.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.3" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.09%)</title><rect x="1059.3" y="1315.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1062.3" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.3" y="1299.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1062.3" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.61%)</title><rect x="1060.4" y="1315.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1063.4" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.35%)</title><rect x="1063.4" y="1299.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.4" y="1310.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (19 samples, 1.64%)</title><rect x="1067.5" y="1315.0" width="19.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.5" y="1326.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1067.5" y="1299.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.5" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.09%)</title><rect x="1068.5" y="1299.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.5" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (17 samples, 1.47%)</title><rect x="1069.6" y="1299.0" width="17.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.6" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (16 samples, 1.38%)</title><rect x="1070.6" y="1283.0" width="16.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.6" y="1294.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.26%)</title><rect x="1070.6" y="1267.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.6" y="1278.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1071.6" y="1251.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1074.6" y="1262.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (12 samples, 1.04%)</title><rect x="1073.6" y="1267.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.6" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.09%)</title><rect x="1085.9" y="1267.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.9" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.17%)</title><rect x="1086.9" y="1315.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1089.9" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1087.9" y="1299.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.9" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.17%)</title><rect x="1088.9" y="1315.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1091.9" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.61%)</title><rect x="1091.0" y="1315.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.0" y="1326.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.09%)</title><rect x="1092.0" y="1299.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.0" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1093.0" y="1299.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.0" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.26%)</title><rect x="1094.0" y="1299.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.0" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1097.1" y="1299.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.1" y="1310.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="1098.1" y="1315.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.1" y="1326.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.17%)</title><rect x="1099.2" y="1315.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1102.2" y="1326.0"></text>
</g>
<g>
<title>Compile::Optimize() (69 samples, 5.97%)</title><rect x="1101.2" y="1347.0" width="70.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.2" y="1358.0">Compile:..</text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.09%)</title><rect x="1101.2" y="1331.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.2" y="1342.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1102.2" y="1331.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.2" y="1342.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1102.2" y="1315.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.2" y="1326.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1102.2" y="1299.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.2" y="1310.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1102.2" y="1283.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.35%)</title><rect x="1103.2" y="1331.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.35%)</title><rect x="1103.2" y="1315.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1104.3" y="1299.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.3" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1104.3" y="1283.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.3" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1104.3" y="1267.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.3" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1104.3" y="1251.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.3" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1235.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.3" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1219.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.3" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1203.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.3" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.3" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1171.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.3" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1155.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.3" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1139.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.3" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1123.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.3" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.3" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1091.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1075.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1059.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1043.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.3" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.3" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.3" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="979.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.3" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.3" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1104.3" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.3" y="958.0"></text>
</g>
<g>
<title>Compile::start() const (1 samples, 0.09%)</title><rect x="1104.3" y="931.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.3" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1105.3" y="1235.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.3" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1105.3" y="1219.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.3" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1105.3" y="1203.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.3" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1105.3" y="1187.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.3" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1105.3" y="1171.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.3" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1105.3" y="1155.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.3" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1105.3" y="1139.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.3" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1105.3" y="1123.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.3" y="1134.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1105.3" y="1107.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.3" y="1118.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1105.3" y="1091.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1203.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.3" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1187.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.3" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1171.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.3" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1155.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.3" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1139.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.3" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.3" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1107.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.3" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1091.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1075.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1059.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1027.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.3" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1106.3" y="1011.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.3" y="1022.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1106.3" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.3" y="1006.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1106.3" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.3" y="990.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1107.3" y="1331.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.3" y="1342.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.17%)</title><rect x="1108.3" y="1331.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.3" y="1342.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1108.3" y="1315.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.3" y="1326.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1109.4" y="1315.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.4" y="1326.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1109.4" y="1299.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.4" y="1310.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1109.4" y="1283.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.4" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (48 samples, 4.15%)</title><rect x="1110.4" y="1331.0" width="49.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.4" y="1342.0">Phas..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1110.4" y="1315.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.4" y="1326.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1110.4" y="1299.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1110.4" y="1283.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.4" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.09%)</title><rect x="1110.4" y="1267.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.4" y="1278.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1110.4" y="1251.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1113.4" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.61%)</title><rect x="1111.4" y="1315.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.4" y="1326.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1115.5" y="1299.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.5" y="1310.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.17%)</title><rect x="1116.5" y="1299.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.35%)</title><rect x="1118.5" y="1315.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1121.6" y="1299.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.6" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (34 samples, 2.94%)</title><rect x="1122.6" y="1315.0" width="34.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.6" y="1326.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (29 samples, 2.51%)</title><rect x="1127.7" y="1299.0" width="29.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.7" y="1310.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (25 samples, 2.16%)</title><rect x="1131.8" y="1283.0" width="25.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.8" y="1294.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.26%)</title><rect x="1148.1" y="1267.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.1" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.26%)</title><rect x="1148.1" y="1251.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1150.2" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.52%)</title><rect x="1151.2" y="1267.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1157.3" y="1315.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.3" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1158.4" y="1299.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.09%)</title><rect x="1158.4" y="1283.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.4" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.95%)</title><rect x="1159.4" y="1331.0" width="11.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.4" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 0.95%)</title><rect x="1159.4" y="1315.0" width="11.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.4" y="1326.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1159.4" y="1299.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.4" y="1310.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1159.4" y="1283.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.4" y="1294.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1159.4" y="1267.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.4" y="1278.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1159.4" y="1251.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1162.4" y="1262.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1160.4" y="1299.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="1310.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1160.4" y="1283.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.4" y="1294.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.09%)</title><rect x="1160.4" y="1267.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.4" y="1278.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.09%)</title><rect x="1160.4" y="1251.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.4" y="1262.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.09%)</title><rect x="1160.4" y="1235.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.4" y="1246.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1161.4" y="1299.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="1310.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1161.4" y="1283.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.4" y="1294.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.09%)</title><rect x="1161.4" y="1267.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.4" y="1278.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1161.4" y="1251.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.4" y="1262.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1161.4" y="1235.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.4" y="1246.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1161.4" y="1219.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.4" y="1230.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1161.4" y="1203.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.4" y="1214.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1161.4" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.4" y="1198.0"></text>
</g>
<g>
<title>LoadPNode::Opcode() const (1 samples, 0.09%)</title><rect x="1162.4" y="1299.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.4" y="1310.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1163.5" y="1299.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1164.5" y="1299.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1165.5" y="1299.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.5" y="1310.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1166.5" y="1299.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.5" y="1310.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1167.5" y="1299.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1167.5" y="1283.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.5" y="1294.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1168.6" y="1283.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.6" y="1294.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1169.6" y="1299.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="1310.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1169.6" y="1283.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.6" y="1294.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1169.6" y="1267.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.6" y="1278.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1169.6" y="1251.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.6" y="1262.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1170.6" y="1331.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.6" y="1342.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1170.6" y="1315.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.6" y="1326.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.6" y="1299.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.6" y="1310.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.09%)</title><rect x="1170.6" y="1283.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.6" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 1.04%)</title><rect x="1171.6" y="1347.0" width="12.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.6" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 1.04%)</title><rect x="1171.6" y="1331.0" width="12.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.6" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 1.04%)</title><rect x="1171.6" y="1315.0" width="12.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 1.04%)</title><rect x="1171.6" y="1299.0" width="12.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.6" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 1.04%)</title><rect x="1171.6" y="1283.0" width="12.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.95%)</title><rect x="1171.6" y="1267.0" width="11.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.6" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.78%)</title><rect x="1171.6" y="1251.0" width="9.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.6" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.78%)</title><rect x="1171.6" y="1235.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.78%)</title><rect x="1171.6" y="1219.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.78%)</title><rect x="1171.6" y="1203.0" width="9.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.78%)</title><rect x="1171.6" y="1187.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.78%)</title><rect x="1171.6" y="1171.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.6" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1171.6" y="1155.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.6" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.43%)</title><rect x="1171.6" y="1139.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.43%)</title><rect x="1171.6" y="1123.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.43%)</title><rect x="1171.6" y="1107.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.43%)</title><rect x="1171.6" y="1091.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1171.6" y="1075.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1171.6" y="1059.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1171.6" y="1043.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1171.6" y="1027.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1171.6" y="1011.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1171.6" y="995.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1171.6" y="979.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.6" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1171.6" y="963.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.6" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1171.6" y="947.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1171.6" y="931.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1171.6" y="915.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1171.6" y="899.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1171.6" y="883.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1171.6" y="867.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1171.6" y="851.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1171.6" y="835.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1171.6" y="819.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1171.6" y="803.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1171.6" y="787.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.6" y="798.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1171.6" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.6" y="782.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1171.6" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.6" y="766.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1171.6" y="739.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.6" y="750.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1171.6" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.6" y="734.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.09%)</title><rect x="1171.6" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.6" y="718.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.09%)</title><rect x="1171.6" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1172.6" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1172.6" y="755.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1172.6" y="739.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1172.6" y="723.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1172.6" y="707.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1172.6" y="691.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1172.6" y="675.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="686.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1172.6" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="670.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1172.6" y="643.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="654.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1172.6" y="627.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1172.6" y="611.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.7" y="878.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="851.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.7" y="862.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1173.7" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.7" y="846.0"></text>
</g>
<g>
<title>LoadNode::LoadNode(Node*, Node*, Node*, TypePtr const*, Type const*, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1173.7" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="830.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.7" y="803.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.7" y="974.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1174.7" y="947.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.7" y="958.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1174.7" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="942.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="915.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.7" y="926.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1174.7" y="899.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.7" y="910.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1174.7" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.7" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1174.7" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.7" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1174.7" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.7" y="862.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.7" y="1059.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.7" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.7" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1175.7" y="1027.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1175.7" y="1011.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1175.7" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1175.7" y="979.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1175.7" y="963.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.7" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.7" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.7" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1175.7" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1175.7" y="915.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1175.7" y="899.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1175.7" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1175.7" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.7" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.7" y="851.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.7" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1175.7" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.7" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1175.7" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1175.7" y="803.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.7" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.09%)</title><rect x="1175.7" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="798.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.09%)</title><rect x="1175.7" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.7" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1176.7" y="1155.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1176.7" y="1139.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1176.7" y="1123.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1176.7" y="1107.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1176.7" y="1091.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1176.7" y="1075.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1176.7" y="1059.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1176.7" y="1043.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1176.7" y="1027.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1176.7" y="1011.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1176.7" y="995.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1176.7" y="979.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1176.7" y="963.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1176.7" y="947.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1176.7" y="931.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1176.7" y="915.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1176.7" y="899.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1176.7" y="883.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1176.7" y="867.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1176.7" y="851.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1176.7" y="835.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1176.7" y="819.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1176.7" y="803.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1176.7" y="787.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1176.7" y="771.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1176.7" y="755.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1176.7" y="739.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1176.7" y="723.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1176.7" y="707.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1176.7" y="691.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1176.7" y="675.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1176.7" y="659.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1176.7" y="643.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1176.7" y="627.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1176.7" y="611.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1176.7" y="595.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1176.7" y="579.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.7" y="563.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.7" y="547.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.7" y="531.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.7" y="515.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.7" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.7" y="483.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.7" y="467.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.7" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.7" y="435.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.7" y="419.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.7" y="403.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.7" y="387.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.7" y="371.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.7" y="355.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.7" y="339.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.7" y="323.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.7" y="307.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1176.7" y="291.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1176.7" y="275.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1176.7" y="259.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="270.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1176.7" y="243.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.7" y="254.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1176.7" y="227.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="238.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1176.7" y="211.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="222.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1176.7" y="195.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="206.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1176.7" y="179.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.8" y="563.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.8" y="547.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.8" y="531.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.8" y="515.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.8" y="499.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.8" y="483.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.8" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.8" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.8" y="435.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.8" y="419.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.8" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.8" y="387.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.8" y="371.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.8" y="355.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.8" y="339.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.8" y="323.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.8" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.8" y="291.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1177.8" y="275.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1177.8" y="259.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="270.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1177.8" y="243.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="254.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1177.8" y="227.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="238.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.09%)</title><rect x="1177.8" y="211.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="222.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="1177.8" y="195.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="206.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1177.8" y="179.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1180.8" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.8" y="547.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.8" y="531.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.8" y="515.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.8" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.8" y="483.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.8" y="467.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.8" y="451.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.8" y="435.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.8" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.8" y="403.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.8" y="387.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.8" y="371.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.8" y="355.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.8" y="339.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.8" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.8" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.8" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.8" y="275.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="254.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1178.8" y="227.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="238.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1178.8" y="211.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="222.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="195.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.8" y="206.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1178.8" y="179.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1178.8" y="163.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="174.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="147.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="158.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="142.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.09%)</title><rect x="1178.8" y="115.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="126.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1178.8" y="99.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.8" y="110.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1178.8" y="83.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1178.8" y="67.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1178.8" y="51.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="35.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="947.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.8" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.8" y="915.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.8" y="899.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.8" y="883.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.8" y="867.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.8" y="851.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.8" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.8" y="819.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.8" y="803.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.8" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.8" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.8" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.8" y="723.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.8" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.8" y="691.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.8" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.8" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="643.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.8" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.8" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.8" y="595.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.8" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.8" y="563.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="547.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.8" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.8" y="515.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.8" y="499.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.8" y="483.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1179.8" y="467.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.8" y="478.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.09%)</title><rect x="1179.8" y="451.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.8" y="1251.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="1235.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="1219.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="1203.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="1187.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="1171.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="1155.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.8" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="1139.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="1123.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="1107.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="1091.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="1075.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="1059.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.8" y="1070.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="1043.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="1054.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1180.8" y="1027.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.8" y="1038.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1180.8" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.09%)</title><rect x="1180.8" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1180.8" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="990.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="974.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.8" y="1235.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="1246.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.8" y="1219.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="1230.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1181.8" y="1203.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="1214.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1181.8" y="1187.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1182.9" y="1267.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="1278.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1182.9" y="1251.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="1262.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1182.9" y="1235.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="1246.0"></text>
</g>
<g>
<title>CmpNode::CmpNode(Node*, Node*) (1 samples, 0.09%)</title><rect x="1182.9" y="1219.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="1230.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1182.9" y="1203.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="1214.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1183.9" y="1347.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="1358.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1183.9" y="1331.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.9" y="1342.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1184.9" y="1379.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.9" y="1390.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1184.9" y="1363.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.9" y="1374.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1184.9" y="1347.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="1358.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1184.9" y="1331.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.9" y="1342.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.09%)</title><rect x="1184.9" y="1315.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.9" y="1326.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.09%)</title><rect x="1184.9" y="1299.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.9" y="1310.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.09%)</title><rect x="1184.9" y="1283.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="1294.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1185.9" y="1395.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="1406.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1185.9" y="1379.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="1390.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1185.9" y="1363.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="1374.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1185.9" y="1347.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="1358.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1185.9" y="1331.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="1342.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.09%)</title><rect x="1185.9" y="1315.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="1326.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="1186.9" y="1411.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.9" y="1422.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.09%)</title><rect x="1186.9" y="1395.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.9" y="1406.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.09%)</title><rect x="1186.9" y="1379.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.9" y="1390.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.09%)</title><rect x="1186.9" y="1363.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1189.9" y="1374.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.09%)</title><rect x="1186.9" y="1347.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="1358.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="1443.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.0" y="1454.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="1427.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.0" y="1438.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1188.0" y="1411.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.0" y="1422.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="1411.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1422.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="1395.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="1406.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="1379.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.0" y="1390.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="1363.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="1374.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_epilogue(bool) (1 samples, 0.09%)</title><rect x="1189.0" y="1347.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="1358.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize_all_tlabs() (1 samples, 0.09%)</title><rect x="1189.0" y="1331.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="1342.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize() (1 samples, 0.09%)</title><rect x="1189.0" y="1315.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1326.0"></text>
</g>
</g>
</svg>
