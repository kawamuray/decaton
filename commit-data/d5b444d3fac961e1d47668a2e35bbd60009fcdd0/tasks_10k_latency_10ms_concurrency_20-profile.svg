<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1141"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1141"> </text>
<g id="frames">
<g>
<title>all (52 samples, 100.00%)</title><rect x="10.0" y="1107.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1118.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (4 samples, 7.69%)</title><rect x="10.0" y="1091.0" width="90.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (4 samples, 7.69%)</title><rect x="10.0" y="1075.0" width="90.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1086.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 1.92%)</title><rect x="10.0" y="1059.0" width="22.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1070.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 1.92%)</title><rect x="10.0" y="1043.0" width="22.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">c..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 1.92%)</title><rect x="10.0" y="1027.0" width="22.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1038.0">j..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 1.92%)</title><rect x="10.0" y="1011.0" width="22.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1022.0">j..</text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 1.92%)</title><rect x="10.0" y="995.0" width="22.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0">j..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 1.92%)</title><rect x="10.0" y="979.0" width="22.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="990.0">j..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 1.92%)</title><rect x="10.0" y="963.0" width="22.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 1.92%)</title><rect x="10.0" y="947.0" width="22.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="958.0">j..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 1.92%)</title><rect x="10.0" y="931.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="942.0">j..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 1.92%)</title><rect x="10.0" y="915.0" width="22.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="926.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/521641558.test (1 samples, 1.92%)</title><rect x="10.0" y="899.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="910.0">c..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 5.77%)</title><rect x="32.7" y="1059.0" width="68.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.7" y="1070.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 5.77%)</title><rect x="32.7" y="1043.0" width="68.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.7" y="1054.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 3.85%)</title><rect x="32.7" y="1027.0" width="45.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.7" y="1038.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.92%)</title><rect x="32.7" y="1011.0" width="22.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="35.7" y="1022.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.92%)</title><rect x="32.7" y="995.0" width="22.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.7" y="1006.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 1.92%)</title><rect x="32.7" y="979.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.7" y="990.0">o..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 1.92%)</title><rect x="32.7" y="963.0" width="22.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.7" y="974.0">j..</text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 1.92%)</title><rect x="32.7" y="947.0" width="22.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.7" y="958.0">j..</text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 1.92%)</title><rect x="32.7" y="931.0" width="22.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="35.7" y="942.0">J..</text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 1.92%)</title><rect x="32.7" y="915.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="35.7" y="926.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 1.92%)</title><rect x="55.4" y="1011.0" width="22.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="58.4" y="1022.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 1.92%)</title><rect x="55.4" y="995.0" width="22.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.4" y="1006.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 1.92%)</title><rect x="55.4" y="979.0" width="22.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.4" y="990.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 1.92%)</title><rect x="55.4" y="963.0" width="22.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.4" y="974.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 1.92%)</title><rect x="55.4" y="947.0" width="22.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.4" y="958.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 1.92%)</title><rect x="55.4" y="931.0" width="22.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.4" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 1.92%)</title><rect x="55.4" y="915.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.4" y="926.0">o..</text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 1.92%)</title><rect x="55.4" y="899.0" width="22.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.4" y="910.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 1.92%)</title><rect x="78.1" y="1027.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="81.1" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 1.92%)</title><rect x="78.1" y="1011.0" width="22.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.1" y="1022.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 1.92%)</title><rect x="78.1" y="995.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.1" y="1006.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 1.92%)</title><rect x="78.1" y="979.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.1" y="990.0">o..</text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 1.92%)</title><rect x="100.8" y="1091.0" width="22.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.8" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 1.92%)</title><rect x="100.8" y="1075.0" width="22.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.8" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 1.92%)</title><rect x="100.8" y="1059.0" width="22.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.8" y="1070.0">j..</text>
</g>
<g>
<title>start_thread (47 samples, 90.38%)</title><rect x="123.5" y="1091.0" width="1066.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="126.5" y="1102.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (47 samples, 90.38%)</title><rect x="123.5" y="1075.0" width="1066.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="126.5" y="1086.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (47 samples, 90.38%)</title><rect x="123.5" y="1059.0" width="1066.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="126.5" y="1070.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (47 samples, 90.38%)</title><rect x="123.5" y="1043.0" width="1066.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="126.5" y="1054.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (47 samples, 90.38%)</title><rect x="123.5" y="1027.0" width="1066.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="126.5" y="1038.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (45 samples, 86.54%)</title><rect x="123.5" y="1011.0" width="1021.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="126.5" y="1022.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (45 samples, 86.54%)</title><rect x="123.5" y="995.0" width="1021.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="126.5" y="1006.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 32.69%)</title><rect x="123.5" y="979.0" width="385.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="126.5" y="990.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 1.92%)</title><rect x="123.5" y="963.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="126.5" y="974.0">C..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 1.92%)</title><rect x="123.5" y="947.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="126.5" y="958.0">C..</text>
</g>
<g>
<title>Matcher::is_save_on_entry(int) (1 samples, 1.92%)</title><rect x="123.5" y="931.0" width="22.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="126.5" y="942.0">M..</text>
</g>
<g>
<title>Matcher::match() (2 samples, 3.85%)</title><rect x="146.2" y="963.0" width="45.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="149.2" y="974.0">Matc..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 3.85%)</title><rect x="146.2" y="947.0" width="45.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="149.2" y="958.0">Matc..</text>
</g>
<g>
<title>Arena::set_size_in_bytes(unsigned long) (1 samples, 1.92%)</title><rect x="146.2" y="931.0" width="22.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="149.2" y="942.0">A..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 1.92%)</title><rect x="168.8" y="931.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="171.8" y="942.0">M..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.92%)</title><rect x="168.8" y="915.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="171.8" y="926.0">M..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.92%)</title><rect x="168.8" y="899.0" width="22.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="171.8" y="910.0">M..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.92%)</title><rect x="168.8" y="883.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="171.8" y="894.0">M..</text>
</g>
<g>
<title>LoadPNode::Opcode() const (1 samples, 1.92%)</title><rect x="168.8" y="867.0" width="22.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="171.8" y="878.0">L..</text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 1.92%)</title><rect x="191.5" y="963.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="194.5" y="974.0">P..</text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 1.92%)</title><rect x="191.5" y="947.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="194.5" y="958.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 25.00%)</title><rect x="214.2" y="963.0" width="295.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="217.2" y="974.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 1.92%)</title><rect x="214.2" y="947.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="217.2" y="958.0">P..</text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 1.92%)</title><rect x="214.2" y="931.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="217.2" y="942.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 1.92%)</title><rect x="236.9" y="947.0" width="22.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="239.9" y="958.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.92%)</title><rect x="236.9" y="931.0" width="22.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="239.9" y="942.0">I..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 1.92%)</title><rect x="259.6" y="947.0" width="22.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="262.6" y="958.0">P..</text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 1.92%)</title><rect x="259.6" y="931.0" width="22.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="262.6" y="942.0">l..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 7.69%)</title><rect x="282.3" y="947.0" width="90.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="285.3" y="958.0">PhaseChait..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 5.77%)</title><rect x="305.0" y="931.0" width="68.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="308.0" y="942.0">PhaseCh..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.92%)</title><rect x="350.4" y="915.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="353.4" y="926.0">I..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 1.92%)</title><rect x="373.1" y="947.0" width="22.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="376.1" y="958.0">P..</text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 1.92%)</title><rect x="395.8" y="947.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="398.8" y="958.0">P..</text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 1.92%)</title><rect x="418.5" y="947.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="421.5" y="958.0">P..</text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 1.92%)</title><rect x="441.2" y="947.0" width="22.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="444.2" y="958.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 1.92%)</title><rect x="441.2" y="931.0" width="22.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="444.2" y="942.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 1.92%)</title><rect x="441.2" y="915.0" width="22.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="444.2" y="926.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 1.92%)</title><rect x="441.2" y="899.0" width="22.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="444.2" y="910.0">I..</text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 3.85%)</title><rect x="463.8" y="947.0" width="45.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="466.8" y="958.0">Phas..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 1.92%)</title><rect x="486.5" y="931.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="489.5" y="942.0">I..</text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 48.08%)</title><rect x="509.2" y="979.0" width="567.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="512.2" y="990.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 1.92%)</title><rect x="509.2" y="963.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="512.2" y="974.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 1.92%)</title><rect x="509.2" y="947.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="512.2" y="958.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="931.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="512.2" y="942.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="915.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="512.2" y="926.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="899.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="512.2" y="910.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="883.0" width="22.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="512.2" y="894.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="867.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="512.2" y="878.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="851.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="512.2" y="862.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="835.0" width="22.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="512.2" y="846.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="819.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="512.2" y="830.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="803.0" width="22.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="512.2" y="814.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="787.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="512.2" y="798.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="771.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="512.2" y="782.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="755.0" width="22.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="512.2" y="766.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="739.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="512.2" y="750.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="723.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="512.2" y="734.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="707.0" width="22.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="512.2" y="718.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="691.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="512.2" y="702.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="675.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="512.2" y="686.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="659.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="512.2" y="670.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="643.0" width="22.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="512.2" y="654.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="627.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="512.2" y="638.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="611.0" width="22.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="512.2" y="622.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="595.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="512.2" y="606.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="579.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="512.2" y="590.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="563.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="512.2" y="574.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="547.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="512.2" y="558.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="531.0" width="22.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="512.2" y="542.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="515.0" width="22.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="512.2" y="526.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="499.0" width="22.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="512.2" y="510.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="483.0" width="22.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="512.2" y="494.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="467.0" width="22.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="512.2" y="478.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="451.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="512.2" y="462.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="435.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="512.2" y="446.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="419.0" width="22.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="512.2" y="430.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="403.0" width="22.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="512.2" y="414.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="387.0" width="22.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="512.2" y="398.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="371.0" width="22.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="512.2" y="382.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="355.0" width="22.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="512.2" y="366.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="339.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="512.2" y="350.0">C..</text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 1.92%)</title><rect x="509.2" y="323.0" width="22.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="512.2" y="334.0">C..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (19 samples, 36.54%)</title><rect x="531.9" y="963.0" width="431.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="534.9" y="974.0">PhaseIdealLoop::build_and_optimize(bool, bool)</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 1.92%)</title><rect x="531.9" y="947.0" width="22.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="534.9" y="958.0">N..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 1.92%)</title><rect x="554.6" y="947.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="557.6" y="958.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 25.00%)</title><rect x="577.3" y="947.0" width="295.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="580.3" y="958.0">PhaseIdealLoop::build_loop_late(VectorSe..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 25.00%)</title><rect x="577.3" y="931.0" width="295.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="580.3" y="942.0">PhaseIdealLoop::build_loop_late_post(Nod..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 25.00%)</title><rect x="577.3" y="915.0" width="295.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="580.3" y="926.0">PhaseIdealLoop::get_late_ctrl(Node*, Nod..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (13 samples, 25.00%)</title><rect x="577.3" y="899.0" width="295.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="580.3" y="910.0">PhaseIdealLoop::is_dominator(Node*, Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 1.92%)</title><rect x="872.3" y="947.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="875.3" y="958.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 1.92%)</title><rect x="872.3" y="931.0" width="22.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.3" y="942.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 3.85%)</title><rect x="895.0" y="947.0" width="45.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.0" y="958.0">Phas..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 3.85%)</title><rect x="895.0" y="931.0" width="45.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="898.0" y="942.0">Phas..</text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 1.92%)</title><rect x="895.0" y="915.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="898.0" y="926.0">N..</text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 1.92%)</title><rect x="917.7" y="915.0" width="22.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="920.7" y="926.0">R..</text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 1.92%)</title><rect x="917.7" y="899.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="920.7" y="910.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 1.92%)</title><rect x="917.7" y="883.0" width="22.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="920.7" y="894.0">P..</text>
</g>
<g>
<title>SafePointNode::pinned() const (1 samples, 1.92%)</title><rect x="940.4" y="947.0" width="22.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="943.4" y="958.0">S..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 7.69%)</title><rect x="963.1" y="963.0" width="90.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.1" y="974.0">PhaseIterG..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 7.69%)</title><rect x="963.1" y="947.0" width="90.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="966.1" y="958.0">PhaseIterG..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 1.92%)</title><rect x="963.1" y="931.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="966.1" y="942.0">I..</text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 1.92%)</title><rect x="963.1" y="915.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="966.1" y="926.0">M..</text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 1.92%)</title><rect x="985.8" y="931.0" width="22.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="988.8" y="942.0">M..</text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 1.92%)</title><rect x="1008.5" y="931.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1011.5" y="942.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 1.92%)</title><rect x="1008.5" y="915.0" width="22.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.5" y="926.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 1.92%)</title><rect x="1031.2" y="931.0" width="22.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.2" y="942.0">P..</text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 1.92%)</title><rect x="1053.8" y="963.0" width="22.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1056.8" y="974.0">P..</text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 1.92%)</title><rect x="1053.8" y="947.0" width="22.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1056.8" y="958.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 3.85%)</title><rect x="1076.5" y="979.0" width="45.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.5" y="990.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 3.85%)</title><rect x="1076.5" y="963.0" width="45.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.5" y="974.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 3.85%)</title><rect x="1076.5" y="947.0" width="45.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.5" y="958.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 3.85%)</title><rect x="1076.5" y="931.0" width="45.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.5" y="942.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 3.85%)</title><rect x="1076.5" y="915.0" width="45.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.5" y="926.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 3.85%)</title><rect x="1076.5" y="899.0" width="45.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.5" y="910.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 3.85%)</title><rect x="1076.5" y="883.0" width="45.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.5" y="894.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 3.85%)</title><rect x="1076.5" y="867.0" width="45.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.5" y="878.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 3.85%)</title><rect x="1076.5" y="851.0" width="45.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.5" y="862.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 3.85%)</title><rect x="1076.5" y="835.0" width="45.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.5" y="846.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 3.85%)</title><rect x="1076.5" y="819.0" width="45.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.5" y="830.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 3.85%)</title><rect x="1076.5" y="803.0" width="45.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.5" y="814.0">Pars..</text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 1.92%)</title><rect x="1076.5" y="787.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.5" y="798.0">G..</text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 1.92%)</title><rect x="1076.5" y="771.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.5" y="782.0">T..</text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 1.92%)</title><rect x="1076.5" y="755.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.5" y="766.0">T..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1099.2" y="787.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.2" y="798.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1099.2" y="771.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.2" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1099.2" y="755.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.2" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1099.2" y="739.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.2" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1099.2" y="723.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.2" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1099.2" y="707.0" width="22.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.2" y="718.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1099.2" y="691.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.2" y="702.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1099.2" y="675.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.2" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1099.2" y="659.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.2" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1099.2" y="643.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.2" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1099.2" y="627.0" width="22.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.2" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1099.2" y="611.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.2" y="622.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1099.2" y="595.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.2" y="606.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1099.2" y="579.0" width="22.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.2" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1099.2" y="563.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.2" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1099.2" y="547.0" width="22.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.2" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1099.2" y="531.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.2" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1099.2" y="515.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.2" y="526.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1099.2" y="499.0" width="22.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.2" y="510.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1099.2" y="483.0" width="22.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.2" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1099.2" y="467.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.2" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1099.2" y="451.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1102.2" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1099.2" y="435.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.2" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1099.2" y="419.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.2" y="430.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1099.2" y="403.0" width="22.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.2" y="414.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1099.2" y="387.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.2" y="398.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1099.2" y="371.0" width="22.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.2" y="382.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1099.2" y="355.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.2" y="366.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1099.2" y="339.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.2" y="350.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1099.2" y="323.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.2" y="334.0">P..</text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1099.2" y="307.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.2" y="318.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1099.2" y="291.0" width="22.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.2" y="302.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1099.2" y="275.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.2" y="286.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1099.2" y="259.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.2" y="270.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1099.2" y="243.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.2" y="254.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1099.2" y="227.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.2" y="238.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1099.2" y="211.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.2" y="222.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1099.2" y="195.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.2" y="206.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1099.2" y="179.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.2" y="190.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1099.2" y="163.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.2" y="174.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1099.2" y="147.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.2" y="158.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1099.2" y="131.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.2" y="142.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1099.2" y="115.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.2" y="126.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1099.2" y="99.0" width="22.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.2" y="110.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1099.2" y="83.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.2" y="94.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1099.2" y="67.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.2" y="78.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1099.2" y="51.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.2" y="62.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1099.2" y="35.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.2" y="46.0">P..</text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 1.92%)</title><rect x="1121.9" y="979.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.9" y="990.0">c..</text>
</g>
<g>
<title>CodeBuffer::free_blob() (1 samples, 1.92%)</title><rect x="1121.9" y="963.0" width="22.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.9" y="974.0">C..</text>
</g>
<g>
<title>BufferBlob::free(BufferBlob*) (1 samples, 1.92%)</title><rect x="1121.9" y="947.0" width="22.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.9" y="958.0">B..</text>
</g>
<g>
<title>CodeHeap::deallocate(void*) (1 samples, 1.92%)</title><rect x="1121.9" y="931.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.9" y="942.0">C..</text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 3.85%)</title><rect x="1144.6" y="1011.0" width="45.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.6" y="1022.0">Comp..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 3.85%)</title><rect x="1144.6" y="995.0" width="45.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.6" y="1006.0">Comp..</text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 3.85%)</title><rect x="1144.6" y="979.0" width="45.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.6" y="990.0">Comp..</text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 3.85%)</title><rect x="1144.6" y="963.0" width="45.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.6" y="974.0">Comp..</text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 1.92%)</title><rect x="1144.6" y="947.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.6" y="958.0">C..</text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 1.92%)</title><rect x="1144.6" y="931.0" width="22.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.6" y="942.0">I..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 1.92%)</title><rect x="1144.6" y="915.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.6" y="926.0">I..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 1.92%)</title><rect x="1144.6" y="899.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.6" y="910.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 1.92%)</title><rect x="1144.6" y="883.0" width="22.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.6" y="894.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 1.92%)</title><rect x="1144.6" y="867.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.6" y="878.0">G..</text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 1.92%)</title><rect x="1144.6" y="851.0" width="22.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.6" y="862.0">G..</text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 1.92%)</title><rect x="1144.6" y="835.0" width="22.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.6" y="846.0">G..</text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 1.92%)</title><rect x="1144.6" y="819.0" width="22.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.6" y="830.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 1.92%)</title><rect x="1144.6" y="803.0" width="22.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.6" y="814.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 1.92%)</title><rect x="1144.6" y="787.0" width="22.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.6" y="798.0">G..</text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 1.92%)</title><rect x="1144.6" y="771.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.6" y="782.0">G..</text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 1.92%)</title><rect x="1144.6" y="755.0" width="22.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.6" y="766.0">c..</text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 1.92%)</title><rect x="1144.6" y="739.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.6" y="750.0">c..</text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 1.92%)</title><rect x="1167.3" y="947.0" width="22.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.3" y="958.0">C..</text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 1.92%)</title><rect x="1167.3" y="931.0" width="22.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.3" y="942.0">B..</text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 1.92%)</title><rect x="1167.3" y="915.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.3" y="926.0">L..</text>
</g>
<g>
<title>LIRGenerator::do_Base(Base*) (1 samples, 1.92%)</title><rect x="1167.3" y="899.0" width="22.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.3" y="910.0">L..</text>
</g>
<g>
<title>LIRGenerator::profile_parameters(Base*) (1 samples, 1.92%)</title><rect x="1167.3" y="883.0" width="22.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.3" y="894.0">L..</text>
</g>
</g>
</svg>
