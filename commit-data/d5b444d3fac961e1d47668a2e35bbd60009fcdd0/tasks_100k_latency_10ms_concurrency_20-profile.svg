<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="821"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="821"> </text>
<g id="frames">
<g>
<title>all (198 samples, 100.00%)</title><rect x="10.0" y="787.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="798.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.51%)</title><rect x="10.0" y="771.0" width="6.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.51%)</title><rect x="10.0" y="755.0" width="6.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (17 samples, 8.59%)</title><rect x="16.0" y="771.0" width="101.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.0" y="782.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 1.01%)</title><rect x="16.0" y="755.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 1.01%)</title><rect x="16.0" y="739.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 1.01%)</title><rect x="16.0" y="723.0" width="11.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 1.01%)</title><rect x="16.0" y="707.0" width="11.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.51%)</title><rect x="16.0" y="691.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.51%)</title><rect x="16.0" y="675.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.size (1 samples, 0.51%)</title><rect x="16.0" y="659.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.51%)</title><rect x="21.9" y="691.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.51%)</title><rect x="21.9" y="675.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.51%)</title><rect x="21.9" y="659.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.51%)</title><rect x="21.9" y="643.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.51%)</title><rect x="21.9" y="627.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.51%)</title><rect x="21.9" y="611.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.51%)</title><rect x="21.9" y="595.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.51%)</title><rect x="21.9" y="579.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.51%)</title><rect x="21.9" y="563.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.51%)</title><rect x="21.9" y="547.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.51%)</title><rect x="21.9" y="531.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (15 samples, 7.58%)</title><rect x="27.9" y="755.0" width="89.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.9" y="766.0">com/lineco..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 3.03%)</title><rect x="27.9" y="739.0" width="35.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.9" y="750.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/124136274.accept (4 samples, 2.02%)</title><rect x="27.9" y="723.0" width="23.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.9" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$41 (4 samples, 2.02%)</title><rect x="27.9" y="707.0" width="23.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.9" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 1.01%)</title><rect x="27.9" y="691.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 1.01%)</title><rect x="27.9" y="675.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 1.01%)</title><rect x="27.9" y="659.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 1.01%)</title><rect x="27.9" y="643.0" width="11.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 1.01%)</title><rect x="27.9" y="627.0" width="11.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 1.01%)</title><rect x="27.9" y="611.0" width="11.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.01%)</title><rect x="27.9" y="595.0" width="11.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.01%)</title><rect x="27.9" y="579.0" width="11.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.01%)</title><rect x="27.9" y="563.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 1.01%)</title><rect x="39.8" y="691.0" width="11.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.8" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.01%)</title><rect x="39.8" y="675.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.8" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.51%)</title><rect x="45.8" y="659.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.8" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.51%)</title><rect x="45.8" y="643.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.8" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.51%)</title><rect x="45.8" y="627.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.8" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.51%)</title><rect x="45.8" y="611.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.51%)</title><rect x="51.7" y="723.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.51%)</title><rect x="51.7" y="707.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.51%)</title><rect x="57.7" y="723.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.51%)</title><rect x="57.7" y="707.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.51%)</title><rect x="57.7" y="691.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.7" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$EmptyMap.values (1 samples, 0.51%)</title><rect x="57.7" y="675.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.55%)</title><rect x="63.6" y="739.0" width="53.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.6" y="750.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.55%)</title><rect x="63.6" y="723.0" width="53.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.6" y="734.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.53%)</title><rect x="63.6" y="707.0" width="29.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.6" y="718.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 2.02%)</title><rect x="63.6" y="691.0" width="23.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.6" y="702.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 2.02%)</title><rect x="63.6" y="675.0" width="23.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.6" y="686.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.01%)</title><rect x="63.6" y="659.0" width="12.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.51%)</title><rect x="63.6" y="643.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="66.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.51%)</title><rect x="63.6" y="627.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.51%)</title><rect x="63.6" y="611.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.51%)</title><rect x="63.6" y="595.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.read (1 samples, 0.51%)</title><rect x="63.6" y="579.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="66.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.51%)</title><rect x="69.6" y="643.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.51%)</title><rect x="69.6" y="627.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.51%)</title><rect x="69.6" y="611.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.6" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.51%)</title><rect x="69.6" y="595.0" width="6.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="72.6" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.51%)</title><rect x="69.6" y="579.0" width="6.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="72.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/504189530.shouldBlock (1 samples, 0.51%)</title><rect x="75.6" y="659.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.51%)</title><rect x="75.6" y="643.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.51%)</title><rect x="75.6" y="627.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.6" y="638.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.51%)</title><rect x="75.6" y="611.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.51%)</title><rect x="75.6" y="595.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.51%)</title><rect x="75.6" y="579.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.characteristics (1 samples, 0.51%)</title><rect x="75.6" y="563.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.51%)</title><rect x="81.5" y="659.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.51%)</title><rect x="81.5" y="643.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="84.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.51%)</title><rect x="81.5" y="627.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.51%)</title><rect x="81.5" y="611.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.51%)</title><rect x="81.5" y="595.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.51%)</title><rect x="81.5" y="579.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.51%)</title><rect x="81.5" y="563.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.51%)</title><rect x="81.5" y="547.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.ensureValid (1 samples, 0.51%)</title><rect x="81.5" y="531.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (1 samples, 0.51%)</title><rect x="81.5" y="515.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.51%)</title><rect x="87.5" y="691.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.52%)</title><rect x="93.4" y="707.0" width="17.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.52%)</title><rect x="93.4" y="691.0" width="17.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.51%)</title><rect x="93.4" y="675.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.51%)</title><rect x="93.4" y="659.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.51%)</title><rect x="93.4" y="643.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.51%)</title><rect x="93.4" y="627.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.4" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.51%)</title><rect x="93.4" y="611.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.51%)</title><rect x="93.4" y="595.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.51%)</title><rect x="93.4" y="579.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.51%)</title><rect x="93.4" y="563.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 1.01%)</title><rect x="99.4" y="675.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.51%)</title><rect x="99.4" y="659.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.51%)</title><rect x="99.4" y="643.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="102.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.getOpFlags (1 samples, 0.51%)</title><rect x="99.4" y="627.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.51%)</title><rect x="105.4" y="659.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.4" y="670.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.51%)</title><rect x="105.4" y="643.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.51%)</title><rect x="105.4" y="627.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.51%)</title><rect x="105.4" y="611.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.51%)</title><rect x="105.4" y="595.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.51%)</title><rect x="111.3" y="707.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="114.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.51%)</title><rect x="111.3" y="691.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.3" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.51%)</title><rect x="111.3" y="675.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="114.3" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.51%)</title><rect x="111.3" y="659.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="114.3" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.51%)</title><rect x="111.3" y="643.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="114.3" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.51%)</title><rect x="111.3" y="627.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="114.3" y="638.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.51%)</title><rect x="111.3" y="611.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="114.3" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.51%)</title><rect x="111.3" y="595.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="114.3" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.51%)</title><rect x="111.3" y="579.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="114.3" y="590.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.51%)</title><rect x="111.3" y="563.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="114.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.run (144 samples, 72.73%)</title><rect x="117.3" y="771.0" width="858.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.3" y="782.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (144 samples, 72.73%)</title><rect x="117.3" y="755.0" width="858.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="120.3" y="766.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (144 samples, 72.73%)</title><rect x="117.3" y="739.0" width="858.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="120.3" y="750.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1494295673.run (130 samples, 65.66%)</title><rect x="117.3" y="723.0" width="774.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.3" y="734.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1494295673.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$39 (130 samples, 65.66%)</title><rect x="117.3" y="707.0" width="774.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="120.3" y="718.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$39</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (130 samples, 65.66%)</title><rect x="117.3" y="691.0" width="774.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="120.3" y="702.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (130 samples, 65.66%)</title><rect x="117.3" y="675.0" width="774.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="120.3" y="686.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (25 samples, 12.63%)</title><rect x="141.1" y="659.0" width="149.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="144.1" y="670.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (25 samples, 12.63%)</title><rect x="141.1" y="643.0" width="149.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.1" y="654.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (25 samples, 12.63%)</title><rect x="141.1" y="627.0" width="149.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.1" y="638.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 12.63%)</title><rect x="141.1" y="611.0" width="149.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.1" y="622.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 12.63%)</title><rect x="141.1" y="595.0" width="149.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.1" y="606.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (25 samples, 12.63%)</title><rect x="141.1" y="579.0" width="149.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="144.1" y="590.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 2.53%)</title><rect x="141.1" y="563.0" width="29.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.1" y="574.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 1.01%)</title><rect x="141.1" y="547.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 1.01%)</title><rect x="141.1" y="531.0" width="11.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="144.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.51%)</title><rect x="141.1" y="515.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.51%)</title><rect x="147.1" y="515.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.51%)</title><rect x="147.1" y="499.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.52%)</title><rect x="153.0" y="547.0" width="17.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="156.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.52%)</title><rect x="153.0" y="531.0" width="17.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.51%)</title><rect x="153.0" y="515.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="156.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.51%)</title><rect x="159.0" y="515.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="162.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.51%)</title><rect x="164.9" y="515.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 9.60%)</title><rect x="170.9" y="563.0" width="113.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.9" y="574.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.01%)</title><rect x="170.9" y="547.0" width="11.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="173.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.01%)</title><rect x="170.9" y="531.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 1.01%)</title><rect x="170.9" y="515.0" width="11.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="173.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.51%)</title><rect x="176.9" y="499.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.51%)</title><rect x="176.9" y="483.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.51%)</title><rect x="182.8" y="547.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.51%)</title><rect x="182.8" y="531.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="185.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (16 samples, 8.08%)</title><rect x="188.8" y="547.0" width="95.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.8" y="558.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 2.02%)</title><rect x="188.8" y="531.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="191.8" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 1.01%)</title><rect x="200.7" y="515.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 6.06%)</title><rect x="212.6" y="531.0" width="71.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.6" y="542.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 6.06%)</title><rect x="212.6" y="515.0" width="71.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.6" y="526.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (12 samples, 6.06%)</title><rect x="212.6" y="499.0" width="71.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.6" y="510.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.51%)</title><rect x="218.6" y="483.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.51%)</title><rect x="218.6" y="467.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 1.01%)</title><rect x="224.5" y="483.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 1.01%)</title><rect x="224.5" y="467.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.01%)</title><rect x="224.5" y="451.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.01%)</title><rect x="224.5" y="435.0" width="12.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.5" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 1.01%)</title><rect x="224.5" y="419.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 3.03%)</title><rect x="236.5" y="483.0" width="35.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.5" y="494.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 3.03%)</title><rect x="236.5" y="467.0" width="35.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.5" y="478.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 3.03%)</title><rect x="236.5" y="451.0" width="35.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.5" y="462.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 3.03%)</title><rect x="236.5" y="435.0" width="35.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.5" y="446.0">com..</text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 3.03%)</title><rect x="236.5" y="419.0" width="35.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.5" y="430.0">jav..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 1.01%)</title><rect x="272.2" y="483.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.01%)</title><rect x="272.2" y="467.0" width="11.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.2" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.01%)</title><rect x="272.2" y="451.0" width="11.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.51%)</title><rect x="284.1" y="563.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.51%)</title><rect x="284.1" y="547.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.51%)</title><rect x="284.1" y="531.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.51%)</title><rect x="284.1" y="515.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.51%)</title><rect x="284.1" y="499.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="287.1" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (90 samples, 45.45%)</title><rect x="290.1" y="659.0" width="536.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.1" y="670.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (17 samples, 8.59%)</title><rect x="290.1" y="643.0" width="101.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.1" y="654.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (17 samples, 8.59%)</title><rect x="290.1" y="627.0" width="101.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.1" y="638.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 6.06%)</title><rect x="319.9" y="611.0" width="71.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="322.9" y="622.0">ch/qos/l..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 4.55%)</title><rect x="337.8" y="595.0" width="53.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.8" y="606.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 2.02%)</title><rect x="367.6" y="579.0" width="23.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.6" y="590.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 2.02%)</title><rect x="367.6" y="563.0" width="23.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.6" y="574.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.51%)</title><rect x="391.4" y="643.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="394.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.51%)</title><rect x="391.4" y="627.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.4" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.51%)</title><rect x="391.4" y="611.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="394.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (20 samples, 10.10%)</title><rect x="397.4" y="643.0" width="119.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.4" y="654.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (20 samples, 10.10%)</title><rect x="397.4" y="627.0" width="119.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="400.4" y="638.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 4.04%)</title><rect x="397.4" y="611.0" width="47.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.4" y="622.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 4.04%)</title><rect x="397.4" y="595.0" width="47.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="400.4" y="606.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 3.03%)</title><rect x="403.3" y="579.0" width="35.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.3" y="590.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 2.53%)</title><rect x="409.3" y="563.0" width="29.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="412.3" y="574.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 2.53%)</title><rect x="409.3" y="547.0" width="29.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="412.3" y="558.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 2.53%)</title><rect x="409.3" y="531.0" width="29.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.3" y="542.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.51%)</title><rect x="415.3" y="515.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="418.3" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.51%)</title><rect x="415.3" y="499.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="418.3" y="510.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.51%)</title><rect x="415.3" y="483.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="418.3" y="494.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.51%)</title><rect x="421.2" y="515.0" width="6.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="424.2" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.51%)</title><rect x="421.2" y="499.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="424.2" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.01%)</title><rect x="427.2" y="515.0" width="11.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="430.2" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.51%)</title><rect x="439.1" y="579.0" width="6.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="442.1" y="590.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.51%)</title><rect x="445.1" y="611.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="448.1" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.51%)</title><rect x="445.1" y="595.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="448.1" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.51%)</title><rect x="445.1" y="579.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="448.1" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 5.56%)</title><rect x="451.0" y="611.0" width="65.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="454.0" y="622.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 5.56%)</title><rect x="451.0" y="595.0" width="65.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="454.0" y="606.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.01%)</title><rect x="451.0" y="579.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.0" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.01%)</title><rect x="451.0" y="563.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="454.0" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.01%)</title><rect x="451.0" y="547.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="454.0" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.01%)</title><rect x="451.0" y="531.0" width="11.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="454.0" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 4.55%)</title><rect x="462.9" y="579.0" width="53.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.9" y="590.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 4.55%)</title><rect x="462.9" y="563.0" width="53.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="465.9" y="574.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 3.54%)</title><rect x="474.8" y="547.0" width="41.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="477.8" y="558.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (46 samples, 23.23%)</title><rect x="516.6" y="643.0" width="274.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.6" y="654.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (46 samples, 23.23%)</title><rect x="516.6" y="627.0" width="274.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="519.6" y="638.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/223963933.process (43 samples, 21.72%)</title><rect x="516.6" y="611.0" width="256.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="519.6" y="622.0">com/linecorp/decaton/benchmark/Dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (43 samples, 21.72%)</title><rect x="516.6" y="595.0" width="256.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="519.6" y="606.0">com/linecorp/decaton/benchmark/Dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (39 samples, 19.70%)</title><rect x="516.6" y="579.0" width="232.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="519.6" y="590.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.51%)</title><rect x="522.5" y="563.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="525.5" y="574.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.51%)</title><rect x="522.5" y="547.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="525.5" y="558.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.51%)</title><rect x="522.5" y="531.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="525.5" y="542.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::call_event(Method*, CompLevel) (1 samples, 0.51%)</title><rect x="522.5" y="515.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="525.5" y="526.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::common(bool (AdvancedThresholdPolicy::*)(int, int, CompLevel), Method*, CompLevel, bool) (1 samples, 0.51%)</title><rect x="522.5" y="499.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="525.5" y="510.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::loop_predicate(int, int, CompLevel) (1 samples, 0.51%)</title><rect x="522.5" y="483.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="525.5" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.51%)</title><rect x="528.5" y="563.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="531.5" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.51%)</title><rect x="528.5" y="547.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="531.5" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.51%)</title><rect x="528.5" y="531.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="531.5" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.51%)</title><rect x="528.5" y="515.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="531.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.51%)</title><rect x="528.5" y="499.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="531.5" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (35 samples, 17.68%)</title><rect x="534.4" y="563.0" width="208.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="537.4" y="574.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProducedTime (1 samples, 0.51%)</title><rect x="534.4" y="547.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="537.4" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.51%)</title><rect x="534.4" y="531.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="537.4" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.51%)</title><rect x="534.4" y="515.0" width="6.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="537.4" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (34 samples, 17.17%)</title><rect x="540.4" y="547.0" width="202.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="543.4" y="558.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (30 samples, 15.15%)</title><rect x="564.2" y="531.0" width="178.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="567.2" y="542.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 1.01%)</title><rect x="582.1" y="515.0" width="11.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="585.1" y="526.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.52%)</title><rect x="594.0" y="515.0" width="17.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="597.0" y="526.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.01%)</title><rect x="600.0" y="499.0" width="11.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="603.0" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.51%)</title><rect x="611.9" y="515.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="614.9" y="526.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (21 samples, 10.61%)</title><rect x="617.9" y="515.0" width="125.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="620.9" y="526.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.51%)</title><rect x="647.7" y="499.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="650.7" y="510.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.51%)</title><rect x="653.6" y="499.0" width="6.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="656.6" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 5.56%)</title><rect x="659.6" y="499.0" width="65.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="662.6" y="510.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.51%)</title><rect x="725.2" y="499.0" width="5.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="728.2" y="510.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.51%)</title><rect x="731.1" y="499.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="734.1" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.51%)</title><rect x="737.1" y="499.0" width="5.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="740.1" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.51%)</title><rect x="743.0" y="563.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="746.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 2.02%)</title><rect x="749.0" y="579.0" width="23.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="752.0" y="590.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 2.02%)</title><rect x="749.0" y="563.0" width="23.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="752.0" y="574.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (4 samples, 2.02%)</title><rect x="749.0" y="547.0" width="23.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.0" y="558.0">j..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.51%)</title><rect x="772.8" y="611.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="775.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.51%)</title><rect x="778.8" y="611.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="781.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.51%)</title><rect x="778.8" y="595.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="781.8" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.51%)</title><rect x="784.7" y="611.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="787.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 3.03%)</title><rect x="790.7" y="643.0" width="35.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="793.7" y="654.0">jav..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.51%)</title><rect x="802.6" y="627.0" width="6.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="805.6" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.51%)</title><rect x="802.6" y="611.0" width="6.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="805.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.52%)</title><rect x="808.6" y="627.0" width="17.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="811.6" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.51%)</title><rect x="814.5" y="611.0" width="6.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="817.5" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.51%)</title><rect x="814.5" y="595.0" width="6.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="817.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.51%)</title><rect x="820.5" y="611.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="823.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1555943512.accept (1 samples, 0.51%)</title><rect x="820.5" y="595.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="823.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.51%)</title><rect x="820.5" y="579.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="823.5" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.51%)</title><rect x="820.5" y="563.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="823.5" y="574.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.51%)</title><rect x="820.5" y="547.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="823.5" y="558.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.51%)</title><rect x="820.5" y="531.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.5" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.51%)</title><rect x="820.5" y="515.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="823.5" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.51%)</title><rect x="820.5" y="499.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="823.5" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.51%)</title><rect x="820.5" y="483.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="823.5" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.51%)</title><rect x="820.5" y="467.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="823.5" y="478.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.51%)</title><rect x="820.5" y="451.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="823.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 5.05%)</title><rect x="826.5" y="659.0" width="59.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.5" y="670.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.51%)</title><rect x="832.4" y="643.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="835.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 4.04%)</title><rect x="838.4" y="643.0" width="47.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="841.4" y="654.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 3.03%)</title><rect x="850.3" y="627.0" width="35.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="853.3" y="638.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1555943512.accept (1 samples, 0.51%)</title><rect x="850.3" y="611.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="853.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.51%)</title><rect x="850.3" y="595.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="853.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.51%)</title><rect x="850.3" y="579.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="853.3" y="590.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.51%)</title><rect x="850.3" y="563.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="853.3" y="574.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.51%)</title><rect x="850.3" y="547.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="853.3" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.51%)</title><rect x="850.3" y="531.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="853.3" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.51%)</title><rect x="850.3" y="515.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="853.3" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.51%)</title><rect x="850.3" y="499.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="853.3" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.51%)</title><rect x="850.3" y="483.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="853.3" y="494.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.51%)</title><rect x="850.3" y="467.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="853.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/309773357.accept (5 samples, 2.53%)</title><rect x="856.3" y="611.0" width="29.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="859.3" y="622.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (5 samples, 2.53%)</title><rect x="856.3" y="595.0" width="29.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="859.3" y="606.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/1218261483.complete (5 samples, 2.53%)</title><rect x="856.3" y="579.0" width="29.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="859.3" y="590.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (5 samples, 2.53%)</title><rect x="856.3" y="563.0" width="29.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="859.3" y="574.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (5 samples, 2.53%)</title><rect x="856.3" y="547.0" width="29.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="859.3" y="558.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 2.53%)</title><rect x="856.3" y="531.0" width="29.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="859.3" y="542.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 2.53%)</title><rect x="856.3" y="515.0" width="29.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="859.3" y="526.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 2.53%)</title><rect x="856.3" y="499.0" width="29.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="859.3" y="510.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 2.53%)</title><rect x="856.3" y="483.0" width="29.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="859.3" y="494.0">ch..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.51%)</title><rect x="886.1" y="659.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="889.1" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.51%)</title><rect x="886.1" y="643.0" width="5.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="889.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 4.55%)</title><rect x="892.0" y="723.0" width="53.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="895.0" y="734.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 4.55%)</title><rect x="892.0" y="707.0" width="53.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="895.0" y="718.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 4.55%)</title><rect x="892.0" y="691.0" width="53.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="895.0" y="702.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 4.55%)</title><rect x="892.0" y="675.0" width="53.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="895.0" y="686.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 0.51%)</title><rect x="939.7" y="659.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="942.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 2.53%)</title><rect x="945.7" y="723.0" width="29.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="948.7" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 2.53%)</title><rect x="945.7" y="707.0" width="29.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="948.7" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.01%)</title><rect x="963.5" y="691.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="966.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.01%)</title><rect x="963.5" y="675.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="966.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.01%)</title><rect x="963.5" y="659.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="966.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.01%)</title><rect x="963.5" y="643.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="966.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 1.01%)</title><rect x="975.5" y="771.0" width="11.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="978.5" y="782.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.51%)</title><rect x="975.5" y="755.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.sessionTimeoutExpired (1 samples, 0.51%)</title><rect x="981.4" y="755.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="984.4" y="766.0"></text>
</g>
<g>
<title>start_thread (34 samples, 17.17%)</title><rect x="987.4" y="771.0" width="202.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="990.4" y="782.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (34 samples, 17.17%)</title><rect x="987.4" y="755.0" width="202.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="990.4" y="766.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 3.54%)</title><rect x="987.4" y="739.0" width="41.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="990.4" y="750.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 3.54%)</title><rect x="987.4" y="723.0" width="41.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="990.4" y="734.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.54%)</title><rect x="987.4" y="707.0" width="41.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="990.4" y="718.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.01%)</title><rect x="987.4" y="691.0" width="11.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="990.4" y="702.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.51%)</title><rect x="993.3" y="675.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.3" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.51%)</title><rect x="999.3" y="691.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.3" y="702.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 2.02%)</title><rect x="1005.3" y="691.0" width="23.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1008.3" y="702.0">S..</text>
</g>
<g>
<title>JavaThread::run() (27 samples, 13.64%)</title><rect x="1029.1" y="739.0" width="160.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1032.1" y="750.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (27 samples, 13.64%)</title><rect x="1029.1" y="723.0" width="160.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1032.1" y="734.0">JavaThread::thread_m..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (27 samples, 13.64%)</title><rect x="1029.1" y="707.0" width="160.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1032.1" y="718.0">CompileBroker::compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (27 samples, 13.64%)</title><rect x="1029.1" y="691.0" width="160.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.1" y="702.0">CompileBroker::invok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (25 samples, 12.63%)</title><rect x="1029.1" y="675.0" width="149.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1032.1" y="686.0">C2Compiler::compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (25 samples, 12.63%)</title><rect x="1029.1" y="659.0" width="149.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1032.1" y="670.0">Compile::Compile(ci..</text>
</g>
<g>
<title>Compile::Code_Gen() (12 samples, 6.06%)</title><rect x="1029.1" y="643.0" width="71.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1032.1" y="654.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.51%)</title><rect x="1029.1" y="627.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.1" y="638.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.51%)</title><rect x="1029.1" y="611.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1032.1" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.51%)</title><rect x="1035.1" y="627.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1038.1" y="638.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.51%)</title><rect x="1035.1" y="611.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.1" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.51%)</title><rect x="1041.0" y="627.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1044.0" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.51%)</title><rect x="1041.0" y="611.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1044.0" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.51%)</title><rect x="1041.0" y="595.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 4.55%)</title><rect x="1047.0" y="627.0" width="53.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1050.0" y="638.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.01%)</title><rect x="1047.0" y="611.0" width="11.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.0" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.01%)</title><rect x="1047.0" y="595.0" width="11.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.0" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.01%)</title><rect x="1047.0" y="579.0" width="11.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1050.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.51%)</title><rect x="1058.9" y="611.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.9" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.51%)</title><rect x="1058.9" y="595.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.9" y="606.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.51%)</title><rect x="1058.9" y="579.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.9" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.51%)</title><rect x="1064.8" y="611.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1067.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.51%)</title><rect x="1070.8" y="611.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.01%)</title><rect x="1076.8" y="611.0" width="11.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.51%)</title><rect x="1082.7" y="595.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.51%)</title><rect x="1088.7" y="611.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1091.7" y="622.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.51%)</title><rect x="1094.6" y="611.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.6" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.51%)</title><rect x="1094.6" y="595.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.6" y="606.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 3.03%)</title><rect x="1100.6" y="643.0" width="35.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.6" y="654.0">Com..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 2.53%)</title><rect x="1100.6" y="627.0" width="29.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.6" y="638.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.51%)</title><rect x="1100.6" y="611.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.6" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.01%)</title><rect x="1106.6" y="611.0" width="11.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.6" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.01%)</title><rect x="1106.6" y="595.0" width="11.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.6" y="606.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.51%)</title><rect x="1106.6" y="579.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.6" y="590.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.51%)</title><rect x="1106.6" y="563.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.51%)</title><rect x="1112.5" y="579.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.5" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.51%)</title><rect x="1112.5" y="563.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.5" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.51%)</title><rect x="1112.5" y="547.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1115.5" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.01%)</title><rect x="1118.5" y="611.0" width="11.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.5" y="622.0"></text>
</g>
<g>
<title>LoadPNode::Opcode() const (1 samples, 0.51%)</title><rect x="1118.5" y="595.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.51%)</title><rect x="1124.4" y="595.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.4" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.51%)</title><rect x="1124.4" y="579.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.4" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.51%)</title><rect x="1124.4" y="563.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.4" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.51%)</title><rect x="1130.4" y="627.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.4" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.51%)</title><rect x="1130.4" y="611.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.4" y="622.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.51%)</title><rect x="1130.4" y="595.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.4" y="606.0"></text>
</g>
<g>
<title>IfNode::IfNode(Node*, Node*, float, float) (1 samples, 0.51%)</title><rect x="1130.4" y="579.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.53%)</title><rect x="1136.4" y="643.0" width="29.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.4" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.53%)</title><rect x="1136.4" y="627.0" width="29.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.4" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.53%)</title><rect x="1136.4" y="611.0" width="29.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.4" y="622.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.53%)</title><rect x="1136.4" y="595.0" width="29.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.4" y="606.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.53%)</title><rect x="1136.4" y="579.0" width="29.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.4" y="590.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.02%)</title><rect x="1136.4" y="563.0" width="23.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.4" y="574.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.52%)</title><rect x="1136.4" y="547.0" width="17.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.4" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.52%)</title><rect x="1136.4" y="531.0" width="17.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.4" y="542.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.51%)</title><rect x="1136.4" y="515.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.4" y="526.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.51%)</title><rect x="1136.4" y="499.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.4" y="510.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.51%)</title><rect x="1136.4" y="483.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.4" y="494.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.51%)</title><rect x="1136.4" y="467.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.01%)</title><rect x="1142.3" y="515.0" width="11.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.01%)</title><rect x="1142.3" y="499.0" width="11.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.01%)</title><rect x="1142.3" y="483.0" width="11.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.01%)</title><rect x="1142.3" y="467.0" width="11.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.01%)</title><rect x="1142.3" y="451.0" width="11.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.01%)</title><rect x="1142.3" y="435.0" width="11.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.01%)</title><rect x="1142.3" y="419.0" width="11.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.01%)</title><rect x="1142.3" y="403.0" width="11.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.01%)</title><rect x="1142.3" y="387.0" width="11.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.01%)</title><rect x="1142.3" y="371.0" width="11.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.01%)</title><rect x="1142.3" y="355.0" width="11.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.01%)</title><rect x="1142.3" y="339.0" width="11.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.01%)</title><rect x="1142.3" y="323.0" width="11.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.01%)</title><rect x="1142.3" y="307.0" width="11.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.01%)</title><rect x="1142.3" y="291.0" width="11.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.01%)</title><rect x="1142.3" y="275.0" width="11.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.3" y="286.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.51%)</title><rect x="1142.3" y="259.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.3" y="270.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.51%)</title><rect x="1142.3" y="243.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1148.3" y="259.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1148.3" y="243.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1148.3" y="227.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1148.3" y="211.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1148.3" y="195.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1148.3" y="179.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.3" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1148.3" y="163.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.3" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1148.3" y="147.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.51%)</title><rect x="1148.3" y="131.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.51%)</title><rect x="1148.3" y="115.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.3" y="126.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.51%)</title><rect x="1148.3" y="99.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.3" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.51%)</title><rect x="1148.3" y="83.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.3" y="94.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.51%)</title><rect x="1148.3" y="67.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.3" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1154.2" y="547.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1154.2" y="531.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1154.2" y="515.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1154.2" y="499.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1154.2" y="483.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1154.2" y="467.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1154.2" y="451.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1154.2" y="435.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1154.2" y="419.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1154.2" y="403.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1154.2" y="387.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1154.2" y="371.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1154.2" y="355.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1154.2" y="339.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1154.2" y="323.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1154.2" y="307.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1154.2" y="291.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1154.2" y="275.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1154.2" y="259.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1154.2" y="243.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.2" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1154.2" y="227.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1154.2" y="211.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1154.2" y="195.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1154.2" y="179.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.51%)</title><rect x="1154.2" y="163.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.51%)</title><rect x="1154.2" y="147.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.2" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.51%)</title><rect x="1154.2" y="131.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.2" y="142.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.51%)</title><rect x="1154.2" y="115.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="126.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.51%)</title><rect x="1154.2" y="99.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.2" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.51%)</title><rect x="1154.2" y="83.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.2" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.51%)</title><rect x="1154.2" y="67.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.2" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.51%)</title><rect x="1154.2" y="51.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.2" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_boxed_value_offset(int) const (1 samples, 0.51%)</title><rect x="1154.2" y="35.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.51%)</title><rect x="1160.2" y="563.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.51%)</title><rect x="1160.2" y="547.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.2" y="558.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.51%)</title><rect x="1160.2" y="531.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.2" y="542.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 1.01%)</title><rect x="1166.2" y="643.0" width="11.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.2" y="654.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 1.01%)</title><rect x="1166.2" y="627.0" width="11.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.2" y="638.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.01%)</title><rect x="1178.1" y="675.0" width="11.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="686.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.01%)</title><rect x="1178.1" y="659.0" width="11.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.1" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.01%)</title><rect x="1178.1" y="643.0" width="11.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.51%)</title><rect x="1178.1" y="627.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.1" y="638.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.51%)</title><rect x="1178.1" y="611.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.1" y="622.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.51%)</title><rect x="1178.1" y="595.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="606.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.51%)</title><rect x="1178.1" y="579.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.51%)</title><rect x="1178.1" y="563.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.1" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.51%)</title><rect x="1178.1" y="547.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.1" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.51%)</title><rect x="1178.1" y="531.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.51%)</title><rect x="1178.1" y="515.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.1" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.51%)</title><rect x="1178.1" y="499.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.1" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.51%)</title><rect x="1178.1" y="483.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.51%)</title><rect x="1178.1" y="467.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.1" y="478.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.51%)</title><rect x="1178.1" y="451.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.1" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.51%)</title><rect x="1178.1" y="435.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.51%)</title><rect x="1178.1" y="419.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.51%)</title><rect x="1178.1" y="403.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.51%)</title><rect x="1178.1" y="387.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.1" y="398.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.51%)</title><rect x="1178.1" y="371.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.1" y="382.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.51%)</title><rect x="1178.1" y="355.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.1" y="366.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.51%)</title><rect x="1178.1" y="339.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="350.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.51%)</title><rect x="1178.1" y="323.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.1" y="334.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.51%)</title><rect x="1184.0" y="627.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="638.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.51%)</title><rect x="1184.0" y="611.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="622.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.51%)</title><rect x="1184.0" y="595.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="606.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.51%)</title><rect x="1184.0" y="579.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="590.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.51%)</title><rect x="1184.0" y="563.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="574.0"></text>
</g>
</g>
</svg>
