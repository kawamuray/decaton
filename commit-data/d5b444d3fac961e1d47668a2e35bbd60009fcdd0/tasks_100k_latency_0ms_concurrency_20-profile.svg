<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (178 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (31 samples, 17.42%)</title><rect x="10.0" y="755.0" width="205.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="766.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (31 samples, 17.42%)</title><rect x="10.0" y="739.0" width="205.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 1.12%)</title><rect x="10.0" y="723.0" width="13.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 1.12%)</title><rect x="10.0" y="707.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.56%)</title><rect x="10.0" y="691.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.56%)</title><rect x="10.0" y="675.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.56%)</title><rect x="10.0" y="659.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.56%)</title><rect x="16.6" y="691.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.56%)</title><rect x="16.6" y="675.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.56%)</title><rect x="16.6" y="659.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.56%)</title><rect x="16.6" y="643.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.56%)</title><rect x="16.6" y="627.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.56%)</title><rect x="16.6" y="611.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.56%)</title><rect x="23.3" y="723.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.56%)</title><rect x="23.3" y="707.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (1 samples, 0.56%)</title><rect x="23.3" y="691.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.56%)</title><rect x="23.3" y="675.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.3" y="686.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 10.67%)</title><rect x="29.9" y="723.0" width="125.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.9" y="734.0">java/lang/Itera..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/913269231.accept (18 samples, 10.11%)</title><rect x="29.9" y="707.0" width="119.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.9" y="718.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (18 samples, 10.11%)</title><rect x="29.9" y="691.0" width="119.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.9" y="702.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 7.87%)</title><rect x="29.9" y="675.0" width="92.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.9" y="686.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 7.87%)</title><rect x="29.9" y="659.0" width="92.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.9" y="670.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 7.87%)</title><rect x="29.9" y="643.0" width="92.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.9" y="654.0">com/linecor..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (14 samples, 7.87%)</title><rect x="29.9" y="627.0" width="92.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.9" y="638.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 7.87%)</title><rect x="29.9" y="611.0" width="92.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.9" y="622.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 7.30%)</title><rect x="29.9" y="595.0" width="86.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.9" y="606.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (12 samples, 6.74%)</title><rect x="36.5" y="579.0" width="79.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.5" y="590.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.12%)</title><rect x="36.5" y="563.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.12%)</title><rect x="36.5" y="547.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.12%)</title><rect x="36.5" y="531.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 5.62%)</title><rect x="49.8" y="563.0" width="66.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.8" y="574.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 5.62%)</title><rect x="49.8" y="547.0" width="66.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="52.8" y="558.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 5.62%)</title><rect x="49.8" y="531.0" width="66.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.8" y="542.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 5.62%)</title><rect x="49.8" y="515.0" width="66.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.8" y="526.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (10 samples, 5.62%)</title><rect x="49.8" y="499.0" width="66.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.8" y="510.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 4.49%)</title><rect x="49.8" y="483.0" width="53.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="52.8" y="494.0">Unsaf..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.56%)</title><rect x="49.8" y="467.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="52.8" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 2.81%)</title><rect x="56.4" y="467.0" width="33.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="59.4" y="478.0">__..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.12%)</title><rect x="89.6" y="467.0" width="13.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="92.6" y="478.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.56%)</title><rect x="102.8" y="483.0" width="6.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="105.8" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.56%)</title><rect x="109.4" y="483.0" width="6.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="112.4" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.56%)</title><rect x="116.1" y="595.0" width="6.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="119.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 2.25%)</title><rect x="122.7" y="675.0" width="26.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="125.7" y="686.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.25%)</title><rect x="122.7" y="659.0" width="26.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.7" y="670.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.12%)</title><rect x="136.0" y="643.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="139.0" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.12%)</title><rect x="136.0" y="627.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.0" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.12%)</title><rect x="136.0" y="611.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.0" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.56%)</title><rect x="136.0" y="595.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="139.0" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.56%)</title><rect x="136.0" y="579.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="139.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.56%)</title><rect x="136.0" y="563.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="139.0" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.56%)</title><rect x="136.0" y="547.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="139.0" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.56%)</title><rect x="136.0" y="531.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="139.0" y="542.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.56%)</title><rect x="136.0" y="515.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="139.0" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.56%)</title><rect x="136.0" y="499.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="139.0" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.56%)</title><rect x="142.6" y="595.0" width="6.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="145.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.56%)</title><rect x="149.2" y="707.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.56%)</title><rect x="149.2" y="691.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="152.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.56%)</title><rect x="149.2" y="675.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.56%)</title><rect x="149.2" y="659.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.56%)</title><rect x="149.2" y="643.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.56%)</title><rect x="149.2" y="627.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.06%)</title><rect x="155.8" y="723.0" width="59.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="158.8" y="734.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.06%)</title><rect x="155.8" y="707.0" width="59.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="158.8" y="718.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 3.93%)</title><rect x="155.8" y="691.0" width="46.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="158.8" y="702.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 3.93%)</title><rect x="155.8" y="675.0" width="46.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="158.8" y="686.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 3.93%)</title><rect x="155.8" y="659.0" width="46.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="158.8" y="670.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 3.37%)</title><rect x="155.8" y="643.0" width="39.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="158.8" y="654.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 3.37%)</title><rect x="155.8" y="627.0" width="39.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="158.8" y="638.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (5 samples, 2.81%)</title><rect x="155.8" y="611.0" width="33.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="158.8" y="622.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.56%)</title><rect x="162.5" y="595.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.56%)</title><rect x="162.5" y="579.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.56%)</title><rect x="162.5" y="563.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.56%)</title><rect x="162.5" y="547.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.56%)</title><rect x="162.5" y="531.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 1.12%)</title><rect x="169.1" y="595.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 1.12%)</title><rect x="169.1" y="579.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 1.12%)</title><rect x="169.1" y="563.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 1.12%)</title><rect x="169.1" y="547.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="172.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 1.12%)</title><rect x="169.1" y="531.0" width="13.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 1.12%)</title><rect x="169.1" y="515.0" width="13.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 1.12%)</title><rect x="169.1" y="499.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.56%)</title><rect x="182.4" y="595.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.56%)</title><rect x="182.4" y="579.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.56%)</title><rect x="182.4" y="563.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.56%)</title><rect x="182.4" y="547.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.access$000 (1 samples, 0.56%)</title><rect x="182.4" y="531.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.count (1 samples, 0.56%)</title><rect x="182.4" y="515.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.56%)</title><rect x="189.0" y="611.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.56%)</title><rect x="189.0" y="595.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.56%)</title><rect x="189.0" y="579.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="192.0" y="590.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.56%)</title><rect x="189.0" y="563.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.56%)</title><rect x="195.6" y="643.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.56%)</title><rect x="195.6" y="627.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="198.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.56%)</title><rect x="195.6" y="611.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="198.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.56%)</title><rect x="195.6" y="595.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.56%)</title><rect x="202.2" y="691.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.56%)</title><rect x="202.2" y="675.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.56%)</title><rect x="202.2" y="659.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.2" y="670.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.56%)</title><rect x="202.2" y="643.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/20769848.accept (1 samples, 0.56%)</title><rect x="202.2" y="627.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.56%)</title><rect x="202.2" y="611.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.56%)</title><rect x="202.2" y="595.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.56%)</title><rect x="202.2" y="579.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.56%)</title><rect x="202.2" y="563.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.56%)</title><rect x="208.9" y="691.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.56%)</title><rect x="208.9" y="675.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.56%)</title><rect x="208.9" y="659.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="211.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.56%)</title><rect x="208.9" y="643.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.9" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (58 samples, 32.58%)</title><rect x="215.5" y="755.0" width="384.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.5" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (58 samples, 32.58%)</title><rect x="215.5" y="739.0" width="384.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.5" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (58 samples, 32.58%)</title><rect x="215.5" y="723.0" width="384.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.5" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/514600521.run (37 samples, 20.79%)</title><rect x="228.8" y="707.0" width="245.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.8" y="718.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (37 samples, 20.79%)</title><rect x="228.8" y="691.0" width="245.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.8" y="702.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (37 samples, 20.79%)</title><rect x="228.8" y="675.0" width="245.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.8" y="686.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (37 samples, 20.79%)</title><rect x="228.8" y="659.0" width="245.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.8" y="670.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (12 samples, 6.74%)</title><rect x="235.4" y="643.0" width="79.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.4" y="654.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (12 samples, 6.74%)</title><rect x="235.4" y="627.0" width="79.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.4" y="638.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 6.74%)</title><rect x="235.4" y="611.0" width="79.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.4" y="622.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 6.74%)</title><rect x="235.4" y="595.0" width="79.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.4" y="606.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 6.74%)</title><rect x="235.4" y="579.0" width="79.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.4" y="590.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 6.74%)</title><rect x="235.4" y="563.0" width="79.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.4" y="574.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 3.37%)</title><rect x="235.4" y="547.0" width="39.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.4" y="558.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 3.37%)</title><rect x="235.4" y="531.0" width="39.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.4" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.12%)</title><rect x="261.9" y="515.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 1.12%)</title><rect x="261.9" y="499.0" width="13.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="264.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 1.12%)</title><rect x="261.9" y="483.0" width="13.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 3.37%)</title><rect x="275.2" y="547.0" width="39.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.2" y="558.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.56%)</title><rect x="275.2" y="531.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.56%)</title><rect x="281.8" y="531.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="284.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.56%)</title><rect x="281.8" y="515.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.56%)</title><rect x="281.8" y="499.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.56%)</title><rect x="281.8" y="483.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.56%)</title><rect x="288.4" y="531.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.56%)</title><rect x="288.4" y="515.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.69%)</title><rect x="295.1" y="531.0" width="19.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.69%)</title><rect x="295.1" y="515.0" width="19.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.69%)</title><rect x="295.1" y="499.0" width="19.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.69%)</title><rect x="295.1" y="483.0" width="19.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.12%)</title><rect x="295.1" y="467.0" width="13.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 1.12%)</title><rect x="295.1" y="451.0" width="13.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 1.12%)</title><rect x="295.1" y="435.0" width="13.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="298.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 1.12%)</title><rect x="295.1" y="419.0" width="13.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 1.12%)</title><rect x="295.1" y="403.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.56%)</title><rect x="308.3" y="467.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.56%)</title><rect x="308.3" y="451.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.56%)</title><rect x="308.3" y="435.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.56%)</title><rect x="308.3" y="419.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.56%)</title><rect x="308.3" y="403.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.3" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (23 samples, 12.92%)</title><rect x="314.9" y="643.0" width="152.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.9" y="654.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 2.81%)</title><rect x="314.9" y="627.0" width="33.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.9" y="638.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (5 samples, 2.81%)</title><rect x="314.9" y="611.0" width="33.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.9" y="622.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 2.81%)</title><rect x="314.9" y="595.0" width="33.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.9" y="606.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.25%)</title><rect x="321.6" y="579.0" width="26.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.6" y="590.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.56%)</title><rect x="341.5" y="563.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.56%)</title><rect x="341.5" y="547.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="344.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.56%)</title><rect x="348.1" y="627.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.56%)</title><rect x="348.1" y="611.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.56%)</title><rect x="348.1" y="595.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (13 samples, 7.30%)</title><rect x="354.7" y="627.0" width="86.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="357.7" y="638.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (13 samples, 7.30%)</title><rect x="354.7" y="611.0" width="86.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.7" y="622.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.69%)</title><rect x="361.3" y="595.0" width="19.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="364.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.12%)</title><rect x="361.3" y="579.0" width="13.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="364.3" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.56%)</title><rect x="368.0" y="563.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="371.0" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.56%)</title><rect x="368.0" y="547.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="371.0" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.56%)</title><rect x="368.0" y="531.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.0" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.56%)</title><rect x="368.0" y="515.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="371.0" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.56%)</title><rect x="368.0" y="499.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="371.0" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.56%)</title><rect x="374.6" y="579.0" width="6.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="377.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.key (1 samples, 0.56%)</title><rect x="381.2" y="595.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.2" y="606.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.56%)</title><rect x="387.9" y="595.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="390.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.topic (1 samples, 0.56%)</title><rect x="394.5" y="595.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.5" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.37%)</title><rect x="401.1" y="595.0" width="39.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="404.1" y="606.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.37%)</title><rect x="401.1" y="579.0" width="39.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.1" y="590.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.56%)</title><rect x="401.1" y="563.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.1" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.56%)</title><rect x="401.1" y="547.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.1" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.56%)</title><rect x="401.1" y="531.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.1" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.56%)</title><rect x="401.1" y="515.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="404.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.56%)</title><rect x="401.1" y="499.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.56%)</title><rect x="401.1" y="483.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.1" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.81%)</title><rect x="407.8" y="563.0" width="33.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.8" y="574.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.25%)</title><rect x="414.4" y="547.0" width="26.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="417.4" y="558.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.12%)</title><rect x="427.6" y="531.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.56%)</title><rect x="434.3" y="515.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="437.3" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 1.69%)</title><rect x="440.9" y="627.0" width="19.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="443.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 1.69%)</title><rect x="440.9" y="611.0" width="19.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="443.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1627590712.process (2 samples, 1.12%)</title><rect x="440.9" y="595.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="443.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.12%)</title><rect x="440.9" y="579.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="443.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 1.12%)</title><rect x="440.9" y="563.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.9" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.12%)</title><rect x="440.9" y="547.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="443.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 1.12%)</title><rect x="440.9" y="531.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.9" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.12%)</title><rect x="440.9" y="515.0" width="13.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="443.9" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.12%)</title><rect x="440.9" y="499.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="443.9" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (2 samples, 1.12%)</title><rect x="440.9" y="483.0" width="13.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="443.9" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.56%)</title><rect x="454.2" y="595.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="457.2" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.56%)</title><rect x="454.2" y="579.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="457.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.56%)</title><rect x="460.8" y="627.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.56%)</title><rect x="460.8" y="611.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="463.8" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="460.8" y="595.0" width="6.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="463.8" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="460.8" y="579.0" width="6.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="463.8" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.56%)</title><rect x="467.4" y="643.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="470.4" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="467.4" y="627.0" width="6.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="470.4" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.56%)</title><rect x="474.0" y="707.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="477.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 1.69%)</title><rect x="480.7" y="707.0" width="19.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="483.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 1.69%)</title><rect x="480.7" y="691.0" width="19.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.56%)</title><rect x="493.9" y="675.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 8.43%)</title><rect x="500.6" y="707.0" width="99.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="503.6" y="718.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 8.43%)</title><rect x="500.6" y="691.0" width="99.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.6" y="702.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 7.30%)</title><rect x="513.8" y="675.0" width="86.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="516.8" y="686.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.56%)</title><rect x="513.8" y="659.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="516.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.56%)</title><rect x="513.8" y="643.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="516.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.56%)</title><rect x="513.8" y="627.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="516.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.56%)</title><rect x="513.8" y="611.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="516.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 6.74%)</title><rect x="520.4" y="659.0" width="79.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="523.4" y="670.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (12 samples, 6.74%)</title><rect x="520.4" y="643.0" width="79.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="523.4" y="654.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (11 samples, 6.18%)</title><rect x="527.1" y="627.0" width="72.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="530.1" y="638.0">Unsafe_P..</text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 1.12%)</title><rect x="533.7" y="611.0" width="13.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="536.7" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.69%)</title><rect x="547.0" y="611.0" width="19.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="550.0" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.69%)</title><rect x="566.9" y="611.0" width="19.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="569.9" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 1.12%)</title><rect x="586.7" y="611.0" width="13.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="589.7" y="622.0"></text>
</g>
<g>
<title>start_thread (89 samples, 50.00%)</title><rect x="600.0" y="755.0" width="590.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="603.0" y="766.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (89 samples, 50.00%)</title><rect x="600.0" y="739.0" width="590.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="603.0" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 6.74%)</title><rect x="600.0" y="723.0" width="79.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="603.0" y="734.0">GangWorke..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.69%)</title><rect x="600.0" y="707.0" width="19.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="603.0" y="718.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.69%)</title><rect x="600.0" y="691.0" width="19.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="603.0" y="702.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.56%)</title><rect x="600.0" y="675.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="603.0" y="686.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.12%)</title><rect x="606.6" y="675.0" width="13.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="609.6" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (9 samples, 5.06%)</title><rect x="619.9" y="707.0" width="59.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="622.9" y="718.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 4.49%)</title><rect x="619.9" y="691.0" width="53.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="622.9" y="702.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 3.37%)</title><rect x="619.9" y="675.0" width="39.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="622.9" y="686.0">G1P..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.56%)</title><rect x="619.9" y="659.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="622.9" y="670.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 2.81%)</title><rect x="626.5" y="659.0" width="33.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="629.5" y="670.0">G1..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 1.12%)</title><rect x="639.8" y="643.0" width="13.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="642.8" y="654.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.56%)</title><rect x="646.4" y="627.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="649.4" y="638.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.56%)</title><rect x="653.0" y="643.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="656.0" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.12%)</title><rect x="659.7" y="675.0" width="13.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="662.7" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.56%)</title><rect x="672.9" y="691.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="675.9" y="702.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.56%)</title><rect x="672.9" y="675.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="675.9" y="686.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.56%)</title><rect x="672.9" y="659.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="675.9" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.56%)</title><rect x="672.9" y="643.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="675.9" y="654.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.56%)</title><rect x="672.9" y="627.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="675.9" y="638.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.56%)</title><rect x="672.9" y="611.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="675.9" y="622.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.56%)</title><rect x="672.9" y="595.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="675.9" y="606.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.56%)</title><rect x="672.9" y="579.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="675.9" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (77 samples, 43.26%)</title><rect x="679.6" y="723.0" width="510.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="682.6" y="734.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (77 samples, 43.26%)</title><rect x="679.6" y="707.0" width="510.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="682.6" y="718.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (77 samples, 43.26%)</title><rect x="679.6" y="691.0" width="510.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="682.6" y="702.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (73 samples, 41.01%)</title><rect x="679.6" y="675.0" width="483.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="682.6" y="686.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (73 samples, 41.01%)</title><rect x="679.6" y="659.0" width="483.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="682.6" y="670.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, b..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.56%)</title><rect x="679.6" y="643.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="682.6" y="654.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.56%)</title><rect x="679.6" y="627.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="682.6" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.56%)</title><rect x="679.6" y="611.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="682.6" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.56%)</title><rect x="679.6" y="595.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="682.6" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.56%)</title><rect x="679.6" y="579.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="682.6" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.56%)</title><rect x="679.6" y="563.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="682.6" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.56%)</title><rect x="679.6" y="547.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="682.6" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.56%)</title><rect x="679.6" y="531.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="682.6" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.56%)</title><rect x="679.6" y="515.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="682.6" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.56%)</title><rect x="679.6" y="499.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="682.6" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="679.6" y="483.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="682.6" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="679.6" y="467.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="682.6" y="478.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.56%)</title><rect x="679.6" y="451.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="682.6" y="462.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 23.03%)</title><rect x="686.2" y="643.0" width="271.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="689.2" y="654.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.69%)</title><rect x="686.2" y="627.0" width="19.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="689.2" y="638.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.12%)</title><rect x="686.2" y="611.0" width="13.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="689.2" y="622.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.56%)</title><rect x="699.4" y="611.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="702.4" y="622.0"></text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.56%)</title><rect x="699.4" y="595.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="702.4" y="606.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.56%)</title><rect x="706.1" y="627.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="709.1" y="638.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.69%)</title><rect x="712.7" y="627.0" width="19.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="715.7" y="638.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 1.12%)</title><rect x="712.7" y="611.0" width="13.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="715.7" y="622.0"></text>
</g>
<g>
<title>LoadKlassNode::Opcode() const (1 samples, 0.56%)</title><rect x="719.3" y="595.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="722.3" y="606.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.56%)</title><rect x="726.0" y="611.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="729.0" y="622.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.56%)</title><rect x="726.0" y="595.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="729.0" y="606.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.56%)</title><rect x="726.0" y="579.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="729.0" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.69%)</title><rect x="732.6" y="627.0" width="19.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="735.6" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.69%)</title><rect x="732.6" y="611.0" width="19.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="735.6" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.56%)</title><rect x="739.2" y="595.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="742.2" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.56%)</title><rect x="745.8" y="595.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="748.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 17.42%)</title><rect x="752.5" y="627.0" width="205.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="755.5" y="638.0">PhaseChaitin::Register_Allo..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.12%)</title><rect x="752.5" y="611.0" width="13.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="755.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.69%)</title><rect x="765.7" y="611.0" width="19.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="768.7" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.12%)</title><rect x="765.7" y="595.0" width="13.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="768.7" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.56%)</title><rect x="779.0" y="595.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="782.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.25%)</title><rect x="785.6" y="611.0" width="26.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="788.6" y="622.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 3.37%)</title><rect x="812.1" y="611.0" width="39.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="815.1" y="622.0">Pha..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.56%)</title><rect x="832.0" y="595.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="835.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.12%)</title><rect x="838.7" y="595.0" width="13.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="841.7" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="838.7" y="579.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="841.7" y="590.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.56%)</title><rect x="845.3" y="579.0" width="6.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="848.3" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.56%)</title><rect x="851.9" y="611.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.9" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.56%)</title><rect x="851.9" y="595.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.9" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.56%)</title><rect x="858.5" y="611.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="861.5" y="622.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.56%)</title><rect x="858.5" y="595.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="861.5" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.56%)</title><rect x="865.2" y="611.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="868.2" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.69%)</title><rect x="871.8" y="611.0" width="19.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="874.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.69%)</title><rect x="871.8" y="595.0" width="19.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="874.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::skip_copies(Node*) (1 samples, 0.56%)</title><rect x="885.1" y="579.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.1" y="590.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.56%)</title><rect x="891.7" y="611.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="894.7" y="622.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.56%)</title><rect x="891.7" y="595.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="894.7" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.56%)</title><rect x="891.7" y="579.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="894.7" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.12%)</title><rect x="898.3" y="611.0" width="13.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="901.3" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.12%)</title><rect x="898.3" y="595.0" width="13.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="901.3" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 1.12%)</title><rect x="911.6" y="611.0" width="13.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="914.6" y="622.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.56%)</title><rect x="918.2" y="595.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="921.2" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.56%)</title><rect x="924.8" y="611.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="927.8" y="622.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.56%)</title><rect x="924.8" y="595.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="927.8" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.25%)</title><rect x="931.5" y="611.0" width="26.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.5" y="622.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.12%)</title><rect x="938.1" y="595.0" width="13.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="941.1" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="944.7" y="579.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="947.7" y="590.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.56%)</title><rect x="951.3" y="595.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="954.3" y="606.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 15.17%)</title><rect x="958.0" y="643.0" width="179.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.0" y="654.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 1.12%)</title><rect x="958.0" y="627.0" width="13.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="961.0" y="638.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 1.12%)</title><rect x="958.0" y="611.0" width="13.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="961.0" y="622.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.56%)</title><rect x="964.6" y="595.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="967.6" y="606.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.56%)</title><rect x="971.2" y="627.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.2" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.56%)</title><rect x="971.2" y="611.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="974.2" y="622.0"></text>
</g>
<g>
<title>MemBarNode::Value(PhaseTransform*) const (1 samples, 0.56%)</title><rect x="977.9" y="627.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="980.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 11.24%)</title><rect x="984.5" y="627.0" width="132.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.5" y="638.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.56%)</title><rect x="984.5" y="611.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.5" y="622.0"></text>
</g>
<g>
<title>RegionNode::hash() const (1 samples, 0.56%)</title><rect x="984.5" y="595.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 2.81%)</title><rect x="991.1" y="611.0" width="33.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="994.1" y="622.0">Ph..</text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.56%)</title><rect x="1017.6" y="595.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1020.6" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.12%)</title><rect x="1024.3" y="611.0" width="13.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1027.3" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.56%)</title><rect x="1030.9" y="595.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 4.49%)</title><rect x="1037.5" y="611.0" width="53.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1040.5" y="622.0">Phase..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.56%)</title><rect x="1057.4" y="595.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.4" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.25%)</title><rect x="1064.0" y="595.0" width="26.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.0" y="606.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.56%)</title><rect x="1077.3" y="579.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.56%)</title><rect x="1083.9" y="579.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.56%)</title><rect x="1083.9" y="563.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.9" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.56%)</title><rect x="1083.9" y="547.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.9" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.12%)</title><rect x="1090.6" y="611.0" width="13.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.6" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.56%)</title><rect x="1097.2" y="595.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.2" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.56%)</title><rect x="1097.2" y="579.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.2" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.56%)</title><rect x="1097.2" y="563.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.2" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.12%)</title><rect x="1103.8" y="611.0" width="13.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.8" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.12%)</title><rect x="1103.8" y="595.0" width="13.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.8" y="606.0"></text>
</g>
<g>
<title>SubINode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1103.8" y="579.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.8" y="590.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 0.56%)</title><rect x="1103.8" y="563.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.8" y="574.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.56%)</title><rect x="1110.4" y="579.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.4" y="590.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.56%)</title><rect x="1110.4" y="563.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.4" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.69%)</title><rect x="1117.1" y="627.0" width="19.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.1" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.69%)</title><rect x="1117.1" y="611.0" width="19.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.1" y="622.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1117.1" y="595.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.1" y="606.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.56%)</title><rect x="1117.1" y="579.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.1" y="590.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.56%)</title><rect x="1117.1" y="563.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.1" y="574.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.56%)</title><rect x="1117.1" y="547.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.1" y="558.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 1.12%)</title><rect x="1123.7" y="595.0" width="13.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.7" y="606.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.56%)</title><rect x="1123.7" y="579.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.7" y="590.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.56%)</title><rect x="1130.3" y="579.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.25%)</title><rect x="1137.0" y="643.0" width="26.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.0" y="654.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.25%)</title><rect x="1137.0" y="627.0" width="26.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.0" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.25%)</title><rect x="1137.0" y="611.0" width="26.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.0" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.25%)</title><rect x="1137.0" y="595.0" width="26.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.0" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.25%)</title><rect x="1137.0" y="579.0" width="26.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.0" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.25%)</title><rect x="1137.0" y="563.0" width="26.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.0" y="574.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.69%)</title><rect x="1137.0" y="547.0" width="19.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.69%)</title><rect x="1137.0" y="531.0" width="19.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.69%)</title><rect x="1137.0" y="515.0" width="19.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.69%)</title><rect x="1137.0" y="499.0" width="19.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.69%)</title><rect x="1137.0" y="483.0" width="19.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.12%)</title><rect x="1143.6" y="467.0" width="13.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.12%)</title><rect x="1143.6" y="451.0" width="13.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.12%)</title><rect x="1143.6" y="435.0" width="13.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.12%)</title><rect x="1143.6" y="419.0" width="13.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.12%)</title><rect x="1143.6" y="403.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.56%)</title><rect x="1143.6" y="387.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.6" y="398.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.56%)</title><rect x="1143.6" y="371.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.6" y="382.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.56%)</title><rect x="1143.6" y="355.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.6" y="366.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.56%)</title><rect x="1143.6" y="339.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.6" y="350.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.56%)</title><rect x="1143.6" y="323.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.6" y="334.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.56%)</title><rect x="1143.6" y="307.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.2" y="387.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.2" y="371.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.2" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.2" y="355.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.2" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.2" y="339.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.2" y="323.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.2" y="307.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.2" y="291.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.2" y="275.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.2" y="259.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.2" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.2" y="243.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.2" y="227.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.2" y="211.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.2" y="195.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.2" y="179.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.2" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.2" y="163.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.2" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.2" y="147.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.2" y="131.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.2" y="115.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.2" y="99.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.2" y="83.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.2" y="94.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.56%)</title><rect x="1150.2" y="67.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.2" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.56%)</title><rect x="1150.2" y="51.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.2" y="62.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.56%)</title><rect x="1150.2" y="35.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1156.9" y="547.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1156.9" y="531.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1156.9" y="515.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1156.9" y="499.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1156.9" y="483.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1156.9" y="467.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1156.9" y="451.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.9" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.56%)</title><rect x="1156.9" y="435.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.9" y="446.0"></text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.56%)</title><rect x="1156.9" y="419.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.9" y="430.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 2.25%)</title><rect x="1163.5" y="675.0" width="26.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.5" y="686.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 2.25%)</title><rect x="1163.5" y="659.0" width="26.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.5" y="670.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 2.25%)</title><rect x="1163.5" y="643.0" width="26.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.5" y="654.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.69%)</title><rect x="1163.5" y="627.0" width="19.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.5" y="638.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.12%)</title><rect x="1163.5" y="611.0" width="13.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.5" y="622.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.56%)</title><rect x="1163.5" y="595.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.5" y="606.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.56%)</title><rect x="1163.5" y="579.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.5" y="590.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.56%)</title><rect x="1163.5" y="563.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.5" y="574.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.56%)</title><rect x="1163.5" y="547.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.5" y="558.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.56%)</title><rect x="1163.5" y="531.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.5" y="542.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.56%)</title><rect x="1163.5" y="515.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.5" y="526.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.56%)</title><rect x="1163.5" y="499.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.5" y="510.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.56%)</title><rect x="1163.5" y="483.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.5" y="494.0"></text>
</g>
<g>
<title>StateSplit::state_values_do(ValueVisitor*) (1 samples, 0.56%)</title><rect x="1163.5" y="467.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.5" y="478.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.56%)</title><rect x="1163.5" y="451.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.5" y="462.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.56%)</title><rect x="1170.1" y="595.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="606.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.56%)</title><rect x="1170.1" y="579.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.1" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.56%)</title><rect x="1170.1" y="563.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.1" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.56%)</title><rect x="1170.1" y="547.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.1" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.56%)</title><rect x="1170.1" y="531.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.1" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.56%)</title><rect x="1170.1" y="515.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.1" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.56%)</title><rect x="1170.1" y="499.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.1" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.56%)</title><rect x="1170.1" y="483.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.1" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::args_list_for_profiling(ciMethod*, int&amp;, bool) (1 samples, 0.56%)</title><rect x="1170.1" y="467.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.1" y="478.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.56%)</title><rect x="1170.1" y="451.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.1" y="462.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.56%)</title><rect x="1176.7" y="611.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="622.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.56%)</title><rect x="1176.7" y="595.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="606.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.56%)</title><rect x="1176.7" y="579.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="590.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.56%)</title><rect x="1176.7" y="563.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="574.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.56%)</title><rect x="1176.7" y="547.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="558.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.56%)</title><rect x="1183.4" y="627.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="638.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.56%)</title><rect x="1183.4" y="611.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.4" y="622.0"></text>
</g>
</g>
</svg>
