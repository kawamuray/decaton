<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (1,229 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (282 samples, 22.95%)</title><rect x="10.0" y="851.0" width="270.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="862.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (282 samples, 22.95%)</title><rect x="10.0" y="835.0" width="270.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.41%)</title><rect x="10.0" y="819.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.41%)</title><rect x="10.0" y="803.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1365203770.accept (5 samples, 0.41%)</title><rect x="10.0" y="787.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.41%)</title><rect x="10.0" y="771.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.08%)</title><rect x="10.0" y="755.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.33%)</title><rect x="11.0" y="755.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.33%)</title><rect x="11.0" y="739.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.24%)</title><rect x="14.8" y="819.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.24%)</title><rect x="14.8" y="803.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.24%)</title><rect x="14.8" y="787.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.24%)</title><rect x="14.8" y="771.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.24%)</title><rect x="14.8" y="755.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.24%)</title><rect x="14.8" y="739.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.24%)</title><rect x="14.8" y="723.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="734.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="14.8" y="707.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="17.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="15.8" y="707.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="15.8" y="691.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="15.8" y="675.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/446476556.test (1 samples, 0.08%)</title><rect x="15.8" y="659.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="16.7" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="16.7" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="16.7" y="675.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="16.7" y="659.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$179/1322804963.get (1 samples, 0.08%)</title><rect x="16.7" y="643.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 0.24%)</title><rect x="17.7" y="819.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (3 samples, 0.24%)</title><rect x="17.7" y="803.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="18.6" y="787.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="18.6" y="771.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="19.6" y="755.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="19.6" y="739.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="19.6" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="19.6" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="19.6" y="691.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="19.6" y="675.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="19.6" y="659.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$179/1322804963.get (1 samples, 0.08%)</title><rect x="19.6" y="643.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.16%)</title><rect x="20.6" y="819.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.6" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="21.5" y="803.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="24.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (196 samples, 15.95%)</title><rect x="22.5" y="819.0" width="188.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.5" y="830.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1786038257.accept (190 samples, 15.46%)</title><rect x="22.5" y="803.0" width="182.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.5" y="814.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$41 (190 samples, 15.46%)</title><rect x="22.5" y="787.0" width="182.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.5" y="798.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.08%)</title><rect x="22.5" y="771.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (161 samples, 13.10%)</title><rect x="23.4" y="771.0" width="154.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.4" y="782.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (161 samples, 13.10%)</title><rect x="23.4" y="755.0" width="154.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.4" y="766.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (161 samples, 13.10%)</title><rect x="23.4" y="739.0" width="154.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.4" y="750.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (161 samples, 13.10%)</title><rect x="23.4" y="723.0" width="154.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.4" y="734.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (161 samples, 13.10%)</title><rect x="23.4" y="707.0" width="154.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.4" y="718.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (161 samples, 13.10%)</title><rect x="23.4" y="691.0" width="154.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.4" y="702.0">java/util/concurrent..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="23.4" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="26.4" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="23.4" y="659.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="26.4" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="23.4" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="26.4" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="23.4" y="627.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="26.4" y="638.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="23.4" y="611.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="26.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (105 samples, 8.54%)</title><rect x="24.4" y="675.0" width="100.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.4" y="686.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.30%)</title><rect x="24.4" y="659.0" width="15.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.30%)</title><rect x="24.4" y="643.0" width="15.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 0.90%)</title><rect x="29.2" y="627.0" width="10.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (10 samples, 0.81%)</title><rect x="30.2" y="611.0" width="9.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.73%)</title><rect x="39.8" y="659.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.73%)</title><rect x="39.8" y="643.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.24%)</title><rect x="44.6" y="627.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.6" y="638.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.24%)</title><rect x="44.6" y="611.0" width="2.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="47.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="47.4" y="627.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="50.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (80 samples, 6.51%)</title><rect x="48.4" y="659.0" width="76.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="51.4" y="670.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (80 samples, 6.51%)</title><rect x="48.4" y="643.0" width="76.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.4" y="654.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 6.43%)</title><rect x="48.4" y="627.0" width="75.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.4" y="638.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 6.43%)</title><rect x="48.4" y="611.0" width="75.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.4" y="622.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (79 samples, 6.43%)</title><rect x="48.4" y="595.0" width="75.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.4" y="606.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (70 samples, 5.70%)</title><rect x="48.4" y="579.0" width="67.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="51.4" y="590.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.24%)</title><rect x="50.3" y="563.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="53.3" y="574.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="53.2" y="563.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="56.2" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="54.2" y="563.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="57.2" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 3.42%)</title><rect x="55.1" y="563.0" width="40.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="58.1" y="574.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.41%)</title><rect x="95.5" y="563.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="98.5" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.30%)</title><rect x="100.3" y="563.0" width="15.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="103.3" y="574.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.49%)</title><rect x="115.6" y="579.0" width="5.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="118.6" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="121.4" y="579.0" width="1.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="124.4" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="123.3" y="579.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="126.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="124.3" y="627.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (36 samples, 2.93%)</title><rect x="125.2" y="675.0" width="34.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.2" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (36 samples, 2.93%)</title><rect x="125.2" y="659.0" width="34.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.2" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (36 samples, 2.93%)</title><rect x="125.2" y="643.0" width="34.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="128.2" y="654.0">ja..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="157.9" y="627.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="160.9" y="638.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="158.8" y="627.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="161.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (17 samples, 1.38%)</title><rect x="159.8" y="675.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="162.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (16 samples, 1.30%)</title><rect x="159.8" y="659.0" width="15.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="162.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 1.30%)</title><rect x="159.8" y="643.0" width="15.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.8" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="169.4" y="627.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="172.4" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="169.4" y="611.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="172.4" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="169.4" y="595.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="172.4" y="606.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="169.4" y="579.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="172.4" y="590.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="169.4" y="563.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="172.4" y="574.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.41%)</title><rect x="170.3" y="627.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="173.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.08%)</title><rect x="175.1" y="659.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="178.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="175.1" y="643.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.16%)</title><rect x="176.1" y="675.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.16%)</title><rect x="176.1" y="659.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.16%)</title><rect x="176.1" y="643.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.16%)</title><rect x="176.1" y="627.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.16%)</title><rect x="178.0" y="771.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.16%)</title><rect x="178.0" y="755.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.41%)</title><rect x="179.9" y="771.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.41%)</title><rect x="179.9" y="755.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="182.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.41%)</title><rect x="179.9" y="739.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (21 samples, 1.71%)</title><rect x="184.7" y="771.0" width="20.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="187.7" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="184.7" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="187.7" y="766.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (19 samples, 1.55%)</title><rect x="185.7" y="755.0" width="18.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.7" y="766.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="199.1" y="739.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="202.1" y="750.0"></text>
</g>
<g>
<title>PtrQueueSet::enqueue_complete_buffer(void**, unsigned long) (1 samples, 0.08%)</title><rect x="199.1" y="723.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="202.1" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="199.1" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="202.1" y="718.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="199.1" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="202.1" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.24%)</title><rect x="200.1" y="739.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.16%)</title><rect x="200.1" y="723.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.1" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.08%)</title><rect x="202.0" y="723.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.0" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="203.0" y="739.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="206.0" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="203.9" y="755.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="206.9" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="204.9" y="803.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="207.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.33%)</title><rect x="205.9" y="803.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.33%)</title><rect x="205.9" y="787.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.33%)</title><rect x="205.9" y="771.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.33%)</title><rect x="205.9" y="755.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.9" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.24%)</title><rect x="206.8" y="739.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="209.7" y="803.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="212.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="209.7" y="787.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (73 samples, 5.94%)</title><rect x="210.7" y="819.0" width="70.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.7" y="830.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (73 samples, 5.94%)</title><rect x="210.7" y="803.0" width="70.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.7" y="814.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (43 samples, 3.50%)</title><rect x="211.6" y="787.0" width="41.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="214.6" y="798.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (43 samples, 3.50%)</title><rect x="211.6" y="771.0" width="41.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.6" y="782.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (42 samples, 3.42%)</title><rect x="211.6" y="755.0" width="40.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.6" y="766.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (40 samples, 3.25%)</title><rect x="211.6" y="739.0" width="38.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.6" y="750.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (40 samples, 3.25%)</title><rect x="211.6" y="723.0" width="38.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="214.6" y="734.0">org..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="213.5" y="707.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="216.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.30%)</title><rect x="214.5" y="707.0" width="15.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (12 samples, 0.98%)</title><rect x="218.3" y="691.0" width="11.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (11 samples, 0.90%)</title><rect x="219.3" y="675.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (11 samples, 0.90%)</title><rect x="219.3" y="659.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (11 samples, 0.90%)</title><rect x="219.3" y="643.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (11 samples, 0.90%)</title><rect x="219.3" y="627.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.81%)</title><rect x="219.3" y="611.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.81%)</title><rect x="219.3" y="595.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.08%)</title><rect x="228.9" y="611.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="231.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$PureJavaChecksumFactory.create (1 samples, 0.08%)</title><rect x="228.9" y="595.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.08%)</title><rect x="228.9" y="579.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (21 samples, 1.71%)</title><rect x="229.9" y="707.0" width="20.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (21 samples, 1.71%)</title><rect x="229.9" y="691.0" width="20.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (21 samples, 1.71%)</title><rect x="229.9" y="675.0" width="20.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.9" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (21 samples, 1.71%)</title><rect x="229.9" y="659.0" width="20.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.9" y="670.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (9 samples, 0.73%)</title><rect x="241.4" y="643.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.4" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="246.2" y="627.0" width="3.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="249.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="250.0" y="739.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="250.0" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="250.0" y="707.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="250.0" y="691.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="251.0" y="739.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="251.0" y="723.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="251.0" y="707.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="251.0" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="251.0" y="675.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="251.0" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="251.0" y="643.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.08%)</title><rect x="251.0" y="627.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="252.0" y="755.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (11 samples, 0.90%)</title><rect x="252.9" y="787.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (11 samples, 0.90%)</title><rect x="252.9" y="771.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.73%)</title><rect x="252.9" y="755.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.9" y="766.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.33%)</title><rect x="252.9" y="739.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1682512408.accept (4 samples, 0.33%)</title><rect x="252.9" y="723.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (4 samples, 0.33%)</title><rect x="252.9" y="707.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.16%)</title><rect x="252.9" y="691.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.16%)</title><rect x="252.9" y="675.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="255.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (2 samples, 0.16%)</title><rect x="252.9" y="659.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.9" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="252.9" y="643.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="252.9" y="627.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.9" y="638.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.08%)</title><rect x="253.9" y="643.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.9" y="654.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.08%)</title><rect x="253.9" y="627.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.16%)</title><rect x="254.8" y="691.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="255.8" y="675.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="255.8" y="659.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.8" y="670.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="255.8" y="643.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="258.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="255.8" y="627.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="256.8" y="739.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="256.8" y="723.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="256.8" y="707.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="256.8" y="691.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="256.8" y="675.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.8" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="256.8" y="659.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="259.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="256.8" y="643.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="256.8" y="627.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.24%)</title><rect x="257.7" y="739.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.24%)</title><rect x="257.7" y="723.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.7" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.24%)</title><rect x="257.7" y="707.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.7" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.08%)</title><rect x="257.7" y="691.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.16%)</title><rect x="258.7" y="691.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.16%)</title><rect x="258.7" y="675.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="259.6" y="659.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.08%)</title><rect x="259.6" y="643.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="260.6" y="739.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="260.6" y="723.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="260.6" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="260.6" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="260.6" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="260.6" y="659.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.16%)</title><rect x="261.6" y="755.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.16%)</title><rect x="261.6" y="739.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="261.6" y="723.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.16%)</title><rect x="261.6" y="707.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.16%)</title><rect x="261.6" y="691.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="261.6" y="675.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="261.6" y="659.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.16%)</title><rect x="261.6" y="643.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="264.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="261.6" y="627.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="262.5" y="627.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.5" y="638.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="262.5" y="611.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="265.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="263.5" y="787.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="263.5" y="771.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="263.5" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="263.5" y="739.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="263.5" y="723.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.08%)</title><rect x="263.5" y="707.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.41%)</title><rect x="264.4" y="787.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.33%)</title><rect x="264.4" y="771.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="264.4" y="755.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="264.4" y="739.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.08%)</title><rect x="264.4" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.08%)</title><rect x="264.4" y="707.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="267.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.08%)</title><rect x="264.4" y="691.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="267.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.08%)</title><rect x="264.4" y="675.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.4" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="264.4" y="659.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.4" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="264.4" y="643.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="264.4" y="627.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="267.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.24%)</title><rect x="265.4" y="755.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="268.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="265.4" y="739.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="265.4" y="723.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="265.4" y="707.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.08%)</title><rect x="265.4" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="265.4" y="675.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="265.4" y="659.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.4" y="670.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="265.4" y="643.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="268.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.08%)</title><rect x="266.4" y="739.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.08%)</title><rect x="266.4" y="723.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.4" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="266.4" y="707.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="269.4" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="266.4" y="691.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="269.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="267.3" y="739.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="267.3" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.3" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="267.3" y="707.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="270.3" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="267.3" y="691.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="270.3" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.08%)</title><rect x="267.3" y="675.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="267.3" y="659.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="267.3" y="643.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="267.3" y="627.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="268.3" y="771.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="268.3" y="755.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="268.3" y="739.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="268.3" y="723.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="268.3" y="707.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="268.3" y="691.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="268.3" y="675.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="268.3" y="659.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="268.3" y="643.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.08%)</title><rect x="268.3" y="627.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="268.3" y="611.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.08%)</title><rect x="268.3" y="595.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.08%)</title><rect x="268.3" y="579.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.08%)</title><rect x="268.3" y="563.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.08%)</title><rect x="268.3" y="547.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (9 samples, 0.73%)</title><rect x="269.2" y="787.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (8 samples, 0.65%)</title><rect x="270.2" y="771.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.2" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="270.2" y="755.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.2" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.&lt;init&gt; (1 samples, 0.08%)</title><rect x="270.2" y="739.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="270.2" y="723.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="271.2" y="755.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="271.2" y="739.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="271.2" y="723.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="271.2" y="707.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="271.2" y="691.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (5 samples, 0.41%)</title><rect x="272.1" y="755.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="273.1" y="739.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.08%)</title><rect x="274.0" y="739.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.08%)</title><rect x="274.0" y="723.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="277.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.08%)</title><rect x="274.0" y="707.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.08%)</title><rect x="274.0" y="691.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="277.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.16%)</title><rect x="275.0" y="739.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="275.0" y="723.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="275.0" y="707.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="278.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="275.0" y="691.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="275.0" y="675.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="275.0" y="659.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.0" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="275.0" y="643.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.0" y="654.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.16%)</title><rect x="275.0" y="627.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.16%)</title><rect x="275.0" y="611.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="275.0" y="595.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="278.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="275.0" y="579.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="278.0" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="275.0" y="563.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="278.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/1355828895.test (1 samples, 0.08%)</title><rect x="276.0" y="579.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.08%)</title><rect x="276.0" y="563.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/1923822637.test (1 samples, 0.08%)</title><rect x="276.0" y="547.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.08%)</title><rect x="276.0" y="531.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="276.0" y="515.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="276.0" y="499.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="276.0" y="483.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.trace (1 samples, 0.08%)</title><rect x="276.9" y="755.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (3 samples, 0.24%)</title><rect x="277.9" y="787.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.24%)</title><rect x="277.9" y="771.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="279.8" y="755.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="279.8" y="739.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="279.8" y="723.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="279.8" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.8" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (752 samples, 61.19%)</title><rect x="280.8" y="851.0" width="722.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.8" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (752 samples, 61.19%)</title><rect x="280.8" y="835.0" width="722.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="283.8" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (752 samples, 61.19%)</title><rect x="280.8" y="819.0" width="722.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.8" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1830741354.run (532 samples, 43.29%)</title><rect x="280.8" y="803.0" width="510.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.8" y="814.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/18307..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$39 (532 samples, 43.29%)</title><rect x="280.8" y="787.0" width="510.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.8" y="798.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$39</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (532 samples, 43.29%)</title><rect x="280.8" y="771.0" width="510.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.8" y="782.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="286.5" y="755.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="289.5" y="766.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="286.5" y="739.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="289.5" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.81%)</title><rect x="287.5" y="755.0" width="9.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="290.5" y="766.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="292.3" y="739.0" width="4.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="295.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (498 samples, 40.52%)</title><rect x="297.1" y="755.0" width="478.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="300.1" y="766.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (2 samples, 0.16%)</title><rect x="305.7" y="739.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (2 samples, 0.16%)</title><rect x="305.7" y="723.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$195/227753105.get (2 samples, 0.16%)</title><rect x="305.7" y="707.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.16%)</title><rect x="305.7" y="691.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.7" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="305.7" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="308.7" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="306.7" y="675.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="309.7" y="686.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.08%)</title><rect x="306.7" y="659.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="309.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (167 samples, 13.59%)</title><rect x="307.6" y="739.0" width="160.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.6" y="750.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (167 samples, 13.59%)</title><rect x="307.6" y="723.0" width="160.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.6" y="734.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (167 samples, 13.59%)</title><rect x="307.6" y="707.0" width="160.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.6" y="718.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 13.59%)</title><rect x="307.6" y="691.0" width="160.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.6" y="702.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 13.59%)</title><rect x="307.6" y="675.0" width="160.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="310.6" y="686.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (167 samples, 13.59%)</title><rect x="307.6" y="659.0" width="160.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.6" y="670.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (42 samples, 3.42%)</title><rect x="307.6" y="643.0" width="40.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.6" y="654.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.65%)</title><rect x="307.6" y="627.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.65%)</title><rect x="307.6" y="611.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="310.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (4 samples, 0.33%)</title><rect x="307.6" y="595.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.33%)</title><rect x="311.5" y="595.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="312.4" y="579.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="312.4" y="563.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="315.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="312.4" y="547.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.08%)</title><rect x="314.4" y="579.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (34 samples, 2.77%)</title><rect x="315.3" y="627.0" width="32.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="318.3" y="638.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (34 samples, 2.77%)</title><rect x="315.3" y="611.0" width="32.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.3" y="622.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="315.3" y="595.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="318.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.08%)</title><rect x="315.3" y="579.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="318.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (17 samples, 1.38%)</title><rect x="316.3" y="595.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.3" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="318.2" y="579.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="321.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (4 samples, 0.33%)</title><rect x="319.2" y="579.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="322.2" y="590.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.33%)</title><rect x="319.2" y="563.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="322.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (3 samples, 0.24%)</title><rect x="323.0" y="579.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="326.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.08%)</title><rect x="325.9" y="579.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (2 samples, 0.16%)</title><rect x="326.8" y="579.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.16%)</title><rect x="328.8" y="579.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.8" y="590.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (2 samples, 0.16%)</title><rect x="330.7" y="579.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (8 samples, 0.65%)</title><rect x="332.6" y="595.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.24%)</title><rect x="337.4" y="579.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="340.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.24%)</title><rect x="337.4" y="563.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (8 samples, 0.65%)</title><rect x="340.3" y="595.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="343.2" y="579.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="346.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (4 samples, 0.33%)</title><rect x="344.1" y="579.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="347.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (114 samples, 9.28%)</title><rect x="348.0" y="643.0" width="109.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="351.0" y="654.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.49%)</title><rect x="348.0" y="627.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="351.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.49%)</title><rect x="348.0" y="611.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="351.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.41%)</title><rect x="348.0" y="595.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="351.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.24%)</title><rect x="348.0" y="579.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="351.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.16%)</title><rect x="350.8" y="579.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.08%)</title><rect x="352.8" y="595.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.08%)</title><rect x="352.8" y="579.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.41%)</title><rect x="353.7" y="627.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.41%)</title><rect x="353.7" y="611.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="357.6" y="595.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="360.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 1.06%)</title><rect x="358.5" y="627.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="361.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.81%)</title><rect x="360.4" y="611.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.73%)</title><rect x="360.4" y="595.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.57%)</title><rect x="362.4" y="579.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.4" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="366.2" y="563.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="369.2" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="366.2" y="547.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="369.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="366.2" y="531.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="369.2" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="366.2" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="369.2" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="366.2" y="499.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="369.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="367.2" y="563.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="370.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="369.1" y="595.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="372.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="370.0" y="611.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="373.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.73%)</title><rect x="371.0" y="627.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (9 samples, 0.73%)</title><rect x="371.0" y="611.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (9 samples, 0.73%)</title><rect x="371.0" y="595.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.24%)</title><rect x="372.9" y="579.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="375.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 0.33%)</title><rect x="375.8" y="579.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.33%)</title><rect x="375.8" y="563.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="378.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (81 samples, 6.59%)</title><rect x="379.7" y="627.0" width="77.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.7" y="638.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 1.87%)</title><rect x="379.7" y="611.0" width="22.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.7" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.65%)</title><rect x="379.7" y="595.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="382.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.65%)</title><rect x="379.7" y="579.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.65%)</title><rect x="379.7" y="563.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (12 samples, 0.98%)</title><rect x="387.3" y="595.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="390.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="398.9" y="595.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="401.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="398.9" y="579.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.16%)</title><rect x="399.8" y="595.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="402.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (58 samples, 4.72%)</title><rect x="401.7" y="611.0" width="55.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="404.7" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (58 samples, 4.72%)</title><rect x="401.7" y="595.0" width="55.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.7" y="606.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (56 samples, 4.56%)</title><rect x="402.7" y="579.0" width="53.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="405.7" y="590.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 1.87%)</title><rect x="407.5" y="563.0" width="22.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="410.5" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (13 samples, 1.06%)</title><rect x="411.3" y="547.0" width="12.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="414.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (13 samples, 1.06%)</title><rect x="411.3" y="531.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (13 samples, 1.06%)</title><rect x="411.3" y="515.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="414.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (11 samples, 0.90%)</title><rect x="413.3" y="499.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="416.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (9 samples, 0.73%)</title><rect x="415.2" y="483.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.16%)</title><rect x="421.9" y="467.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="424.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.16%)</title><rect x="421.9" y="451.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="424.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.24%)</title><rect x="423.8" y="547.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="426.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.24%)</title><rect x="426.7" y="547.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.24%)</title><rect x="426.7" y="531.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="429.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="427.7" y="515.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="430.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (12 samples, 0.98%)</title><rect x="429.6" y="563.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (12 samples, 0.98%)</title><rect x="429.6" y="547.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (12 samples, 0.98%)</title><rect x="429.6" y="531.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (12 samples, 0.98%)</title><rect x="429.6" y="515.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="432.6" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (12 samples, 0.98%)</title><rect x="429.6" y="499.0" width="11.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="432.6" y="510.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.73%)</title><rect x="430.5" y="483.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.5" y="494.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (2 samples, 0.16%)</title><rect x="437.3" y="467.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.3" y="478.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (2 samples, 0.16%)</title><rect x="439.2" y="483.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.57%)</title><rect x="441.1" y="563.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="444.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.57%)</title><rect x="441.1" y="547.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.57%)</title><rect x="441.1" y="531.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="444.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.16%)</title><rect x="445.9" y="515.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="448.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (9 samples, 0.73%)</title><rect x="447.8" y="563.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="450.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="455.5" y="547.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.5" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="455.5" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="458.5" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="455.5" y="515.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="458.5" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="455.5" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="458.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (1 samples, 0.08%)</title><rect x="456.5" y="579.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="459.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.90%)</title><rect x="457.4" y="643.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.90%)</title><rect x="457.4" y="627.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="460.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.90%)</title><rect x="457.4" y="611.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="460.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 0.90%)</title><rect x="457.4" y="595.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="460.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.57%)</title><rect x="461.3" y="579.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (297 samples, 24.17%)</title><rect x="468.0" y="739.0" width="285.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.0" y="750.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (53 samples, 4.31%)</title><rect x="468.9" y="723.0" width="50.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="471.9" y="734.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (52 samples, 4.23%)</title><rect x="469.9" y="707.0" width="49.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.9" y="718.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (51 samples, 4.15%)</title><rect x="470.9" y="691.0" width="48.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.9" y="702.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 0.98%)</title><rect x="476.6" y="675.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 0.98%)</title><rect x="476.6" y="659.0" width="11.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="479.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 0.98%)</title><rect x="476.6" y="643.0" width="11.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.6" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 0.98%)</title><rect x="476.6" y="627.0" width="11.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.6" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (12 samples, 0.98%)</title><rect x="476.6" y="611.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.6" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (16 samples, 1.30%)</title><rect x="488.1" y="675.0" width="15.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (16 samples, 1.30%)</title><rect x="488.1" y="659.0" width="15.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="491.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (16 samples, 1.30%)</title><rect x="488.1" y="643.0" width="15.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.24%)</title><rect x="500.6" y="627.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="503.6" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (17 samples, 1.38%)</title><rect x="503.5" y="675.0" width="16.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="506.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 0.90%)</title><rect x="509.3" y="659.0" width="10.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="512.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 0.90%)</title><rect x="509.3" y="643.0" width="10.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="512.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.16%)</title><rect x="516.9" y="627.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="519.9" y="638.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="518.9" y="627.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="521.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.41%)</title><rect x="519.8" y="723.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="522.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.41%)</title><rect x="519.8" y="707.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="522.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.41%)</title><rect x="519.8" y="691.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="522.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (171 samples, 13.91%)</title><rect x="524.6" y="723.0" width="164.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="527.6" y="734.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (171 samples, 13.91%)</title><rect x="524.6" y="707.0" width="164.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="527.6" y="718.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="525.6" y="691.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="528.6" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="526.6" y="691.0" width="4.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="529.6" y="702.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="528.5" y="675.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="531.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="531.4" y="691.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="534.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (63 samples, 5.13%)</title><rect x="532.3" y="691.0" width="60.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="535.3" y="702.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (42 samples, 3.42%)</title><rect x="543.8" y="675.0" width="40.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.8" y="686.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 3.25%)</title><rect x="545.8" y="659.0" width="38.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="548.8" y="670.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (28 samples, 2.28%)</title><rect x="547.7" y="643.0" width="26.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="550.7" y="654.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (28 samples, 2.28%)</title><rect x="547.7" y="627.0" width="26.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="550.7" y="638.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (28 samples, 2.28%)</title><rect x="547.7" y="611.0" width="26.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="550.7" y="622.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.81%)</title><rect x="559.2" y="595.0" width="9.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="562.2" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.16%)</title><rect x="562.1" y="579.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="565.1" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="562.1" y="563.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="565.1" y="574.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.16%)</title><rect x="562.1" y="547.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="565.1" y="558.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="563.0" y="531.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="566.0" y="542.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="564.0" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="567.0" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.33%)</title><rect x="565.0" y="579.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="568.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.33%)</title><rect x="565.0" y="563.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="568.0" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="565.9" y="547.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="568.9" y="558.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="566.9" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="569.9" y="558.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="567.8" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="570.8" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="567.8" y="531.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="570.8" y="542.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.08%)</title><rect x="567.8" y="515.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="570.8" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="568.8" y="595.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="571.8" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.41%)</title><rect x="569.8" y="595.0" width="4.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="572.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.57%)</title><rect x="574.6" y="643.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="577.6" y="654.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="581.3" y="643.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="584.3" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="582.2" y="643.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="585.2" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="583.2" y="643.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="586.2" y="654.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.24%)</title><rect x="584.2" y="675.0" width="2.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="587.2" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.49%)</title><rect x="587.0" y="675.0" width="5.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="590.0" y="686.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.57%)</title><rect x="592.8" y="691.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="595.8" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.57%)</title><rect x="592.8" y="675.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="595.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.57%)</title><rect x="592.8" y="659.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="595.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="598.6" y="643.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="601.6" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (93 samples, 7.57%)</title><rect x="599.5" y="691.0" width="89.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="602.5" y="702.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (83 samples, 6.75%)</title><rect x="608.2" y="675.0" width="79.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="611.2" y="686.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (17 samples, 1.38%)</title><rect x="615.8" y="659.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="618.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (17 samples, 1.38%)</title><rect x="615.8" y="643.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="618.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (17 samples, 1.38%)</title><rect x="615.8" y="627.0" width="16.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (17 samples, 1.38%)</title><rect x="615.8" y="611.0" width="16.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="618.8" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (17 samples, 1.38%)</title><rect x="615.8" y="595.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="618.8" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="632.2" y="659.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="635.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="632.2" y="643.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="635.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="632.2" y="627.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="635.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="632.2" y="611.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="635.2" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (57 samples, 4.64%)</title><rect x="633.1" y="659.0" width="54.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="636.1" y="670.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (48 samples, 3.91%)</title><rect x="641.8" y="643.0" width="46.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="644.8" y="654.0">java..</text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.49%)</title><rect x="646.6" y="627.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="649.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.49%)</title><rect x="646.6" y="611.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="649.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 3.01%)</title><rect x="652.3" y="627.0" width="35.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="655.3" y="638.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.16%)</title><rect x="671.5" y="611.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="674.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.73%)</title><rect x="673.4" y="611.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="676.4" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="679.2" y="595.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="682.2" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="680.2" y="595.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="683.2" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="680.2" y="579.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="683.2" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="680.2" y="563.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="683.2" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="680.2" y="547.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="683.2" y="558.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.16%)</title><rect x="680.2" y="531.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="683.2" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="680.2" y="515.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="683.2" y="526.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.08%)</title><rect x="681.1" y="515.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="684.1" y="526.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.49%)</title><rect x="682.1" y="611.0" width="5.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="685.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.08%)</title><rect x="687.9" y="675.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="690.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (52 samples, 4.23%)</title><rect x="688.8" y="723.0" width="49.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="691.8" y="734.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (51 samples, 4.15%)</title><rect x="689.8" y="707.0" width="48.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="692.8" y="718.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="690.7" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="693.7" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="690.7" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="693.7" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="690.7" y="659.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="693.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1550067413.process (21 samples, 1.71%)</title><rect x="691.7" y="691.0" width="20.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="694.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (18 samples, 1.46%)</title><rect x="693.6" y="675.0" width="17.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="696.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (15 samples, 1.22%)</title><rect x="693.6" y="659.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="696.6" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="694.6" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="697.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="694.6" y="627.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="697.6" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.24%)</title><rect x="695.5" y="643.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="698.5" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.24%)</title><rect x="695.5" y="627.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.5" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.24%)</title><rect x="695.5" y="611.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="698.5" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.24%)</title><rect x="695.5" y="595.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="698.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.24%)</title><rect x="695.5" y="579.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="698.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="697.5" y="563.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="700.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.41%)</title><rect x="698.4" y="643.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="701.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="699.4" y="627.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="702.4" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="699.4" y="611.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="702.4" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.24%)</title><rect x="700.3" y="627.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="703.3" y="638.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="700.3" y="611.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="703.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="703.2" y="643.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="706.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.24%)</title><rect x="708.0" y="659.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="711.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.24%)</title><rect x="708.0" y="643.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="711.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.24%)</title><rect x="708.0" y="627.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="711.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.24%)</title><rect x="708.0" y="611.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="711.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="710.9" y="675.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="713.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.41%)</title><rect x="711.9" y="691.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="714.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.41%)</title><rect x="711.9" y="675.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="714.9" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (9 samples, 0.73%)</title><rect x="716.7" y="691.0" width="8.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="719.7" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (9 samples, 0.73%)</title><rect x="716.7" y="675.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="719.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1523122822.get$Lambda (9 samples, 0.73%)</title><rect x="716.7" y="659.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="719.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1523122822.&lt;init&gt; (8 samples, 0.65%)</title><rect x="717.6" y="643.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="720.6" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.57%)</title><rect x="725.3" y="691.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="728.3" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.49%)</title><rect x="726.3" y="675.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="729.3" y="686.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.24%)</title><rect x="727.2" y="659.0" width="2.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="730.2" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.16%)</title><rect x="730.1" y="659.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="733.1" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.57%)</title><rect x="732.0" y="691.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="735.0" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.08%)</title><rect x="733.9" y="675.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.9" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="733.9" y="659.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="736.9" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="733.9" y="643.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="736.9" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="733.9" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="736.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="733.9" y="611.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="736.9" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.33%)</title><rect x="734.9" y="675.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="737.9" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="736.8" y="659.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="739.8" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="736.8" y="643.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="739.8" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="736.8" y="627.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="739.8" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="737.8" y="611.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="740.8" y="622.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="737.8" y="595.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="740.8" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="737.8" y="579.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="740.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.22%)</title><rect x="738.7" y="723.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="741.7" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.57%)</title><rect x="740.7" y="707.0" width="6.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="743.7" y="718.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.49%)</title><rect x="741.6" y="691.0" width="5.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="744.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.49%)</title><rect x="747.4" y="707.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="750.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.49%)</title><rect x="747.4" y="691.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="750.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/2143916011.accept (6 samples, 0.49%)</title><rect x="747.4" y="675.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="750.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (6 samples, 0.49%)</title><rect x="747.4" y="659.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="750.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="747.4" y="643.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="750.4" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="747.4" y="627.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="750.4" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="747.4" y="611.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="750.4" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="747.4" y="595.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="750.4" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="747.4" y="579.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="750.4" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="747.4" y="563.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="750.4" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="747.4" y="547.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="750.4" y="558.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="747.4" y="531.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="750.4" y="542.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.08%)</title><rect x="747.4" y="515.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="750.4" y="526.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 0.41%)</title><rect x="748.3" y="643.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="751.3" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 0.41%)</title><rect x="748.3" y="627.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="751.3" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="751.2" y="611.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="754.2" y="622.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="751.2" y="595.0" width="1.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="754.2" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (2 samples, 0.16%)</title><rect x="753.1" y="739.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="756.1" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (2 samples, 0.16%)</title><rect x="753.1" y="723.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="756.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1964770011.get$Lambda (2 samples, 0.16%)</title><rect x="753.1" y="707.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="756.1" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="753.1" y="691.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="756.1" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="753.1" y="675.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="756.1" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="753.1" y="659.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="756.1" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="754.1" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="757.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.06%)</title><rect x="755.1" y="739.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="758.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.90%)</title><rect x="757.0" y="723.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="760.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.81%)</title><rect x="757.0" y="707.0" width="9.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="760.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/2143916011.accept (1 samples, 0.08%)</title><rect x="757.0" y="691.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.08%)</title><rect x="757.0" y="675.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.0" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.08%)</title><rect x="757.0" y="659.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.0" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.08%)</title><rect x="757.0" y="643.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="760.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1964770011.accept (9 samples, 0.73%)</title><rect x="757.9" y="691.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (9 samples, 0.73%)</title><rect x="757.9" y="675.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/249651679.complete (9 samples, 0.73%)</title><rect x="757.9" y="659.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="760.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (9 samples, 0.73%)</title><rect x="757.9" y="643.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="760.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (9 samples, 0.73%)</title><rect x="757.9" y="627.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="760.9" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.73%)</title><rect x="757.9" y="611.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.9" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.73%)</title><rect x="757.9" y="595.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="760.9" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (9 samples, 0.73%)</title><rect x="757.9" y="579.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="760.9" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (9 samples, 0.73%)</title><rect x="757.9" y="563.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="760.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="766.6" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="769.6" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.65%)</title><rect x="767.5" y="739.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.5" y="750.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.49%)</title><rect x="769.5" y="723.0" width="5.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="772.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (17 samples, 1.38%)</title><rect x="775.2" y="755.0" width="16.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="778.2" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.65%)</title><rect x="781.0" y="739.0" width="7.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="784.0" y="750.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.65%)</title><rect x="781.0" y="723.0" width="7.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="784.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (3 samples, 0.24%)</title><rect x="788.7" y="739.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="791.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (220 samples, 17.90%)</title><rect x="791.5" y="803.0" width="211.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="794.5" y="814.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (219 samples, 17.82%)</title><rect x="792.5" y="787.0" width="210.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.5" y="798.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (199 samples, 16.19%)</title><rect x="793.5" y="771.0" width="191.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="796.5" y="782.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (30 samples, 2.44%)</title><rect x="800.2" y="755.0" width="28.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="803.2" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.33%)</title><rect x="829.0" y="755.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="832.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.33%)</title><rect x="829.0" y="739.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="832.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.33%)</title><rect x="829.0" y="723.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="832.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.33%)</title><rect x="829.0" y="707.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="832.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (158 samples, 12.86%)</title><rect x="832.8" y="755.0" width="151.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="835.8" y="766.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (158 samples, 12.86%)</title><rect x="832.8" y="739.0" width="151.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="835.8" y="750.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (4 samples, 0.33%)</title><rect x="835.7" y="723.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="838.7" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park (148 samples, 12.04%)</title><rect x="839.6" y="723.0" width="142.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="842.6" y="734.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="841.5" y="707.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="844.5" y="718.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.08%)</title><rect x="843.4" y="707.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="846.4" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.95%)</title><rect x="844.4" y="707.0" width="23.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="847.4" y="718.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.33%)</title><rect x="853.0" y="691.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="856.0" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.16%)</title><rect x="854.9" y="675.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="857.9" y="686.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.24%)</title><rect x="856.8" y="691.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="859.8" y="702.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="859.7" y="691.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="862.7" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.49%)</title><rect x="861.6" y="691.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="864.6" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="867.4" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="870.4" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.33%)</title><rect x="868.4" y="707.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="871.4" y="718.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.90%)</title><rect x="872.2" y="707.0" width="10.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="875.2" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 2.69%)</title><rect x="882.8" y="707.0" width="31.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="885.8" y="718.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (54 samples, 4.39%)</title><rect x="914.4" y="707.0" width="51.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="917.4" y="718.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.65%)</title><rect x="966.3" y="707.0" width="7.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="969.3" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="974.0" y="707.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="977.0" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.24%)</title><rect x="974.9" y="707.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="977.9" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="977.8" y="707.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="980.8" y="718.0"></text>
</g>
<g>
<title>_init (2 samples, 0.16%)</title><rect x="979.7" y="707.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="982.7" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="981.7" y="723.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="984.7" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="983.6" y="723.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.08%)</title><rect x="984.5" y="771.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="987.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.08%)</title><rect x="984.5" y="755.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="987.5" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="984.5" y="739.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="987.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 1.46%)</title><rect x="985.5" y="771.0" width="17.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="988.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.46%)</title><rect x="985.5" y="755.0" width="17.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="988.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.46%)</title><rect x="985.5" y="739.0" width="17.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="988.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 1.46%)</title><rect x="985.5" y="723.0" width="17.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="988.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1002.8" y="851.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1005.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1002.8" y="835.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1005.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1002.8" y="819.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1005.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.08%)</title><rect x="1002.8" y="803.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1005.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.08%)</title><rect x="1002.8" y="787.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1005.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.08%)</title><rect x="1002.8" y="771.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1005.8" y="782.0"></text>
</g>
<g>
<title>start_thread (194 samples, 15.79%)</title><rect x="1003.7" y="851.0" width="186.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1006.7" y="862.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (194 samples, 15.79%)</title><rect x="1003.7" y="835.0" width="186.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1006.7" y="846.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (39 samples, 3.17%)</title><rect x="1003.7" y="819.0" width="37.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1006.7" y="830.0">Gan..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (10 samples, 0.81%)</title><rect x="1003.7" y="803.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1006.7" y="814.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 0.81%)</title><rect x="1003.7" y="787.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.7" y="798.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.33%)</title><rect x="1003.7" y="771.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1006.7" y="782.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.49%)</title><rect x="1007.6" y="771.0" width="5.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1010.6" y="782.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (27 samples, 2.20%)</title><rect x="1013.3" y="803.0" width="26.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1016.3" y="814.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (18 samples, 1.46%)</title><rect x="1013.3" y="787.0" width="17.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.3" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 0.24%)</title><rect x="1013.3" y="771.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1016.3" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="1015.3" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1018.3" y="766.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5 samples, 0.41%)</title><rect x="1016.2" y="771.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1019.2" y="782.0"></text>
</g>
<g>
<title>SpinPause (10 samples, 0.81%)</title><rect x="1021.0" y="771.0" width="9.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1024.0" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="1030.6" y="787.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1033.6" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="1030.6" y="771.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.6" y="782.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1030.6" y="755.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.6" y="766.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="1030.6" y="739.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1033.6" y="750.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="1030.6" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.6" y="734.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1031.6" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.6" y="766.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1031.6" y="739.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.6" y="750.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.08%)</title><rect x="1031.6" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.6" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="1032.5" y="771.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.5" y="782.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="1032.5" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.5" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1033.5" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.5" y="766.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1033.5" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.5" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="1034.5" y="787.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.5" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="1034.5" y="771.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1037.5" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.41%)</title><rect x="1034.5" y="755.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.5" y="766.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.41%)</title><rect x="1034.5" y="739.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.5" y="750.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.41%)</title><rect x="1034.5" y="723.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.5" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.41%)</title><rect x="1034.5" y="707.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.5" y="718.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.16%)</title><rect x="1036.4" y="691.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.4" y="702.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="1037.3" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1040.3" y="686.0"></text>
</g>
<g>
<title>MemRegion::intersection(MemRegion) const (1 samples, 0.08%)</title><rect x="1038.3" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1041.3" y="702.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.16%)</title><rect x="1039.3" y="803.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1042.3" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.16%)</title><rect x="1039.3" y="787.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.3" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.16%)</title><rect x="1039.3" y="771.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1042.3" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (154 samples, 12.53%)</title><rect x="1041.2" y="819.0" width="147.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1044.2" y="830.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (154 samples, 12.53%)</title><rect x="1041.2" y="803.0" width="147.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1044.2" y="814.0">JavaThread::thread_..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (152 samples, 12.37%)</title><rect x="1041.2" y="787.0" width="145.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1044.2" y="798.0">CompileBroker::com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (152 samples, 12.37%)</title><rect x="1041.2" y="771.0" width="145.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.2" y="782.0">CompileBroker::inv..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (150 samples, 12.21%)</title><rect x="1041.2" y="755.0" width="144.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1044.2" y="766.0">C2Compiler::compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (150 samples, 12.21%)</title><rect x="1041.2" y="739.0" width="144.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.2" y="750.0">Compile::Compile(c..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.08%)</title><rect x="1041.2" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1044.2" y="734.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.08%)</title><rect x="1041.2" y="707.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1044.2" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1041.2" y="691.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1041.2" y="675.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1044.2" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1041.2" y="659.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1044.2" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1041.2" y="643.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1044.2" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1041.2" y="627.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.2" y="638.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (71 samples, 5.78%)</title><rect x="1042.1" y="723.0" width="68.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1045.1" y="734.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.16%)</title><rect x="1042.1" y="707.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1045.1" y="718.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1042.1" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.1" y="702.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="1043.1" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.1" y="702.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1043.1" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.1" y="686.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="1043.1" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.1" y="670.0"></text>
</g>
<g>
<title>cmpFastUnlockNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="1043.1" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.1" y="654.0"></text>
</g>
<g>
<title>MacroAssembler::fast_unlock(RegisterImpl*, RegisterImpl*, RegisterImpl*, bool) (1 samples, 0.08%)</title><rect x="1043.1" y="627.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.1" y="638.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.24%)</title><rect x="1044.1" y="707.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.1" y="718.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="1044.1" y="691.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.1" y="702.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1044.1" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1047.1" y="686.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1044.1" y="659.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.1" y="670.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1045.0" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.0" y="702.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1045.0" y="675.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1048.0" y="686.0"></text>
</g>
<g>
<title>HandlerImpl::emit_exception_handler(CodeBuffer&amp;) (1 samples, 0.08%)</title><rect x="1046.0" y="691.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1049.0" y="702.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.08%)</title><rect x="1046.9" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1049.9" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.49%)</title><rect x="1047.9" y="707.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.9" y="718.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="1047.9" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1050.9" y="702.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.08%)</title><rect x="1047.9" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1050.9" y="686.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.41%)</title><rect x="1048.9" y="691.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.9" y="702.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.08%)</title><rect x="1050.8" y="675.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1053.8" y="686.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.16%)</title><rect x="1051.7" y="675.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.7" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1051.7" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.7" y="670.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1051.7" y="643.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.7" y="654.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1051.7" y="627.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1054.7" y="638.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1051.7" y="611.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.7" y="622.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.08%)</title><rect x="1051.7" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1054.7" y="606.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.08%)</title><rect x="1051.7" y="579.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1054.7" y="590.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1052.7" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1055.7" y="670.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.08%)</title><rect x="1052.7" y="643.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.7" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.24%)</title><rect x="1053.7" y="707.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1056.7" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.24%)</title><rect x="1053.7" y="691.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.7" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.24%)</title><rect x="1053.7" y="675.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1056.7" y="686.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1053.7" y="659.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1056.7" y="670.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.16%)</title><rect x="1054.6" y="659.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.6" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (56 samples, 4.56%)</title><rect x="1056.5" y="707.0" width="53.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.5" y="718.0">Phase..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1056.5" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.5" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1057.5" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.5" y="702.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="1058.5" y="691.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.5" y="702.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1059.4" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.33%)</title><rect x="1060.4" y="691.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1063.4" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1060.4" y="675.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1063.4" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.16%)</title><rect x="1062.3" y="675.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1065.3" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1063.3" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.3" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.33%)</title><rect x="1064.2" y="691.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.2" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.16%)</title><rect x="1065.2" y="675.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.2" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="1067.1" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.41%)</title><rect x="1068.1" y="691.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.1" y="702.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.08%)</title><rect x="1071.9" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.90%)</title><rect x="1072.9" y="691.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.9" y="702.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="1077.7" y="675.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.7" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.24%)</title><rect x="1078.6" y="675.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.6" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1080.5" y="659.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.5" y="670.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1081.5" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.5" y="686.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1082.5" y="675.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1083.4" y="691.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1086.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (8 samples, 0.65%)</title><rect x="1084.4" y="691.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1087.4" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.16%)</title><rect x="1089.2" y="675.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.2" y="686.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.08%)</title><rect x="1091.1" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.1" y="686.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1091.1" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.1" y="670.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1091.1" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.1" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1092.1" y="691.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.57%)</title><rect x="1093.0" y="691.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.0" y="702.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.08%)</title><rect x="1094.9" y="675.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.33%)</title><rect x="1095.9" y="675.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.9" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.24%)</title><rect x="1099.7" y="691.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.7" y="702.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="1099.7" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.7" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.08%)</title><rect x="1099.7" y="659.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.7" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.08%)</title><rect x="1099.7" y="643.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.7" y="654.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1100.7" y="675.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.7" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.16%)</title><rect x="1100.7" y="659.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.7" y="670.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.08%)</title><rect x="1100.7" y="643.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.7" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.08%)</title><rect x="1101.7" y="643.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.7" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.16%)</title><rect x="1102.6" y="691.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.6" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1103.6" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.6" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.41%)</title><rect x="1104.5" y="691.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.5" y="702.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1109.3" y="691.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.3" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (65 samples, 5.29%)</title><rect x="1110.3" y="723.0" width="62.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.3" y="734.0">Compil..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="1110.3" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.3" y="718.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1110.3" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.3" y="702.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1111.3" y="707.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.3" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1111.3" y="691.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.3" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1111.3" y="675.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.3" y="686.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1111.3" y="659.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.3" y="670.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1111.3" y="643.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.3" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1111.3" y="627.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.3" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1111.3" y="611.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.3" y="622.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1111.3" y="595.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.3" y="606.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1111.3" y="579.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.3" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.24%)</title><rect x="1112.2" y="707.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.24%)</title><rect x="1112.2" y="691.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1112.2" y="675.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.08%)</title><rect x="1112.2" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1113.2" y="675.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1113.2" y="659.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1113.2" y="643.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1116.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="627.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="611.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="595.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="579.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="563.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="547.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="531.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="515.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="499.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="483.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="467.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="435.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="419.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="403.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="387.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="371.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="355.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="339.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.2" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="323.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.2" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="307.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.2" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.2" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="275.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.2" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="259.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.2" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="243.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.2" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="227.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.2" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="211.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.2" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="195.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.2" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="179.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.2" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="163.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.2" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="147.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.2" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="131.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.2" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="115.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.2" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="99.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.2" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="83.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.2" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="67.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.2" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="51.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.2" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="35.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.2" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="611.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="595.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="563.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="515.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="499.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="483.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="467.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="435.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="419.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="403.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="387.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="371.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="355.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="339.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="323.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="307.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="291.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="275.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.1" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1114.1" y="259.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.1" y="270.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="1115.1" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.1" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1116.1" y="707.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.1" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1116.1" y="691.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (44 samples, 3.58%)</title><rect x="1117.0" y="707.0" width="42.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.0" y="718.0">Phas..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1117.0" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.0" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1117.0" y="675.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.0" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1117.0" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.0" y="670.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1118.0" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.24%)</title><rect x="1119.0" y="691.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.0" y="702.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.16%)</title><rect x="1119.9" y="675.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.57%)</title><rect x="1121.8" y="691.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.16%)</title><rect x="1126.6" y="675.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (29 samples, 2.36%)</title><rect x="1128.6" y="691.0" width="27.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.6" y="702.0">P..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1132.4" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.4" y="686.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1132.4" y="659.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1135.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (24 samples, 1.95%)</title><rect x="1133.4" y="675.0" width="23.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.4" y="686.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1135.3" y="659.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (21 samples, 1.71%)</title><rect x="1136.2" y="659.0" width="20.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.33%)</title><rect x="1151.6" y="643.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.6" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1155.4" y="643.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1156.4" y="691.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.4" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1158.3" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.3" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1158.3" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.3" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1158.3" y="659.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.3" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 1.06%)</title><rect x="1159.3" y="707.0" width="12.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.3" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 1.06%)</title><rect x="1159.3" y="691.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.3" y="702.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.3" y="675.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.3" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1159.3" y="659.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.3" y="670.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.08%)</title><rect x="1159.3" y="643.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.3" y="654.0"></text>
</g>
<g>
<title>InitializeNode::Opcode() const (1 samples, 0.08%)</title><rect x="1160.2" y="675.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.2" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.16%)</title><rect x="1161.2" y="675.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.2" y="686.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1163.1" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="686.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.08%)</title><rect x="1163.1" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.1" y="670.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.24%)</title><rect x="1164.1" y="675.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.1" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.16%)</title><rect x="1164.1" y="659.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="670.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1166.0" y="659.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.0" y="670.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.33%)</title><rect x="1167.0" y="675.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.0" y="686.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (4 samples, 0.33%)</title><rect x="1167.0" y="659.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.0" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.33%)</title><rect x="1167.0" y="643.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.0" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.33%)</title><rect x="1167.0" y="627.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.0" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.33%)</title><rect x="1167.0" y="611.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.0" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.24%)</title><rect x="1167.0" y="595.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.0" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.24%)</title><rect x="1167.0" y="579.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.0" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.24%)</title><rect x="1167.0" y="563.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.0" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1167.0" y="547.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.0" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1167.0" y="531.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.0" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1167.0" y="515.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.0" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1167.0" y="499.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.0" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1167.0" y="483.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.0" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1167.0" y="467.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.0" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1167.0" y="451.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.0" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1167.0" y="435.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.0" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1167.0" y="419.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.0" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1167.0" y="403.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.0" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1167.0" y="387.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.0" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.0" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.0" y="382.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.0" y="355.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.0" y="366.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1167.0" y="339.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.0" y="350.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.9" y="371.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.9" y="382.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="355.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.9" y="366.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.9" y="547.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.9" y="558.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1168.9" y="531.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="542.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1169.8" y="595.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.8" y="606.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1169.8" y="579.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.8" y="590.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1170.8" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.8" y="686.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.08%)</title><rect x="1170.8" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.8" y="670.0"></text>
</g>
<g>
<title>RegionNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1171.8" y="707.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.90%)</title><rect x="1172.7" y="723.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.90%)</title><rect x="1172.7" y="707.0" width="10.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.90%)</title><rect x="1172.7" y="691.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.90%)</title><rect x="1172.7" y="675.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.90%)</title><rect x="1172.7" y="659.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.90%)</title><rect x="1172.7" y="643.0" width="10.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.7" y="654.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.08%)</title><rect x="1172.7" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.7" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1172.7" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.7" y="622.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1172.7" y="595.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.7" y="606.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1172.7" y="579.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.7" y="590.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1172.7" y="563.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.7" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1172.7" y="547.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.7" y="558.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1173.7" y="627.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="638.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1173.7" y="611.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.7" y="622.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.08%)</title><rect x="1173.7" y="595.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.7" y="606.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1173.7" y="579.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.7" y="590.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1173.7" y="563.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="574.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1173.7" y="547.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.7" y="558.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.08%)</title><rect x="1173.7" y="531.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.65%)</title><rect x="1174.6" y="627.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.65%)</title><rect x="1174.6" y="611.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.65%)</title><rect x="1174.6" y="595.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.65%)</title><rect x="1174.6" y="579.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.65%)</title><rect x="1174.6" y="563.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="574.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1174.6" y="547.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.6" y="558.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.08%)</title><rect x="1174.6" y="531.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.6" y="542.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1174.6" y="515.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.6" y="526.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1174.6" y="499.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.57%)</title><rect x="1175.6" y="547.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1175.6" y="531.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1175.6" y="515.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1175.6" y="499.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1175.6" y="483.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1175.6" y="467.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1175.6" y="451.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.6" y="435.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1175.6" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.6" y="430.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.08%)</title><rect x="1175.6" y="403.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.16%)</title><rect x="1176.6" y="451.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (2 samples, 0.16%)</title><rect x="1176.6" y="435.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.6" y="446.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (2 samples, 0.16%)</title><rect x="1176.6" y="419.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="430.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (2 samples, 0.16%)</title><rect x="1176.6" y="403.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.6" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (2 samples, 0.16%)</title><rect x="1176.6" y="387.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.6" y="398.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1176.6" y="371.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="382.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.08%)</title><rect x="1176.6" y="355.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="366.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.08%)</title><rect x="1177.5" y="355.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1178.5" y="531.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="542.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.08%)</title><rect x="1178.5" y="515.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="526.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1178.5" y="499.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.5" y="510.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1178.5" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="494.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1178.5" y="467.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1181.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1179.4" y="515.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1179.4" y="499.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1179.4" y="483.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1179.4" y="467.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1179.4" y="451.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1179.4" y="435.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1179.4" y="419.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1179.4" y="403.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1179.4" y="387.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1179.4" y="371.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1179.4" y="355.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1179.4" y="339.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.4" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.4" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.4" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.4" y="275.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.4" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1179.4" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="254.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.08%)</title><rect x="1179.4" y="227.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="238.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.08%)</title><rect x="1179.4" y="211.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.4" y="323.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="334.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.08%)</title><rect x="1180.4" y="307.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="318.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, long) (1 samples, 0.08%)</title><rect x="1180.4" y="291.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="302.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1180.4" y="275.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="286.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1181.4" y="467.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.4" y="478.0"></text>
</g>
<g>
<title>GraphKit::clean_stack(int) (1 samples, 0.08%)</title><rect x="1181.4" y="451.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="627.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="611.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="595.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="563.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.3" y="531.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="483.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="467.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="451.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.3" y="435.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1182.3" y="419.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1182.3" y="403.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.08%)</title><rect x="1182.3" y="387.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1183.3" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="734.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1183.3" y="707.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="718.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1184.2" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="734.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1184.2" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1184.2" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="702.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.08%)</title><rect x="1185.2" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="766.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.08%)</title><rect x="1185.2" y="739.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="750.0"></text>
</g>
<g>
<title>Symbol::print_symbol_on(outputStream*) const (1 samples, 0.08%)</title><rect x="1185.2" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="734.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.2" y="755.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.2" y="766.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1186.2" y="739.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1186.2" y="723.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1186.2" y="707.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="718.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1186.2" y="691.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="702.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.2" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="686.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1186.2" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1186.2" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1186.2" y="627.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.2" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1186.2" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1186.2" y="595.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.2" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1186.2" y="579.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.2" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1186.2" y="563.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.2" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.08%)</title><rect x="1186.2" y="547.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="558.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1186.2" y="531.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.2" y="542.0"></text>
</g>
<g>
<title>XHandlers::XHandlers(ciMethod*) (1 samples, 0.08%)</title><rect x="1186.2" y="515.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.2" y="526.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1186.2" y="499.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1189.2" y="510.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.08%)</title><rect x="1187.1" y="787.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="798.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1188.1" y="787.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.1" y="798.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1188.1" y="771.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.1" y="782.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1188.1" y="755.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="766.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.08%)</title><rect x="1188.1" y="739.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1191.1" y="750.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.08%)</title><rect x="1188.1" y="723.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.1" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1188.1" y="707.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1191.1" y="718.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.08%)</title><rect x="1189.0" y="819.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.08%)</title><rect x="1189.0" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1189.0" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="798.0"></text>
</g>
</g>
</svg>
