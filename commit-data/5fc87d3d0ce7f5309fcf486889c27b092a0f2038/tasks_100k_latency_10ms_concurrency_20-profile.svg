<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1109"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1109"> </text>
<g id="frames">
<g>
<title>all (204 samples, 100.00%)</title><rect x="10.0" y="1075.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 9.80%)</title><rect x="10.0" y="1059.0" width="115.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1070.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 9.80%)</title><rect x="10.0" y="1043.0" width="115.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1054.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.49%)</title><rect x="10.0" y="1027.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.49%)</title><rect x="10.0" y="1011.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.49%)</title><rect x="10.0" y="995.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.49%)</title><rect x="10.0" y="979.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.49%)</title><rect x="10.0" y="963.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.49%)</title><rect x="10.0" y="947.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.49%)</title><rect x="10.0" y="931.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.49%)</title><rect x="10.0" y="915.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.49%)</title><rect x="10.0" y="899.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.49%)</title><rect x="10.0" y="883.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.49%)</title><rect x="10.0" y="867.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$250/293388979.apply (1 samples, 0.49%)</title><rect x="10.0" y="851.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.49%)</title><rect x="10.0" y="835.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.49%)</title><rect x="10.0" y="819.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.49%)</title><rect x="10.0" y="803.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.49%)</title><rect x="10.0" y="787.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.49%)</title><rect x="10.0" y="771.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.49%)</title><rect x="10.0" y="755.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.49%)</title><rect x="10.0" y="739.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.49%)</title><rect x="10.0" y="723.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>CompileBroker::create_compile_task(CompileQueue*, int, methodHandle, int, int, methodHandle, int, char const*, bool) (1 samples, 0.49%)</title><rect x="10.0" y="707.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>Monitor::notify_all() (1 samples, 0.49%)</title><rect x="10.0" y="691.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.49%)</title><rect x="15.8" y="1027.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.49%)</title><rect x="15.8" y="1011.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.49%)</title><rect x="15.8" y="995.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.49%)</title><rect x="15.8" y="979.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.8" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.49%)</title><rect x="15.8" y="963.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.8" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.49%)</title><rect x="15.8" y="947.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.49%)</title><rect x="15.8" y="931.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.49%)</title><rect x="15.8" y="915.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.49%)</title><rect x="15.8" y="899.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.49%)</title><rect x="15.8" y="883.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$251/44517834.test (1 samples, 0.49%)</title><rect x="15.8" y="867.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.8" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.49%)</title><rect x="21.6" y="1027.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/425729114.accept (1 samples, 0.49%)</title><rect x="21.6" y="1011.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (1 samples, 0.49%)</title><rect x="21.6" y="995.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.49%)</title><rect x="21.6" y="979.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.49%)</title><rect x="21.6" y="963.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.49%)</title><rect x="21.6" y="947.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.49%)</title><rect x="21.6" y="931.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.49%)</title><rect x="21.6" y="915.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.49%)</title><rect x="21.6" y="899.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.49%)</title><rect x="21.6" y="883.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.49%)</title><rect x="21.6" y="867.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.49%)</title><rect x="21.6" y="851.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 8.33%)</title><rect x="27.4" y="1027.0" width="98.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.4" y="1038.0">org/apache/k..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 8.33%)</title><rect x="27.4" y="1011.0" width="98.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.4" y="1022.0">org/apache/k..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 5.39%)</title><rect x="33.1" y="995.0" width="63.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.1" y="1006.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.98%)</title><rect x="33.1" y="979.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.98%)</title><rect x="33.1" y="963.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="36.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.49%)</title><rect x="33.1" y="947.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.49%)</title><rect x="38.9" y="947.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (9 samples, 4.41%)</title><rect x="44.7" y="979.0" width="52.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.7" y="990.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (9 samples, 4.41%)</title><rect x="44.7" y="963.0" width="52.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.7" y="974.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (9 samples, 4.41%)</title><rect x="44.7" y="947.0" width="52.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.7" y="958.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (9 samples, 4.41%)</title><rect x="44.7" y="931.0" width="52.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.7" y="942.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.47%)</title><rect x="44.7" y="915.0" width="17.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.49%)</title><rect x="56.3" y="899.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.49%)</title><rect x="56.3" y="883.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.49%)</title><rect x="56.3" y="867.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.49%)</title><rect x="56.3" y="851.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.49%)</title><rect x="56.3" y="835.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.49%)</title><rect x="56.3" y="819.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.49%)</title><rect x="56.3" y="803.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (6 samples, 2.94%)</title><rect x="62.1" y="915.0" width="34.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.1" y="926.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 2.94%)</title><rect x="62.1" y="899.0" width="34.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.1" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 2.94%)</title><rect x="62.1" y="883.0" width="34.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.1" y="894.0">or..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 2.94%)</title><rect x="62.1" y="867.0" width="34.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.1" y="878.0">ja..</text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (3 samples, 1.47%)</title><rect x="79.4" y="851.0" width="17.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="82.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (3 samples, 1.47%)</title><rect x="79.4" y="835.0" width="17.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (3 samples, 1.47%)</title><rect x="79.4" y="819.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 1.47%)</title><rect x="79.4" y="803.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.47%)</title><rect x="96.8" y="995.0" width="17.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="99.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.47%)</title><rect x="96.8" y="979.0" width="17.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.98%)</title><rect x="96.8" y="963.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.49%)</title><rect x="96.8" y="947.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.49%)</title><rect x="96.8" y="931.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.49%)</title><rect x="96.8" y="915.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.49%)</title><rect x="96.8" y="899.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.49%)</title><rect x="96.8" y="883.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.49%)</title><rect x="96.8" y="867.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.49%)</title><rect x="96.8" y="851.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.8" y="862.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.49%)</title><rect x="96.8" y="835.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.49%)</title><rect x="96.8" y="819.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.49%)</title><rect x="102.5" y="947.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.49%)</title><rect x="102.5" y="931.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.49%)</title><rect x="108.3" y="963.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="111.3" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.49%)</title><rect x="108.3" y="947.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.49%)</title><rect x="108.3" y="931.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.49%)</title><rect x="108.3" y="915.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="111.3" y="926.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.49%)</title><rect x="108.3" y="899.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="111.3" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.49%)</title><rect x="108.3" y="883.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.3" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.49%)</title><rect x="108.3" y="867.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.3" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.49%)</title><rect x="108.3" y="851.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.49%)</title><rect x="108.3" y="835.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.3" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.49%)</title><rect x="108.3" y="819.0" width="5.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="111.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.49%)</title><rect x="114.1" y="995.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.49%)</title><rect x="114.1" y="979.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.49%)</title><rect x="114.1" y="963.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.49%)</title><rect x="114.1" y="947.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.49%)</title><rect x="114.1" y="931.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.49%)</title><rect x="119.9" y="995.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.49%)</title><rect x="119.9" y="979.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.49%)</title><rect x="119.9" y="963.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.49%)</title><rect x="119.9" y="947.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="122.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.49%)</title><rect x="119.9" y="931.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="122.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.49%)</title><rect x="119.9" y="915.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.49%)</title><rect x="119.9" y="899.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.9" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (140 samples, 68.63%)</title><rect x="125.7" y="1059.0" width="809.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="128.7" y="1070.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (140 samples, 68.63%)</title><rect x="125.7" y="1043.0" width="809.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.7" y="1054.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (140 samples, 68.63%)</title><rect x="125.7" y="1027.0" width="809.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="128.7" y="1038.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/235062141.run (127 samples, 62.25%)</title><rect x="166.2" y="1011.0" width="734.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="169.2" y="1022.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/235062141.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (127 samples, 62.25%)</title><rect x="166.2" y="995.0" width="734.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="169.2" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (127 samples, 62.25%)</title><rect x="166.2" y="979.0" width="734.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="169.2" y="990.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (127 samples, 62.25%)</title><rect x="166.2" y="963.0" width="734.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="169.2" y="974.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (26 samples, 12.75%)</title><rect x="172.0" y="947.0" width="150.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.0" y="958.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (26 samples, 12.75%)</title><rect x="172.0" y="931.0" width="150.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.0" y="942.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (26 samples, 12.75%)</title><rect x="172.0" y="915.0" width="150.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.0" y="926.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 12.75%)</title><rect x="172.0" y="899.0" width="150.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.0" y="910.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 12.75%)</title><rect x="172.0" y="883.0" width="150.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.0" y="894.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (26 samples, 12.75%)</title><rect x="172.0" y="867.0" width="150.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.0" y="878.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 5.39%)</title><rect x="172.0" y="851.0" width="63.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.0" y="862.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 3.92%)</title><rect x="172.0" y="835.0" width="46.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="175.0" y="846.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 3.92%)</title><rect x="172.0" y="819.0" width="46.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.0" y="830.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (6 samples, 2.94%)</title><rect x="172.0" y="803.0" width="34.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="175.0" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.98%)</title><rect x="206.7" y="803.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.49%)</title><rect x="206.7" y="787.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.49%)</title><rect x="212.5" y="787.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.47%)</title><rect x="218.2" y="835.0" width="17.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.47%)</title><rect x="218.2" y="819.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.49%)</title><rect x="218.2" y="803.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (1 samples, 0.49%)</title><rect x="218.2" y="787.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.98%)</title><rect x="224.0" y="803.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 6.37%)</title><rect x="235.6" y="851.0" width="75.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.6" y="862.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.49%)</title><rect x="235.6" y="835.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.49%)</title><rect x="235.6" y="819.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.98%)</title><rect x="241.4" y="835.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.49%)</title><rect x="241.4" y="819.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.49%)</title><rect x="241.4" y="803.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.49%)</title><rect x="241.4" y="787.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.49%)</title><rect x="241.4" y="771.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="244.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.49%)</title><rect x="247.2" y="819.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 4.90%)</title><rect x="252.9" y="835.0" width="57.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.9" y="846.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.96%)</title><rect x="252.9" y="819.0" width="23.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.9" y="830.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.98%)</title><rect x="252.9" y="803.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.98%)</title><rect x="252.9" y="787.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.98%)</title><rect x="252.9" y="771.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.49%)</title><rect x="264.5" y="803.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.49%)</title><rect x="264.5" y="787.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.49%)</title><rect x="270.3" y="803.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.94%)</title><rect x="276.1" y="819.0" width="34.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.1" y="830.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.94%)</title><rect x="276.1" y="803.0" width="34.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.1" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.94%)</title><rect x="276.1" y="787.0" width="34.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.1" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.49%)</title><rect x="276.1" y="771.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.98%)</title><rect x="281.9" y="771.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.98%)</title><rect x="281.9" y="755.0" width="11.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.98%)</title><rect x="281.9" y="739.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.98%)</title><rect x="281.9" y="723.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.9" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.98%)</title><rect x="281.9" y="707.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.49%)</title><rect x="293.4" y="771.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.49%)</title><rect x="293.4" y="755.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.49%)</title><rect x="293.4" y="739.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.49%)</title><rect x="293.4" y="723.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.4" y="734.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.49%)</title><rect x="293.4" y="707.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.4" y="718.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.49%)</title><rect x="293.4" y="691.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.98%)</title><rect x="299.2" y="771.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.98%)</title><rect x="299.2" y="755.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.98%)</title><rect x="299.2" y="739.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.49%)</title><rect x="305.0" y="723.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="308.0" y="734.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.49%)</title><rect x="305.0" y="707.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="308.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.98%)</title><rect x="310.8" y="851.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.98%)</title><rect x="310.8" y="835.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.98%)</title><rect x="310.8" y="819.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.98%)</title><rect x="310.8" y="803.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.49%)</title><rect x="316.6" y="787.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (93 samples, 45.59%)</title><rect x="322.4" y="947.0" width="537.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.4" y="958.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (9 samples, 4.41%)</title><rect x="322.4" y="931.0" width="52.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.4" y="942.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (9 samples, 4.41%)</title><rect x="322.4" y="915.0" width="52.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.4" y="926.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (8 samples, 3.92%)</title><rect x="328.1" y="899.0" width="46.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="331.1" y="910.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.49%)</title><rect x="328.1" y="883.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.1" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.49%)</title><rect x="328.1" y="867.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.1" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.49%)</title><rect x="328.1" y="851.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.49%)</title><rect x="328.1" y="835.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.49%)</title><rect x="328.1" y="819.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.1" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 3.43%)</title><rect x="333.9" y="883.0" width="40.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.9" y="894.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 3.43%)</title><rect x="333.9" y="867.0" width="40.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.9" y="878.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 2.45%)</title><rect x="345.5" y="851.0" width="28.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.5" y="862.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.49%)</title><rect x="374.4" y="931.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="377.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.49%)</title><rect x="374.4" y="915.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="377.4" y="926.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.49%)</title><rect x="374.4" y="899.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.4" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.49%)</title><rect x="374.4" y="883.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="377.4" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.49%)</title><rect x="374.4" y="867.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="377.4" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.49%)</title><rect x="374.4" y="851.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="377.4" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.49%)</title><rect x="374.4" y="835.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="377.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (22 samples, 10.78%)</title><rect x="380.2" y="931.0" width="127.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.2" y="942.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (22 samples, 10.78%)</title><rect x="380.2" y="915.0" width="127.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="383.2" y="926.0">com/linecorp/dec..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.98%)</title><rect x="380.2" y="899.0" width="11.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="383.2" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.98%)</title><rect x="380.2" y="883.0" width="11.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="383.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 4.41%)</title><rect x="391.8" y="899.0" width="52.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="394.8" y="910.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 3.92%)</title><rect x="391.8" y="883.0" width="46.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.8" y="894.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.94%)</title><rect x="397.5" y="867.0" width="34.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="400.5" y="878.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.47%)</title><rect x="409.1" y="851.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="412.1" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.47%)</title><rect x="409.1" y="835.0" width="17.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.1" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.47%)</title><rect x="409.1" y="819.0" width="17.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.1" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.47%)</title><rect x="409.1" y="803.0" width="17.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="412.1" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.49%)</title><rect x="409.1" y="787.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="412.1" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.49%)</title><rect x="409.1" y="771.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="412.1" y="782.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.49%)</title><rect x="409.1" y="755.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="412.1" y="766.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.49%)</title><rect x="409.1" y="739.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="412.1" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.49%)</title><rect x="414.9" y="787.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="417.9" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.49%)</title><rect x="414.9" y="771.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="417.9" y="782.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.49%)</title><rect x="420.7" y="787.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="423.7" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.49%)</title><rect x="426.5" y="851.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="429.5" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.49%)</title><rect x="432.3" y="867.0" width="5.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="435.3" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.49%)</title><rect x="438.0" y="883.0" width="5.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="441.0" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.49%)</title><rect x="443.8" y="899.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="446.8" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.49%)</title><rect x="443.8" y="883.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.8" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.49%)</title><rect x="443.8" y="867.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.8" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.49%)</title><rect x="443.8" y="851.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.49%)</title><rect x="449.6" y="899.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.6" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.49%)</title><rect x="449.6" y="883.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.49%)</title><rect x="449.6" y="867.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="452.6" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 4.41%)</title><rect x="455.4" y="899.0" width="52.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="458.4" y="910.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 4.41%)</title><rect x="455.4" y="883.0" width="52.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="458.4" y="894.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 4.41%)</title><rect x="455.4" y="867.0" width="52.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.4" y="878.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 4.41%)</title><rect x="455.4" y="851.0" width="52.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.4" y="862.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 3.92%)</title><rect x="461.2" y="835.0" width="46.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.2" y="846.0">java..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.98%)</title><rect x="490.1" y="819.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="493.1" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.49%)</title><rect x="495.9" y="803.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="498.9" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.49%)</title><rect x="495.9" y="787.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="498.9" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.49%)</title><rect x="495.9" y="771.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="498.9" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.49%)</title><rect x="495.9" y="755.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="498.9" y="766.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.49%)</title><rect x="495.9" y="739.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="498.9" y="750.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.49%)</title><rect x="501.7" y="819.0" width="5.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="504.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (57 samples, 27.94%)</title><rect x="507.5" y="931.0" width="329.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="510.5" y="942.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (57 samples, 27.94%)</title><rect x="507.5" y="915.0" width="329.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="510.5" y="926.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.49%)</title><rect x="519.0" y="899.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="522.0" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.49%)</title><rect x="519.0" y="883.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="522.0" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.49%)</title><rect x="519.0" y="867.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.0" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.49%)</title><rect x="519.0" y="851.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.0" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.49%)</title><rect x="519.0" y="835.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="522.0" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokeinterface(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.49%)</title><rect x="519.0" y="819.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="522.0" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_pool(KlassHandle&amp;, Symbol*&amp;, Symbol*&amp;, KlassHandle&amp;, constantPoolHandle, int, Thread*) (1 samples, 0.49%)</title><rect x="519.0" y="803.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="522.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/770306532.process (45 samples, 22.06%)</title><rect x="524.8" y="899.0" width="260.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="527.8" y="910.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (45 samples, 22.06%)</title><rect x="524.8" y="883.0" width="260.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="527.8" y="894.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (45 samples, 22.06%)</title><rect x="524.8" y="867.0" width="260.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="527.8" y="878.0">com/linecorp/decaton/benchmark/Reco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (45 samples, 22.06%)</title><rect x="524.8" y="851.0" width="260.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="527.8" y="862.0">com/linecorp/decaton/benchmark/Reco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProducedTime (2 samples, 0.98%)</title><rect x="530.6" y="835.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="533.6" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.98%)</title><rect x="530.6" y="819.0" width="11.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="533.6" y="830.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.98%)</title><rect x="530.6" y="803.0" width="11.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="533.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (41 samples, 20.10%)</title><rect x="542.2" y="835.0" width="237.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="545.2" y="846.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (38 samples, 18.63%)</title><rect x="553.7" y="819.0" width="219.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="556.7" y="830.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.49%)</title><rect x="559.5" y="803.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="562.5" y="814.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.49%)</title><rect x="565.3" y="803.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="568.3" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.96%)</title><rect x="571.1" y="803.0" width="23.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="574.1" y="814.0">_..</text>
</g>
<g>
<title>[vdso] (3 samples, 1.47%)</title><rect x="576.9" y="787.0" width="17.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="579.9" y="798.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (31 samples, 15.20%)</title><rect x="594.2" y="803.0" width="179.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="597.2" y="814.0">os::sleep(Thread*, long..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.49%)</title><rect x="652.1" y="787.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.1" y="798.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.49%)</title><rect x="652.1" y="771.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="655.1" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 2.45%)</title><rect x="657.8" y="787.0" width="29.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="660.8" y="798.0">__..</text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 5.39%)</title><rect x="686.8" y="787.0" width="63.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="689.8" y="798.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.49%)</title><rect x="750.4" y="787.0" width="5.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="753.4" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.49%)</title><rect x="756.2" y="787.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="759.2" y="798.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.49%)</title><rect x="762.0" y="787.0" width="5.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="765.0" y="798.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.49%)</title><rect x="767.7" y="787.0" width="5.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="770.7" y="798.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.49%)</title><rect x="773.5" y="819.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="776.5" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.49%)</title><rect x="779.3" y="835.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="782.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="779.3" y="819.0" width="5.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="782.3" y="830.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.49%)</title><rect x="785.1" y="899.0" width="5.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="788.1" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 1.96%)</title><rect x="790.9" y="899.0" width="23.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.9" y="910.0">j..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 1.96%)</title><rect x="790.9" y="883.0" width="23.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.9" y="894.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1790554471.get$Lambda (4 samples, 1.96%)</title><rect x="790.9" y="867.0" width="23.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="793.9" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1790554471.&lt;init&gt; (2 samples, 0.98%)</title><rect x="802.5" y="851.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="805.5" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.49%)</title><rect x="814.0" y="899.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.0" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.49%)</title><rect x="814.0" y="883.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.0" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 1.47%)</title><rect x="819.8" y="899.0" width="17.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="822.8" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.98%)</title><rect x="825.6" y="883.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="828.6" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.49%)</title><rect x="831.4" y="867.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="834.4" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.49%)</title><rect x="831.4" y="851.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="834.4" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.49%)</title><rect x="831.4" y="835.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="834.4" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.49%)</title><rect x="831.4" y="819.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="834.4" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.49%)</title><rect x="831.4" y="803.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="834.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.96%)</title><rect x="837.2" y="931.0" width="23.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="840.2" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.96%)</title><rect x="837.2" y="915.0" width="23.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="840.2" y="926.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.49%)</title><rect x="854.5" y="899.0" width="5.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="857.5" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="854.5" y="883.0" width="5.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="857.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.94%)</title><rect x="860.3" y="947.0" width="34.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="863.3" y="958.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.94%)</title><rect x="860.3" y="931.0" width="34.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="863.3" y="942.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 2.45%)</title><rect x="866.1" y="915.0" width="28.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="869.1" y="926.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/216090190.accept (5 samples, 2.45%)</title><rect x="866.1" y="899.0" width="28.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="869.1" y="910.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (5 samples, 2.45%)</title><rect x="866.1" y="883.0" width="28.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="869.1" y="894.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (5 samples, 2.45%)</title><rect x="866.1" y="867.0" width="28.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="869.1" y="878.0">co..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 2.45%)</title><rect x="866.1" y="851.0" width="28.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="869.1" y="862.0">ja..</text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 2.45%)</title><rect x="866.1" y="835.0" width="28.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="869.1" y="846.0">ja..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.49%)</title><rect x="895.0" y="947.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="898.0" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="895.0" y="931.0" width="5.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="898.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.94%)</title><rect x="900.8" y="1011.0" width="34.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="903.8" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 2.45%)</title><rect x="906.6" y="995.0" width="28.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="909.6" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.96%)</title><rect x="912.4" y="979.0" width="23.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.4" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.96%)</title><rect x="912.4" y="963.0" width="23.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.4" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.96%)</title><rect x="912.4" y="947.0" width="23.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="915.4" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.96%)</title><rect x="912.4" y="931.0" width="23.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="915.4" y="942.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.49%)</title><rect x="935.5" y="1059.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="938.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.sessionTimeoutExpired (1 samples, 0.49%)</title><rect x="935.5" y="1043.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="938.5" y="1054.0"></text>
</g>
<g>
<title>start_thread (43 samples, 21.08%)</title><rect x="941.3" y="1059.0" width="248.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="944.3" y="1070.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (43 samples, 21.08%)</title><rect x="941.3" y="1043.0" width="248.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="944.3" y="1054.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 4.90%)</title><rect x="941.3" y="1027.0" width="57.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.3" y="1038.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 4.90%)</title><rect x="941.3" y="1011.0" width="57.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.3" y="1022.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 4.41%)</title><rect x="941.3" y="995.0" width="52.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="944.3" y="1006.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (9 samples, 4.41%)</title><rect x="941.3" y="979.0" width="52.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.3" y="990.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.96%)</title><rect x="964.4" y="963.0" width="23.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="967.4" y="974.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.98%)</title><rect x="976.0" y="947.0" width="11.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.0" y="958.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.49%)</title><rect x="981.8" y="931.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.8" y="942.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.49%)</title><rect x="987.5" y="963.0" width="5.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="990.5" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.49%)</title><rect x="993.3" y="995.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.3" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.49%)</title><rect x="993.3" y="979.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.3" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.49%)</title><rect x="993.3" y="963.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.3" y="974.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.49%)</title><rect x="993.3" y="947.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.3" y="958.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.49%)</title><rect x="993.3" y="931.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="996.3" y="942.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.49%)</title><rect x="993.3" y="915.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.3" y="926.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.49%)</title><rect x="993.3" y="899.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.3" y="910.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.49%)</title><rect x="993.3" y="883.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.3" y="894.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.49%)</title><rect x="993.3" y="867.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.3" y="878.0"></text>
</g>
<g>
<title>JavaThread::run() (33 samples, 16.18%)</title><rect x="999.1" y="1027.0" width="190.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.1" y="1038.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (33 samples, 16.18%)</title><rect x="999.1" y="1011.0" width="190.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1002.1" y="1022.0">JavaThread::thread_main_i..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (33 samples, 16.18%)</title><rect x="999.1" y="995.0" width="190.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1002.1" y="1006.0">CompileBroker::compiler_t..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (32 samples, 15.69%)</title><rect x="999.1" y="979.0" width="185.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.1" y="990.0">CompileBroker::invoke_co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (30 samples, 14.71%)</title><rect x="999.1" y="963.0" width="173.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.1" y="974.0">C2Compiler::compile_me..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (30 samples, 14.71%)</title><rect x="999.1" y="947.0" width="173.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1002.1" y="958.0">Compile::Compile(ciEnv..</text>
</g>
<g>
<title>Compile::Code_Gen() (19 samples, 9.31%)</title><rect x="999.1" y="931.0" width="109.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1002.1" y="942.0">Compile::Code..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.98%)</title><rect x="999.1" y="915.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1002.1" y="926.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.49%)</title><rect x="999.1" y="899.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.1" y="910.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.49%)</title><rect x="999.1" y="883.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1002.1" y="894.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.49%)</title><rect x="1004.9" y="899.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1007.9" y="910.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.49%)</title><rect x="1004.9" y="883.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.9" y="894.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.49%)</title><rect x="1010.7" y="915.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.7" y="926.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.49%)</title><rect x="1016.5" y="915.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1019.5" y="926.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.49%)</title><rect x="1016.5" y="899.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1019.5" y="910.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.49%)</title><rect x="1016.5" y="883.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1019.5" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.49%)</title><rect x="1022.3" y="915.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1025.3" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (14 samples, 6.86%)</title><rect x="1028.0" y="915.0" width="81.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1031.0" y="926.0">PhaseChai..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.49%)</title><rect x="1028.0" y="899.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1031.0" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="1028.0" y="883.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1031.0" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.98%)</title><rect x="1033.8" y="899.0" width="11.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.49%)</title><rect x="1045.4" y="899.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1048.4" y="910.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.49%)</title><rect x="1045.4" y="883.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.47%)</title><rect x="1051.2" y="899.0" width="17.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.2" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.98%)</title><rect x="1068.5" y="899.0" width="11.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1071.5" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.49%)</title><rect x="1074.3" y="883.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.49%)</title><rect x="1080.1" y="899.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.1" y="910.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.98%)</title><rect x="1085.9" y="899.0" width="11.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.9" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.98%)</title><rect x="1085.9" y="883.0" width="11.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.9" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.49%)</title><rect x="1085.9" y="867.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.9" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.49%)</title><rect x="1091.7" y="867.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.7" y="878.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.49%)</title><rect x="1091.7" y="851.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.7" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="1091.7" y="835.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.7" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.49%)</title><rect x="1097.5" y="899.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1100.5" y="910.0"></text>
</g>
<g>
<title>loadLNode::ideal_Opcode() const (1 samples, 0.49%)</title><rect x="1103.2" y="899.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.2" y="910.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 3.43%)</title><rect x="1109.0" y="931.0" width="40.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.0" y="942.0">Com..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.98%)</title><rect x="1109.0" y="915.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.98%)</title><rect x="1109.0" y="899.0" width="11.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.49%)</title><rect x="1114.8" y="883.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 1.47%)</title><rect x="1120.6" y="915.0" width="17.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.98%)</title><rect x="1120.6" y="899.0" width="11.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.49%)</title><rect x="1126.4" y="883.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.49%)</title><rect x="1132.2" y="899.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.49%)</title><rect x="1132.2" y="883.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.2" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.49%)</title><rect x="1137.9" y="915.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.9" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.49%)</title><rect x="1137.9" y="899.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.9" y="910.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1137.9" y="883.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.9" y="894.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1137.9" y="867.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.9" y="878.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.49%)</title><rect x="1137.9" y="851.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.9" y="862.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.49%)</title><rect x="1137.9" y="835.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.9" y="846.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.49%)</title><rect x="1137.9" y="819.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.9" y="830.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.49%)</title><rect x="1137.9" y="803.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.9" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.49%)</title><rect x="1143.7" y="915.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.7" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.49%)</title><rect x="1143.7" y="899.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.7" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.49%)</title><rect x="1143.7" y="883.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.7" y="894.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1143.7" y="867.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.49%)</title><rect x="1143.7" y="851.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.7" y="862.0"></text>
</g>
<g>
<title>CheckCastPPNode::Opcode() const (1 samples, 0.49%)</title><rect x="1143.7" y="835.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.96%)</title><rect x="1149.5" y="931.0" width="23.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.5" y="942.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.96%)</title><rect x="1149.5" y="915.0" width="23.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.5" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.96%)</title><rect x="1149.5" y="899.0" width="23.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.5" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.96%)</title><rect x="1149.5" y="883.0" width="23.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.5" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.96%)</title><rect x="1149.5" y="867.0" width="23.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.5" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.47%)</title><rect x="1155.3" y="851.0" width="17.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.98%)</title><rect x="1155.3" y="835.0" width="11.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.98%)</title><rect x="1155.3" y="819.0" width="11.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.3" y="803.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.3" y="787.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.3" y="771.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.3" y="755.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.3" y="739.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.3" y="723.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.3" y="707.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.3" y="691.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.3" y="675.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.3" y="659.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.3" y="643.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.3" y="627.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.3" y="611.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.3" y="595.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.3" y="579.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.3" y="563.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.3" y="547.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.3" y="531.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.3" y="515.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.3" y="499.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.3" y="483.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.3" y="467.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.3" y="451.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.3" y="435.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.3" y="419.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.3" y="403.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.3" y="387.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.3" y="371.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.3" y="355.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.3" y="339.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.3" y="323.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.3" y="307.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.3" y="291.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.3" y="275.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.3" y="259.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.3" y="243.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.3" y="227.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.3" y="211.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.3" y="195.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.3" y="179.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.3" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.3" y="163.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.3" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.3" y="147.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.3" y="131.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.3" y="115.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.3" y="99.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.3" y="83.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.3" y="94.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.49%)</title><rect x="1155.3" y="67.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.3" y="78.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.49%)</title><rect x="1155.3" y="51.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.3" y="62.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.49%)</title><rect x="1155.3" y="35.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.3" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.49%)</title><rect x="1161.1" y="803.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.1" y="814.0"></text>
</g>
<g>
<title>ProfileData::translate_from(ProfileData const*) (1 samples, 0.49%)</title><rect x="1161.1" y="787.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.1" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1166.9" y="835.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1166.9" y="819.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1166.9" y="803.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1166.9" y="787.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1166.9" y="771.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1166.9" y="755.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1166.9" y="739.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1166.9" y="723.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1166.9" y="707.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1166.9" y="691.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1166.9" y="675.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1166.9" y="659.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1166.9" y="643.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1166.9" y="627.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1166.9" y="611.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1166.9" y="595.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1166.9" y="579.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1166.9" y="563.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1166.9" y="547.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.49%)</title><rect x="1166.9" y="531.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.9" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.49%)</title><rect x="1166.9" y="515.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.9" y="526.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.98%)</title><rect x="1172.6" y="963.0" width="11.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="974.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.98%)</title><rect x="1172.6" y="947.0" width="11.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.6" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.98%)</title><rect x="1172.6" y="931.0" width="11.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.49%)</title><rect x="1172.6" y="915.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="926.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.49%)</title><rect x="1172.6" y="899.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="910.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.49%)</title><rect x="1172.6" y="883.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="894.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.49%)</title><rect x="1172.6" y="867.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.49%)</title><rect x="1172.6" y="851.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.49%)</title><rect x="1172.6" y="835.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.49%)</title><rect x="1172.6" y="819.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.6" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.49%)</title><rect x="1172.6" y="803.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.49%)</title><rect x="1172.6" y="787.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.6" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.49%)</title><rect x="1172.6" y="771.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.6" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.49%)</title><rect x="1172.6" y="755.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.6" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.49%)</title><rect x="1172.6" y="739.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.6" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.49%)</title><rect x="1172.6" y="723.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.6" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.49%)</title><rect x="1172.6" y="707.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.49%)</title><rect x="1172.6" y="691.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.49%)</title><rect x="1172.6" y="675.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.6" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.49%)</title><rect x="1172.6" y="659.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.49%)</title><rect x="1172.6" y="643.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.6" y="654.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.49%)</title><rect x="1172.6" y="627.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.6" y="638.0"></text>
</g>
<g>
<title>Dependencies::check_evol_method(Method*) (1 samples, 0.49%)</title><rect x="1172.6" y="611.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="622.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.49%)</title><rect x="1178.4" y="915.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="926.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.49%)</title><rect x="1178.4" y="899.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="910.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.49%)</title><rect x="1178.4" y="883.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="894.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.49%)</title><rect x="1178.4" y="867.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="878.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.49%)</title><rect x="1178.4" y="851.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.49%)</title><rect x="1178.4" y="835.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.49%)</title><rect x="1178.4" y="819.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="830.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.49%)</title><rect x="1184.2" y="979.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="990.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.49%)</title><rect x="1184.2" y="963.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="974.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.49%)</title><rect x="1184.2" y="947.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.2" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.49%)</title><rect x="1184.2" y="931.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="942.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.49%)</title><rect x="1184.2" y="915.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.2" y="926.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.49%)</title><rect x="1184.2" y="899.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="910.0"></text>
</g>
</g>
</svg>
