<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (201 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.50%)</title><rect x="10.0" y="755.0" width="5.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.50%)</title><rect x="10.0" y="739.0" width="5.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>_itoa_word (1 samples, 0.50%)</title><rect x="10.0" y="723.0" width="5.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.50%)</title><rect x="15.9" y="755.0" width="5.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="18.9" y="766.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.50%)</title><rect x="15.9" y="739.0" width="5.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="18.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (41 samples, 20.40%)</title><rect x="21.7" y="755.0" width="240.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.7" y="766.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (41 samples, 20.40%)</title><rect x="21.7" y="739.0" width="240.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.7" y="750.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.50%)</title><rect x="21.7" y="723.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.50%)</title><rect x="21.7" y="707.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/242544505.accept (1 samples, 0.50%)</title><rect x="21.7" y="691.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.50%)</title><rect x="21.7" y="675.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.50%)</title><rect x="21.7" y="659.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.50%)</title><rect x="27.6" y="723.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.50%)</title><rect x="27.6" y="707.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.50%)</title><rect x="27.6" y="691.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.6" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.50%)</title><rect x="27.6" y="675.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.6" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.50%)</title><rect x="27.6" y="659.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.50%)</title><rect x="27.6" y="643.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.50%)</title><rect x="27.6" y="627.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.50%)</title><rect x="27.6" y="611.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (23 samples, 11.44%)</title><rect x="33.5" y="723.0" width="135.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.5" y="734.0">java/lang/Iterabl..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1299152360.accept (23 samples, 11.44%)</title><rect x="33.5" y="707.0" width="135.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.5" y="718.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (23 samples, 11.44%)</title><rect x="33.5" y="691.0" width="135.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.5" y="702.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (21 samples, 10.45%)</title><rect x="33.5" y="675.0" width="123.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.5" y="686.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (21 samples, 10.45%)</title><rect x="33.5" y="659.0" width="123.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.5" y="670.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (21 samples, 10.45%)</title><rect x="33.5" y="643.0" width="123.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.5" y="654.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (21 samples, 10.45%)</title><rect x="33.5" y="627.0" width="123.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.5" y="638.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (21 samples, 10.45%)</title><rect x="33.5" y="611.0" width="123.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.5" y="622.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (21 samples, 10.45%)</title><rect x="33.5" y="595.0" width="123.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.5" y="606.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (16 samples, 7.96%)</title><rect x="33.5" y="579.0" width="93.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.5" y="590.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.00%)</title><rect x="33.5" y="563.0" width="11.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.00%)</title><rect x="33.5" y="547.0" width="11.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.50%)</title><rect x="39.4" y="531.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 6.97%)</title><rect x="45.2" y="563.0" width="82.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.2" y="574.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 6.97%)</title><rect x="45.2" y="547.0" width="82.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.2" y="558.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 6.97%)</title><rect x="45.2" y="531.0" width="82.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="48.2" y="542.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 6.47%)</title><rect x="51.1" y="515.0" width="76.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.1" y="526.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (13 samples, 6.47%)</title><rect x="51.1" y="499.0" width="76.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.1" y="510.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (11 samples, 5.47%)</title><rect x="51.1" y="483.0" width="64.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="54.1" y="494.0">Unsafe_..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.50%)</title><rect x="51.1" y="467.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="54.1" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (9 samples, 4.48%)</title><rect x="57.0" y="467.0" width="52.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="60.0" y="478.0">__pth..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.50%)</title><rect x="109.8" y="467.0" width="5.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="112.8" y="478.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.50%)</title><rect x="115.7" y="483.0" width="5.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="118.7" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.50%)</title><rect x="121.5" y="483.0" width="5.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="124.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 1.99%)</title><rect x="127.4" y="579.0" width="23.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="130.4" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 1.99%)</title><rect x="127.4" y="563.0" width="23.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="130.4" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 1.99%)</title><rect x="127.4" y="547.0" width="23.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.4" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.50%)</title><rect x="150.9" y="579.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.50%)</title><rect x="150.9" y="563.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.50%)</title><rect x="150.9" y="547.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.50%)</title><rect x="150.9" y="531.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 1.00%)</title><rect x="156.8" y="675.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.00%)</title><rect x="156.8" y="659.0" width="11.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.00%)</title><rect x="156.8" y="643.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 7.96%)</title><rect x="168.5" y="723.0" width="93.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.5" y="734.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 7.96%)</title><rect x="168.5" y="707.0" width="93.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.5" y="718.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.99%)</title><rect x="168.5" y="691.0" width="35.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="171.5" y="702.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.99%)</title><rect x="168.5" y="675.0" width="35.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="171.5" y="686.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 2.99%)</title><rect x="168.5" y="659.0" width="35.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.5" y="670.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.49%)</title><rect x="168.5" y="643.0" width="17.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="171.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.49%)</title><rect x="168.5" y="627.0" width="17.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.00%)</title><rect x="168.5" y="611.0" width="11.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.50%)</title><rect x="174.4" y="595.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="177.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.50%)</title><rect x="174.4" y="579.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.50%)</title><rect x="174.4" y="563.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="177.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.50%)</title><rect x="174.4" y="547.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="177.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.50%)</title><rect x="174.4" y="531.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.50%)</title><rect x="174.4" y="515.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatchSize (1 samples, 0.50%)</title><rect x="174.4" y="499.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.4" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.50%)</title><rect x="174.4" y="483.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="177.4" y="494.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.50%)</title><rect x="174.4" y="467.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="177.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.50%)</title><rect x="180.2" y="611.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.50%)</title><rect x="180.2" y="595.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.50%)</title><rect x="180.2" y="579.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.2" y="590.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.50%)</title><rect x="180.2" y="563.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="183.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.50%)</title><rect x="186.1" y="643.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.50%)</title><rect x="186.1" y="627.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.50%)</title><rect x="186.1" y="611.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.50%)</title><rect x="186.1" y="595.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.1" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.50%)</title><rect x="186.1" y="579.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="189.1" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.50%)</title><rect x="186.1" y="563.0" width="5.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="189.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.50%)</title><rect x="192.0" y="643.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.50%)</title><rect x="192.0" y="627.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.50%)</title><rect x="192.0" y="611.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.50%)</title><rect x="197.9" y="643.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.release (1 samples, 0.50%)</title><rect x="203.7" y="691.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.7" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.50%)</title><rect x="203.7" y="675.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="206.7" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.50%)</title><rect x="203.7" y="659.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="206.7" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.50%)</title><rect x="203.7" y="643.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="206.7" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.50%)</title><rect x="203.7" y="627.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="206.7" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.50%)</title><rect x="203.7" y="611.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="206.7" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.50%)</title><rect x="203.7" y="595.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="206.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.99%)</title><rect x="209.6" y="691.0" width="23.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.6" y="702.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.00%)</title><rect x="209.6" y="675.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.00%)</title><rect x="209.6" y="659.0" width="11.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 1.00%)</title><rect x="209.6" y="643.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 1.00%)</title><rect x="209.6" y="627.0" width="11.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.50%)</title><rect x="209.6" y="611.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.50%)</title><rect x="209.6" y="595.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.50%)</title><rect x="215.5" y="611.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.5" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.50%)</title><rect x="215.5" y="595.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.50%)</title><rect x="215.5" y="579.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 1.00%)</title><rect x="221.3" y="675.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.50%)</title><rect x="221.3" y="659.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.50%)</title><rect x="221.3" y="643.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.50%)</title><rect x="221.3" y="627.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.50%)</title><rect x="221.3" y="611.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.50%)</title><rect x="227.2" y="659.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.00%)</title><rect x="233.1" y="691.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.50%)</title><rect x="233.1" y="675.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.50%)</title><rect x="233.1" y="659.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.50%)</title><rect x="233.1" y="643.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.50%)</title><rect x="233.1" y="627.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.50%)</title><rect x="233.1" y="611.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.50%)</title><rect x="233.1" y="595.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.50%)</title><rect x="233.1" y="579.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.1" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.50%)</title><rect x="233.1" y="563.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.1" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.50%)</title><rect x="233.1" y="547.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.50%)</title><rect x="233.1" y="531.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.50%)</title><rect x="233.1" y="515.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.1" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.50%)</title><rect x="233.1" y="499.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.50%)</title><rect x="239.0" y="675.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.50%)</title><rect x="239.0" y="659.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.50%)</title><rect x="239.0" y="643.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.50%)</title><rect x="239.0" y="627.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.50%)</title><rect x="239.0" y="611.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.50%)</title><rect x="239.0" y="595.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.50%)</title><rect x="239.0" y="579.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.50%)</title><rect x="239.0" y="563.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 1.49%)</title><rect x="244.8" y="691.0" width="17.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 1.49%)</title><rect x="244.8" y="675.0" width="17.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.50%)</title><rect x="250.7" y="659.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.50%)</title><rect x="256.6" y="659.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.50%)</title><rect x="256.6" y="643.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.50%)</title><rect x="256.6" y="627.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="259.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.50%)</title><rect x="256.6" y="611.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (1 samples, 0.50%)</title><rect x="256.6" y="595.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="259.6" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.run (67 samples, 33.33%)</title><rect x="262.4" y="755.0" width="393.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.4" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (67 samples, 33.33%)</title><rect x="262.4" y="739.0" width="393.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.4" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (67 samples, 33.33%)</title><rect x="262.4" y="723.0" width="393.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.4" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/523396890.run (44 samples, 21.89%)</title><rect x="268.3" y="707.0" width="258.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="271.3" y="718.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (44 samples, 21.89%)</title><rect x="268.3" y="691.0" width="258.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.3" y="702.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (44 samples, 21.89%)</title><rect x="268.3" y="675.0" width="258.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.3" y="686.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (43 samples, 21.39%)</title><rect x="268.3" y="659.0" width="252.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.3" y="670.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (11 samples, 5.47%)</title><rect x="280.0" y="643.0" width="64.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="283.0" y="654.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (11 samples, 5.47%)</title><rect x="280.0" y="627.0" width="64.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="283.0" y="638.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (11 samples, 5.47%)</title><rect x="280.0" y="611.0" width="64.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.0" y="622.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 5.47%)</title><rect x="280.0" y="595.0" width="64.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.0" y="606.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 5.47%)</title><rect x="280.0" y="579.0" width="64.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.0" y="590.0">com/lin..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (11 samples, 5.47%)</title><rect x="280.0" y="563.0" width="64.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.0" y="574.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 1.99%)</title><rect x="280.0" y="547.0" width="23.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.0" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.50%)</title><rect x="280.0" y="531.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.50%)</title><rect x="280.0" y="515.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.50%)</title><rect x="280.0" y="499.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.50%)</title><rect x="280.0" y="483.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.49%)</title><rect x="285.9" y="531.0" width="17.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.49%)</title><rect x="285.9" y="515.0" width="17.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.49%)</title><rect x="285.9" y="499.0" width="17.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 1.00%)</title><rect x="285.9" y="483.0" width="11.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.50%)</title><rect x="291.8" y="467.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.8" y="478.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.50%)</title><rect x="297.7" y="483.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="300.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 2.99%)</title><rect x="303.5" y="547.0" width="35.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="306.5" y="558.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 2.99%)</title><rect x="303.5" y="531.0" width="35.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.5" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.99%)</title><rect x="303.5" y="515.0" width="23.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.5" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.49%)</title><rect x="309.4" y="499.0" width="17.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.49%)</title><rect x="309.4" y="483.0" width="17.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.49%)</title><rect x="309.4" y="467.0" width="17.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.00%)</title><rect x="327.0" y="515.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.00%)</title><rect x="327.0" y="499.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="330.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.00%)</title><rect x="327.0" y="483.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.50%)</title><rect x="327.0" y="467.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.50%)</title><rect x="327.0" y="451.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="330.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.50%)</title><rect x="327.0" y="435.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.50%)</title><rect x="327.0" y="419.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.0" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.50%)</title><rect x="327.0" y="403.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.50%)</title><rect x="332.9" y="467.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.9" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.50%)</title><rect x="332.9" y="451.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="335.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.50%)</title><rect x="332.9" y="435.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.50%)</title><rect x="332.9" y="419.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.50%)</title><rect x="338.8" y="547.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.50%)</title><rect x="338.8" y="531.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="341.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.50%)</title><rect x="338.8" y="515.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.50%)</title><rect x="338.8" y="499.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="341.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.50%)</title><rect x="338.8" y="483.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="341.8" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (30 samples, 14.93%)</title><rect x="344.6" y="643.0" width="176.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.6" y="654.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.00%)</title><rect x="344.6" y="627.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="347.6" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.00%)</title><rect x="344.6" y="611.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="347.6" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.00%)</title><rect x="344.6" y="595.0" width="11.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.6" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.50%)</title><rect x="344.6" y="579.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.6" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.50%)</title><rect x="344.6" y="563.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="347.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.50%)</title><rect x="344.6" y="547.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.6" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.50%)</title><rect x="344.6" y="531.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="347.6" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.50%)</title><rect x="350.5" y="579.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.50%)</title><rect x="350.5" y="563.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="353.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.50%)</title><rect x="350.5" y="547.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.50%)</title><rect x="356.4" y="627.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.50%)</title><rect x="356.4" y="611.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="359.4" y="622.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.50%)</title><rect x="356.4" y="595.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (19 samples, 9.45%)</title><rect x="362.2" y="627.0" width="111.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.2" y="638.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (19 samples, 9.45%)</title><rect x="362.2" y="611.0" width="111.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.2" y="622.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 3.48%)</title><rect x="374.0" y="595.0" width="41.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.0" y="606.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 3.48%)</title><rect x="374.0" y="579.0" width="41.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.0" y="590.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.49%)</title><rect x="385.7" y="563.0" width="29.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="388.7" y="574.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 2.49%)</title><rect x="385.7" y="547.0" width="29.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.7" y="558.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 2.49%)</title><rect x="385.7" y="531.0" width="29.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.7" y="542.0">ja..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.00%)</title><rect x="403.3" y="515.0" width="11.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="406.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.50%)</title><rect x="415.1" y="595.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.1" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 4.48%)</title><rect x="420.9" y="595.0" width="52.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.9" y="606.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 3.98%)</title><rect x="426.8" y="579.0" width="47.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="429.8" y="590.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.00%)</title><rect x="426.8" y="563.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.00%)</title><rect x="426.8" y="547.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.8" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.00%)</title><rect x="426.8" y="531.0" width="11.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.8" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.00%)</title><rect x="426.8" y="515.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="429.8" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.99%)</title><rect x="438.6" y="563.0" width="35.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="441.6" y="574.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.99%)</title><rect x="438.6" y="547.0" width="35.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="441.6" y="558.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.99%)</title><rect x="450.3" y="531.0" width="23.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.3" y="542.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 1.00%)</title><rect x="462.0" y="515.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="465.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (8 samples, 3.98%)</title><rect x="473.8" y="627.0" width="46.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.8" y="638.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (8 samples, 3.98%)</title><rect x="473.8" y="611.0" width="46.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.8" y="622.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/556787342.process (3 samples, 1.49%)</title><rect x="473.8" y="595.0" width="17.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="476.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.49%)</title><rect x="473.8" y="579.0" width="17.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="476.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (3 samples, 1.49%)</title><rect x="473.8" y="563.0" width="17.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.00%)</title><rect x="473.8" y="547.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.8" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 1.00%)</title><rect x="473.8" y="531.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="476.8" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.00%)</title><rect x="473.8" y="515.0" width="11.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="476.8" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.00%)</title><rect x="473.8" y="499.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.8" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 1.00%)</title><rect x="473.8" y="483.0" width="11.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="476.8" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.50%)</title><rect x="485.5" y="547.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.50%)</title><rect x="485.5" y="531.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="488.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.50%)</title><rect x="485.5" y="515.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="488.5" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.50%)</title><rect x="485.5" y="499.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="488.5" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (2 samples, 1.00%)</title><rect x="491.4" y="595.0" width="11.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="494.4" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.50%)</title><rect x="497.3" y="579.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.3" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 1.49%)</title><rect x="503.1" y="595.0" width="17.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="506.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.50%)</title><rect x="509.0" y="579.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="512.0" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.50%)</title><rect x="514.9" y="579.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="517.9" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.50%)</title><rect x="514.9" y="563.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="517.9" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.50%)</title><rect x="514.9" y="547.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="517.9" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.50%)</title><rect x="514.9" y="531.0" width="5.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="517.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.50%)</title><rect x="520.7" y="659.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="523.7" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.50%)</title><rect x="520.7" y="643.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="523.7" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.50%)</title><rect x="520.7" y="627.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="523.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.00%)</title><rect x="526.6" y="707.0" width="11.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="529.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.00%)</title><rect x="526.6" y="691.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="529.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 2.49%)</title><rect x="538.4" y="707.0" width="29.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="541.4" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.00%)</title><rect x="556.0" y="691.0" width="11.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="559.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.50%)</title><rect x="556.0" y="675.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="559.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.50%)</title><rect x="561.8" y="675.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="564.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.50%)</title><rect x="561.8" y="659.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="564.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 7.46%)</title><rect x="567.7" y="707.0" width="88.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="570.7" y="718.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 7.46%)</title><rect x="567.7" y="691.0" width="88.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="570.7" y="702.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 7.46%)</title><rect x="567.7" y="675.0" width="88.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="570.7" y="686.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (15 samples, 7.46%)</title><rect x="567.7" y="659.0" width="88.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="570.7" y="670.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (12 samples, 5.97%)</title><rect x="585.3" y="643.0" width="70.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="588.3" y="654.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Park (12 samples, 5.97%)</title><rect x="585.3" y="627.0" width="70.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="588.3" y="638.0">Unsafe_P..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.50%)</title><rect x="591.2" y="611.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="594.2" y="622.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.50%)</title><rect x="597.1" y="611.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="600.1" y="622.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.50%)</title><rect x="602.9" y="611.0" width="5.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="605.9" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.49%)</title><rect x="608.8" y="611.0" width="17.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="611.8" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 1.00%)</title><rect x="626.4" y="611.0" width="11.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="629.4" y="622.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.50%)</title><rect x="638.2" y="611.0" width="5.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="641.2" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.50%)</title><rect x="644.0" y="611.0" width="5.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="647.0" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.50%)</title><rect x="649.9" y="611.0" width="5.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="652.9" y="622.0"></text>
</g>
<g>
<title>start_thread (91 samples, 45.27%)</title><rect x="655.8" y="755.0" width="534.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="658.8" y="766.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (91 samples, 45.27%)</title><rect x="655.8" y="739.0" width="534.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="658.8" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 5.47%)</title><rect x="655.8" y="723.0" width="64.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="658.8" y="734.0">GangWor..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.50%)</title><rect x="655.8" y="707.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="658.8" y="718.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.50%)</title><rect x="655.8" y="691.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="658.8" y="702.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.50%)</title><rect x="655.8" y="675.0" width="5.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="658.8" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 4.98%)</title><rect x="661.6" y="707.0" width="58.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="664.6" y="718.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.48%)</title><rect x="661.6" y="691.0" width="41.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="664.6" y="702.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.00%)</title><rect x="661.6" y="675.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="664.6" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.50%)</title><rect x="667.5" y="659.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="670.5" y="670.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.50%)</title><rect x="667.5" y="643.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="670.5" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.49%)</title><rect x="673.4" y="675.0" width="17.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="676.4" y="686.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.00%)</title><rect x="691.0" y="675.0" width="11.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="694.0" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.00%)</title><rect x="702.7" y="691.0" width="11.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="705.7" y="702.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.50%)</title><rect x="702.7" y="675.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="705.7" y="686.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.50%)</title><rect x="708.6" y="675.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="711.6" y="686.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.50%)</title><rect x="708.6" y="659.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="711.6" y="670.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.50%)</title><rect x="708.6" y="643.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="711.6" y="654.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (1 samples, 0.50%)</title><rect x="708.6" y="627.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="711.6" y="638.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.50%)</title><rect x="708.6" y="611.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="711.6" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.50%)</title><rect x="714.5" y="691.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="717.5" y="702.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.50%)</title><rect x="714.5" y="675.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="717.5" y="686.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.50%)</title><rect x="714.5" y="659.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="717.5" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.50%)</title><rect x="714.5" y="643.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="717.5" y="654.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.50%)</title><rect x="714.5" y="627.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="717.5" y="638.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.50%)</title><rect x="714.5" y="611.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="717.5" y="622.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.50%)</title><rect x="714.5" y="595.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="717.5" y="606.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.50%)</title><rect x="714.5" y="579.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="717.5" y="590.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.50%)</title><rect x="714.5" y="563.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="717.5" y="574.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.50%)</title><rect x="714.5" y="547.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="717.5" y="558.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (79 samples, 39.30%)</title><rect x="720.3" y="723.0" width="463.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="723.3" y="734.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (79 samples, 39.30%)</title><rect x="720.3" y="707.0" width="463.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="723.3" y="718.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (78 samples, 38.81%)</title><rect x="720.3" y="691.0" width="458.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="723.3" y="702.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (73 samples, 36.32%)</title><rect x="720.3" y="675.0" width="428.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="723.3" y="686.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (73 samples, 36.32%)</title><rect x="720.3" y="659.0" width="428.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="723.3" y="670.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (37 samples, 18.41%)</title><rect x="720.3" y="643.0" width="217.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="723.3" y="654.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.50%)</title><rect x="720.3" y="627.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="723.3" y="638.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.50%)</title><rect x="720.3" y="611.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="723.3" y="622.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.50%)</title><rect x="720.3" y="595.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="723.3" y="606.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.50%)</title><rect x="720.3" y="579.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="723.3" y="590.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.50%)</title><rect x="720.3" y="563.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="723.3" y="574.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.00%)</title><rect x="726.2" y="627.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="729.2" y="638.0"></text>
</g>
<g>
<title>jmpDirNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.50%)</title><rect x="726.2" y="611.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="729.2" y="622.0"></text>
</g>
<g>
<title>Assembler::jmp(Label&amp;, bool) (1 samples, 0.50%)</title><rect x="726.2" y="595.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="729.2" y="606.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.50%)</title><rect x="732.1" y="611.0" width="5.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="735.1" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 2.49%)</title><rect x="738.0" y="627.0" width="29.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="741.0" y="638.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.49%)</title><rect x="738.0" y="611.0" width="29.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="741.0" y="622.0">Ma..</text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.50%)</title><rect x="738.0" y="595.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="741.0" y="606.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.50%)</title><rect x="738.0" y="579.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="741.0" y="590.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.50%)</title><rect x="738.0" y="563.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="741.0" y="574.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 1.49%)</title><rect x="743.8" y="595.0" width="17.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="746.8" y="606.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 1.00%)</title><rect x="743.8" y="579.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="746.8" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 1.00%)</title><rect x="743.8" y="563.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="746.8" y="574.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.50%)</title><rect x="749.7" y="547.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="752.7" y="558.0"></text>
</g>
<g>
<title>State::_sub_Op_RShiftL(Node const*) (1 samples, 0.50%)</title><rect x="749.7" y="531.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="752.7" y="542.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.50%)</title><rect x="755.6" y="579.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="758.6" y="590.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.50%)</title><rect x="755.6" y="563.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="758.6" y="574.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.50%)</title><rect x="761.4" y="595.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="764.4" y="606.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.50%)</title><rect x="767.3" y="627.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="770.3" y="638.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.50%)</title><rect x="767.3" y="611.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="770.3" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.00%)</title><rect x="773.2" y="627.0" width="11.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="776.2" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.00%)</title><rect x="773.2" y="611.0" width="11.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="776.2" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.50%)</title><rect x="779.1" y="595.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="782.1" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.50%)</title><rect x="779.1" y="579.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="782.1" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 12.94%)</title><rect x="784.9" y="627.0" width="152.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="787.9" y="638.0">PhaseChaitin::Regis..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.50%)</title><rect x="784.9" y="611.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="787.9" y="622.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.50%)</title><rect x="790.8" y="611.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="793.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 2.49%)</title><rect x="796.7" y="611.0" width="29.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="799.7" y="622.0">Ph..</text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 1.49%)</title><rect x="802.5" y="595.0" width="17.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="805.5" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.50%)</title><rect x="802.5" y="579.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="805.5" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.00%)</title><rect x="808.4" y="579.0" width="11.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="811.4" y="590.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.50%)</title><rect x="820.1" y="595.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="823.1" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.49%)</title><rect x="826.0" y="611.0" width="17.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="829.0" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::prompt_use(Block*, unsigned int) (1 samples, 0.50%)</title><rect x="837.8" y="595.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="840.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 4.98%)</title><rect x="843.6" y="611.0" width="58.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="846.6" y="622.0">PhaseC..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="878.9" y="595.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="881.9" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.49%)</title><rect x="884.7" y="595.0" width="17.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.50%)</title><rect x="902.3" y="611.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="905.3" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.50%)</title><rect x="908.2" y="611.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="911.2" y="622.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.50%)</title><rect x="908.2" y="595.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="911.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.00%)</title><rect x="914.1" y="611.0" width="11.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="917.1" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.50%)</title><rect x="920.0" y="595.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="923.0" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.00%)</title><rect x="925.8" y="611.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="928.8" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="595.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.7" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="931.7" y="579.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="934.7" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 12.44%)</title><rect x="937.6" y="643.0" width="146.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.6" y="654.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.50%)</title><rect x="937.6" y="627.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="940.6" y="638.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.50%)</title><rect x="937.6" y="611.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="940.6" y="622.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.50%)</title><rect x="937.6" y="595.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="940.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.50%)</title><rect x="943.4" y="627.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="946.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.50%)</title><rect x="943.4" y="611.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.50%)</title><rect x="943.4" y="595.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="946.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) [clone .isra.295] (1 samples, 0.50%)</title><rect x="943.4" y="579.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="946.4" y="590.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.50%)</title><rect x="949.3" y="627.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="952.3" y="638.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.50%)</title><rect x="949.3" y="611.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="952.3" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.50%)</title><rect x="949.3" y="595.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.3" y="606.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.50%)</title><rect x="949.3" y="579.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="952.3" y="590.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.50%)</title><rect x="955.2" y="627.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="958.2" y="638.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.50%)</title><rect x="955.2" y="611.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.2" y="622.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.50%)</title><rect x="955.2" y="595.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="958.2" y="606.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.50%)</title><rect x="955.2" y="579.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="958.2" y="590.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.50%)</title><rect x="955.2" y="563.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="958.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (17 samples, 8.46%)</title><rect x="961.0" y="627.0" width="99.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="964.0" y="638.0">PhaseIdealLo..</text>
</g>
<g>
<title>IdealLoopTree::policy_range_check(PhaseIdealLoop*) const (1 samples, 0.50%)</title><rect x="961.0" y="611.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_scaled_iv_plus_offset(Node*, Node*, int*, Node**, int) (1 samples, 0.50%)</title><rect x="961.0" y="595.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="964.0" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.49%)</title><rect x="966.9" y="611.0" width="17.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="969.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.50%)</title><rect x="978.7" y="595.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.7" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 2.99%)</title><rect x="984.5" y="611.0" width="35.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.5" y="622.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.49%)</title><rect x="1002.1" y="595.0" width="17.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1005.1" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.50%)</title><rect x="1013.9" y="579.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1016.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.50%)</title><rect x="1013.9" y="563.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.9" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.50%)</title><rect x="1013.9" y="547.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.9" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.50%)</title><rect x="1013.9" y="531.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1016.9" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.50%)</title><rect x="1019.8" y="611.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1022.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 1.99%)</title><rect x="1025.6" y="611.0" width="23.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1028.6" y="622.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 1.49%)</title><rect x="1031.5" y="595.0" width="17.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.50%)</title><rect x="1031.5" y="579.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.5" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.50%)</title><rect x="1031.5" y="563.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.5" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 1.00%)</title><rect x="1037.4" y="579.0" width="11.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1040.4" y="590.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.50%)</title><rect x="1043.2" y="563.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1046.2" y="574.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.50%)</title><rect x="1043.2" y="547.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1046.2" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.00%)</title><rect x="1049.1" y="611.0" width="11.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1052.1" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.00%)</title><rect x="1049.1" y="595.0" width="11.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1052.1" y="606.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.50%)</title><rect x="1049.1" y="579.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1052.1" y="590.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.50%)</title><rect x="1049.1" y="563.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1052.1" y="574.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.50%)</title><rect x="1049.1" y="547.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1052.1" y="558.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1055.0" y="579.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1058.0" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.50%)</title><rect x="1055.0" y="563.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.0" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.50%)</title><rect x="1055.0" y="547.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1058.0" y="558.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.50%)</title><rect x="1055.0" y="531.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.0" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.00%)</title><rect x="1060.8" y="627.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1063.8" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.00%)</title><rect x="1060.8" y="611.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1063.8" y="622.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1060.8" y="595.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.8" y="606.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1060.8" y="579.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1063.8" y="590.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1066.7" y="595.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.7" y="606.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1066.7" y="579.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1069.7" y="590.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 1.00%)</title><rect x="1072.6" y="627.0" width="11.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1075.6" y="638.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (2 samples, 1.00%)</title><rect x="1072.6" y="611.0" width="11.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1075.6" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.50%)</title><rect x="1072.6" y="595.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1075.6" y="606.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.50%)</title><rect x="1072.6" y="579.0" width="5.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1075.6" y="590.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.50%)</title><rect x="1078.5" y="595.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.5" y="606.0"></text>
</g>
<g>
<title>InitializeNode::complete_stores(Node*, Node*, Node*, long, Node*, PhaseGVN*) (1 samples, 0.50%)</title><rect x="1078.5" y="579.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.5" y="590.0"></text>
</g>
<g>
<title>ClearArrayNode::clear_memory(Node*, Node*, Node*, Node*, Node*, PhaseGVN*) (1 samples, 0.50%)</title><rect x="1078.5" y="563.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1081.5" y="574.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.50%)</title><rect x="1078.5" y="547.0" width="5.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1081.5" y="558.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.50%)</title><rect x="1084.3" y="643.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.3" y="654.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.50%)</title><rect x="1084.3" y="627.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1084.3" y="611.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1084.3" y="595.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1084.3" y="579.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1084.3" y="563.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1084.3" y="547.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1087.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1084.3" y="531.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.3" y="542.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.50%)</title><rect x="1084.3" y="515.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.3" y="526.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.50%)</title><rect x="1084.3" y="499.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.3" y="510.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.50%)</title><rect x="1084.3" y="483.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1087.3" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.50%)</title><rect x="1084.3" y="467.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.3" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.50%)</title><rect x="1084.3" y="451.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.3" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="1084.3" y="435.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.3" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="1084.3" y="419.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.3" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.50%)</title><rect x="1084.3" y="403.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1087.3" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.50%)</title><rect x="1084.3" y="387.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1087.3" y="398.0"></text>
</g>
<g>
<title>NodeHash::NodeHash(Arena*, unsigned int) (1 samples, 0.50%)</title><rect x="1090.2" y="643.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.2" y="654.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.50%)</title><rect x="1090.2" y="627.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.2" y="638.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.50%)</title><rect x="1090.2" y="611.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.48%)</title><rect x="1096.1" y="643.0" width="41.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.1" y="654.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.48%)</title><rect x="1096.1" y="627.0" width="41.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.1" y="638.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.48%)</title><rect x="1096.1" y="611.0" width="41.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.1" y="622.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.48%)</title><rect x="1096.1" y="595.0" width="41.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.1" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.48%)</title><rect x="1096.1" y="579.0" width="41.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.1" y="590.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.48%)</title><rect x="1096.1" y="563.0" width="41.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.1" y="574.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.00%)</title><rect x="1096.1" y="547.0" width="11.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.1" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 1.00%)</title><rect x="1096.1" y="531.0" width="11.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.1" y="542.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.50%)</title><rect x="1096.1" y="515.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.1" y="526.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.50%)</title><rect x="1096.1" y="499.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.1" y="510.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.50%)</title><rect x="1096.1" y="483.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1099.1" y="494.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.50%)</title><rect x="1096.1" y="467.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.1" y="478.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.50%)</title><rect x="1096.1" y="451.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.1" y="462.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.50%)</title><rect x="1096.1" y="435.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.1" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.50%)</title><rect x="1101.9" y="515.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.9" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.50%)</title><rect x="1101.9" y="499.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.9" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.50%)</title><rect x="1101.9" y="483.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.9" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="1101.9" y="467.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.9" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="1101.9" y="451.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.9" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="1101.9" y="435.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.9" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.50%)</title><rect x="1101.9" y="419.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.9" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="1101.9" y="403.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.9" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::JsrSet(Arena*, int) (1 samples, 0.50%)</title><rect x="1101.9" y="387.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.9" y="398.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.50%)</title><rect x="1101.9" y="371.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.9" y="382.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.50%)</title><rect x="1101.9" y="355.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.9" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.50%)</title><rect x="1101.9" y="339.0" width="5.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1104.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.49%)</title><rect x="1107.8" y="547.0" width="17.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.49%)</title><rect x="1107.8" y="531.0" width="17.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.49%)</title><rect x="1107.8" y="515.0" width="17.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.49%)</title><rect x="1107.8" y="499.0" width="17.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.49%)</title><rect x="1107.8" y="483.0" width="17.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.00%)</title><rect x="1107.8" y="467.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.00%)</title><rect x="1107.8" y="451.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.00%)</title><rect x="1107.8" y="435.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.00%)</title><rect x="1107.8" y="419.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.00%)</title><rect x="1107.8" y="403.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.00%)</title><rect x="1107.8" y="387.0" width="11.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1107.8" y="371.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1107.8" y="355.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1107.8" y="339.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1107.8" y="323.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1107.8" y="307.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1107.8" y="291.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1107.8" y="275.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1107.8" y="259.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1107.8" y="243.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1107.8" y="227.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1107.8" y="211.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1107.8" y="195.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1107.8" y="179.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.8" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1107.8" y="163.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.8" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1107.8" y="147.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1107.8" y="131.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1107.8" y="115.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1107.8" y="99.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1107.8" y="83.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.50%)</title><rect x="1107.8" y="67.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.8" y="78.0"></text>
</g>
<g>
<title>MemBarNode::make(Compile*, int, int, Node*) (1 samples, 0.50%)</title><rect x="1107.8" y="51.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.8" y="62.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.50%)</title><rect x="1107.8" y="35.0" width="5.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1110.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1113.7" y="371.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.50%)</title><rect x="1113.7" y="355.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.7" y="366.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.50%)</title><rect x="1113.7" y="339.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1119.6" y="467.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.50%)</title><rect x="1119.6" y="451.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.6" y="462.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.50%)</title><rect x="1119.6" y="435.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.6" y="446.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.50%)</title><rect x="1119.6" y="419.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.6" y="430.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.50%)</title><rect x="1119.6" y="403.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.6" y="414.0"></text>
</g>
<g>
<title>TypeLong::hash() const (1 samples, 0.50%)</title><rect x="1119.6" y="387.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.6" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.00%)</title><rect x="1125.4" y="547.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.00%)</title><rect x="1125.4" y="531.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.00%)</title><rect x="1125.4" y="515.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.00%)</title><rect x="1125.4" y="499.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.00%)</title><rect x="1125.4" y="483.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.00%)</title><rect x="1125.4" y="467.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.00%)</title><rect x="1125.4" y="451.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.00%)</title><rect x="1125.4" y="435.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.00%)</title><rect x="1125.4" y="419.0" width="11.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.00%)</title><rect x="1125.4" y="403.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.00%)</title><rect x="1125.4" y="387.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.00%)</title><rect x="1125.4" y="371.0" width="11.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.00%)</title><rect x="1125.4" y="355.0" width="11.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.4" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.50%)</title><rect x="1125.4" y="339.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.4" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.50%)</title><rect x="1125.4" y="323.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.4" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.50%)</title><rect x="1125.4" y="307.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.4" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.50%)</title><rect x="1125.4" y="291.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.4" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.50%)</title><rect x="1125.4" y="275.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.4" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="1125.4" y="259.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.4" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="1125.4" y="243.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.4" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.50%)</title><rect x="1125.4" y="227.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.4" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.50%)</title><rect x="1125.4" y="211.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.4" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.50%)</title><rect x="1125.4" y="195.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.4" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.50%)</title><rect x="1125.4" y="179.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.4" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.50%)</title><rect x="1125.4" y="163.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.4" y="174.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.50%)</title><rect x="1125.4" y="147.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.4" y="158.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.50%)</title><rect x="1125.4" y="131.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.4" y="142.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.50%)</title><rect x="1125.4" y="115.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.4" y="126.0"></text>
</g>
<g>
<title>InstanceKlass::is_same_class_package(oopDesc*, Symbol*, oopDesc*, Symbol*) (1 samples, 0.50%)</title><rect x="1125.4" y="99.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.4" y="110.0"></text>
</g>
<g>
<title>UTF8::strrchr(signed char const*, int, signed char) (1 samples, 0.50%)</title><rect x="1125.4" y="83.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.4" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1131.3" y="339.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.3" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1131.3" y="323.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1131.3" y="307.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1131.3" y="291.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.50%)</title><rect x="1131.3" y="275.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.3" y="286.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.50%)</title><rect x="1131.3" y="259.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.3" y="270.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.50%)</title><rect x="1131.3" y="243.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.3" y="254.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.50%)</title><rect x="1131.3" y="227.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.3" y="238.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.50%)</title><rect x="1131.3" y="211.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.3" y="222.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.50%)</title><rect x="1131.3" y="195.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.3" y="206.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.50%)</title><rect x="1131.3" y="179.0" width="5.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1134.3" y="190.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.00%)</title><rect x="1137.2" y="643.0" width="11.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.2" y="654.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.50%)</title><rect x="1137.2" y="627.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.2" y="638.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.50%)</title><rect x="1143.0" y="627.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.0" y="638.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (5 samples, 2.49%)</title><rect x="1148.9" y="675.0" width="29.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.9" y="686.0">Co..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (5 samples, 2.49%)</title><rect x="1148.9" y="659.0" width="29.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.9" y="670.0">Co..</text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 2.49%)</title><rect x="1148.9" y="643.0" width="29.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.9" y="654.0">Co..</text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 2.49%)</title><rect x="1148.9" y="627.0" width="29.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.9" y="638.0">Co..</text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 1.49%)</title><rect x="1148.9" y="611.0" width="17.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.9" y="622.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 1.49%)</title><rect x="1148.9" y="595.0" width="17.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.9" y="606.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 1.49%)</title><rect x="1148.9" y="579.0" width="17.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.9" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 1.49%)</title><rect x="1148.9" y="563.0" width="17.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.9" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 1.49%)</title><rect x="1148.9" y="547.0" width="17.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.9" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 1.49%)</title><rect x="1148.9" y="531.0" width="17.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.9" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 1.49%)</title><rect x="1148.9" y="515.0" width="17.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.9" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.00%)</title><rect x="1148.9" y="499.0" width="11.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.9" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.00%)</title><rect x="1148.9" y="483.0" width="11.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.9" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.00%)</title><rect x="1148.9" y="467.0" width="11.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.9" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.00%)</title><rect x="1148.9" y="451.0" width="11.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.9" y="462.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.50%)</title><rect x="1148.9" y="435.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.9" y="446.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.50%)</title><rect x="1148.9" y="419.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.9" y="430.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.50%)</title><rect x="1148.9" y="403.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.9" y="414.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.50%)</title><rect x="1148.9" y="387.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.9" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.50%)</title><rect x="1154.8" y="435.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.8" y="446.0"></text>
</g>
<g>
<title>Instruction::as_Local() (1 samples, 0.50%)</title><rect x="1154.8" y="419.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.8" y="430.0"></text>
</g>
<g>
<title>ObjectType::base() const (1 samples, 0.50%)</title><rect x="1160.6" y="499.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.6" y="510.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.50%)</title><rect x="1166.5" y="611.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.5" y="622.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.50%)</title><rect x="1166.5" y="595.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.5" y="606.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.50%)</title><rect x="1166.5" y="579.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="590.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.50%)</title><rect x="1166.5" y="563.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.5" y="574.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.50%)</title><rect x="1166.5" y="547.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="558.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.50%)</title><rect x="1166.5" y="531.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.5" y="542.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_monitor_values(GrowableArray&lt;MonitorValue*&gt;*) (1 samples, 0.50%)</title><rect x="1166.5" y="515.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.5" y="526.0"></text>
</g>
<g>
<title>MonitorValue::write_on(DebugInfoWriteStream*) (1 samples, 0.50%)</title><rect x="1166.5" y="499.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.5" y="510.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.50%)</title><rect x="1172.4" y="611.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.4" y="622.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.50%)</title><rect x="1172.4" y="595.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.4" y="606.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.50%)</title><rect x="1172.4" y="579.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.4" y="590.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.50%)</title><rect x="1172.4" y="563.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.4" y="574.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.50%)</title><rect x="1178.3" y="691.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="702.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.50%)</title><rect x="1178.3" y="675.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="686.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.50%)</title><rect x="1178.3" y="659.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.50%)</title><rect x="1178.3" y="643.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.50%)</title><rect x="1178.3" y="627.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.50%)</title><rect x="1184.1" y="723.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="734.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.50%)</title><rect x="1184.1" y="707.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="718.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.50%)</title><rect x="1184.1" y="691.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="702.0"></text>
</g>
</g>
</svg>
