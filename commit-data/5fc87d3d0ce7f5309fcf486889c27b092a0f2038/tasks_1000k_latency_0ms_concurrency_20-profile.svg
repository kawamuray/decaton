<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (1,366 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (261 samples, 19.11%)</title><rect x="10.0" y="1299.0" width="225.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1310.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.07%)</title><rect x="10.9" y="1283.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="10.9" y="1267.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="10.9" y="1251.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.07%)</title><rect x="10.9" y="1235.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.9" y="1219.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.9" y="1203.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.9" y="1187.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="10.9" y="1171.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="10.9" y="1155.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="10.9" y="1139.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.07%)</title><rect x="10.9" y="1123.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="10.9" y="1107.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.07%)</title><rect x="10.9" y="1091.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="10.9" y="1075.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="10.9" y="1059.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.07%)</title><rect x="10.9" y="1043.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="10.9" y="1027.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="10.9" y="1011.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (259 samples, 18.96%)</title><rect x="11.7" y="1283.0" width="223.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.7" y="1294.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.29%)</title><rect x="11.7" y="1267.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.7" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.29%)</title><rect x="11.7" y="1251.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.7" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1077863986.accept (4 samples, 0.29%)</title><rect x="11.7" y="1235.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.7" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.29%)</title><rect x="11.7" y="1219.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.29%)</title><rect x="11.7" y="1203.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.7" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.29%)</title><rect x="11.7" y="1187.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.37%)</title><rect x="15.2" y="1267.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (5 samples, 0.37%)</title><rect x="15.2" y="1251.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.2" y="1262.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="15.2" y="1235.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.07%)</title><rect x="15.2" y="1219.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.2" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="15.2" y="1203.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.2" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.29%)</title><rect x="16.0" y="1235.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.29%)</title><rect x="16.0" y="1219.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.0" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.29%)</title><rect x="16.0" y="1203.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.0" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.29%)</title><rect x="16.0" y="1187.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.0" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.29%)</title><rect x="16.0" y="1171.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="16.0" y="1155.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.0" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="16.0" y="1139.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.0" y="1150.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="16.0" y="1123.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="19.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="16.9" y="1155.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.07%)</title><rect x="16.9" y="1139.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.15%)</title><rect x="17.8" y="1155.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.15%)</title><rect x="17.8" y="1139.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.8" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.15%)</title><rect x="17.8" y="1123.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.8" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (2 samples, 0.15%)</title><rect x="17.8" y="1107.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.8" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="17.8" y="1091.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="20.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$169/1380720111.get (1 samples, 0.07%)</title><rect x="18.6" y="1091.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.15%)</title><rect x="19.5" y="1267.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.15%)</title><rect x="19.5" y="1251.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.5" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="19.5" y="1235.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="19.5" y="1219.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.5" y="1230.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="19.5" y="1203.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.5" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="19.5" y="1187.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="19.5" y="1171.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.5" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="20.4" y="1219.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="20.4" y="1203.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="20.4" y="1187.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.4" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="20.4" y="1171.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.4" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="20.4" y="1155.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="20.4" y="1139.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$251/1085109241.test (1 samples, 0.07%)</title><rect x="20.4" y="1123.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (190 samples, 13.91%)</title><rect x="21.2" y="1267.0" width="164.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.2" y="1278.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1709829722.accept (186 samples, 13.62%)</title><rect x="22.1" y="1251.0" width="160.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.1" y="1262.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (186 samples, 13.62%)</title><rect x="22.1" y="1235.0" width="160.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.1" y="1246.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.15%)</title><rect x="22.1" y="1219.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (143 samples, 10.47%)</title><rect x="23.8" y="1219.0" width="123.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.8" y="1230.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (143 samples, 10.47%)</title><rect x="23.8" y="1203.0" width="123.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.8" y="1214.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (143 samples, 10.47%)</title><rect x="23.8" y="1187.0" width="123.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.8" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (143 samples, 10.47%)</title><rect x="23.8" y="1171.0" width="123.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.8" y="1182.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (143 samples, 10.47%)</title><rect x="23.8" y="1155.0" width="123.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.8" y="1166.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (143 samples, 10.47%)</title><rect x="23.8" y="1139.0" width="123.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.8" y="1150.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (116 samples, 8.49%)</title><rect x="23.8" y="1123.0" width="100.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.8" y="1134.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (29 samples, 2.12%)</title><rect x="23.8" y="1107.0" width="25.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.8" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (29 samples, 2.12%)</title><rect x="23.8" y="1091.0" width="25.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.8" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (22 samples, 1.61%)</title><rect x="29.9" y="1075.0" width="19.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (20 samples, 1.46%)</title><rect x="31.6" y="1059.0" width="17.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.88%)</title><rect x="48.9" y="1107.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (12 samples, 0.88%)</title><rect x="48.9" y="1091.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.22%)</title><rect x="52.3" y="1075.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.3" y="1086.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.22%)</title><rect x="52.3" y="1059.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="55.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.37%)</title><rect x="54.9" y="1075.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="57.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (75 samples, 5.49%)</title><rect x="59.2" y="1107.0" width="64.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.2" y="1118.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (75 samples, 5.49%)</title><rect x="59.2" y="1091.0" width="64.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.2" y="1102.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (70 samples, 5.12%)</title><rect x="61.0" y="1075.0" width="60.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.0" y="1086.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (70 samples, 5.12%)</title><rect x="61.0" y="1059.0" width="60.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.0" y="1070.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (70 samples, 5.12%)</title><rect x="61.0" y="1043.0" width="60.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="64.0" y="1054.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (63 samples, 4.61%)</title><rect x="61.0" y="1027.0" width="54.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="64.0" y="1038.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="61.8" y="1011.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="64.8" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_signal (48 samples, 3.51%)</title><rect x="62.7" y="1011.0" width="41.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="65.7" y="1022.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.22%)</title><rect x="104.2" y="1011.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="107.2" y="1022.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.73%)</title><rect x="106.7" y="1011.0" width="8.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="109.7" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.37%)</title><rect x="115.4" y="1027.0" width="4.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="118.4" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.15%)</title><rect x="119.7" y="1027.0" width="1.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="122.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.22%)</title><rect x="121.4" y="1075.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (25 samples, 1.83%)</title><rect x="124.0" y="1123.0" width="21.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="127.0" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (25 samples, 1.83%)</title><rect x="124.0" y="1107.0" width="21.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="127.0" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (25 samples, 1.83%)</title><rect x="124.0" y="1091.0" width="21.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="127.0" y="1102.0">j..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="143.0" y="1075.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="146.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.15%)</title><rect x="145.6" y="1123.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.15%)</title><rect x="145.6" y="1107.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.15%)</title><rect x="145.6" y="1091.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="145.6" y="1075.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="148.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="146.5" y="1075.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.15%)</title><rect x="147.3" y="1219.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.15%)</title><rect x="147.3" y="1203.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.15%)</title><rect x="149.1" y="1219.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.1" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.15%)</title><rect x="149.1" y="1203.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="152.1" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.15%)</title><rect x="149.1" y="1187.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="152.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (37 samples, 2.71%)</title><rect x="150.8" y="1219.0" width="32.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.8" y="1230.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="167.2" y="1203.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="167.2" y="1187.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="170.2" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="167.2" y="1171.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="170.2" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="167.2" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="170.2" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="167.2" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="170.2" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="167.2" y="1123.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="170.2" y="1134.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="167.2" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="170.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 1.17%)</title><rect x="168.1" y="1203.0" width="13.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="171.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (16 samples, 1.17%)</title><rect x="168.1" y="1187.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="171.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.73%)</title><rect x="168.1" y="1171.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.73%)</title><rect x="168.1" y="1155.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.73%)</title><rect x="168.1" y="1139.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.1" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="174.1" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="177.1" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="174.1" y="1107.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="177.1" y="1118.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="174.1" y="1091.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="177.1" y="1102.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="174.1" y="1075.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="177.1" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="175.0" y="1123.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="178.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (5 samples, 0.37%)</title><rect x="176.7" y="1171.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.07%)</title><rect x="181.0" y="1171.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.0" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="181.9" y="1203.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="184.9" y="1214.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="182.8" y="1251.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="185.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.15%)</title><rect x="183.6" y="1251.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.15%)</title><rect x="183.6" y="1235.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.15%)</title><rect x="183.6" y="1219.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="186.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.15%)</title><rect x="183.6" y="1203.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.6" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.15%)</title><rect x="183.6" y="1187.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="186.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 4.25%)</title><rect x="185.4" y="1267.0" width="50.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="188.4" y="1278.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 4.25%)</title><rect x="185.4" y="1251.0" width="50.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.4" y="1262.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 2.49%)</title><rect x="186.2" y="1235.0" width="29.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.2" y="1246.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (4 samples, 0.29%)</title><rect x="186.2" y="1219.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (4 samples, 0.29%)</title><rect x="186.2" y="1203.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.2" y="1214.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (2 samples, 0.15%)</title><rect x="186.2" y="1187.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="189.2" y="1198.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (1 samples, 0.07%)</title><rect x="187.1" y="1171.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="190.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (2 samples, 0.15%)</title><rect x="188.0" y="1187.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="191.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (30 samples, 2.20%)</title><rect x="189.7" y="1219.0" width="25.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.7" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (30 samples, 2.20%)</title><rect x="189.7" y="1203.0" width="25.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="192.7" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (28 samples, 2.05%)</title><rect x="189.7" y="1187.0" width="24.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="192.7" y="1198.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (28 samples, 2.05%)</title><rect x="189.7" y="1171.0" width="24.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.7" y="1182.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.32%)</title><rect x="189.7" y="1155.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.59%)</title><rect x="198.3" y="1139.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.59%)</title><rect x="198.3" y="1123.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.59%)</title><rect x="198.3" y="1107.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.59%)</title><rect x="198.3" y="1091.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="201.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.59%)</title><rect x="198.3" y="1075.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.59%)</title><rect x="198.3" y="1059.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="201.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.59%)</title><rect x="198.3" y="1043.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="201.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.66%)</title><rect x="205.2" y="1155.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 0.66%)</title><rect x="205.2" y="1139.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.37%)</title><rect x="205.2" y="1123.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.2" y="1134.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.37%)</title><rect x="205.2" y="1107.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.29%)</title><rect x="209.5" y="1123.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.5" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.29%)</title><rect x="209.5" y="1107.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.07%)</title><rect x="213.0" y="1155.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="213.9" y="1187.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="213.9" y="1171.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.07%)</title><rect x="213.9" y="1155.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="213.9" y="1139.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="213.9" y="1123.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="214.7" y="1187.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="214.7" y="1171.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="214.7" y="1155.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="214.7" y="1139.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="214.7" y="1123.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="217.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="214.7" y="1107.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.07%)</title><rect x="214.7" y="1091.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/Math.min (1 samples, 0.07%)</title><rect x="214.7" y="1075.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="217.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.66%)</title><rect x="215.6" y="1235.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.66%)</title><rect x="215.6" y="1219.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.66%)</title><rect x="215.6" y="1203.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.15%)</title><rect x="215.6" y="1187.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/333017579.accept (2 samples, 0.15%)</title><rect x="215.6" y="1171.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.15%)</title><rect x="215.6" y="1155.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="218.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.15%)</title><rect x="215.6" y="1139.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.07%)</title><rect x="216.5" y="1123.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.07%)</title><rect x="216.5" y="1107.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.07%)</title><rect x="216.5" y="1091.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.5" y="1102.0"></text>
</g>
<g>
<title>java/util/Optional.equals (1 samples, 0.07%)</title><rect x="216.5" y="1075.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="219.5" y="1086.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.07%)</title><rect x="216.5" y="1059.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="217.3" y="1187.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.3" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="217.3" y="1171.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="217.3" y="1155.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="217.3" y="1139.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="217.3" y="1123.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.3" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="217.3" y="1107.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="220.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="218.2" y="1187.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="218.2" y="1171.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="218.2" y="1155.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="218.2" y="1139.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="218.2" y="1123.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.2" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="218.2" y="1107.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.2" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="218.2" y="1091.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.2" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="218.2" y="1075.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.2" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$220/1813334862.get (1 samples, 0.07%)</title><rect x="218.2" y="1059.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.15%)</title><rect x="219.0" y="1187.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.15%)</title><rect x="219.0" y="1171.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.0" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.15%)</title><rect x="219.0" y="1155.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.0" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.07%)</title><rect x="219.0" y="1139.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.0" y="1150.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.07%)</title><rect x="219.0" y="1123.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="219.9" y="1139.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="219.9" y="1123.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.9" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.07%)</title><rect x="219.9" y="1107.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.22%)</title><rect x="220.8" y="1187.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.22%)</title><rect x="220.8" y="1171.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.22%)</title><rect x="220.8" y="1155.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.22%)</title><rect x="220.8" y="1139.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.8" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.22%)</title><rect x="220.8" y="1123.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.8" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.22%)</title><rect x="220.8" y="1107.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.22%)</title><rect x="220.8" y="1091.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (3 samples, 0.22%)</title><rect x="220.8" y="1075.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (3 samples, 0.22%)</title><rect x="220.8" y="1059.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (3 samples, 0.22%)</title><rect x="220.8" y="1043.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="221.6" y="1027.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="221.6" y="1011.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$214/284829702.test (1 samples, 0.07%)</title><rect x="221.6" y="995.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/760080452.apply (1 samples, 0.07%)</title><rect x="222.5" y="1027.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.44%)</title><rect x="223.4" y="1235.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.37%)</title><rect x="223.4" y="1219.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="223.4" y="1203.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.07%)</title><rect x="223.4" y="1187.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.07%)</title><rect x="223.4" y="1171.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getOrElse (1 samples, 0.07%)</title><rect x="223.4" y="1155.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.07%)</title><rect x="223.4" y="1139.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.07%)</title><rect x="223.4" y="1123.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.29%)</title><rect x="224.2" y="1203.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="227.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.29%)</title><rect x="224.2" y="1187.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.29%)</title><rect x="224.2" y="1171.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.22%)</title><rect x="224.2" y="1155.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="227.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.22%)</title><rect x="224.2" y="1139.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.22%)</title><rect x="224.2" y="1123.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.22%)</title><rect x="224.2" y="1107.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.2" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.22%)</title><rect x="224.2" y="1091.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.2" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="224.2" y="1075.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="227.2" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.07%)</title><rect x="226.0" y="1075.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.0" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.07%)</title><rect x="226.0" y="1059.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.0" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.07%)</title><rect x="226.0" y="1043.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.0" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.07%)</title><rect x="226.0" y="1027.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.0" y="1038.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.07%)</title><rect x="226.0" y="1011.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="229.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.07%)</title><rect x="226.8" y="1155.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="226.8" y="1139.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="229.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="226.8" y="1123.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.hashCode (1 samples, 0.07%)</title><rect x="226.8" y="1107.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="227.7" y="1219.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.07%)</title><rect x="227.7" y="1203.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.07%)</title><rect x="227.7" y="1187.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.canSendRequest (1 samples, 0.07%)</title><rect x="227.7" y="1171.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.canSendMore (1 samples, 0.07%)</title><rect x="227.7" y="1155.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.37%)</title><rect x="228.6" y="1235.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.37%)</title><rect x="228.6" y="1219.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="228.6" y="1203.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1413862083.accept (1 samples, 0.07%)</title><rect x="228.6" y="1187.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.07%)</title><rect x="228.6" y="1171.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="228.6" y="1155.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.6" y="1166.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="229.4" y="1203.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.4" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="229.4" y="1187.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="232.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="229.4" y="1171.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.15%)</title><rect x="230.3" y="1203.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.15%)</title><rect x="230.3" y="1187.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.3" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="230.3" y="1171.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="230.3" y="1155.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="230.3" y="1139.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="230.3" y="1123.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.3" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="230.3" y="1107.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="230.3" y="1091.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="231.1" y="1091.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="231.1" y="1075.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="231.1" y="1059.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="231.1" y="1043.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="231.1" y="1027.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/981399193.test (1 samples, 0.07%)</title><rect x="231.1" y="1011.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.1" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="232.0" y="1203.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="235.0" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="232.0" y="1187.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="235.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="232.9" y="1235.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="235.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="232.9" y="1219.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.07%)</title><rect x="232.9" y="1203.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.9" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="232.9" y="1187.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="235.9" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="232.9" y="1171.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="235.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.15%)</title><rect x="233.7" y="1235.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="233.7" y="1219.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="233.7" y="1203.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="233.7" y="1187.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.15%)</title><rect x="233.7" y="1171.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.7" y="1182.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="233.7" y="1155.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="236.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="234.6" y="1155.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (670 samples, 49.05%)</title><rect x="235.5" y="1299.0" width="578.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.5" y="1310.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (670 samples, 49.05%)</title><rect x="235.5" y="1283.0" width="578.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.5" y="1294.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (670 samples, 49.05%)</title><rect x="235.5" y="1267.0" width="578.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.5" y="1278.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/653839909.run (469 samples, 34.33%)</title><rect x="241.5" y="1251.0" width="405.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="244.5" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$L..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (469 samples, 34.33%)</title><rect x="241.5" y="1235.0" width="405.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.5" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.la..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (469 samples, 34.33%)</title><rect x="241.5" y="1219.0" width="405.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.5" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (462 samples, 33.82%)</title><rect x="241.5" y="1203.0" width="399.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.5" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessPipeline...</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.29%)</title><rect x="245.0" y="1187.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (165 samples, 12.08%)</title><rect x="248.4" y="1187.0" width="142.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.4" y="1198.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (165 samples, 12.08%)</title><rect x="248.4" y="1171.0" width="142.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.4" y="1182.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (165 samples, 12.08%)</title><rect x="248.4" y="1155.0" width="142.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.4" y="1166.0">com/linecorp/decat..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="248.4" y="1139.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="251.4" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="248.4" y="1123.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="251.4" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="248.4" y="1107.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="251.4" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="248.4" y="1091.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="251.4" y="1102.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="248.4" y="1075.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="251.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (164 samples, 12.01%)</title><rect x="249.3" y="1139.0" width="141.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.3" y="1150.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (164 samples, 12.01%)</title><rect x="249.3" y="1123.0" width="141.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.3" y="1134.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (164 samples, 12.01%)</title><rect x="249.3" y="1107.0" width="141.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="252.3" y="1118.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (50 samples, 3.66%)</title><rect x="249.3" y="1091.0" width="43.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.3" y="1102.0">com/..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="263.1" y="1075.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="266.1" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.51%)</title><rect x="264.0" y="1075.0" width="6.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="267.0" y="1086.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.37%)</title><rect x="265.7" y="1059.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="268.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.51%)</title><rect x="270.0" y="1075.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 0.37%)</title><rect x="271.7" y="1059.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.37%)</title><rect x="271.7" y="1043.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.37%)</title><rect x="271.7" y="1027.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.37%)</title><rect x="271.7" y="1011.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="274.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.37%)</title><rect x="271.7" y="995.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (19 samples, 1.39%)</title><rect x="276.1" y="1075.0" width="16.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (19 samples, 1.39%)</title><rect x="276.1" y="1059.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.1" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="282.1" y="1043.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="285.1" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="282.1" y="1027.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="285.1" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.15%)</title><rect x="282.1" y="1011.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="285.1" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.15%)</title><rect x="282.1" y="995.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="285.1" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="282.1" y="979.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="285.1" y="990.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="283.0" y="979.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="286.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.29%)</title><rect x="283.8" y="1043.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.8" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="283.8" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="286.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.22%)</title><rect x="284.7" y="1027.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="287.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 0.44%)</title><rect x="287.3" y="1043.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.44%)</title><rect x="287.3" y="1027.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.07%)</title><rect x="287.3" y="1011.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.3" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="287.3" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="290.3" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="287.3" y="979.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="290.3" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="287.3" y="963.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="290.3" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="287.3" y="947.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="290.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.37%)</title><rect x="288.2" y="1011.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (107 samples, 7.83%)</title><rect x="292.5" y="1091.0" width="92.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.5" y="1102.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.15%)</title><rect x="293.3" y="1075.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.15%)</title><rect x="295.1" y="1075.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.07%)</title><rect x="296.8" y="1075.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="299.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.37%)</title><rect x="297.7" y="1075.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.22%)</title><rect x="299.4" y="1059.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 0.95%)</title><rect x="302.0" y="1075.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="305.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.07%)</title><rect x="302.8" y="1059.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="305.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.81%)</title><rect x="303.7" y="1059.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.59%)</title><rect x="303.7" y="1043.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.37%)</title><rect x="306.3" y="1027.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="309.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (3 samples, 0.22%)</title><rect x="310.6" y="1043.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.66%)</title><rect x="313.2" y="1075.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.2" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="314.9" y="1059.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="317.9" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="314.9" y="1043.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="317.9" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.15%)</title><rect x="314.9" y="1027.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="317.9" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="314.9" y="1011.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="317.9" y="1022.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="314.9" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="317.9" y="1006.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.07%)</title><rect x="314.9" y="979.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="317.9" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="315.8" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="318.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.37%)</title><rect x="316.7" y="1059.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="319.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (73 samples, 5.34%)</title><rect x="321.0" y="1075.0" width="63.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.0" y="1086.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (24 samples, 1.76%)</title><rect x="322.7" y="1059.0" width="20.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="325.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.07%)</title><rect x="322.7" y="1043.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.51%)</title><rect x="323.6" y="1043.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="326.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.51%)</title><rect x="323.6" y="1027.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="326.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.51%)</title><rect x="323.6" y="1011.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.51%)</title><rect x="323.6" y="995.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="326.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.07%)</title><rect x="328.8" y="979.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (14 samples, 1.02%)</title><rect x="329.6" y="1043.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (6 samples, 0.44%)</title><rect x="329.6" y="1027.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.07%)</title><rect x="333.9" y="1011.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="336.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (8 samples, 0.59%)</title><rect x="334.8" y="1027.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (8 samples, 0.59%)</title><rect x="334.8" y="1011.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="337.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (7 samples, 0.51%)</title><rect x="335.7" y="995.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="338.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (7 samples, 0.51%)</title><rect x="335.7" y="979.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="338.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="341.7" y="1043.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="344.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="341.7" y="1027.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="344.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.07%)</title><rect x="342.6" y="1043.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="345.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (47 samples, 3.44%)</title><rect x="343.4" y="1059.0" width="40.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="346.4" y="1070.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (47 samples, 3.44%)</title><rect x="343.4" y="1043.0" width="40.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="346.4" y="1054.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (46 samples, 3.37%)</title><rect x="344.3" y="1027.0" width="39.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.3" y="1038.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.54%)</title><rect x="348.6" y="1011.0" width="18.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="351.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (6 samples, 0.44%)</title><rect x="351.2" y="995.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.44%)</title><rect x="356.4" y="995.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.44%)</title><rect x="356.4" y="979.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.44%)</title><rect x="356.4" y="963.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.37%)</title><rect x="356.4" y="947.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="360.7" y="947.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="363.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.07%)</title><rect x="361.6" y="995.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.07%)</title><rect x="361.6" y="979.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.15%)</title><rect x="362.4" y="995.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.15%)</title><rect x="362.4" y="979.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="365.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="363.3" y="963.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="366.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (3 samples, 0.22%)</title><rect x="364.2" y="995.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="367.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.37%)</title><rect x="366.8" y="1011.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="369.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.29%)</title><rect x="367.6" y="995.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="370.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.29%)</title><rect x="367.6" y="979.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.29%)</title><rect x="367.6" y="963.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="370.6" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.29%)</title><rect x="367.6" y="947.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="370.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.44%)</title><rect x="371.1" y="1011.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="374.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.44%)</title><rect x="371.1" y="995.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="374.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.44%)</title><rect x="371.1" y="979.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="374.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.44%)</title><rect x="371.1" y="963.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="374.1" y="974.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.44%)</title><rect x="371.1" y="947.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="374.1" y="958.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.44%)</title><rect x="371.1" y="931.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="374.1" y="942.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.07%)</title><rect x="375.4" y="915.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (8 samples, 0.59%)</title><rect x="376.3" y="1011.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.59%)</title><rect x="376.3" y="995.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.59%)</title><rect x="376.3" y="979.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.07%)</title><rect x="383.2" y="1011.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="386.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.07%)</title><rect x="384.0" y="1075.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.51%)</title><rect x="384.9" y="1091.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="387.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.51%)</title><rect x="384.9" y="1075.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="387.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.51%)</title><rect x="384.9" y="1059.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.51%)</title><rect x="384.9" y="1043.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.51%)</title><rect x="384.9" y="1027.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (266 samples, 19.47%)</title><rect x="391.0" y="1187.0" width="229.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.0" y="1198.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (49 samples, 3.59%)</title><rect x="391.0" y="1171.0" width="42.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="394.0" y="1182.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (49 samples, 3.59%)</title><rect x="391.0" y="1155.0" width="42.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.0" y="1166.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (48 samples, 3.51%)</title><rect x="391.8" y="1139.0" width="41.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="394.8" y="1150.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (11 samples, 0.81%)</title><rect x="391.8" y="1123.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 0.81%)</title><rect x="391.8" y="1107.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="394.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (11 samples, 0.81%)</title><rect x="391.8" y="1091.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="394.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 0.81%)</title><rect x="391.8" y="1075.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.29%)</title><rect x="397.9" y="1059.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.22%)</title><rect x="398.7" y="1043.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="401.7" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (37 samples, 2.71%)</title><rect x="401.3" y="1123.0" width="32.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.3" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 0.81%)</title><rect x="423.8" y="1107.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="426.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="423.8" y="1091.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="426.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.73%)</title><rect x="424.6" y="1091.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="427.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.15%)</title><rect x="430.7" y="1075.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="433.7" y="1086.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="432.4" y="1075.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="435.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.37%)</title><rect x="433.3" y="1171.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="436.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.37%)</title><rect x="433.3" y="1155.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="436.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.37%)</title><rect x="433.3" y="1139.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (149 samples, 10.91%)</title><rect x="437.6" y="1171.0" width="128.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.6" y="1182.0">com/linecorp/dec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="437.6" y="1155.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="440.6" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="437.6" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="440.6" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="437.6" y="1123.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="440.6" y="1134.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="437.6" y="1107.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="440.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (148 samples, 10.83%)</title><rect x="438.5" y="1155.0" width="127.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="441.5" y="1166.0">com/linecorp/dec..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.15%)</title><rect x="445.4" y="1139.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="448.4" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="445.4" y="1123.0" width="1.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="448.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (49 samples, 3.59%)</title><rect x="447.1" y="1139.0" width="42.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.1" y="1150.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (38 samples, 2.78%)</title><rect x="450.6" y="1123.0" width="32.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.6" y="1134.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (37 samples, 2.71%)</title><rect x="451.4" y="1107.0" width="32.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="454.4" y="1118.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (24 samples, 1.76%)</title><rect x="456.6" y="1091.0" width="20.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="459.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (24 samples, 1.76%)</title><rect x="456.6" y="1075.0" width="20.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (24 samples, 1.76%)</title><rect x="456.6" y="1059.0" width="20.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="459.6" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (15 samples, 1.10%)</title><rect x="462.7" y="1043.0" width="12.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="465.7" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="463.5" y="1027.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="466.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.37%)</title><rect x="464.4" y="1027.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="467.4" y="1038.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.15%)</title><rect x="464.4" y="1011.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="467.4" y="1022.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.15%)</title><rect x="464.4" y="995.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="467.4" y="1006.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="466.1" y="1011.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="469.1" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.15%)</title><rect x="467.0" y="1011.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="470.0" y="1022.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.15%)</title><rect x="467.0" y="995.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="470.0" y="1006.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="467.0" y="979.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="470.0" y="990.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="467.0" y="963.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="470.0" y="974.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="467.8" y="979.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="470.8" y="990.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.15%)</title><rect x="468.7" y="1027.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="471.7" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.44%)</title><rect x="470.4" y="1027.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="473.4" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (6 samples, 0.44%)</title><rect x="470.4" y="1011.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="473.4" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="470.4" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="473.4" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="471.3" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="474.3" y="1006.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (2 samples, 0.15%)</title><rect x="472.2" y="995.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="475.2" y="1006.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="473.9" y="995.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="476.9" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="473.9" y="979.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="476.9" y="990.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="474.7" y="995.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="477.7" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="475.6" y="1043.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="478.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.07%)</title><rect x="477.3" y="1091.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.15%)</title><rect x="478.2" y="1091.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="481.2" y="1102.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="479.9" y="1091.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="482.9" y="1102.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="481.7" y="1091.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="484.7" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="482.5" y="1091.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="485.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="483.4" y="1123.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="486.4" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="483.4" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="486.4" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="483.4" y="1091.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="486.4" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="483.4" y="1075.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="486.4" y="1086.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="483.4" y="1059.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="486.4" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.44%)</title><rect x="484.2" y="1123.0" width="5.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="487.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.22%)</title><rect x="489.4" y="1139.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.66%)</title><rect x="492.0" y="1139.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="495.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.07%)</title><rect x="492.0" y="1123.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="495.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="492.0" y="1107.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="495.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="492.0" y="1091.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="495.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.59%)</title><rect x="492.9" y="1123.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.59%)</title><rect x="492.9" y="1107.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="495.9" y="1118.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (77 samples, 5.64%)</title><rect x="499.8" y="1139.0" width="66.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.8" y="1150.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (75 samples, 5.49%)</title><rect x="501.5" y="1123.0" width="64.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="504.5" y="1134.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.51%)</title><rect x="501.5" y="1107.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="504.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.51%)</title><rect x="501.5" y="1091.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="504.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.51%)</title><rect x="501.5" y="1075.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.51%)</title><rect x="501.5" y="1059.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="506.7" y="1043.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="509.7" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (68 samples, 4.98%)</title><rect x="507.6" y="1107.0" width="58.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.6" y="1118.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (62 samples, 4.54%)</title><rect x="512.8" y="1091.0" width="53.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.8" y="1102.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.42%)</title><rect x="537.8" y="1075.0" width="28.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="540.8" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.22%)</title><rect x="550.8" y="1059.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="553.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 0.88%)</title><rect x="553.4" y="1059.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="556.4" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="562.9" y="1043.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="565.9" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="562.9" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="565.9" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="562.9" y="1011.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="565.9" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="562.9" y="995.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="565.9" y="1006.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="562.9" y="979.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="565.9" y="990.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.22%)</title><rect x="563.7" y="1059.0" width="2.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="566.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (47 samples, 3.44%)</title><rect x="566.3" y="1171.0" width="40.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="569.3" y="1182.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (46 samples, 3.37%)</title><rect x="567.2" y="1155.0" width="39.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="570.2" y="1166.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="568.0" y="1139.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="571.0" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="568.0" y="1123.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="571.0" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="568.0" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="571.0" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="568.0" y="1091.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="571.0" y="1102.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="568.0" y="1075.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="571.0" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="568.0" y="1059.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="571.0" y="1070.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="568.9" y="1123.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="571.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/923219335.process (21 samples, 1.54%)</title><rect x="569.8" y="1139.0" width="18.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="572.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (21 samples, 1.54%)</title><rect x="569.8" y="1123.0" width="18.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="572.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.32%)</title><rect x="570.6" y="1107.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="573.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.51%)</title><rect x="578.4" y="1091.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.4" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="581.0" y="1075.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="584.0" y="1086.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="581.0" y="1059.0" width="3.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="584.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="584.5" y="1091.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="587.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="585.3" y="1091.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="588.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.07%)</title><rect x="585.3" y="1075.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="588.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="586.2" y="1107.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="589.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="586.2" y="1091.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="589.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="586.2" y="1075.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="589.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="586.2" y="1059.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="589.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.getId (1 samples, 0.07%)</title><rect x="587.0" y="1107.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="590.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="587.9" y="1139.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="590.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.07%)</title><rect x="587.9" y="1123.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="590.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.07%)</title><rect x="588.8" y="1139.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.07%)</title><rect x="588.8" y="1123.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="591.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$271/958660699.get$Lambda (1 samples, 0.07%)</title><rect x="588.8" y="1107.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="591.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$271/958660699.&lt;init&gt; (1 samples, 0.07%)</title><rect x="588.8" y="1091.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="591.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.15%)</title><rect x="589.6" y="1139.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="592.6" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.15%)</title><rect x="589.6" y="1123.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="592.6" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (2 samples, 0.15%)</title><rect x="589.6" y="1107.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="592.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (12 samples, 0.88%)</title><rect x="591.4" y="1139.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="594.4" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (12 samples, 0.88%)</title><rect x="591.4" y="1123.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="594.4" y="1134.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.44%)</title><rect x="592.2" y="1107.0" width="5.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="595.2" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.37%)</title><rect x="597.4" y="1107.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="600.4" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="601.7" y="1139.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="604.7" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="601.7" y="1123.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="604.7" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.37%)</title><rect x="602.6" y="1139.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="605.6" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="605.2" y="1123.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="608.2" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="605.2" y="1107.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="608.2" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="605.2" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="608.2" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="606.0" y="1123.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.17%)</title><rect x="606.9" y="1171.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="609.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.17%)</title><rect x="606.9" y="1155.0" width="13.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="609.9" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.44%)</title><rect x="609.5" y="1139.0" width="5.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="612.5" y="1150.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.37%)</title><rect x="610.4" y="1123.0" width="4.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="613.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.51%)</title><rect x="614.7" y="1139.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="617.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/1373487283.accept (7 samples, 0.51%)</title><rect x="614.7" y="1123.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (7 samples, 0.51%)</title><rect x="614.7" y="1107.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="617.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (7 samples, 0.51%)</title><rect x="614.7" y="1091.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="617.7" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (7 samples, 0.51%)</title><rect x="614.7" y="1075.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="617.7" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.create (7 samples, 0.51%)</title><rect x="614.7" y="1059.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="617.7" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.29%)</title><rect x="617.3" y="1043.0" width="3.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="620.3" y="1054.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="617.3" y="1027.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="620.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.02%)</title><rect x="620.7" y="1187.0" width="12.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="623.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.02%)</title><rect x="620.7" y="1171.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="621.6" y="1155.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="624.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.88%)</title><rect x="622.5" y="1155.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="625.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/1373487283.accept (12 samples, 0.88%)</title><rect x="622.5" y="1139.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="625.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (12 samples, 0.88%)</title><rect x="622.5" y="1123.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="625.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (12 samples, 0.88%)</title><rect x="622.5" y="1107.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="625.5" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (12 samples, 0.88%)</title><rect x="622.5" y="1091.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="625.5" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.create (12 samples, 0.88%)</title><rect x="622.5" y="1075.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="625.5" y="1086.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="632.8" y="1187.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.8" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.07%)</title><rect x="632.8" y="1171.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.8" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="632.8" y="1155.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="635.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="632.8" y="1139.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="635.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="632.8" y="1123.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="632.8" y="1107.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="632.8" y="1091.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.8" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.59%)</title><rect x="633.7" y="1187.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="636.7" y="1198.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.59%)</title><rect x="633.7" y="1171.0" width="6.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="636.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.51%)</title><rect x="640.6" y="1203.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="643.6" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.29%)</title><rect x="643.2" y="1187.0" width="3.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="646.2" y="1198.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="643.2" y="1171.0" width="3.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="646.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.29%)</title><rect x="646.6" y="1251.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="649.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.29%)</title><rect x="646.6" y="1235.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="649.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.29%)</title><rect x="646.6" y="1219.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="649.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.29%)</title><rect x="646.6" y="1203.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="649.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.15%)</title><rect x="648.4" y="1187.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="651.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (190 samples, 13.91%)</title><rect x="650.1" y="1251.0" width="164.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="653.1" y="1262.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (190 samples, 13.91%)</title><rect x="650.1" y="1235.0" width="164.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="653.1" y="1246.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (150 samples, 10.98%)</title><rect x="672.6" y="1219.0" width="129.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="675.6" y="1230.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.44%)</title><rect x="677.7" y="1203.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="680.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.44%)</title><rect x="677.7" y="1187.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="680.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.44%)</title><rect x="677.7" y="1171.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="680.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.44%)</title><rect x="677.7" y="1155.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="680.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (135 samples, 9.88%)</title><rect x="682.9" y="1203.0" width="116.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="685.9" y="1214.0">java/util/conc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (135 samples, 9.88%)</title><rect x="682.9" y="1187.0" width="116.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="685.9" y="1198.0">sun/misc/Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.15%)</title><rect x="688.1" y="1171.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="691.1" y="1182.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.15%)</title><rect x="689.8" y="1171.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="692.8" y="1182.0"></text>
</g>
<g>
<title>Unsafe_Park (121 samples, 8.86%)</title><rect x="691.6" y="1171.0" width="104.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="694.6" y="1182.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="695.0" y="1155.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="698.0" y="1166.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.07%)</title><rect x="695.9" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="698.9" y="1166.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (15 samples, 1.10%)</title><rect x="696.7" y="1155.0" width="13.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="699.7" y="1166.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.29%)</title><rect x="702.8" y="1139.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="705.8" y="1150.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="704.5" y="1123.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="707.5" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="705.4" y="1123.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="708.4" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.29%)</title><rect x="706.3" y="1139.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="709.3" y="1150.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.15%)</title><rect x="709.7" y="1155.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="712.7" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.15%)</title><rect x="711.4" y="1155.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="714.4" y="1166.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.51%)</title><rect x="713.2" y="1155.0" width="6.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="716.2" y="1166.0"></text>
</g>
<g>
<title>__lll_unlock_wake (32 samples, 2.34%)</title><rect x="719.2" y="1155.0" width="27.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="722.2" y="1166.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (41 samples, 3.00%)</title><rect x="746.9" y="1155.0" width="35.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="749.9" y="1166.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.29%)</title><rect x="782.3" y="1155.0" width="3.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="785.3" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.15%)</title><rect x="785.7" y="1155.0" width="1.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="788.7" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.29%)</title><rect x="787.5" y="1155.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="790.5" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.22%)</title><rect x="790.9" y="1155.0" width="2.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="793.9" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="793.5" y="1155.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="796.5" y="1166.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="794.4" y="1155.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="797.4" y="1166.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="795.2" y="1155.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="798.2" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="796.1" y="1171.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="799.1" y="1182.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="797.0" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="800.0" y="1182.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.15%)</title><rect x="797.8" y="1171.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="800.8" y="1182.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (3 samples, 0.22%)</title><rect x="799.5" y="1203.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="802.1" y="1219.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="805.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.07%)</title><rect x="802.1" y="1203.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="805.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.07%)</title><rect x="802.1" y="1187.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="805.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.07%)</title><rect x="802.1" y="1171.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="805.1" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="802.1" y="1155.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="805.1" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="802.1" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="805.1" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="802.1" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="805.1" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="802.1" y="1107.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="805.1" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="802.1" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="805.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.07%)</title><rect x="803.0" y="1219.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="806.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.07%)</title><rect x="803.0" y="1203.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="806.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.07%)</title><rect x="803.0" y="1187.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 0.88%)</title><rect x="803.9" y="1219.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="806.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.88%)</title><rect x="803.9" y="1203.0" width="10.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="806.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.88%)</title><rect x="803.9" y="1187.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.88%)</title><rect x="803.9" y="1171.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="806.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="814.2" y="1299.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="817.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="814.2" y="1283.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="814.2" y="1267.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="814.2" y="1251.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="817.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="814.2" y="1235.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="814.2" y="1219.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="814.2" y="1203.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="817.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="814.2" y="1187.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="814.2" y="1171.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.07%)</title><rect x="814.2" y="1155.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="817.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.07%)</title><rect x="814.2" y="1139.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="817.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.07%)</title><rect x="814.2" y="1123.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.2" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.07%)</title><rect x="814.2" y="1107.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="817.2" y="1118.0"></text>
</g>
<g>
<title>start_thread (434 samples, 31.77%)</title><rect x="815.1" y="1299.0" width="374.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="818.1" y="1310.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (434 samples, 31.77%)</title><rect x="815.1" y="1283.0" width="374.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="818.1" y="1294.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 1.90%)</title><rect x="815.1" y="1267.0" width="22.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="818.1" y="1278.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="815.1" y="1251.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="818.1" y="1262.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="815.1" y="1235.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="818.1" y="1246.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.44%)</title><rect x="816.0" y="1251.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="819.0" y="1262.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.37%)</title><rect x="816.0" y="1235.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="819.0" y="1246.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.15%)</title><rect x="816.0" y="1219.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="819.0" y="1230.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.22%)</title><rect x="817.7" y="1219.0" width="2.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="820.7" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.07%)</title><rect x="820.3" y="1235.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="823.3" y="1246.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.24%)</title><rect x="821.1" y="1251.0" width="14.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="824.1" y="1262.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.22%)</title><rect x="821.1" y="1235.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="824.1" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="821.1" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="824.1" y="1230.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.15%)</title><rect x="822.0" y="1219.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="825.0" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.37%)</title><rect x="823.7" y="1235.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="826.7" y="1246.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="823.7" y="1219.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="826.7" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="824.6" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="827.6" y="1230.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="824.6" y="1203.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="827.6" y="1214.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="824.6" y="1187.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="827.6" y="1198.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="824.6" y="1171.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="827.6" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.22%)</title><rect x="825.5" y="1219.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="828.5" y="1230.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="825.5" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="828.5" y="1214.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.15%)</title><rect x="826.3" y="1203.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="829.3" y="1214.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="827.2" y="1187.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="830.2" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (9 samples, 0.66%)</title><rect x="828.1" y="1235.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="831.1" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (9 samples, 0.66%)</title><rect x="828.1" y="1219.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="831.1" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (9 samples, 0.66%)</title><rect x="828.1" y="1203.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="831.1" y="1214.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (9 samples, 0.66%)</title><rect x="828.1" y="1187.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="831.1" y="1198.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 0.66%)</title><rect x="828.1" y="1171.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="831.1" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (9 samples, 0.66%)</title><rect x="828.1" y="1155.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="831.1" y="1166.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (7 samples, 0.51%)</title><rect x="829.8" y="1139.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="832.8" y="1150.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_const(HeapWord*, HeapWord*, void const*) const (1 samples, 0.07%)</title><rect x="829.8" y="1123.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="832.8" y="1134.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.22%)</title><rect x="830.6" y="1123.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="833.6" y="1134.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="833.2" y="1123.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="836.2" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="834.1" y="1123.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="837.1" y="1134.0"></text>
</g>
<g>
<title>MemRegion::intersection(MemRegion) const (1 samples, 0.07%)</title><rect x="835.0" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="838.0" y="1134.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.07%)</title><rect x="835.8" y="1251.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="838.8" y="1262.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="836.7" y="1251.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="839.7" y="1262.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="836.7" y="1235.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="839.7" y="1246.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.07%)</title><rect x="836.7" y="1219.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="839.7" y="1230.0"></text>
</g>
<g>
<title>JavaThread::run() (406 samples, 29.72%)</title><rect x="837.6" y="1267.0" width="350.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="840.6" y="1278.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (406 samples, 29.72%)</title><rect x="837.6" y="1251.0" width="350.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="840.6" y="1262.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (405 samples, 29.65%)</title><rect x="837.6" y="1235.0" width="349.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="840.6" y="1246.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (405 samples, 29.65%)</title><rect x="837.6" y="1219.0" width="349.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="840.6" y="1230.0">CompileBroker::invoke_compiler_on_method(Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (405 samples, 29.65%)</title><rect x="837.6" y="1203.0" width="349.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="840.6" y="1214.0">C2Compiler::compile_method(ciEnv*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (405 samples, 29.65%)</title><rect x="837.6" y="1187.0" width="349.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="840.6" y="1198.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*..</text>
</g>
<g>
<title>Compile::Code_Gen() (157 samples, 11.49%)</title><rect x="837.6" y="1171.0" width="135.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="840.6" y="1182.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.29%)</title><rect x="837.6" y="1155.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="840.6" y="1166.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.15%)</title><rect x="837.6" y="1139.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="840.6" y="1150.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="838.4" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="841.4" y="1134.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="839.3" y="1139.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="842.3" y="1150.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="839.3" y="1123.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="842.3" y="1134.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="840.1" y="1139.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="843.1" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.51%)</title><rect x="841.0" y="1155.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="844.0" y="1166.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.22%)</title><rect x="841.0" y="1139.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="844.0" y="1150.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="841.0" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="844.0" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="841.9" y="1123.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="844.9" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="841.9" y="1107.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="844.9" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="842.7" y="1123.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="845.7" y="1134.0"></text>
</g>
<g>
<title>ObjectValue::write_on(DebugInfoWriteStream*) (1 samples, 0.07%)</title><rect x="842.7" y="1107.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="845.7" y="1118.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.07%)</title><rect x="842.7" y="1091.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="845.7" y="1102.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.07%)</title><rect x="842.7" y="1075.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="845.7" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.22%)</title><rect x="843.6" y="1139.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="846.6" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.22%)</title><rect x="843.6" y="1123.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="846.6" y="1134.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.07%)</title><rect x="846.2" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="849.2" y="1150.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, Address) (1 samples, 0.07%)</title><rect x="846.2" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.2" y="1134.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.07%)</title><rect x="846.2" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="849.2" y="1118.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="847.1" y="1155.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="850.1" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (17 samples, 1.24%)</title><rect x="847.9" y="1155.0" width="14.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="850.9" y="1166.0"></text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.07%)</title><rect x="847.9" y="1139.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="850.9" y="1150.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="848.8" y="1139.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="851.8" y="1150.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (14 samples, 1.02%)</title><rect x="849.6" y="1139.0" width="12.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="852.6" y="1150.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (9 samples, 0.66%)</title><rect x="850.5" y="1123.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.5" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.29%)</title><rect x="858.3" y="1123.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="861.3" y="1134.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.07%)</title><rect x="859.2" y="1107.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="862.2" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="859.2" y="1091.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="862.2" y="1102.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.15%)</title><rect x="860.0" y="1107.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="863.0" y="1118.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="860.9" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="863.9" y="1102.0"></text>
</g>
<g>
<title>ThreadLocalNode::bottom_type() const (1 samples, 0.07%)</title><rect x="860.9" y="1075.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="863.9" y="1086.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.07%)</title><rect x="861.7" y="1139.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="864.7" y="1150.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="862.6" y="1155.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="865.6" y="1166.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.07%)</title><rect x="862.6" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="865.6" y="1150.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="862.6" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="865.6" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.59%)</title><rect x="863.5" y="1155.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.5" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.07%)</title><rect x="863.5" y="1139.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="866.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.07%)</title><rect x="863.5" y="1123.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="866.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.51%)</title><rect x="864.3" y="1139.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="867.3" y="1150.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="864.3" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="867.3" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="865.2" y="1123.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="868.2" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.22%)</title><rect x="866.1" y="1123.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="869.1" y="1134.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="866.1" y="1107.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="869.1" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="866.9" y="1107.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="869.9" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="867.8" y="1107.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="870.8" y="1118.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="867.8" y="1091.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="870.8" y="1102.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.07%)</title><rect x="867.8" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="870.8" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="867.8" y="1059.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="870.8" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="867.8" y="1043.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="870.8" y="1054.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="867.8" y="1027.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="870.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.07%)</title><rect x="868.7" y="1123.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="871.7" y="1134.0"></text>
</g>
<g>
<title>jmpConUNode::pinned() const (1 samples, 0.07%)</title><rect x="869.5" y="1123.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="872.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (118 samples, 8.64%)</title><rect x="870.4" y="1155.0" width="101.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="873.4" y="1166.0">PhaseChaitin..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="871.2" y="1139.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="874.2" y="1150.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.29%)</title><rect x="872.1" y="1139.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="875.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.59%)</title><rect x="875.6" y="1139.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="878.6" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="879.0" y="1123.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="882.0" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="879.9" y="1123.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="882.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.15%)</title><rect x="880.7" y="1123.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="883.7" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="881.6" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="884.6" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.51%)</title><rect x="882.5" y="1139.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="885.5" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="883.3" y="1123.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="886.3" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="884.2" y="1123.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="887.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.22%)</title><rect x="885.9" y="1123.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="888.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (15 samples, 1.10%)</title><rect x="888.5" y="1139.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="891.5" y="1150.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="898.9" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="901.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="899.8" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="902.8" y="1134.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.07%)</title><rect x="899.8" y="1107.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.8" y="1118.0"></text>
</g>
<g>
<title>loadRangeNode::rule() const (1 samples, 0.07%)</title><rect x="900.6" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (25 samples, 1.83%)</title><rect x="901.5" y="1139.0" width="21.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="904.5" y="1150.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (3 samples, 0.22%)</title><rect x="908.4" y="1123.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="911.4" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="911.0" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="914.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.81%)</title><rect x="911.8" y="1123.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="914.8" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="921.3" y="1123.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="924.3" y="1134.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="922.2" y="1123.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="925.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.44%)</title><rect x="923.1" y="1139.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.1" y="1150.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.15%)</title><rect x="924.8" y="1123.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="927.8" y="1134.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="926.5" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="929.5" y="1134.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.07%)</title><rect x="927.4" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="930.4" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.15%)</title><rect x="928.3" y="1139.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="931.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="932.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1139.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.66%)</title><rect x="930.8" y="1139.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (6 samples, 0.44%)</title><rect x="933.4" y="1123.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="936.4" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="936.9" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.9" y="1118.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="936.9" y="1091.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="939.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="937.8" y="1107.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.8" y="1118.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.07%)</title><rect x="937.8" y="1091.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="940.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="938.6" y="1139.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="941.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (14 samples, 1.02%)</title><rect x="939.5" y="1139.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="942.5" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (14 samples, 1.02%)</title><rect x="939.5" y="1123.0" width="12.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="942.5" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (14 samples, 1.02%)</title><rect x="939.5" y="1107.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.5" y="1118.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.22%)</title><rect x="939.5" y="1091.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="942.5" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (10 samples, 0.73%)</title><rect x="942.1" y="1091.0" width="8.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="945.1" y="1102.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="949.0" y="1075.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="952.0" y="1086.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.07%)</title><rect x="949.0" y="1059.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="952.0" y="1070.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="949.0" y="1043.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="952.0" y="1054.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="949.0" y="1027.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="952.0" y="1038.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="949.0" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.0" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="949.9" y="1075.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="952.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="950.7" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.22%)</title><rect x="951.6" y="1139.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.6" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="953.3" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="956.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.22%)</title><rect x="954.2" y="1139.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="957.2" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="955.0" y="1123.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="958.0" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="955.9" y="1123.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.22%)</title><rect x="956.8" y="1139.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="959.8" y="1150.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.22%)</title><rect x="956.8" y="1123.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="959.8" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (13 samples, 0.95%)</title><rect x="959.4" y="1139.0" width="11.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="962.4" y="1150.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.15%)</title><rect x="964.5" y="1123.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="967.5" y="1134.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="965.4" y="1107.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="968.4" y="1118.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="965.4" y="1091.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="968.4" y="1102.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="965.4" y="1075.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="968.4" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="965.4" y="1059.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="968.4" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.37%)</title><rect x="966.3" y="1123.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="969.3" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="969.7" y="1107.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="972.7" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="970.6" y="1139.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.6" y="1150.0"></text>
</g>
<g>
<title>addL_rRegNode::two_adr() const (1 samples, 0.07%)</title><rect x="971.4" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="974.4" y="1150.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.07%)</title><rect x="972.3" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.3" y="1166.0"></text>
</g>
<g>
<title>Compile::Optimize() (232 samples, 16.98%)</title><rect x="973.2" y="1171.0" width="200.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.2" y="1182.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.15%)</title><rect x="973.2" y="1155.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="976.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="974.0" y="1139.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="974.0" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="974.0" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="977.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="974.0" y="1091.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.0" y="1102.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="974.0" y="1075.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="977.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.51%)</title><rect x="974.9" y="1155.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.9" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.51%)</title><rect x="974.9" y="1139.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="974.9" y="1123.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="977.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="974.9" y="1107.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="977.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.37%)</title><rect x="975.8" y="1123.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.29%)</title><rect x="975.8" y="1107.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="978.8" y="1118.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="975.8" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="978.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.6" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="1075.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="979.6" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="1059.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="1027.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="1011.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="979.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="963.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="947.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="931.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="915.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="899.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="979.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="867.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="851.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="835.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="979.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="819.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="803.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="739.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="723.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="707.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="691.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="675.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="643.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="627.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="611.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="595.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="979.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="579.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="979.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="563.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="979.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="547.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.6" y="558.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="976.6" y="531.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="977.5" y="1091.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="977.5" y="1075.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.5" y="1086.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="977.5" y="1059.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="1075.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="1059.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="1043.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="981.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="1027.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="1011.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="995.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="979.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="963.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="947.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="931.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="915.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="899.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="883.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="867.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="851.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="835.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="819.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="803.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="787.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="771.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="739.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="723.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="707.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="691.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="675.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="659.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="643.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="627.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="611.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="595.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="579.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="981.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="563.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="547.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="531.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="515.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="499.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="483.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="467.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="451.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="435.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="419.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="403.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="387.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="371.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="355.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="339.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="323.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.4" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="307.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.4" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="291.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.4" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="275.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.4" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="259.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.4" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="243.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.4" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="227.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.4" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="211.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.4" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="195.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.4" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="179.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.4" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="163.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.4" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="147.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="981.4" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="131.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.4" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.4" y="115.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.4" y="126.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.07%)</title><rect x="978.4" y="99.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.4" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="979.2" y="1107.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="982.2" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="980.1" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="983.1" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="981.0" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="984.0" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.07%)</title><rect x="981.8" y="1155.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.07%)</title><rect x="982.7" y="1155.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.7" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="982.7" y="1139.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="985.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (198 samples, 14.49%)</title><rect x="983.5" y="1155.0" width="171.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.5" y="1166.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="983.5" y="1139.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="986.5" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="983.5" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.5" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="983.5" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.5" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="983.5" y="1091.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="986.5" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="983.5" y="1075.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.5" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="983.5" y="1059.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.5" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="983.5" y="1043.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.5" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="983.5" y="1027.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.5" y="1038.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.07%)</title><rect x="983.5" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.5" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.15%)</title><rect x="984.4" y="1139.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="987.4" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.15%)</title><rect x="984.4" y="1123.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.4" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.15%)</title><rect x="984.4" y="1107.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="987.4" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.15%)</title><rect x="984.4" y="1091.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.4" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.15%)</title><rect x="984.4" y="1075.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.4" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="984.4" y="1059.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.4" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="984.4" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.4" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="984.4" y="1027.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.4" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="984.4" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.4" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="984.4" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="987.4" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="984.4" y="979.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.4" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="984.4" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="987.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="984.4" y="947.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.07%)</title><rect x="984.4" y="931.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="987.4" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="985.3" y="1059.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="985.3" y="1043.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="985.3" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.3" y="1038.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="985.3" y="1011.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="988.3" y="1022.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="986.1" y="1139.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="989.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.44%)</title><rect x="987.0" y="1139.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="990.0" y="1150.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.15%)</title><rect x="989.6" y="1123.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.6" y="1134.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="991.3" y="1123.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.51%)</title><rect x="992.2" y="1139.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.22%)</title><rect x="995.6" y="1123.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="998.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.15%)</title><rect x="996.5" y="1107.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="999.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (174 samples, 12.74%)</title><rect x="998.2" y="1139.0" width="150.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.2" y="1150.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (168 samples, 12.30%)</title><rect x="1003.4" y="1123.0" width="145.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1006.4" y="1134.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1006.9" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1009.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.51%)</title><rect x="1007.7" y="1107.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1010.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (156 samples, 11.42%)</title><rect x="1013.8" y="1107.0" width="134.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1016.8" y="1118.0">PhaseIdealLoop::g..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1119.2" y="1091.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.2" y="1102.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1119.2" y="1075.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1122.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1120.0" y="1091.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1120.0" y="1075.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1120.0" y="1059.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (31 samples, 2.27%)</title><rect x="1120.9" y="1091.0" width="26.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.9" y="1102.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1147.7" y="1091.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.07%)</title><rect x="1148.5" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.22%)</title><rect x="1149.4" y="1139.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.15%)</title><rect x="1150.3" y="1123.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.07%)</title><rect x="1150.3" y="1107.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1151.1" y="1107.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.1" y="1118.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.07%)</title><rect x="1151.1" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.22%)</title><rect x="1152.0" y="1139.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.22%)</title><rect x="1152.0" y="1123.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.0" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1152.9" y="1107.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.9" y="1118.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.15%)</title><rect x="1152.9" y="1091.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (19 samples, 1.39%)</title><rect x="1154.6" y="1155.0" width="16.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (17 samples, 1.24%)</title><rect x="1155.4" y="1139.0" width="14.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.4" y="1150.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1155.4" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.4" y="1134.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1155.4" y="1107.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.4" y="1118.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.07%)</title><rect x="1156.3" y="1123.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.3" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1157.2" y="1123.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.2" y="1134.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1157.2" y="1107.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.2" y="1118.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1157.2" y="1091.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.2" y="1102.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1157.2" y="1075.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.2" y="1086.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1158.0" y="1107.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.0" y="1118.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1158.0" y="1091.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.0" y="1102.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1158.9" y="1123.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1160.6" y="1123.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.44%)</title><rect x="1161.5" y="1123.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="1134.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1164.9" y="1107.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="1118.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1164.9" y="1091.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1167.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1165.8" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.8" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1165.8" y="1091.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.8" y="1102.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1166.7" y="1123.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.7" y="1134.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.15%)</title><rect x="1167.5" y="1107.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.5" y="1118.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1168.4" y="1091.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.4" y="1102.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1168.4" y="1075.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.4" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.3" y="1123.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.3" y="1134.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1169.3" y="1107.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.3" y="1118.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1170.1" y="1139.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.1" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.15%)</title><rect x="1171.0" y="1155.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.0" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.15%)</title><rect x="1171.0" y="1139.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="1171.0" y="1123.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.0" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1171.0" y="1107.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.0" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1171.0" y="1091.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1174.0" y="1102.0"></text>
</g>
<g>
<title>ciField::compute_type() (1 samples, 0.07%)</title><rect x="1171.9" y="1107.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.9" y="1118.0"></text>
</g>
<g>
<title>ciField::compute_type_impl() (1 samples, 0.07%)</title><rect x="1171.9" y="1091.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.9" y="1102.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1171.9" y="1075.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="1086.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.07%)</title><rect x="1171.9" y="1059.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.9" y="1070.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.07%)</title><rect x="1171.9" y="1043.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.9" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1172.7" y="1155.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1172.7" y="1139.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1172.7" y="1123.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1172.7" y="1107.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.7" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.88%)</title><rect x="1173.6" y="1171.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.88%)</title><rect x="1173.6" y="1155.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.81%)</title><rect x="1173.6" y="1139.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.81%)</title><rect x="1173.6" y="1123.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.81%)</title><rect x="1173.6" y="1107.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.81%)</title><rect x="1173.6" y="1091.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.51%)</title><rect x="1173.6" y="1075.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.51%)</title><rect x="1173.6" y="1059.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.51%)</title><rect x="1173.6" y="1043.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.51%)</title><rect x="1173.6" y="1027.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.51%)</title><rect x="1173.6" y="1011.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.51%)</title><rect x="1173.6" y="995.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.6" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1173.6" y="979.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1173.6" y="963.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1173.6" y="947.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1173.6" y="931.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1173.6" y="915.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1173.6" y="899.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.6" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1173.6" y="883.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.6" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1173.6" y="867.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1173.6" y="851.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1173.6" y="835.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1173.6" y="819.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1173.6" y="803.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.6" y="814.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.6" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="798.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1173.6" y="771.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1173.6" y="755.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.6" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1173.6" y="739.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.6" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1173.6" y="723.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.6" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.6" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.6" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.6" y="691.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.5" y="787.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.5" y="771.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.5" y="755.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.5" y="739.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.5" y="723.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.07%)</title><rect x="1174.5" y="707.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="718.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.07%)</title><rect x="1174.5" y="691.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="702.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.07%)</title><rect x="1174.5" y="675.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="686.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.5" y="659.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="670.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1174.5" y="643.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.5" y="654.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1174.5" y="627.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.3" y="787.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.3" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.3" y="755.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.3" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.3" y="723.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.3" y="707.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.3" y="691.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.3" y="675.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.3" y="659.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.3" y="643.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.3" y="627.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.3" y="611.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.3" y="595.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.3" y="579.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.3" y="563.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.3" y="547.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.3" y="531.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.3" y="515.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1175.3" y="499.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1175.3" y="483.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1175.3" y="467.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="478.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1175.3" y="451.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1176.2" y="979.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.2" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1176.2" y="963.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.2" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1176.2" y="947.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1176.2" y="931.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1176.2" y="915.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1176.2" y="899.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1176.2" y="883.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1176.2" y="867.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.2" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1176.2" y="851.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1176.2" y="835.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1176.2" y="819.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1176.2" y="803.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1176.2" y="787.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1176.2" y="771.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1176.2" y="755.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1176.2" y="739.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1176.2" y="723.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1176.2" y="707.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1176.2" y="691.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1176.2" y="675.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1176.2" y="659.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1176.2" y="643.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1176.2" y="627.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1176.2" y="611.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1176.2" y="595.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.2" y="606.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1177.0" y="579.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="590.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1177.0" y="563.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="574.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1177.0" y="547.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.0" y="558.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1177.0" y="531.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.0" y="542.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.07%)</title><rect x="1177.0" y="515.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1177.9" y="579.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1177.9" y="563.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1177.9" y="547.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1177.9" y="531.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1177.9" y="515.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1177.9" y="499.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="510.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="483.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="494.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="467.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1177.9" y="451.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="462.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.07%)</title><rect x="1177.9" y="435.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.8" y="483.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.8" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.8" y="451.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.8" y="435.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.8" y="419.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.8" y="403.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.8" y="387.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.8" y="371.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.8" y="355.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.8" y="339.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.8" y="323.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.8" y="307.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1178.8" y="291.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.07%)</title><rect x="1178.8" y="275.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.8" y="259.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1179.6" y="1075.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1179.6" y="1059.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1179.6" y="1043.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1179.6" y="1027.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1179.6" y="1011.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1179.6" y="995.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1179.6" y="979.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.6" y="963.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.6" y="947.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.6" y="931.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.6" y="915.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.6" y="899.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.6" y="883.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.6" y="867.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.6" y="851.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.6" y="835.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.6" y="819.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.6" y="803.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.6" y="787.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.6" y="771.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.6" y="755.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.6" y="739.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.6" y="723.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.6" y="707.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.6" y="691.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.6" y="675.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.6" y="659.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.6" y="643.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.6" y="627.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.6" y="611.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.6" y="595.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.6" y="579.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.6" y="563.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.6" y="547.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.6" y="531.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.6" y="515.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.6" y="499.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.6" y="483.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.6" y="467.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.6" y="451.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.6" y="435.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.6" y="419.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.6" y="403.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1179.6" y="387.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.6" y="355.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.6" y="339.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.6" y="323.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.6" y="307.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.6" y="291.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="275.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.6" y="259.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.6" y="243.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.6" y="227.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.6" y="211.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.6" y="195.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="179.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.6" y="163.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.6" y="147.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.6" y="131.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.6" y="115.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.6" y="99.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="110.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="83.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="94.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.6" y="67.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1179.6" y="51.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1179.6" y="35.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.5" y="371.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="382.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1180.5" y="355.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="366.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.07%)</title><rect x="1180.5" y="339.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="350.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1180.5" y="323.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1181.4" y="387.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.4" y="398.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1181.4" y="371.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="382.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1181.4" y="355.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="963.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="947.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.2" y="931.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.2" y="915.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.2" y="899.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.2" y="883.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.2" y="867.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="851.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.2" y="835.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.2" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.2" y="803.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.2" y="787.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.2" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="755.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.2" y="739.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.2" y="723.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.2" y="707.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.2" y="691.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.2" y="675.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="659.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.2" y="643.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.2" y="627.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.2" y="611.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.2" y="595.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.2" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="563.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.2" y="547.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.2" y="531.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.2" y="515.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="526.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.07%)</title><rect x="1182.2" y="499.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1183.1" y="1139.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="1150.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1183.1" y="1123.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="1134.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.07%)</title><rect x="1183.1" y="1107.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="1118.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.22%)</title><rect x="1184.0" y="1171.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.0" y="1182.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1184.0" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="1166.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1184.8" y="1155.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.8" y="1166.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.7" y="1155.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.7" y="1166.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1186.5" y="1171.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.5" y="1182.0"></text>
</g>
<g>
<title>nmethod::get_and_cache_jmethod_id() (1 samples, 0.07%)</title><rect x="1186.5" y="1155.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.5" y="1166.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.4" y="1235.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.4" y="1246.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.4" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.4" y="1230.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.4" y="1203.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="1214.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1187.4" y="1187.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1190.4" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(instanceKlassHandle, methodHandle) (1 samples, 0.07%)</title><rect x="1187.4" y="1171.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.4" y="1182.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.15%)</title><rect x="1188.3" y="1267.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.3" y="1278.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.15%)</title><rect x="1188.3" y="1251.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="1262.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.15%)</title><rect x="1188.3" y="1235.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.3" y="1246.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.15%)</title><rect x="1188.3" y="1219.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.3" y="1230.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.15%)</title><rect x="1188.3" y="1203.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.3" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.15%)</title><rect x="1188.3" y="1187.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.3" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.07%)</title><rect x="1188.3" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.3" y="1182.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (1 samples, 0.07%)</title><rect x="1188.3" y="1155.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="1166.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics() (1 samples, 0.07%)</title><rect x="1188.3" y="1139.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.3" y="1150.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(bool) (1 samples, 0.07%)</title><rect x="1189.1" y="1171.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.1" y="1182.0"></text>
</g>
<g>
<title>Universe::print_heap_after_gc(outputStream*, bool) (1 samples, 0.07%)</title><rect x="1189.1" y="1155.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.1" y="1166.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.07%)</title><rect x="1189.1" y="1139.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.1" y="1150.0"></text>
</g>
<g>
<title>__strchr_sse42 (1 samples, 0.07%)</title><rect x="1189.1" y="1123.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1192.1" y="1134.0"></text>
</g>
</g>
</svg>
