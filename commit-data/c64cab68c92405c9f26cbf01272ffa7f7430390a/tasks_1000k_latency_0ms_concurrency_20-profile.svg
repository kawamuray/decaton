<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1462" onload="init(evt)" viewBox="0 0 1200 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1445"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1445"> </text>
<g id="frames">
<g>
<title>all (1,454 samples, 100.00%)</title><rect x="10.0" y="1411.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1422.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (264 samples, 18.16%)</title><rect x="10.0" y="1395.0" width="214.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1406.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (263 samples, 18.09%)</title><rect x="10.0" y="1379.0" width="213.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1390.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.34%)</title><rect x="10.0" y="1363.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.34%)</title><rect x="10.0" y="1347.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1952376939.accept (4 samples, 0.28%)</title><rect x="10.8" y="1331.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.8" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.28%)</title><rect x="10.8" y="1315.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.8" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.28%)</title><rect x="10.8" y="1299.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.8" y="1310.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.28%)</title><rect x="10.8" y="1283.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.8" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.07%)</title><rect x="14.1" y="1363.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.1" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.07%)</title><rect x="14.1" y="1347.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.1" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="14.1" y="1331.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.1" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="14.1" y="1315.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.1" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="14.1" y="1299.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.1" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="14.1" y="1283.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.1" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="14.1" y="1267.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.1" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="14.1" y="1251.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.1" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="14.1" y="1235.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="14.1" y="1219.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.1" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.07%)</title><rect x="14.1" y="1203.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="14.9" y="1363.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.9" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="14.9" y="1347.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="14.9" y="1331.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.9" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="14.9" y="1315.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="14.9" y="1299.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.9" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="14.9" y="1283.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.9" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="14.9" y="1267.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.9" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="14.9" y="1251.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.9" y="1262.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="14.9" y="1235.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="17.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (213 samples, 14.65%)</title><rect x="15.7" y="1363.0" width="172.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.7" y="1374.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1218505439.accept (207 samples, 14.24%)</title><rect x="15.7" y="1347.0" width="168.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.7" y="1358.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (206 samples, 14.17%)</title><rect x="16.5" y="1331.0" width="167.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.5" y="1342.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.07%)</title><rect x="16.5" y="1315.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.5" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (167 samples, 11.49%)</title><rect x="17.3" y="1315.0" width="135.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.3" y="1326.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (167 samples, 11.49%)</title><rect x="17.3" y="1299.0" width="135.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.3" y="1310.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (167 samples, 11.49%)</title><rect x="17.3" y="1283.0" width="135.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.3" y="1294.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (167 samples, 11.49%)</title><rect x="17.3" y="1267.0" width="135.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.3" y="1278.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (167 samples, 11.49%)</title><rect x="17.3" y="1251.0" width="135.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.3" y="1262.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (167 samples, 11.49%)</title><rect x="17.3" y="1235.0" width="135.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.3" y="1246.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (103 samples, 7.08%)</title><rect x="59.5" y="1219.0" width="83.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.5" y="1230.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 1.24%)</title><rect x="59.5" y="1203.0" width="14.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 1.24%)</title><rect x="59.5" y="1187.0" width="14.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (18 samples, 1.24%)</title><rect x="59.5" y="1171.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.83%)</title><rect x="74.1" y="1203.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (12 samples, 0.83%)</title><rect x="74.1" y="1187.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.34%)</title><rect x="75.7" y="1171.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.7" y="1182.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (5 samples, 0.34%)</title><rect x="75.7" y="1155.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="78.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.34%)</title><rect x="79.8" y="1171.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (73 samples, 5.02%)</title><rect x="83.9" y="1203.0" width="59.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.9" y="1214.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (73 samples, 5.02%)</title><rect x="83.9" y="1187.0" width="59.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.9" y="1198.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (71 samples, 4.88%)</title><rect x="83.9" y="1171.0" width="57.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="86.9" y="1182.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (71 samples, 4.88%)</title><rect x="83.9" y="1155.0" width="57.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="86.9" y="1166.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (67 samples, 4.61%)</title><rect x="87.1" y="1139.0" width="54.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.1" y="1150.0">sun/m..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="87.9" y="1123.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="90.9" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Unpark (56 samples, 3.85%)</title><rect x="88.7" y="1123.0" width="45.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="91.7" y="1134.0">Unsa..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="89.5" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="92.5" y="1118.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.14%)</title><rect x="90.3" y="1107.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="93.3" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="92.0" y="1107.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="95.0" y="1118.0"></text>
</g>
<g>
<title>__pthread_cond_signal (43 samples, 2.96%)</title><rect x="92.8" y="1107.0" width="34.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="95.8" y="1118.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="127.7" y="1107.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="130.7" y="1118.0"></text>
</g>
<g>
<title>pthread_mutex_lock (7 samples, 0.48%)</title><rect x="128.5" y="1107.0" width="5.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="131.5" y="1118.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.41%)</title><rect x="134.2" y="1123.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="137.2" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.21%)</title><rect x="139.0" y="1123.0" width="2.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="142.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.14%)</title><rect x="141.5" y="1171.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.48%)</title><rect x="143.1" y="1219.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (7 samples, 0.48%)</title><rect x="143.1" y="1203.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="146.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.48%)</title><rect x="143.1" y="1187.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.1" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="146.3" y="1171.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="149.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.14%)</title><rect x="148.8" y="1219.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.14%)</title><rect x="148.8" y="1203.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="151.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="148.8" y="1187.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="151.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="149.6" y="1187.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="149.6" y="1171.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.6" y="1182.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="150.4" y="1219.0" width="2.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="153.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.14%)</title><rect x="152.8" y="1315.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.8" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.14%)</title><rect x="152.8" y="1299.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="155.8" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.34%)</title><rect x="154.5" y="1315.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.5" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.34%)</title><rect x="154.5" y="1299.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.5" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.34%)</title><rect x="154.5" y="1283.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="157.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (31 samples, 2.13%)</title><rect x="158.5" y="1315.0" width="25.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.5" y="1326.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (31 samples, 2.13%)</title><rect x="158.5" y="1299.0" width="25.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.5" y="1310.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.41%)</title><rect x="175.6" y="1283.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.14%)</title><rect x="175.6" y="1267.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.14%)</title><rect x="175.6" y="1251.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.6" y="1262.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.14%)</title><rect x="175.6" y="1235.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="178.6" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="176.4" y="1219.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="179.4" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="176.4" y="1203.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="179.4" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="176.4" y="1187.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="179.4" y="1198.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="176.4" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="179.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.14%)</title><rect x="177.2" y="1267.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="180.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.14%)</title><rect x="178.8" y="1267.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="181.8" y="1278.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.14%)</title><rect x="180.4" y="1283.0" width="1.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="183.4" y="1294.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="182.0" y="1283.0" width="1.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="185.0" y="1294.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="183.7" y="1347.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="186.7" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.07%)</title><rect x="184.5" y="1347.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.5" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="184.5" y="1331.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="187.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.28%)</title><rect x="185.3" y="1347.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.28%)</title><rect x="185.3" y="1331.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.28%)</title><rect x="185.3" y="1315.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.28%)</title><rect x="185.3" y="1299.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="188.3" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.28%)</title><rect x="185.3" y="1283.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.3" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.07%)</title><rect x="188.5" y="1363.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="191.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (42 samples, 2.89%)</title><rect x="189.4" y="1363.0" width="34.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.4" y="1374.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (41 samples, 2.82%)</title><rect x="189.4" y="1347.0" width="33.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.4" y="1358.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.07%)</title><rect x="191.0" y="1331.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.07%)</title><rect x="191.0" y="1315.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (23 samples, 1.58%)</title><rect x="191.8" y="1331.0" width="18.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="194.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="191.8" y="1315.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="194.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="191.8" y="1299.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="194.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (22 samples, 1.51%)</title><rect x="192.6" y="1315.0" width="17.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="195.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (22 samples, 1.51%)</title><rect x="192.6" y="1299.0" width="17.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (20 samples, 1.38%)</title><rect x="193.4" y="1283.0" width="16.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (20 samples, 1.38%)</title><rect x="193.4" y="1267.0" width="16.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (11 samples, 0.76%)</title><rect x="194.2" y="1251.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.21%)</title><rect x="199.1" y="1235.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.21%)</title><rect x="199.1" y="1219.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="202.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.21%)</title><rect x="199.1" y="1203.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.21%)</title><rect x="199.1" y="1187.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.21%)</title><rect x="199.1" y="1171.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.21%)</title><rect x="199.1" y="1155.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.21%)</title><rect x="199.1" y="1139.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="201.5" y="1235.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="201.5" y="1219.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.07%)</title><rect x="201.5" y="1203.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.07%)</title><rect x="201.5" y="1187.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.07%)</title><rect x="201.5" y="1171.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.5" y="1182.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.07%)</title><rect x="201.5" y="1155.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.07%)</title><rect x="201.5" y="1139.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.07%)</title><rect x="202.3" y="1235.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.07%)</title><rect x="202.3" y="1219.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.07%)</title><rect x="202.3" y="1203.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (8 samples, 0.55%)</title><rect x="203.1" y="1251.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.07%)</title><rect x="203.1" y="1235.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.48%)</title><rect x="204.0" y="1235.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.28%)</title><rect x="205.6" y="1219.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.6" y="1230.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.28%)</title><rect x="205.6" y="1203.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.07%)</title><rect x="208.8" y="1219.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="211.8" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.07%)</title><rect x="208.8" y="1203.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="209.6" y="1283.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="209.6" y="1267.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="209.6" y="1251.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="212.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="209.6" y="1235.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="209.6" y="1219.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.41%)</title><rect x="210.5" y="1331.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.34%)</title><rect x="210.5" y="1315.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.21%)</title><rect x="210.5" y="1299.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="213.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.14%)</title><rect x="210.5" y="1283.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.5" y="1294.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="210.5" y="1267.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1439321916.accept (1 samples, 0.07%)</title><rect x="211.3" y="1267.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="211.3" y="1251.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="211.3" y="1235.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="212.1" y="1283.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="212.1" y="1267.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.14%)</title><rect x="212.9" y="1299.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.9" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.14%)</title><rect x="212.9" y="1283.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.9" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="212.9" y="1267.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.9" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="213.7" y="1251.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.7" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="213.7" y="1235.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.7" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="213.7" y="1219.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="213.7" y="1203.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="213.7" y="1187.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="214.5" y="1315.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.07%)</title><rect x="214.5" y="1299.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.07%)</title><rect x="215.3" y="1331.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.21%)</title><rect x="216.1" y="1331.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.21%)</title><rect x="216.1" y="1315.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.21%)</title><rect x="216.1" y="1299.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="216.1" y="1283.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="216.1" y="1267.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="216.9" y="1251.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.9" y="1262.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.07%)</title><rect x="216.9" y="1235.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.9" y="1246.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.07%)</title><rect x="216.9" y="1219.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="219.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="217.8" y="1283.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.07%)</title><rect x="217.8" y="1267.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.8" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="217.8" y="1251.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="220.8" y="1262.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="217.8" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="220.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.34%)</title><rect x="218.6" y="1331.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.28%)</title><rect x="219.4" y="1315.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="219.4" y="1299.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/815766703.accept (1 samples, 0.07%)</title><rect x="219.4" y="1283.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.07%)</title><rect x="219.4" y="1267.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="219.4" y="1251.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.07%)</title><rect x="220.2" y="1299.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="220.2" y="1283.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.2" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="220.2" y="1267.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.2" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="220.2" y="1251.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.2" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="220.2" y="1235.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.2" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="220.2" y="1219.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.2" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="220.2" y="1203.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.2" y="1214.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="220.2" y="1187.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.2" y="1198.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="220.2" y="1171.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="220.2" y="1155.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/296654013.apply (1 samples, 0.07%)</title><rect x="220.2" y="1139.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.07%)</title><rect x="220.2" y="1123.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$PartitionState.&lt;init&gt; (1 samples, 0.07%)</title><rect x="220.2" y="1107.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.2" y="1118.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.07%)</title><rect x="220.2" y="1091.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.2" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="220.2" y="1075.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="223.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="220.2" y="1059.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="223.2" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="220.2" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="223.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.14%)</title><rect x="221.0" y="1299.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.0" y="1310.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.14%)</title><rect x="221.0" y="1283.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.0" y="1294.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="221.0" y="1267.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.0" y="1278.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="221.0" y="1251.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="221.0" y="1235.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.0" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="221.0" y="1219.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.0" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.07%)</title><rect x="221.0" y="1203.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.0" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.07%)</title><rect x="221.8" y="1267.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.07%)</title><rect x="222.6" y="1347.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.6" y="1358.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="223.4" y="1379.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="226.4" y="1390.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="223.4" y="1363.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="226.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/Thread.run (709 samples, 48.76%)</title><rect x="224.3" y="1395.0" width="575.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.3" y="1406.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (709 samples, 48.76%)</title><rect x="224.3" y="1379.0" width="575.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.3" y="1390.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (709 samples, 48.76%)</title><rect x="224.3" y="1363.0" width="575.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.3" y="1374.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/194043057.run (491 samples, 33.77%)</title><rect x="225.1" y="1347.0" width="398.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.1" y="1358.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (491 samples, 33.77%)</title><rect x="225.1" y="1331.0" width="398.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.1" y="1342.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (490 samples, 33.70%)</title><rect x="225.9" y="1315.0" width="397.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.9" y="1326.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (483 samples, 33.22%)</title><rect x="225.9" y="1299.0" width="392.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.9" y="1310.0">com/linecorp/decaton/processor/runtime/ProcessPipelin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.07%)</title><rect x="230.7" y="1283.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.7" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.07%)</title><rect x="230.7" y="1267.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.7" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/512054577.get (1 samples, 0.07%)</title><rect x="230.7" y="1251.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.07%)</title><rect x="230.7" y="1235.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.7" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="230.7" y="1219.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="233.7" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="230.7" y="1203.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="233.7" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="230.7" y="1187.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="233.7" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="230.7" y="1171.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="233.7" y="1182.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="230.7" y="1155.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="233.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (167 samples, 11.49%)</title><rect x="231.6" y="1283.0" width="135.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.6" y="1294.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (167 samples, 11.49%)</title><rect x="231.6" y="1267.0" width="135.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.6" y="1278.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (167 samples, 11.49%)</title><rect x="231.6" y="1251.0" width="135.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.6" y="1262.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (166 samples, 11.42%)</title><rect x="231.6" y="1235.0" width="134.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.6" y="1246.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (166 samples, 11.42%)</title><rect x="231.6" y="1219.0" width="134.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.6" y="1230.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (166 samples, 11.42%)</title><rect x="231.6" y="1203.0" width="134.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.6" y="1214.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (51 samples, 3.51%)</title><rect x="231.6" y="1187.0" width="41.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.6" y="1198.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (24 samples, 1.65%)</title><rect x="231.6" y="1171.0" width="19.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (23 samples, 1.58%)</title><rect x="231.6" y="1155.0" width="18.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="234.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="237.2" y="1139.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="240.2" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="237.2" y="1123.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="240.2" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="238.0" y="1139.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="241.0" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (12 samples, 0.83%)</title><rect x="238.9" y="1139.0" width="9.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="241.9" y="1150.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.69%)</title><rect x="240.5" y="1123.0" width="8.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="243.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.14%)</title><rect x="248.6" y="1139.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="248.6" y="1123.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="248.6" y="1107.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="248.6" y="1091.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="250.2" y="1155.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.07%)</title><rect x="250.2" y="1139.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (27 samples, 1.86%)</title><rect x="251.0" y="1171.0" width="21.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.0" y="1182.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="251.0" y="1155.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="254.0" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="251.0" y="1139.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="254.0" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="251.0" y="1123.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="254.0" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="251.0" y="1107.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="254.0" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="251.0" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="254.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (4 samples, 0.28%)</title><rect x="251.8" y="1155.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 1.51%)</title><rect x="255.1" y="1155.0" width="17.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.1" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="256.7" y="1139.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="259.7" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="256.7" y="1123.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="259.7" y="1134.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="256.7" y="1107.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="259.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="257.5" y="1139.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.21%)</title><rect x="258.3" y="1139.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.07%)</title><rect x="260.0" y="1123.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 0.69%)</title><rect x="260.8" y="1139.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.8" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="260.8" y="1123.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="263.8" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="260.8" y="1107.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="263.8" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="260.8" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="263.8" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="260.8" y="1075.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="263.8" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="260.8" y="1059.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="263.8" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="260.8" y="1043.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="263.8" y="1054.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="260.8" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="263.8" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="260.8" y="1011.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="263.8" y="1022.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.07%)</title><rect x="260.8" y="995.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="263.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.62%)</title><rect x="261.6" y="1123.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (3 samples, 0.21%)</title><rect x="261.6" y="1107.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.6" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.21%)</title><rect x="261.6" y="1091.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="264.6" y="1102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="262.4" y="1075.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="265.4" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="262.4" y="1059.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="265.4" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="262.4" y="1043.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="265.4" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="263.2" y="1059.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="266.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.41%)</title><rect x="264.0" y="1107.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.34%)</title><rect x="268.9" y="1139.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (97 samples, 6.67%)</title><rect x="272.9" y="1187.0" width="78.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.9" y="1198.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.41%)</title><rect x="272.9" y="1171.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="275.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.41%)</title><rect x="272.9" y="1155.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.9" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.34%)</title><rect x="273.8" y="1139.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.34%)</title><rect x="273.8" y="1123.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.48%)</title><rect x="277.8" y="1171.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.48%)</title><rect x="277.8" y="1155.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (3 samples, 0.21%)</title><rect x="281.1" y="1139.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 0.83%)</title><rect x="283.5" y="1171.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.69%)</title><rect x="285.1" y="1155.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.48%)</title><rect x="286.7" y="1139.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.41%)</title><rect x="287.6" y="1123.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.07%)</title><rect x="292.4" y="1139.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="295.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.14%)</title><rect x="293.2" y="1171.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.14%)</title><rect x="293.2" y="1155.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (70 samples, 4.81%)</title><rect x="294.9" y="1171.0" width="56.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.9" y="1182.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.76%)</title><rect x="295.7" y="1155.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="298.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.14%)</title><rect x="295.7" y="1139.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.14%)</title><rect x="295.7" y="1123.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.14%)</title><rect x="295.7" y="1107.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.14%)</title><rect x="295.7" y="1091.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.41%)</title><rect x="297.3" y="1139.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (3 samples, 0.21%)</title><rect x="297.3" y="1123.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.21%)</title><rect x="299.7" y="1123.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.21%)</title><rect x="299.7" y="1107.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.07%)</title><rect x="301.3" y="1091.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.07%)</title><rect x="301.3" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="302.2" y="1139.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="305.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="302.2" y="1123.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="305.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.07%)</title><rect x="303.8" y="1139.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (58 samples, 3.99%)</title><rect x="304.6" y="1155.0" width="47.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.6" y="1166.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (57 samples, 3.92%)</title><rect x="305.4" y="1139.0" width="46.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="308.4" y="1150.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (57 samples, 3.92%)</title><rect x="305.4" y="1123.0" width="46.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.4" y="1134.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.10%)</title><rect x="311.9" y="1107.0" width="13.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (3 samples, 0.21%)</title><rect x="313.5" y="1091.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="316.0" y="1091.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.41%)</title><rect x="316.8" y="1091.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.41%)</title><rect x="316.8" y="1075.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.41%)</title><rect x="316.8" y="1059.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="319.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.07%)</title><rect x="316.8" y="1043.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="319.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.34%)</title><rect x="317.6" y="1043.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="320.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.14%)</title><rect x="321.6" y="1091.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="324.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.07%)</title><rect x="321.6" y="1075.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.07%)</title><rect x="322.4" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.07%)</title><rect x="322.4" y="1059.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="323.3" y="1091.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="326.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="323.3" y="1075.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="326.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="324.1" y="1059.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.62%)</title><rect x="324.9" y="1107.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.48%)</title><rect x="326.5" y="1091.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.48%)</title><rect x="326.5" y="1075.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.48%)</title><rect x="326.5" y="1059.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="329.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.48%)</title><rect x="326.5" y="1043.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="329.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (14 samples, 0.96%)</title><rect x="332.2" y="1107.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (14 samples, 0.96%)</title><rect x="332.2" y="1091.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (14 samples, 0.96%)</title><rect x="332.2" y="1075.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="335.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (14 samples, 0.96%)</title><rect x="332.2" y="1059.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="335.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (14 samples, 0.96%)</title><rect x="332.2" y="1043.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="334.6" y="1027.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.6" y="1038.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (10 samples, 0.69%)</title><rect x="335.4" y="1027.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="338.4" y="1038.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor8.newInstance (2 samples, 0.14%)</title><rect x="341.9" y="1011.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.41%)</title><rect x="343.5" y="1107.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="346.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.41%)</title><rect x="343.5" y="1091.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="346.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.41%)</title><rect x="343.5" y="1075.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="346.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.21%)</title><rect x="346.0" y="1059.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="349.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.28%)</title><rect x="348.4" y="1107.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="351.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (18 samples, 1.24%)</title><rect x="351.7" y="1187.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (18 samples, 1.24%)</title><rect x="351.7" y="1171.0" width="14.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (18 samples, 1.24%)</title><rect x="351.7" y="1155.0" width="14.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="354.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="352.5" y="1139.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="355.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (2 samples, 0.14%)</title><rect x="353.3" y="1139.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (7 samples, 0.48%)</title><rect x="354.9" y="1139.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="357.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.48%)</title><rect x="360.6" y="1139.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="363.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.48%)</title><rect x="360.6" y="1123.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.07%)</title><rect x="366.3" y="1235.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="369.3" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="366.3" y="1219.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="369.3" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="366.3" y="1203.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="369.3" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="366.3" y="1187.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="369.3" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="366.3" y="1171.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="369.3" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="366.3" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="369.3" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="366.3" y="1139.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="369.3" y="1150.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="366.3" y="1123.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="369.3" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="366.3" y="1107.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="369.3" y="1118.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="366.3" y="1091.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="369.3" y="1102.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="366.3" y="1075.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="369.3" y="1086.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.07%)</title><rect x="366.3" y="1059.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="369.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (280 samples, 19.26%)</title><rect x="367.1" y="1283.0" width="227.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="370.1" y="1294.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (40 samples, 2.75%)</title><rect x="368.7" y="1267.0" width="32.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="371.7" y="1278.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="369.5" y="1251.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="372.5" y="1262.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (38 samples, 2.61%)</title><rect x="370.3" y="1251.0" width="30.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.3" y="1262.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (37 samples, 2.54%)</title><rect x="371.1" y="1235.0" width="30.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="374.1" y="1246.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.34%)</title><rect x="373.6" y="1219.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="376.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.34%)</title><rect x="373.6" y="1203.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="376.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.34%)</title><rect x="373.6" y="1187.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="376.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.34%)</title><rect x="373.6" y="1171.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="376.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.14%)</title><rect x="376.0" y="1155.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="379.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.14%)</title><rect x="376.0" y="1139.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="379.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (29 samples, 1.99%)</title><rect x="377.6" y="1219.0" width="23.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="380.6" y="1230.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (23 samples, 1.58%)</title><rect x="382.5" y="1203.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.5" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.34%)</title><rect x="397.1" y="1187.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.55%)</title><rect x="401.2" y="1267.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="404.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.41%)</title><rect x="402.8" y="1251.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="405.8" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.41%)</title><rect x="402.8" y="1235.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="405.8" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="406.9" y="1219.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="409.9" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="406.9" y="1203.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="409.9" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="406.9" y="1187.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="409.9" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="406.9" y="1171.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="409.9" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.07%)</title><rect x="406.9" y="1155.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="409.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (162 samples, 11.14%)</title><rect x="407.7" y="1267.0" width="131.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="410.7" y="1278.0">com/linecorp/dec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="407.7" y="1251.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="410.7" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="407.7" y="1235.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="410.7" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="407.7" y="1219.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="410.7" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="407.7" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="410.7" y="1214.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="407.7" y="1187.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="410.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (161 samples, 11.07%)</title><rect x="408.5" y="1251.0" width="130.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="411.5" y="1262.0">com/linecorp/dec..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.28%)</title><rect x="409.3" y="1235.0" width="3.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="412.3" y="1246.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="409.3" y="1219.0" width="3.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="412.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (56 samples, 3.85%)</title><rect x="412.5" y="1235.0" width="45.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="415.5" y="1246.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (56 samples, 3.85%)</title><rect x="412.5" y="1219.0" width="45.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.5" y="1230.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (38 samples, 2.61%)</title><rect x="419.8" y="1203.0" width="30.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="422.8" y="1214.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="428.8" y="1187.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (22 samples, 1.51%)</title><rect x="429.6" y="1187.0" width="17.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="432.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (22 samples, 1.51%)</title><rect x="429.6" y="1171.0" width="17.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="432.6" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (22 samples, 1.51%)</title><rect x="429.6" y="1155.0" width="17.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="432.6" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.55%)</title><rect x="432.0" y="1139.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="435.0" y="1150.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="432.0" y="1123.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="435.0" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.28%)</title><rect x="432.8" y="1123.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="435.8" y="1134.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="432.8" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="435.8" y="1118.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.21%)</title><rect x="433.6" y="1107.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="436.6" y="1118.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.14%)</title><rect x="434.4" y="1091.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="437.4" y="1102.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="434.4" y="1075.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="437.4" y="1086.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="435.3" y="1075.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="438.3" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.21%)</title><rect x="436.1" y="1123.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="439.1" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.21%)</title><rect x="436.1" y="1107.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="439.1" y="1118.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="436.1" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="439.1" y="1102.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="436.1" y="1075.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="439.1" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="436.9" y="1091.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="439.9" y="1102.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="437.7" y="1091.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="440.7" y="1102.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.07%)</title><rect x="438.5" y="1139.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="441.5" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (10 samples, 0.69%)</title><rect x="439.3" y="1139.0" width="8.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="442.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.07%)</title><rect x="447.4" y="1187.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="450.4" y="1198.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="448.2" y="1187.0" width="2.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="451.2" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.62%)</title><rect x="450.7" y="1203.0" width="7.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="453.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="458.0" y="1235.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="461.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (10 samples, 0.69%)</title><rect x="458.8" y="1235.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="461.8" y="1246.0"></text>
</g>
<g>
<title>java/lang/Long.toString (10 samples, 0.69%)</title><rect x="458.8" y="1219.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (10 samples, 0.69%)</title><rect x="458.8" y="1203.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="461.8" y="1214.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (89 samples, 6.12%)</title><rect x="466.9" y="1235.0" width="72.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.9" y="1246.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 5.43%)</title><rect x="475.0" y="1219.0" width="64.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.0" y="1230.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.62%)</title><rect x="477.5" y="1203.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.62%)</title><rect x="477.5" y="1187.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.62%)</title><rect x="477.5" y="1171.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.62%)</title><rect x="477.5" y="1155.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="480.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.14%)</title><rect x="483.1" y="1139.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.1" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.14%)</title><rect x="483.1" y="1123.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (67 samples, 4.61%)</title><rect x="484.8" y="1203.0" width="54.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="487.8" y="1214.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (61 samples, 4.20%)</title><rect x="489.6" y="1187.0" width="49.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.6" y="1198.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.27%)</title><rect x="512.4" y="1171.0" width="26.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="515.4" y="1182.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.28%)</title><rect x="529.4" y="1155.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="532.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.48%)</title><rect x="532.6" y="1155.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="535.6" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="537.5" y="1139.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="540.5" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="537.5" y="1123.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="540.5" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="537.5" y="1107.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="540.5" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="537.5" y="1091.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="540.5" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="537.5" y="1075.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="540.5" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="537.5" y="1059.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="540.5" y="1070.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="537.5" y="1043.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="540.5" y="1054.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="538.3" y="1155.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="541.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (50 samples, 3.44%)</title><rect x="539.1" y="1267.0" width="40.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.1" y="1278.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (50 samples, 3.44%)</title><rect x="539.1" y="1251.0" width="40.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="542.1" y="1262.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1702093299.process (23 samples, 1.58%)</title><rect x="541.6" y="1235.0" width="18.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="544.6" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (23 samples, 1.58%)</title><rect x="541.6" y="1219.0" width="18.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="544.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 1.51%)</title><rect x="541.6" y="1203.0" width="17.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="544.6" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.21%)</title><rect x="548.1" y="1187.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="551.1" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.21%)</title><rect x="548.1" y="1171.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.1" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.21%)</title><rect x="548.1" y="1155.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="551.1" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.21%)</title><rect x="548.1" y="1139.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="551.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="549.7" y="1123.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.62%)</title><rect x="550.5" y="1187.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="553.5" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="551.3" y="1171.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="554.3" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.48%)</title><rect x="552.1" y="1171.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="555.1" y="1182.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.48%)</title><rect x="552.1" y="1155.0" width="5.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="555.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="557.8" y="1187.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="560.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.07%)</title><rect x="558.6" y="1187.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="559.4" y="1203.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="562.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="559.4" y="1187.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="562.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="559.4" y="1171.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="562.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="559.4" y="1155.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="562.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.28%)</title><rect x="560.2" y="1235.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="563.2" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.28%)</title><rect x="560.2" y="1219.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.2" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="562.7" y="1203.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="565.7" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="562.7" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="565.7" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="562.7" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="565.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 0.28%)</title><rect x="563.5" y="1235.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="566.5" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 0.28%)</title><rect x="563.5" y="1219.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="566.5" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/326568229.get$Lambda (4 samples, 0.28%)</title><rect x="563.5" y="1203.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="566.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/326568229.&lt;init&gt; (4 samples, 0.28%)</title><rect x="563.5" y="1187.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="566.5" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.14%)</title><rect x="566.7" y="1235.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="569.7" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.14%)</title><rect x="566.7" y="1219.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="569.7" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.48%)</title><rect x="568.3" y="1235.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.3" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.48%)</title><rect x="568.3" y="1219.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.3" y="1230.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.41%)</title><rect x="568.3" y="1203.0" width="4.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="571.3" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.07%)</title><rect x="573.2" y="1203.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="576.2" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="574.0" y="1235.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="577.0" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="574.0" y="1219.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.0" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.41%)</title><rect x="574.8" y="1235.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.8" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="577.3" y="1219.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="580.3" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="577.3" y="1203.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="580.3" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="577.3" y="1187.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="580.3" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="577.3" y="1171.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="580.3" y="1182.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="577.3" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="580.3" y="1166.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="577.3" y="1139.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="580.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.14%)</title><rect x="578.1" y="1219.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.24%)</title><rect x="579.7" y="1267.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.24%)</title><rect x="579.7" y="1251.0" width="14.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="582.7" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.55%)</title><rect x="582.1" y="1235.0" width="6.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="585.1" y="1246.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.48%)</title><rect x="583.0" y="1219.0" width="5.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="586.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.34%)</title><rect x="588.6" y="1235.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.6" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/73216534.accept (5 samples, 0.34%)</title><rect x="588.6" y="1219.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="591.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (5 samples, 0.34%)</title><rect x="588.6" y="1203.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="591.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (5 samples, 0.34%)</title><rect x="588.6" y="1187.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="591.6" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.34%)</title><rect x="588.6" y="1171.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.6" y="1182.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.34%)</title><rect x="588.6" y="1155.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="591.6" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="591.1" y="1139.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="594.1" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="591.1" y="1123.0" width="1.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="594.1" y="1134.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.07%)</title><rect x="592.7" y="1235.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="595.7" y="1246.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="593.5" y="1235.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="596.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.38%)</title><rect x="594.3" y="1283.0" width="16.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="597.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 1.38%)</title><rect x="594.3" y="1267.0" width="16.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="597.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.10%)</title><rect x="597.6" y="1251.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="600.6" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/73216534.accept (16 samples, 1.10%)</title><rect x="597.6" y="1235.0" width="13.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="600.6" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (16 samples, 1.10%)</title><rect x="597.6" y="1219.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="600.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (16 samples, 1.10%)</title><rect x="597.6" y="1203.0" width="13.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="600.6" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (16 samples, 1.10%)</title><rect x="597.6" y="1187.0" width="13.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="600.6" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.create (16 samples, 1.10%)</title><rect x="597.6" y="1171.0" width="13.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="600.6" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.62%)</title><rect x="610.6" y="1283.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="613.6" y="1294.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.55%)</title><rect x="611.4" y="1267.0" width="6.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="614.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 0.21%)</title><rect x="617.9" y="1299.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="620.9" y="1310.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.21%)</title><rect x="617.9" y="1283.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="620.9" y="1294.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.21%)</title><rect x="617.9" y="1267.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="620.9" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.21%)</title><rect x="617.9" y="1251.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="620.9" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.21%)</title><rect x="617.9" y="1235.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="620.9" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.21%)</title><rect x="617.9" y="1219.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="620.9" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.21%)</title><rect x="617.9" y="1203.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="620.9" y="1214.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="617.9" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="620.9" y="1198.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.14%)</title><rect x="618.7" y="1187.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="621.7" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="619.5" y="1171.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="622.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.28%)</title><rect x="620.3" y="1299.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="623.3" y="1310.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="622.7" y="1283.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="625.7" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="622.7" y="1267.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="625.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.62%)</title><rect x="623.5" y="1347.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="626.5" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.62%)</title><rect x="623.5" y="1331.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="626.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.62%)</title><rect x="623.5" y="1315.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="626.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.62%)</title><rect x="623.5" y="1299.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="626.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.07%)</title><rect x="630.0" y="1283.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="633.0" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (208 samples, 14.31%)</title><rect x="630.8" y="1347.0" width="168.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="633.8" y="1358.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (208 samples, 14.31%)</title><rect x="630.8" y="1331.0" width="168.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="633.8" y="1342.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (186 samples, 12.79%)</title><rect x="631.7" y="1315.0" width="150.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.7" y="1326.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (21 samples, 1.44%)</title><rect x="635.7" y="1299.0" width="17.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="638.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 1.44%)</title><rect x="635.7" y="1283.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="638.7" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 1.44%)</title><rect x="635.7" y="1267.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 1.44%)</title><rect x="635.7" y="1251.0" width="17.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="638.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (160 samples, 11.00%)</title><rect x="652.8" y="1299.0" width="129.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="655.8" y="1310.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (156 samples, 10.73%)</title><rect x="656.0" y="1283.0" width="126.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.0" y="1294.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="663.3" y="1267.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="666.3" y="1278.0"></text>
</g>
<g>
<title>Unsafe_Park (143 samples, 9.83%)</title><rect x="664.1" y="1267.0" width="116.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="667.1" y="1278.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="669.8" y="1251.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="672.8" y="1262.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 1.93%)</title><rect x="670.6" y="1251.0" width="22.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="673.6" y="1262.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 0.76%)</title><rect x="676.3" y="1235.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="679.3" y="1246.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.28%)</title><rect x="677.1" y="1219.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="680.1" y="1230.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="679.5" y="1203.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="682.5" y="1214.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="680.3" y="1219.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="683.3" y="1230.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.28%)</title><rect x="682.0" y="1219.0" width="3.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="685.0" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.14%)</title><rect x="685.2" y="1235.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="688.2" y="1246.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.21%)</title><rect x="686.8" y="1235.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="689.8" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.34%)</title><rect x="689.3" y="1235.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="692.3" y="1246.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="693.3" y="1251.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="696.3" y="1262.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="694.1" y="1251.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="697.1" y="1262.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="695.8" y="1251.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="698.8" y="1262.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.48%)</title><rect x="696.6" y="1251.0" width="5.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="699.6" y="1262.0"></text>
</g>
<g>
<title>__lll_unlock_wake (32 samples, 2.20%)</title><rect x="702.3" y="1251.0" width="25.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="705.3" y="1262.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (48 samples, 3.30%)</title><rect x="728.2" y="1251.0" width="39.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="731.2" y="1262.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="767.2" y="1251.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="770.2" y="1262.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="768.0" y="1251.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="771.0" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.14%)</title><rect x="768.8" y="1251.0" width="1.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="771.8" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="770.4" y="1251.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="773.4" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.28%)</title><rect x="771.2" y="1251.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="774.2" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="774.5" y="1251.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="777.5" y="1262.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="775.3" y="1251.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="778.3" y="1262.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.21%)</title><rect x="776.1" y="1251.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="779.1" y="1262.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.14%)</title><rect x="778.5" y="1251.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="781.5" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.21%)</title><rect x="780.2" y="1267.0" width="2.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="783.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 1.44%)</title><rect x="782.6" y="1315.0" width="17.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 1.44%)</title><rect x="782.6" y="1299.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="785.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 1.44%)</title><rect x="782.6" y="1283.0" width="17.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="785.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 1.44%)</title><rect x="782.6" y="1267.0" width="17.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="785.6" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="799.6" y="1395.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.6" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="799.6" y="1379.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="802.6" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="799.6" y="1363.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="802.6" y="1374.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.07%)</title><rect x="800.5" y="1395.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="803.5" y="1406.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="800.5" y="1379.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="803.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="801.3" y="1395.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="804.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="801.3" y="1379.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="801.3" y="1363.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="801.3" y="1347.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="804.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="801.3" y="1331.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="804.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="801.3" y="1315.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="804.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="801.3" y="1299.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="804.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="801.3" y="1283.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="804.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="801.3" y="1267.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="804.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.07%)</title><rect x="801.3" y="1251.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.07%)</title><rect x="801.3" y="1235.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="804.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.07%)</title><rect x="801.3" y="1219.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="804.3" y="1230.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.contains (1 samples, 0.07%)</title><rect x="801.3" y="1203.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="804.3" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="801.3" y="1187.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="804.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.07%)</title><rect x="801.3" y="1171.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="804.3" y="1182.0"></text>
</g>
<g>
<title>start_thread (478 samples, 32.87%)</title><rect x="802.1" y="1395.0" width="387.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="805.1" y="1406.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (478 samples, 32.87%)</title><rect x="802.1" y="1379.0" width="387.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="805.1" y="1390.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.24%)</title><rect x="802.1" y="1363.0" width="14.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="805.1" y="1374.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.14%)</title><rect x="802.1" y="1347.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="805.1" y="1358.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.14%)</title><rect x="802.1" y="1331.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="805.1" y="1342.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="802.1" y="1315.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="805.1" y="1326.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="802.9" y="1315.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="805.9" y="1326.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 0.96%)</title><rect x="803.7" y="1347.0" width="11.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="806.7" y="1358.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.07%)</title><rect x="803.7" y="1331.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="806.7" y="1342.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="803.7" y="1315.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="806.7" y="1326.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.34%)</title><rect x="804.5" y="1331.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="807.5" y="1342.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="804.5" y="1315.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="807.5" y="1326.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.14%)</title><rect x="804.5" y="1299.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="807.5" y="1310.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.14%)</title><rect x="804.5" y="1283.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="807.5" y="1294.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.14%)</title><rect x="804.5" y="1267.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="807.5" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.21%)</title><rect x="806.1" y="1315.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="809.1" y="1326.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.21%)</title><rect x="806.1" y="1299.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="809.1" y="1310.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="807.8" y="1283.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="810.8" y="1294.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="807.8" y="1267.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="810.8" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.55%)</title><rect x="808.6" y="1331.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="811.6" y="1342.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.55%)</title><rect x="808.6" y="1315.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="811.6" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.48%)</title><rect x="808.6" y="1299.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="811.6" y="1310.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.48%)</title><rect x="808.6" y="1283.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="811.6" y="1294.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.48%)</title><rect x="808.6" y="1267.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="811.6" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.48%)</title><rect x="808.6" y="1251.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="811.6" y="1262.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.34%)</title><rect x="810.2" y="1235.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="813.2" y="1246.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.21%)</title><rect x="811.0" y="1219.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="814.0" y="1230.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="812.6" y="1203.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="815.6" y="1214.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="813.4" y="1219.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="816.4" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="814.3" y="1299.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="817.3" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.07%)</title><rect x="814.3" y="1283.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="817.3" y="1294.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.07%)</title><rect x="814.3" y="1267.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="817.3" y="1278.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.07%)</title><rect x="815.1" y="1347.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="818.1" y="1358.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="815.9" y="1347.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="818.9" y="1358.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="815.9" y="1331.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="818.9" y="1342.0"></text>
</g>
<g>
<title>JavaThread::run() (457 samples, 31.43%)</title><rect x="816.7" y="1363.0" width="370.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="819.7" y="1374.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (457 samples, 31.43%)</title><rect x="816.7" y="1347.0" width="370.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="819.7" y="1358.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (456 samples, 31.36%)</title><rect x="816.7" y="1331.0" width="370.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="819.7" y="1342.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (455 samples, 31.29%)</title><rect x="816.7" y="1315.0" width="369.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="819.7" y="1326.0">CompileBroker::invoke_compiler_on_method(CompileTa..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (455 samples, 31.29%)</title><rect x="816.7" y="1299.0" width="369.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="819.7" y="1310.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (455 samples, 31.29%)</title><rect x="816.7" y="1283.0" width="369.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="819.7" y="1294.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Code_Gen() (174 samples, 11.97%)</title><rect x="816.7" y="1267.0" width="141.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="819.7" y="1278.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.28%)</title><rect x="816.7" y="1251.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.7" y="1262.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.21%)</title><rect x="816.7" y="1235.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="819.7" y="1246.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="818.3" y="1219.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="821.3" y="1230.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="819.1" y="1235.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="822.1" y="1246.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="819.1" y="1219.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="822.1" y="1230.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 0.41%)</title><rect x="819.9" y="1251.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="822.9" y="1262.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.07%)</title><rect x="819.9" y="1235.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="822.9" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="819.9" y="1219.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="822.9" y="1230.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="819.9" y="1203.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="822.9" y="1214.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.21%)</title><rect x="820.7" y="1235.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="823.7" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.21%)</title><rect x="820.7" y="1219.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="823.7" y="1230.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.07%)</title><rect x="823.2" y="1235.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="826.2" y="1246.0"></text>
</g>
<g>
<title>jmpCon_shortNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="824.0" y="1235.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="827.0" y="1246.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="824.8" y="1251.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="827.8" y="1262.0"></text>
</g>
<g>
<title>Matcher::match() (18 samples, 1.24%)</title><rect x="825.6" y="1251.0" width="14.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="828.6" y="1262.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.07%)</title><rect x="825.6" y="1235.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="828.6" y="1246.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="826.4" y="1235.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="829.4" y="1246.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (16 samples, 1.10%)</title><rect x="827.2" y="1235.0" width="13.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="830.2" y="1246.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (7 samples, 0.48%)</title><rect x="829.7" y="1219.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="832.7" y="1230.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.14%)</title><rect x="835.4" y="1219.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="838.4" y="1230.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="835.4" y="1203.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="838.4" y="1214.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="835.4" y="1187.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="838.4" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="835.4" y="1171.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="838.4" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="835.4" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="838.4" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="836.2" y="1203.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="839.2" y="1214.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="836.2" y="1187.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="839.2" y="1198.0"></text>
</g>
<g>
<title>Node::clone() const (4 samples, 0.28%)</title><rect x="837.0" y="1219.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="840.0" y="1230.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="840.2" y="1251.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="843.2" y="1262.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.07%)</title><rect x="840.2" y="1235.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="843.2" y="1246.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="840.2" y="1219.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="843.2" y="1230.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.07%)</title><rect x="840.2" y="1203.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="843.2" y="1214.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="840.2" y="1187.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="843.2" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.34%)</title><rect x="841.0" y="1251.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.0" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.34%)</title><rect x="841.0" y="1235.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="844.0" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="841.0" y="1219.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="844.0" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="842.7" y="1219.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="845.7" y="1230.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="842.7" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="845.7" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="843.5" y="1219.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="846.5" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="844.3" y="1203.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="847.3" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (139 samples, 9.56%)</title><rect x="845.1" y="1251.0" width="112.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="848.1" y="1262.0">PhaseChaitin::..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="845.1" y="1235.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="848.1" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="845.9" y="1235.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="848.9" y="1246.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.07%)</title><rect x="846.7" y="1235.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="849.7" y="1246.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="847.5" y="1235.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="850.5" y="1246.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.21%)</title><rect x="848.3" y="1235.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="851.3" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (10 samples, 0.69%)</title><rect x="850.8" y="1235.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="853.8" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (7 samples, 0.48%)</title><rect x="853.2" y="1219.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="856.2" y="1230.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="854.8" y="1203.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="857.8" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.14%)</title><rect x="855.6" y="1203.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="858.6" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="857.3" y="1203.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="860.3" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (8 samples, 0.55%)</title><rect x="858.9" y="1235.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="861.9" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="858.9" y="1219.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="861.9" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (7 samples, 0.48%)</title><rect x="859.7" y="1219.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="862.7" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.34%)</title><rect x="861.3" y="1203.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="864.3" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (16 samples, 1.10%)</title><rect x="865.4" y="1235.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="868.4" y="1246.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="875.9" y="1219.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="878.9" y="1230.0"></text>
</g>
<g>
<title>loadNNode::rule() const (2 samples, 0.14%)</title><rect x="876.7" y="1219.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="879.7" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (28 samples, 1.93%)</title><rect x="878.4" y="1235.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="881.4" y="1246.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (4 samples, 0.28%)</title><rect x="881.6" y="1219.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="884.6" y="1230.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="884.9" y="1219.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="887.9" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="885.7" y="1219.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.7" y="1230.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="887.3" y="1219.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="890.3" y="1230.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="888.1" y="1219.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="891.1" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (13 samples, 0.89%)</title><rect x="888.9" y="1219.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="891.9" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="897.8" y="1203.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="900.8" y="1214.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.14%)</title><rect x="899.5" y="1219.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="902.5" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.21%)</title><rect x="901.1" y="1235.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="904.1" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="902.7" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="905.7" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.48%)</title><rect x="903.5" y="1235.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="906.5" y="1246.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="907.6" y="1219.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="910.6" y="1230.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="908.4" y="1219.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="911.4" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="909.2" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="912.2" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (10 samples, 0.69%)</title><rect x="910.0" y="1235.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="913.0" y="1246.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (2 samples, 0.14%)</title><rect x="914.1" y="1219.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.1" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.21%)</title><rect x="915.7" y="1219.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="918.7" y="1230.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (17 samples, 1.17%)</title><rect x="918.1" y="1235.0" width="13.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.1" y="1246.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.14%)</title><rect x="918.1" y="1219.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="921.1" y="1230.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.07%)</title><rect x="918.9" y="1203.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="921.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.07%)</title><rect x="918.9" y="1187.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.9" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (15 samples, 1.03%)</title><rect x="919.8" y="1219.0" width="12.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="922.8" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="919.8" y="1203.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.8" y="1214.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (14 samples, 0.96%)</title><rect x="920.6" y="1203.0" width="11.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="923.6" y="1214.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.14%)</title><rect x="920.6" y="1187.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="923.6" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="922.2" y="1187.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="925.2" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (10 samples, 0.69%)</title><rect x="923.0" y="1187.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.0" y="1198.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="930.3" y="1171.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="933.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="931.1" y="1187.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="934.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.34%)</title><rect x="931.9" y="1235.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.9" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="933.5" y="1219.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="936.5" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.28%)</title><rect x="936.0" y="1235.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="939.0" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="937.6" y="1219.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="940.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.28%)</title><rect x="939.2" y="1235.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.2" y="1246.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (4 samples, 0.28%)</title><rect x="939.2" y="1219.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.2" y="1230.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (17 samples, 1.17%)</title><rect x="942.5" y="1235.0" width="13.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.5" y="1246.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="949.8" y="1219.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="952.8" y="1230.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (6 samples, 0.41%)</title><rect x="950.6" y="1219.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="953.6" y="1230.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="954.6" y="1203.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="957.6" y="1214.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="955.5" y="1219.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="958.5" y="1230.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="956.3" y="1235.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="959.3" y="1246.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.07%)</title><rect x="957.1" y="1235.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.1" y="1246.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.07%)</title><rect x="957.1" y="1219.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="960.1" y="1230.0"></text>
</g>
<g>
<title>Compile::Optimize() (267 samples, 18.36%)</title><rect x="957.9" y="1267.0" width="216.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.9" y="1278.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="957.9" y="1251.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.9" y="1262.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="957.9" y="1235.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.9" y="1246.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="958.7" y="1251.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.7" y="1262.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="958.7" y="1235.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="961.7" y="1246.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="958.7" y="1219.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="961.7" y="1230.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="958.7" y="1203.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.7" y="1214.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.14%)</title><rect x="959.5" y="1251.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="960.3" y="1235.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="963.3" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="960.3" y="1219.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="960.3" y="1203.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="963.3" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.41%)</title><rect x="961.1" y="1251.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="964.1" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.41%)</title><rect x="961.1" y="1235.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="964.1" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.07%)</title><rect x="961.1" y="1219.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="964.1" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.07%)</title><rect x="961.1" y="1203.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.1" y="1214.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.07%)</title><rect x="961.1" y="1187.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.1" y="1198.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="961.1" y="1171.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="964.1" y="1182.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="961.1" y="1155.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="964.1" y="1166.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="961.1" y="1139.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="964.1" y="1150.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.1" y="1123.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="964.1" y="1134.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.07%)</title><rect x="961.1" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="964.1" y="1118.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="961.1" y="1091.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.1" y="1102.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="961.1" y="1075.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="964.1" y="1086.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="961.1" y="1059.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.1" y="1070.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.1" y="1043.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.1" y="1054.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.07%)</title><rect x="961.1" y="1027.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="964.1" y="1038.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="961.1" y="1011.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="964.1" y="1022.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="961.1" y="995.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="964.1" y="1006.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="961.1" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="964.1" y="990.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.1" y="963.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="964.1" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.07%)</title><rect x="961.1" y="947.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="964.1" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="961.1" y="931.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="964.1" y="942.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.07%)</title><rect x="961.1" y="915.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="964.1" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="961.1" y="899.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="964.1" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="961.1" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="964.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.34%)</title><rect x="962.0" y="1219.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="965.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.34%)</title><rect x="962.0" y="1203.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="965.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1187.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="965.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1171.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1155.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1139.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1123.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="965.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1107.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1091.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1075.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="965.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1059.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1043.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="965.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1027.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="965.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1011.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="965.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="995.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="979.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="963.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="965.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="947.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="965.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="931.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="915.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="965.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="899.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="883.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="965.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="867.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="965.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="851.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="965.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="835.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="965.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="819.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="803.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="787.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="771.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="755.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="739.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="965.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="723.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="965.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="965.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="691.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="675.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="965.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="659.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="965.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="643.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="965.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="627.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="611.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="965.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="595.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="579.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="965.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="965.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="547.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="965.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="531.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="515.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="499.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="483.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="467.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="451.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="965.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="435.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="419.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="403.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="965.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="371.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="355.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="339.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="965.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="323.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="965.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="307.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="965.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="291.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="275.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="259.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="243.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="227.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="211.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="195.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="965.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="179.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="163.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="147.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="965.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="131.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="115.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="965.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="99.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="83.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="67.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="965.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="51.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="35.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.0" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="962.8" y="1187.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="962.8" y="1171.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.8" y="1182.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="962.8" y="1155.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="963.6" y="1171.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="963.6" y="1155.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="966.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="963.6" y="1139.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="966.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="963.6" y="1123.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="966.6" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="963.6" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="966.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="967.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1139.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="967.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1123.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="967.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1107.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="967.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1091.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1075.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1059.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="967.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1043.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="967.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1027.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="967.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="967.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="995.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="967.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="979.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="967.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="947.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="967.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="931.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="967.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="915.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="967.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="899.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="883.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="867.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="851.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="835.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="967.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="803.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="967.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="787.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="967.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="771.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="755.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="967.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="739.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="967.4" y="750.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="964.4" y="723.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="967.4" y="734.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="964.4" y="707.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="967.4" y="718.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.07%)</title><rect x="965.2" y="1187.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="968.2" y="1198.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.28%)</title><rect x="966.0" y="1251.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="969.0" y="1262.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="966.8" y="1235.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="969.8" y="1246.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="966.8" y="1219.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="969.8" y="1230.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="966.8" y="1203.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.8" y="1214.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="966.8" y="1187.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="969.8" y="1198.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_boxed_value_offset(int) const (1 samples, 0.07%)</title><rect x="966.8" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="969.8" y="1182.0"></text>
</g>
<g>
<title>CallNode::bottom_type() const (1 samples, 0.07%)</title><rect x="967.6" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="970.6" y="1246.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="968.4" y="1235.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="971.4" y="1246.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="968.4" y="1219.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="971.4" y="1230.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="968.4" y="1203.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="971.4" y="1214.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (3 samples, 0.21%)</title><rect x="969.3" y="1251.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.3" y="1262.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (3 samples, 0.21%)</title><rect x="969.3" y="1235.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="972.3" y="1246.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (2 samples, 0.14%)</title><rect x="970.1" y="1219.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.1" y="1230.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.07%)</title><rect x="970.1" y="1203.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="973.1" y="1214.0"></text>
</g>
<g>
<title>MemNode::Ideal_common_DU_postCCP(PhaseCCP*, Node*, Node*) (1 samples, 0.07%)</title><rect x="970.9" y="1203.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (224 samples, 15.41%)</title><rect x="971.7" y="1251.0" width="181.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="974.7" y="1262.0">PhaseIdealLoop::build_a..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="971.7" y="1235.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="974.7" y="1246.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="971.7" y="1219.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="974.7" y="1230.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="971.7" y="1203.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="971.7" y="1187.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.7" y="1198.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.07%)</title><rect x="971.7" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.7" y="1182.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="972.5" y="1235.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.34%)</title><rect x="973.3" y="1235.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.3" y="1246.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="976.6" y="1219.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.48%)</title><rect x="977.4" y="1235.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.4" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="980.6" y="1219.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="983.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.14%)</title><rect x="981.4" y="1219.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="984.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="982.2" y="1203.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (201 samples, 13.82%)</title><rect x="983.1" y="1235.0" width="163.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.1" y="1246.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>Node_List::push(Node*) (2 samples, 0.14%)</title><rect x="990.4" y="1219.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="993.4" y="1230.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.14%)</title><rect x="990.4" y="1203.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="993.4" y="1214.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="990.4" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="993.4" y="1198.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="991.2" y="1187.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="994.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (190 samples, 13.07%)</title><rect x="992.0" y="1219.0" width="154.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.0" y="1230.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (9 samples, 0.62%)</title><rect x="994.4" y="1203.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (178 samples, 12.24%)</title><rect x="1001.7" y="1203.0" width="144.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1004.7" y="1214.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.21%)</title><rect x="1126.7" y="1187.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1127.5" y="1171.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (21 samples, 1.44%)</title><rect x="1129.1" y="1187.0" width="17.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.14%)</title><rect x="1146.2" y="1235.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.07%)</title><rect x="1147.0" y="1219.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (6 samples, 0.41%)</title><rect x="1147.8" y="1235.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.8" y="1246.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.07%)</title><rect x="1148.6" y="1219.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1149.4" y="1219.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1149.4" y="1203.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1149.4" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.21%)</title><rect x="1150.2" y="1219.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.2" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1150.2" y="1203.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.07%)</title><rect x="1150.2" y="1187.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1151.0" y="1203.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.0" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1151.0" y="1187.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1151.9" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1152.7" y="1235.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.7" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1152.7" y="1219.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.7" y="1230.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.7" y="1203.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.7" y="1214.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.7" y="1187.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.7" y="1198.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="1152.7" y="1171.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.7" y="1182.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1152.7" y="1155.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1153.5" y="1251.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1153.5" y="1235.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (22 samples, 1.51%)</title><rect x="1154.3" y="1251.0" width="17.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.3" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (21 samples, 1.44%)</title><rect x="1154.3" y="1235.0" width="17.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.3" y="1246.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1154.3" y="1219.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.3" y="1230.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1154.3" y="1203.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.3" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1154.3" y="1187.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.3" y="1198.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.07%)</title><rect x="1154.3" y="1171.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.3" y="1182.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1155.1" y="1219.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.1" y="1230.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1155.1" y="1203.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.1" y="1214.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1155.1" y="1187.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.1" y="1198.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1155.1" y="1171.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.1" y="1182.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1155.9" y="1219.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.9" y="1230.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1158.3" y="1219.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (8 samples, 0.55%)</title><rect x="1159.2" y="1219.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.2" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1164.8" y="1203.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.8" y="1214.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1164.8" y="1187.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.8" y="1198.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1165.7" y="1219.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.7" y="1230.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1166.5" y="1219.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.5" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1166.5" y="1203.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1166.5" y="1187.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.5" y="1198.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.14%)</title><rect x="1167.3" y="1203.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.3" y="1214.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1168.9" y="1219.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.21%)</title><rect x="1168.9" y="1203.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.9" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.21%)</title><rect x="1168.9" y="1187.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.9" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.21%)</title><rect x="1168.9" y="1171.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.9" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.9" y="1155.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.9" y="1139.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.9" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.9" y="1123.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.9" y="1107.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.9" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.9" y="1091.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.9" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.9" y="1075.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.9" y="1059.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.9" y="1043.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.9" y="1027.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.9" y="1011.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.9" y="995.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.9" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.9" y="963.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.9" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.9" y="947.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1168.9" y="931.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.9" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.7" y="1043.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.7" y="1054.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1169.7" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.7" y="1038.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.5" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.5" y="1166.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1170.5" y="1139.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.5" y="1150.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1171.3" y="1235.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.3" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1172.1" y="1251.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.1" y="1262.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1172.1" y="1235.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.1" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::can_eliminate_allocation(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1172.1" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.1" y="1230.0"></text>
</g>
<g>
<title>CallNode::has_non_debug_use(Node*) (1 samples, 0.07%)</title><rect x="1172.1" y="1203.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.1" y="1214.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.14%)</title><rect x="1173.0" y="1251.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.0" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1173.0" y="1235.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.0" y="1246.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1173.0" y="1219.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.0" y="1230.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1173.8" y="1235.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.8" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1173.8" y="1219.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.8" y="1230.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1173.8" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1173.8" y="1187.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1173.8" y="1171.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.8" y="1182.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1173.8" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="1166.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.07%)</title><rect x="1173.8" y="1139.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.76%)</title><rect x="1174.6" y="1267.0" width="8.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.6" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.76%)</title><rect x="1174.6" y="1251.0" width="8.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.76%)</title><rect x="1174.6" y="1235.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.76%)</title><rect x="1174.6" y="1219.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.76%)</title><rect x="1174.6" y="1203.0" width="8.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.76%)</title><rect x="1174.6" y="1187.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.6" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.55%)</title><rect x="1174.6" y="1171.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.6" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.55%)</title><rect x="1174.6" y="1155.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.55%)</title><rect x="1174.6" y="1139.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.55%)</title><rect x="1174.6" y="1123.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.55%)</title><rect x="1174.6" y="1107.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.48%)</title><rect x="1174.6" y="1091.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1174.6" y="1075.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.6" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1174.6" y="1059.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1174.6" y="1043.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1174.6" y="1027.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1174.6" y="1011.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.34%)</title><rect x="1174.6" y="995.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.6" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1174.6" y="979.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.6" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1174.6" y="963.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1174.6" y="947.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1174.6" y="931.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1174.6" y="915.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.34%)</title><rect x="1174.6" y="899.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.6" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1174.6" y="883.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.6" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1174.6" y="867.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1174.6" y="851.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1174.6" y="835.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1174.6" y="819.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.34%)</title><rect x="1174.6" y="803.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1174.6" y="787.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1174.6" y="771.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1174.6" y="755.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1174.6" y="739.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1174.6" y="723.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1174.6" y="707.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.6" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.6" y="691.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.6" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1174.6" y="675.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.6" y="686.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.07%)</title><rect x="1174.6" y="659.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.6" y="670.0"></text>
</g>
<g>
<title>ciMethod::interpreter_call_site_count(int) (1 samples, 0.07%)</title><rect x="1174.6" y="643.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.6" y="654.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.07%)</title><rect x="1174.6" y="627.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.6" y="638.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.07%)</title><rect x="1174.6" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.6" y="622.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.4" y="691.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.4" y="702.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.07%)</title><rect x="1175.4" y="675.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.4" y="686.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1175.4" y="659.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.4" y="670.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1175.4" y="643.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.4" y="654.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.07%)</title><rect x="1175.4" y="627.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.4" y="638.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.07%)</title><rect x="1175.4" y="611.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.4" y="622.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1175.4" y="595.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1176.2" y="691.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1176.2" y="675.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1176.2" y="659.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1176.2" y="643.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1176.2" y="627.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1176.2" y="611.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1176.2" y="595.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1176.2" y="579.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1176.2" y="563.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.2" y="574.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.07%)</title><rect x="1176.2" y="547.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.2" y="558.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1176.2" y="531.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.2" y="542.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1176.2" y="515.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.2" y="526.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1176.2" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.0" y="547.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.0" y="531.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.0" y="515.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.0" y="499.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.0" y="483.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.0" y="467.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.0" y="451.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.0" y="435.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.0" y="419.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1177.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="414.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1177.0" y="387.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.0" y="398.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1177.0" y="371.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="382.0"></text>
</g>
<g>
<title>IdealKit::clear(Node*) (1 samples, 0.07%)</title><rect x="1177.0" y="355.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.8" y="787.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.8" y="771.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.8" y="755.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.8" y="739.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.8" y="723.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.8" y="707.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.8" y="691.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.8" y="675.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.8" y="659.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.8" y="643.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.8" y="627.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.8" y="611.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.8" y="595.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.8" y="579.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.8" y="563.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.8" y="547.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.8" y="558.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1177.8" y="531.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.8" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1177.8" y="515.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="526.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1177.8" y="499.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.8" y="510.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.07%)</title><rect x="1177.8" y="483.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1178.6" y="1075.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1178.6" y="1059.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.6" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1178.6" y="1043.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1178.6" y="1027.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1178.6" y="1011.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1178.6" y="995.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1178.6" y="979.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1178.6" y="963.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1178.6" y="947.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1178.6" y="931.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1178.6" y="915.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1178.6" y="899.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1178.6" y="883.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1178.6" y="867.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1178.6" y="851.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1178.6" y="835.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1178.6" y="819.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1178.6" y="803.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1178.6" y="787.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1178.6" y="771.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1178.6" y="755.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1178.6" y="739.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1178.6" y="723.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1178.6" y="707.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1178.6" y="691.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1178.6" y="675.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1178.6" y="659.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1178.6" y="643.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1178.6" y="627.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1178.6" y="611.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1178.6" y="595.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1178.6" y="579.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1178.6" y="563.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1178.6" y="547.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1178.6" y="531.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1178.6" y="515.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1178.6" y="499.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1178.6" y="483.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1178.6" y="467.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1178.6" y="451.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.6" y="435.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.6" y="419.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.6" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.6" y="387.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.6" y="371.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.6" y="355.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.6" y="339.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.6" y="323.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1178.6" y="307.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="318.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.6" y="291.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="302.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1178.6" y="275.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="286.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1178.6" y="259.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="270.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1178.6" y="243.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="254.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1178.6" y="227.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="238.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1178.6" y="211.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="222.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1178.6" y="195.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1181.6" y="206.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.07%)</title><rect x="1179.4" y="435.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.07%)</title><rect x="1179.4" y="419.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.3" y="1091.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.3" y="1102.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1180.3" y="1075.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.07%)</title><rect x="1180.3" y="1059.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="1070.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1180.3" y="1043.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1183.3" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1181.1" y="1171.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1181.1" y="1155.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.1" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1181.1" y="1139.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1181.1" y="1123.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1181.1" y="1107.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1181.1" y="1091.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1181.1" y="1075.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1181.1" y="1059.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.1" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1181.1" y="1043.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1181.1" y="1027.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1181.1" y="1011.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1181.1" y="995.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.1" y="979.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.1" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.1" y="963.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.1" y="947.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.1" y="931.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.1" y="915.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.1" y="899.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.1" y="883.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.1" y="867.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.1" y="851.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.1" y="835.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.1" y="819.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.1" y="803.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.1" y="787.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.1" y="771.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.1" y="755.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.1" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.1" y="723.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.1" y="707.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.1" y="691.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.1" y="675.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.1" y="659.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.1" y="643.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.1" y="627.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.1" y="611.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.1" y="595.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.1" y="579.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.1" y="563.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.1" y="547.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.1" y="531.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.1" y="515.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.1" y="499.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.1" y="483.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.1" y="467.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.1" y="451.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.1" y="462.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1181.1" y="435.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="446.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1181.1" y="419.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="430.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1181.1" y="403.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="414.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1181.1" y="387.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.9" y="883.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1181.9" y="867.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.9" y="878.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1181.9" y="851.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="862.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1181.9" y="835.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.9" y="846.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.07%)</title><rect x="1181.9" y="819.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1182.7" y="979.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.7" y="990.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1182.7" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="974.0"></text>
</g>
<g>
<title>VirtualCallData::cell_count() const (1 samples, 0.07%)</title><rect x="1182.7" y="947.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.7" y="958.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.14%)</title><rect x="1183.5" y="1267.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.5" y="1278.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1184.3" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="1262.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1185.1" y="1267.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="1278.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.07%)</title><rect x="1185.1" y="1251.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.1" y="1262.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.07%)</title><rect x="1185.1" y="1235.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.1" y="1246.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.07%)</title><rect x="1185.1" y="1219.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.1" y="1230.0"></text>
</g>
<g>
<title>CodeBlob::set_oop_maps(OopMapSet*) (1 samples, 0.07%)</title><rect x="1185.1" y="1203.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.1" y="1214.0"></text>
</g>
<g>
<title>OopMapSet::copy_to(unsigned char*) (1 samples, 0.07%)</title><rect x="1185.1" y="1187.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.1" y="1198.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1185.9" y="1315.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="1326.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1185.9" y="1299.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="1310.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1185.9" y="1283.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="1294.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.07%)</title><rect x="1185.9" y="1267.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.9" y="1278.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1186.8" y="1331.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.8" y="1342.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1186.8" y="1315.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.8" y="1326.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1186.8" y="1299.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.8" y="1310.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.07%)</title><rect x="1186.8" y="1283.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.8" y="1294.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1186.8" y="1267.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.8" y="1278.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.21%)</title><rect x="1187.6" y="1363.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.6" y="1374.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.21%)</title><rect x="1187.6" y="1347.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.6" y="1358.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.21%)</title><rect x="1187.6" y="1331.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.6" y="1342.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.21%)</title><rect x="1187.6" y="1315.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.6" y="1326.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (3 samples, 0.21%)</title><rect x="1187.6" y="1299.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.6" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.21%)</title><rect x="1187.6" y="1283.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.6" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1187.6" y="1267.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.6" y="1278.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.07%)</title><rect x="1187.6" y="1251.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.6" y="1262.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.07%)</title><rect x="1187.6" y="1235.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.6" y="1246.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.07%)</title><rect x="1187.6" y="1219.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.6" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.07%)</title><rect x="1188.4" y="1267.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.4" y="1278.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (1 samples, 0.07%)</title><rect x="1188.4" y="1251.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.4" y="1262.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics() (1 samples, 0.07%)</title><rect x="1188.4" y="1235.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.4" y="1246.0"></text>
</g>
<g>
<title>TraceMemoryManagerStats::TraceMemoryManagerStats(bool, GCCause::Cause, bool, bool, bool, bool, bool, bool, bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1267.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.2" y="1278.0"></text>
</g>
<g>
<title>GCMemoryManager::gc_begin(bool, bool, bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1251.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.2" y="1262.0"></text>
</g>
<g>
<title>CodeHeap::capacity() const (1 samples, 0.07%)</title><rect x="1189.2" y="1235.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.2" y="1246.0"></text>
</g>
</g>
</svg>
