<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (283 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 7.42%)</title><rect x="10.0" y="995.0" width="87.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 7.42%)</title><rect x="10.0" y="979.0" width="87.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/lineco..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.83%)</title><rect x="10.0" y="963.0" width="33.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="974.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (6 samples, 2.12%)</title><rect x="14.2" y="947.0" width="25.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (6 samples, 2.12%)</title><rect x="14.2" y="931.0" width="25.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.2" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (5 samples, 1.77%)</title><rect x="14.2" y="915.0" width="20.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (5 samples, 1.77%)</title><rect x="14.2" y="899.0" width="20.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (5 samples, 1.77%)</title><rect x="14.2" y="883.0" width="20.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.77%)</title><rect x="14.2" y="867.0" width="20.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.77%)</title><rect x="14.2" y="851.0" width="20.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 1.77%)</title><rect x="14.2" y="835.0" width="20.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.35%)</title><rect x="35.0" y="915.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.35%)</title><rect x="39.2" y="947.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.35%)</title><rect x="39.2" y="931.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.35%)</title><rect x="39.2" y="915.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.35%)</title><rect x="39.2" y="899.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.2" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.35%)</title><rect x="39.2" y="883.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.59%)</title><rect x="43.4" y="963.0" width="54.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="46.4" y="974.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.59%)</title><rect x="43.4" y="947.0" width="54.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.4" y="958.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.12%)</title><rect x="43.4" y="931.0" width="25.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.4" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.06%)</title><rect x="43.4" y="915.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.06%)</title><rect x="43.4" y="899.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="46.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.35%)</title><rect x="43.4" y="883.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="47.5" y="883.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.35%)</title><rect x="47.5" y="867.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.35%)</title><rect x="47.5" y="851.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.35%)</title><rect x="47.5" y="835.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.35%)</title><rect x="47.5" y="819.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.5" y="830.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.35%)</title><rect x="47.5" y="803.0" width="4.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="50.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/1817086732.shouldBlock (1 samples, 0.35%)</title><rect x="51.7" y="883.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.35%)</title><rect x="51.7" y="867.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.35%)</title><rect x="51.7" y="851.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="54.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.35%)</title><rect x="51.7" y="835.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="51.7" y="819.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="51.7" y="803.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="51.7" y="787.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="51.7" y="771.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="51.7" y="755.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.7" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.35%)</title><rect x="51.7" y="739.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.35%)</title><rect x="51.7" y="723.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.35%)</title><rect x="51.7" y="707.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.7" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.35%)</title><rect x="51.7" y="691.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="54.7" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="51.7" y="675.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="54.7" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="51.7" y="659.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="54.7" y="670.0"></text>
</g>
<g>
<title>Bytecode_invoke::verify() const (1 samples, 0.35%)</title><rect x="51.7" y="643.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="54.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.06%)</title><rect x="55.9" y="915.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.71%)</title><rect x="55.9" y="899.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.71%)</title><rect x="55.9" y="883.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.71%)</title><rect x="55.9" y="867.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.35%)</title><rect x="55.9" y="851.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.35%)</title><rect x="55.9" y="835.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.35%)</title><rect x="55.9" y="819.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.35%)</title><rect x="55.9" y="803.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.35%)</title><rect x="55.9" y="787.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.35%)</title><rect x="55.9" y="771.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.35%)</title><rect x="55.9" y="755.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.35%)</title><rect x="55.9" y="739.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="58.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.35%)</title><rect x="60.0" y="851.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.35%)</title><rect x="60.0" y="835.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.35%)</title><rect x="60.0" y="819.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.0" y="830.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.35%)</title><rect x="60.0" y="803.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.35%)</title><rect x="64.2" y="899.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.35%)</title><rect x="64.2" y="883.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.2" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.35%)</title><rect x="64.2" y="867.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="67.2" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="64.2" y="851.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="67.2" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="64.2" y="835.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="67.2" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.35%)</title><rect x="64.2" y="819.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="67.2" y="830.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.35%)</title><rect x="64.2" y="803.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="67.2" y="814.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.35%)</title><rect x="64.2" y="787.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="67.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 1.77%)</title><rect x="68.4" y="931.0" width="20.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 1.77%)</title><rect x="68.4" y="915.0" width="20.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 1.77%)</title><rect x="68.4" y="899.0" width="20.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.4" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.35%)</title><rect x="68.4" y="883.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1148168779.accept (1 samples, 0.35%)</title><rect x="68.4" y="867.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.35%)</title><rect x="68.4" y="851.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="71.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.35%)</title><rect x="68.4" y="835.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.35%)</title><rect x="68.4" y="819.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="68.4" y="803.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="68.4" y="787.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.35%)</title><rect x="72.5" y="883.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.35%)</title><rect x="72.5" y="867.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.5" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.35%)</title><rect x="72.5" y="851.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.5" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.35%)</title><rect x="72.5" y="835.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.5" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.35%)</title><rect x="72.5" y="819.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.35%)</title><rect x="72.5" y="803.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.35%)</title><rect x="72.5" y="787.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="72.5" y="771.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.35%)</title><rect x="76.7" y="883.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.35%)</title><rect x="76.7" y="867.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.7" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.35%)</title><rect x="76.7" y="851.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.35%)</title><rect x="76.7" y="835.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.35%)</title><rect x="76.7" y="819.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.7" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.35%)</title><rect x="76.7" y="803.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="79.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.71%)</title><rect x="80.9" y="883.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.35%)</title><rect x="80.9" y="867.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="80.9" y="851.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="80.9" y="835.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="80.9" y="819.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="80.9" y="803.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="80.9" y="787.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="83.9" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.35%)</title><rect x="80.9" y="771.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.9" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.35%)</title><rect x="85.1" y="867.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="88.1" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="85.1" y="851.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="88.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.35%)</title><rect x="89.2" y="931.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.35%)</title><rect x="93.4" y="931.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.35%)</title><rect x="93.4" y="915.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.35%)</title><rect x="93.4" y="899.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.35%)</title><rect x="93.4" y="883.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="96.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.35%)</title><rect x="93.4" y="867.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.35%)</title><rect x="93.4" y="851.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.35%)</title><rect x="93.4" y="835.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.35%)</title><rect x="93.4" y="819.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.4" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.entrySet (1 samples, 0.35%)</title><rect x="93.4" y="803.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (143 samples, 50.53%)</title><rect x="97.6" y="995.0" width="596.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.6" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (143 samples, 50.53%)</title><rect x="97.6" y="979.0" width="596.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.6" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (143 samples, 50.53%)</title><rect x="97.6" y="963.0" width="596.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="100.6" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (131 samples, 46.29%)</title><rect x="101.7" y="947.0" width="546.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="104.7" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (131 samples, 46.29%)</title><rect x="101.7" y="931.0" width="546.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="104.7" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (131 samples, 46.29%)</title><rect x="101.7" y="915.0" width="546.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.7" y="926.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (128 samples, 45.23%)</title><rect x="101.7" y="899.0" width="533.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="104.7" y="910.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (24 samples, 8.48%)</title><rect x="122.6" y="883.0" width="100.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.6" y="894.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (24 samples, 8.48%)</title><rect x="122.6" y="867.0" width="100.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="125.6" y="878.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (24 samples, 8.48%)</title><rect x="122.6" y="851.0" width="100.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.6" y="862.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (24 samples, 8.48%)</title><rect x="122.6" y="835.0" width="100.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="125.6" y="846.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (24 samples, 8.48%)</title><rect x="122.6" y="819.0" width="100.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="125.6" y="830.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (24 samples, 8.48%)</title><rect x="122.6" y="803.0" width="100.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="125.6" y="814.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 1.77%)</title><rect x="122.6" y="787.0" width="20.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="125.6" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="122.6" y="771.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="125.6" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="122.6" y="755.0" width="4.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="125.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.35%)</title><rect x="126.7" y="771.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.35%)</title><rect x="126.7" y="755.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.35%)</title><rect x="126.7" y="739.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="129.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="126.7" y="723.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="129.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="126.7" y="707.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="126.7" y="691.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="129.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.06%)</title><rect x="130.9" y="771.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="133.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.06%)</title><rect x="130.9" y="755.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="133.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.35%)</title><rect x="130.9" y="739.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.9" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="130.9" y="723.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="133.9" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="130.9" y="707.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="133.9" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="130.9" y="691.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="133.9" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.35%)</title><rect x="130.9" y="675.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="133.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.71%)</title><rect x="135.1" y="739.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.71%)</title><rect x="135.1" y="723.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="138.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.35%)</title><rect x="135.1" y="707.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.1" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="135.1" y="691.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="138.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.35%)</title><rect x="139.3" y="707.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="142.3" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="139.3" y="691.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="142.3" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="139.3" y="675.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="142.3" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="139.3" y="659.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="142.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 6.36%)</title><rect x="143.4" y="787.0" width="75.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.4" y="798.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.71%)</title><rect x="143.4" y="771.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.35%)</title><rect x="151.8" y="771.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.35%)</title><rect x="155.9" y="771.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="158.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="155.9" y="755.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.35%)</title><rect x="155.9" y="739.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.35%)</title><rect x="160.1" y="771.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.35%)</title><rect x="160.1" y="755.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 4.59%)</title><rect x="164.3" y="771.0" width="54.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.3" y="782.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.71%)</title><rect x="168.4" y="755.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.35%)</title><rect x="176.8" y="755.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 3.18%)</title><rect x="181.0" y="755.0" width="37.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="184.0" y="766.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 3.18%)</title><rect x="181.0" y="739.0" width="37.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.0" y="750.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 3.18%)</title><rect x="181.0" y="723.0" width="37.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.0" y="734.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.06%)</title><rect x="181.0" y="707.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.35%)</title><rect x="189.3" y="691.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.35%)</title><rect x="189.3" y="675.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="192.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.35%)</title><rect x="189.3" y="659.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.35%)</title><rect x="189.3" y="643.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.71%)</title><rect x="193.5" y="707.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.71%)</title><rect x="193.5" y="691.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.35%)</title><rect x="197.6" y="675.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="200.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.35%)</title><rect x="197.6" y="659.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.6" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.35%)</title><rect x="197.6" y="643.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.71%)</title><rect x="201.8" y="707.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.71%)</title><rect x="201.8" y="691.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.71%)</title><rect x="201.8" y="675.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.71%)</title><rect x="201.8" y="659.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.8" y="670.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.71%)</title><rect x="201.8" y="643.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.8" y="654.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.35%)</title><rect x="206.0" y="627.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="209.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.35%)</title><rect x="210.1" y="707.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="210.1" y="691.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="210.1" y="675.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.35%)</title><rect x="214.3" y="707.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.35%)</title><rect x="214.3" y="691.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.3" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="214.3" y="675.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="217.3" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.35%)</title><rect x="214.3" y="659.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="217.3" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="214.3" y="643.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="217.3" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="214.3" y="627.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="217.3" y="638.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.35%)</title><rect x="214.3" y="611.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="217.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.35%)</title><rect x="214.3" y="595.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="217.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.35%)</title><rect x="218.5" y="787.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.35%)</title><rect x="218.5" y="771.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.35%)</title><rect x="218.5" y="755.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.35%)</title><rect x="218.5" y="739.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.35%)</title><rect x="218.5" y="723.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (90 samples, 31.80%)</title><rect x="222.7" y="883.0" width="375.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.7" y="894.0">com/linecorp/decaton/processor/runtime/ProcessPipel..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (13 samples, 4.59%)</title><rect x="222.7" y="867.0" width="54.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.7" y="878.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (12 samples, 4.24%)</title><rect x="226.8" y="851.0" width="50.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.8" y="862.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 4.24%)</title><rect x="226.8" y="835.0" width="50.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.8" y="846.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.71%)</title><rect x="226.8" y="819.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.8" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.71%)</title><rect x="226.8" y="803.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.71%)</title><rect x="226.8" y="787.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.71%)</title><rect x="226.8" y="771.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.8" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 3.53%)</title><rect x="235.2" y="819.0" width="41.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.2" y="830.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.47%)</title><rect x="247.7" y="803.0" width="29.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.7" y="814.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 2.47%)</title><rect x="247.7" y="787.0" width="29.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.7" y="798.0">ja..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.71%)</title><rect x="268.5" y="771.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="276.9" y="867.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="276.9" y="851.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.9" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.35%)</title><rect x="276.9" y="835.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (21 samples, 7.42%)</title><rect x="281.0" y="867.0" width="87.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.0" y="878.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (21 samples, 7.42%)</title><rect x="281.0" y="851.0" width="87.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.0" y="862.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 2.12%)</title><rect x="285.2" y="835.0" width="25.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.2" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.71%)</title><rect x="285.2" y="819.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.2" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.71%)</title><rect x="293.5" y="819.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.5" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.71%)</title><rect x="293.5" y="803.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.5" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.71%)</title><rect x="293.5" y="787.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.5" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.71%)</title><rect x="293.5" y="771.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.5" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.71%)</title><rect x="293.5" y="755.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="297.7" y="739.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="300.7" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.71%)</title><rect x="301.9" y="819.0" width="8.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="304.9" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (14 samples, 4.95%)</title><rect x="310.2" y="835.0" width="58.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.2" y="846.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (14 samples, 4.95%)</title><rect x="310.2" y="819.0" width="58.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="313.2" y="830.0">ch/qos..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (14 samples, 4.95%)</title><rect x="310.2" y="803.0" width="58.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.2" y="814.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 4.59%)</title><rect x="314.4" y="787.0" width="54.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.4" y="798.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 2.83%)</title><rect x="335.2" y="771.0" width="33.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="338.2" y="782.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 1.06%)</title><rect x="351.9" y="755.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.9" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="360.2" y="739.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="363.2" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="360.2" y="723.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="363.2" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="360.2" y="707.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="363.2" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="360.2" y="691.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="363.2" y="702.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.35%)</title><rect x="364.4" y="755.0" width="4.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="367.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (51 samples, 18.02%)</title><rect x="368.6" y="867.0" width="212.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.6" y="878.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (51 samples, 18.02%)</title><rect x="368.6" y="851.0" width="212.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="371.6" y="862.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (46 samples, 16.25%)</title><rect x="368.6" y="835.0" width="191.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="371.6" y="846.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (46 samples, 16.25%)</title><rect x="368.6" y="819.0" width="191.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.6" y="830.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (46 samples, 16.25%)</title><rect x="368.6" y="803.0" width="191.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="371.6" y="814.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.71%)</title><rect x="372.8" y="787.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="375.8" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.71%)</title><rect x="372.8" y="771.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="375.8" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.71%)</title><rect x="372.8" y="755.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="375.8" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.71%)</title><rect x="372.8" y="739.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="375.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.35%)</title><rect x="376.9" y="723.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.35%)</title><rect x="376.9" y="707.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (41 samples, 14.49%)</title><rect x="381.1" y="787.0" width="170.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="384.1" y="798.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>java/lang/Thread.sleep (41 samples, 14.49%)</title><rect x="381.1" y="771.0" width="170.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="384.1" y="782.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (39 samples, 13.78%)</title><rect x="385.3" y="755.0" width="162.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="388.3" y="766.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.35%)</title><rect x="397.8" y="739.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="400.8" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.35%)</title><rect x="401.9" y="739.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="404.9" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="406.1" y="739.0" width="4.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="409.1" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="406.1" y="723.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="409.1" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.71%)</title><rect x="410.3" y="739.0" width="8.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="413.3" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.35%)</title><rect x="418.6" y="739.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="421.6" y="750.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (30 samples, 10.60%)</title><rect x="422.8" y="739.0" width="125.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="425.8" y="750.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.35%)</title><rect x="443.6" y="723.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="446.6" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.35%)</title><rect x="443.6" y="707.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="446.6" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="447.8" y="723.0" width="4.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="450.8" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="447.8" y="707.0" width="4.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="450.8" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.41%)</title><rect x="452.0" y="723.0" width="16.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="455.0" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 3.89%)</title><rect x="468.7" y="723.0" width="45.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="471.7" y="734.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.71%)</title><rect x="514.5" y="723.0" width="8.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="517.5" y="734.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.41%)</title><rect x="522.9" y="723.0" width="16.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="525.9" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="539.5" y="723.0" width="4.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="542.5" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.35%)</title><rect x="543.7" y="723.0" width="4.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="546.7" y="734.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.35%)</title><rect x="547.9" y="755.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="550.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.71%)</title><rect x="552.0" y="787.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="555.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="552.0" y="771.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="555.0" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="552.0" y="755.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="555.0" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.35%)</title><rect x="556.2" y="771.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="559.2" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.35%)</title><rect x="556.2" y="755.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="559.2" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.35%)</title><rect x="556.2" y="739.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.2" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.71%)</title><rect x="560.4" y="835.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="563.4" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.35%)</title><rect x="564.6" y="819.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="567.6" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.35%)</title><rect x="564.6" y="803.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="567.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 1.06%)</title><rect x="568.7" y="835.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="571.7" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 1.06%)</title><rect x="568.7" y="819.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="571.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.41%)</title><rect x="581.2" y="867.0" width="16.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="584.2" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="589.6" y="851.0" width="4.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="592.6" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="589.6" y="835.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="592.6" y="846.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.35%)</title><rect x="593.7" y="851.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="596.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.83%)</title><rect x="597.9" y="883.0" width="33.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="600.9" y="894.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.12%)</title><rect x="606.3" y="867.0" width="25.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="609.3" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.77%)</title><rect x="610.4" y="851.0" width="20.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="613.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1823384172.accept (5 samples, 1.77%)</title><rect x="610.4" y="835.0" width="20.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="613.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (5 samples, 1.77%)</title><rect x="610.4" y="819.0" width="20.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="613.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/498704266.complete (5 samples, 1.77%)</title><rect x="610.4" y="803.0" width="20.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="613.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (5 samples, 1.77%)</title><rect x="610.4" y="787.0" width="20.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="613.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (5 samples, 1.77%)</title><rect x="610.4" y="771.0" width="20.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="613.4" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 1.77%)</title><rect x="610.4" y="755.0" width="20.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="613.4" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 1.77%)</title><rect x="610.4" y="739.0" width="20.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="613.4" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 1.77%)</title><rect x="610.4" y="723.0" width="20.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="613.4" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 1.77%)</title><rect x="610.4" y="707.0" width="20.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="613.4" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.35%)</title><rect x="631.3" y="883.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="634.3" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="631.3" y="867.0" width="4.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="634.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.06%)</title><rect x="635.4" y="899.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 3.89%)</title><rect x="648.0" y="947.0" width="45.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="651.0" y="958.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 3.89%)</title><rect x="648.0" y="931.0" width="45.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="651.0" y="942.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.41%)</title><rect x="648.0" y="915.0" width="16.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="651.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 1.41%)</title><rect x="648.0" y="899.0" width="16.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="651.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 2.47%)</title><rect x="664.6" y="915.0" width="29.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.6" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 2.47%)</title><rect x="664.6" y="899.0" width="29.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="667.6" y="910.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 2.47%)</title><rect x="664.6" y="883.0" width="29.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="667.6" y="894.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 2.47%)</title><rect x="664.6" y="867.0" width="29.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="667.6" y="878.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.35%)</title><rect x="693.8" y="995.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="696.8" y="1006.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.35%)</title><rect x="693.8" y="979.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="696.8" y="990.0"></text>
</g>
<g>
<title>start_thread (118 samples, 41.70%)</title><rect x="698.0" y="995.0" width="492.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="701.0" y="1006.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (118 samples, 41.70%)</title><rect x="698.0" y="979.0" width="492.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="701.0" y="990.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 2.83%)</title><rect x="698.0" y="963.0" width="33.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="701.0" y="974.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 2.83%)</title><rect x="698.0" y="947.0" width="33.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="701.0" y="958.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 2.47%)</title><rect x="698.0" y="931.0" width="29.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="701.0" y="942.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.12%)</title><rect x="698.0" y="915.0" width="25.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="701.0" y="926.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.06%)</title><rect x="710.5" y="899.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="713.5" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.35%)</title><rect x="718.8" y="883.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="721.8" y="894.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.35%)</title><rect x="718.8" y="867.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="721.8" y="878.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.35%)</title><rect x="723.0" y="915.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="726.0" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.35%)</title><rect x="727.2" y="931.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="730.2" y="942.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.35%)</title><rect x="727.2" y="915.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="730.2" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.35%)</title><rect x="727.2" y="899.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="730.2" y="910.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.35%)</title><rect x="727.2" y="883.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="730.2" y="894.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.35%)</title><rect x="727.2" y="867.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="730.2" y="878.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.35%)</title><rect x="727.2" y="851.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="730.2" y="862.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.35%)</title><rect x="727.2" y="835.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="730.2" y="846.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.35%)</title><rect x="727.2" y="819.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="730.2" y="830.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.35%)</title><rect x="727.2" y="803.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="730.2" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (110 samples, 38.87%)</title><rect x="731.3" y="963.0" width="458.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="734.3" y="974.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (110 samples, 38.87%)</title><rect x="731.3" y="947.0" width="458.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="734.3" y="958.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (110 samples, 38.87%)</title><rect x="731.3" y="931.0" width="458.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="734.3" y="942.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (109 samples, 38.52%)</title><rect x="731.3" y="915.0" width="454.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="734.3" y="926.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (107 samples, 37.81%)</title><rect x="731.3" y="899.0" width="446.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="734.3" y="910.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (107 samples, 37.81%)</title><rect x="731.3" y="883.0" width="446.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="734.3" y="894.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, b..</text>
</g>
<g>
<title>Compile::Code_Gen() (48 samples, 16.96%)</title><rect x="731.3" y="867.0" width="200.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="734.3" y="878.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.35%)</title><rect x="731.3" y="851.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="734.3" y="862.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.35%)</title><rect x="731.3" y="835.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="734.3" y="846.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.35%)</title><rect x="731.3" y="819.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="734.3" y="830.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.35%)</title><rect x="731.3" y="803.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="734.3" y="814.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.35%)</title><rect x="731.3" y="787.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="734.3" y="798.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, Address) (1 samples, 0.35%)</title><rect x="731.3" y="771.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.3" y="782.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.35%)</title><rect x="731.3" y="755.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="734.3" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.71%)</title><rect x="735.5" y="851.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="738.5" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.71%)</title><rect x="735.5" y="835.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="738.5" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.71%)</title><rect x="735.5" y="819.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="738.5" y="830.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.06%)</title><rect x="743.9" y="851.0" width="12.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="746.9" y="862.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.06%)</title><rect x="743.9" y="835.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="746.9" y="846.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.71%)</title><rect x="743.9" y="819.0" width="8.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="746.9" y="830.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.35%)</title><rect x="752.2" y="819.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="755.2" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.35%)</title><rect x="752.2" y="803.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="755.2" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.71%)</title><rect x="756.4" y="851.0" width="8.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="759.4" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.71%)</title><rect x="756.4" y="835.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="759.4" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="756.4" y="819.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="759.4" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.35%)</title><rect x="760.5" y="819.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="763.5" y="830.0"></text>
</g>
<g>
<title>SafePointScalarObjectNode::Opcode() const (1 samples, 0.35%)</title><rect x="760.5" y="803.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="763.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (40 samples, 14.13%)</title><rect x="764.7" y="851.0" width="166.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.7" y="862.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.35%)</title><rect x="764.7" y="835.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="767.7" y="846.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.35%)</title><rect x="768.9" y="835.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="771.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.71%)</title><rect x="773.0" y="835.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="776.0" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.35%)</title><rect x="777.2" y="819.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="780.2" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="777.2" y="803.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="780.2" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.06%)</title><rect x="781.4" y="835.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="784.4" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.71%)</title><rect x="785.5" y="819.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="788.5" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="789.7" y="803.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="792.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.71%)</title><rect x="793.9" y="835.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="796.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.47%)</title><rect x="802.2" y="835.0" width="29.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="805.2" y="846.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.35%)</title><rect x="827.2" y="819.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="830.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.35%)</title><rect x="831.4" y="835.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="834.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.71%)</title><rect x="835.6" y="835.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="838.6" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.41%)</title><rect x="843.9" y="835.0" width="16.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="846.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.71%)</title><rect x="852.3" y="819.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.3" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (7 samples, 2.47%)</title><rect x="860.6" y="835.0" width="29.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="863.6" y="846.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 2.47%)</title><rect x="860.6" y="819.0" width="29.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="863.6" y="830.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 2.47%)</title><rect x="860.6" y="803.0" width="29.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="863.6" y="814.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.71%)</title><rect x="860.6" y="787.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="863.6" y="798.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.35%)</title><rect x="864.8" y="771.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="867.8" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="868.9" y="787.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="871.9" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.71%)</title><rect x="873.1" y="787.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="876.1" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="877.3" y="771.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="880.3" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.71%)</title><rect x="881.4" y="787.0" width="8.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="884.4" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 1.06%)</title><rect x="889.8" y="835.0" width="12.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="892.8" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.35%)</title><rect x="902.3" y="835.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="905.3" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="902.3" y="819.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="905.3" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.35%)</title><rect x="906.5" y="835.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="909.5" y="846.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.35%)</title><rect x="906.5" y="819.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.5" y="830.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.35%)</title><rect x="906.5" y="803.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="909.5" y="814.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.35%)</title><rect x="906.5" y="787.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="909.5" y="798.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.35%)</title><rect x="906.5" y="771.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="909.5" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.77%)</title><rect x="910.6" y="835.0" width="20.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="913.6" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.06%)</title><rect x="919.0" y="819.0" width="12.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="922.0" y="830.0"></text>
</g>
<g>
<title>Compile::Optimize() (55 samples, 19.43%)</title><rect x="931.5" y="867.0" width="229.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.5" y="878.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.35%)</title><rect x="931.5" y="851.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.5" y="862.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.35%)</title><rect x="931.5" y="835.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.5" y="846.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.35%)</title><rect x="931.5" y="819.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.5" y="830.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.35%)</title><rect x="931.5" y="803.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.35%)</title><rect x="935.7" y="851.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="938.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.35%)</title><rect x="935.7" y="835.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.35%)</title><rect x="935.7" y="819.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="938.7" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.35%)</title><rect x="935.7" y="803.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="938.7" y="814.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.71%)</title><rect x="939.8" y="851.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.8" y="862.0"></text>
</g>
<g>
<title>LoadBNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="939.8" y="835.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.8" y="846.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.35%)</title><rect x="939.8" y="819.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.8" y="830.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="803.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.8" y="814.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="787.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.8" y="798.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.35%)</title><rect x="944.0" y="835.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="947.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (44 samples, 15.55%)</title><rect x="948.2" y="851.0" width="183.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="951.2" y="862.0">PhaseIdealLoop::build_an..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.06%)</title><rect x="948.2" y="835.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="951.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (38 samples, 13.43%)</title><rect x="960.7" y="835.0" width="158.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="963.7" y="846.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (37 samples, 13.07%)</title><rect x="964.8" y="819.0" width="154.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="967.8" y="830.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (37 samples, 13.07%)</title><rect x="964.8" y="803.0" width="154.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="967.8" y="814.0">PhaseIdealLoop::get_..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.06%)</title><rect x="1106.6" y="787.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.6" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.35%)</title><rect x="1119.1" y="835.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.71%)</title><rect x="1123.3" y="835.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.35%)</title><rect x="1127.5" y="819.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.35%)</title><rect x="1127.5" y="803.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.5" y="814.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.35%)</title><rect x="1127.5" y="787.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.5" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.77%)</title><rect x="1131.6" y="851.0" width="20.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.6" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.77%)</title><rect x="1131.6" y="835.0" width="20.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.6" y="846.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1131.6" y="819.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.6" y="830.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1131.6" y="803.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.6" y="814.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.35%)</title><rect x="1131.6" y="787.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.6" y="798.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.35%)</title><rect x="1131.6" y="771.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.6" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1131.6" y="755.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.6" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1131.6" y="739.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.6" y="750.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1131.6" y="723.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.6" y="734.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.35%)</title><rect x="1131.6" y="707.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.6" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.35%)</title><rect x="1131.6" y="691.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.6" y="702.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.35%)</title><rect x="1131.6" y="675.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.6" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.35%)</title><rect x="1131.6" y="659.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.6" y="670.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1135.8" y="819.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.8" y="830.0"></text>
</g>
<g>
<title>MemBarReleaseLockNode::Opcode() const (1 samples, 0.35%)</title><rect x="1135.8" y="803.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.8" y="814.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1140.0" y="819.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.0" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.35%)</title><rect x="1144.1" y="819.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.1" y="830.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1148.3" y="819.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.3" y="830.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.35%)</title><rect x="1148.3" y="803.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.3" y="814.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.35%)</title><rect x="1148.3" y="787.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.3" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.35%)</title><rect x="1152.5" y="851.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.5" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.35%)</title><rect x="1152.5" y="835.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.5" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::set_eden_pointers(Node*&amp;, Node*&amp;) (1 samples, 0.35%)</title><rect x="1152.5" y="819.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.5" y="830.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.35%)</title><rect x="1152.5" y="803.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.5" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="1156.6" y="851.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1159.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.41%)</title><rect x="1160.8" y="867.0" width="16.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.41%)</title><rect x="1160.8" y="851.0" width="16.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.41%)</title><rect x="1160.8" y="835.0" width="16.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.41%)</title><rect x="1160.8" y="819.0" width="16.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.41%)</title><rect x="1160.8" y="803.0" width="16.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.41%)</title><rect x="1160.8" y="787.0" width="16.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.41%)</title><rect x="1160.8" y="771.0" width="16.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.41%)</title><rect x="1160.8" y="755.0" width="16.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.41%)</title><rect x="1160.8" y="739.0" width="16.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.41%)</title><rect x="1160.8" y="723.0" width="16.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.41%)</title><rect x="1160.8" y="707.0" width="16.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.41%)</title><rect x="1160.8" y="691.0" width="16.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.8" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1160.8" y="675.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.8" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.35%)</title><rect x="1160.8" y="659.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.8" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.35%)</title><rect x="1160.8" y="643.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.8" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.35%)</title><rect x="1160.8" y="627.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.8" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.35%)</title><rect x="1160.8" y="611.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.8" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="1160.8" y="595.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.8" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="1160.8" y="579.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.8" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.35%)</title><rect x="1160.8" y="563.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.8" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.35%)</title><rect x="1160.8" y="547.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.8" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1160.8" y="531.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.8" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1160.8" y="515.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.8" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1160.8" y="499.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.8" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1160.8" y="483.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.8" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1160.8" y="467.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.0" y="675.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.0" y="659.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.0" y="643.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.0" y="627.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.0" y="611.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.0" y="595.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.0" y="579.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.0" y="563.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.0" y="547.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.0" y="531.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.0" y="515.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1165.0" y="499.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1165.0" y="483.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.0" y="494.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.35%)</title><rect x="1165.0" y="467.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.0" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1165.0" y="451.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.0" y="462.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.35%)</title><rect x="1165.0" y="435.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.0" y="446.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1165.0" y="419.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.0" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1169.2" y="675.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1169.2" y="659.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1169.2" y="643.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1169.2" y="627.0" width="8.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1169.2" y="611.0" width="8.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1169.2" y="595.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1169.2" y="579.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1169.2" y="563.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1169.2" y="547.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1169.2" y="531.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1169.2" y="515.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1169.2" y="499.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1169.2" y="483.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1169.2" y="467.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1169.2" y="451.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1169.2" y="435.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1169.2" y="419.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1169.2" y="403.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1169.2" y="387.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1169.2" y="371.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1169.2" y="355.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1169.2" y="339.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1169.2" y="323.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1169.2" y="307.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1169.2" y="291.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1169.2" y="275.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.2" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1169.2" y="259.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1169.2" y="243.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1169.2" y="227.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1169.2" y="211.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1169.2" y="195.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1169.2" y="179.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.2" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1169.2" y="163.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1169.2" y="147.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1169.2" y="131.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1169.2" y="115.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1169.2" y="99.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.2" y="110.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1169.2" y="83.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.2" y="94.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.35%)</title><rect x="1169.2" y="67.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.2" y="78.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1169.2" y="51.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.2" y="62.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1169.2" y="35.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.2" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.35%)</title><rect x="1173.3" y="531.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="542.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.35%)</title><rect x="1173.3" y="515.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.3" y="526.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.35%)</title><rect x="1173.3" y="499.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="510.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1173.3" y="483.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.3" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1173.3" y="467.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.3" y="478.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.71%)</title><rect x="1177.5" y="899.0" width="8.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.5" y="910.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.71%)</title><rect x="1177.5" y="883.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.71%)</title><rect x="1177.5" y="867.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.71%)</title><rect x="1177.5" y="851.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="862.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.35%)</title><rect x="1177.5" y="835.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="846.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.35%)</title><rect x="1177.5" y="819.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="830.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.35%)</title><rect x="1177.5" y="803.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.35%)</title><rect x="1177.5" y="787.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1177.5" y="771.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1177.5" y="755.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1177.5" y="739.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1177.5" y="723.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.5" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1177.5" y="707.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1177.5" y="691.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1177.5" y="675.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1177.5" y="659.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1177.5" y="643.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1177.5" y="627.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1177.5" y="611.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1177.5" y="595.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1177.5" y="579.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1177.5" y="563.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1177.5" y="547.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1177.5" y="531.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1177.5" y="515.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="526.0"></text>
</g>
<g>
<title>BlockBegin::set_end(BlockEnd*) (1 samples, 0.35%)</title><rect x="1177.5" y="499.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="510.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.35%)</title><rect x="1177.5" y="483.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="494.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.35%)</title><rect x="1177.5" y="467.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="478.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.35%)</title><rect x="1181.7" y="835.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="846.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.35%)</title><rect x="1181.7" y="819.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="830.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.35%)</title><rect x="1181.7" y="803.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.35%)</title><rect x="1181.7" y="787.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="798.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.35%)</title><rect x="1185.8" y="915.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.8" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.35%)</title><rect x="1185.8" y="899.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.8" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.35%)</title><rect x="1185.8" y="883.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.8" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.35%)</title><rect x="1185.8" y="867.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="878.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.35%)</title><rect x="1185.8" y="851.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.8" y="862.0"></text>
</g>
</g>
</svg>
