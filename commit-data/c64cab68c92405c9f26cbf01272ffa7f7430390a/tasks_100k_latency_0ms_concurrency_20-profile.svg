<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (159 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 15.09%)</title><rect x="10.0" y="883.0" width="178.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="894.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.63%)</title><rect x="17.4" y="867.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.63%)</title><rect x="17.4" y="851.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.63%)</title><rect x="17.4" y="835.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.63%)</title><rect x="17.4" y="819.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.63%)</title><rect x="17.4" y="803.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.63%)</title><rect x="17.4" y="787.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.63%)</title><rect x="17.4" y="771.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.63%)</title><rect x="17.4" y="755.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.63%)</title><rect x="17.4" y="739.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.63%)</title><rect x="17.4" y="723.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.4" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.63%)</title><rect x="17.4" y="707.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.4" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.63%)</title><rect x="17.4" y="691.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.4" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.63%)</title><rect x="17.4" y="675.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.4" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.63%)</title><rect x="17.4" y="659.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.4" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.63%)</title><rect x="17.4" y="643.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.4" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollCtl (1 samples, 0.63%)</title><rect x="17.4" y="627.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.4" y="638.0"></text>
</g>
<g>
<title>__GI_epoll_ctl (1 samples, 0.63%)</title><rect x="17.4" y="611.0" width="7.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="20.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (22 samples, 13.84%)</title><rect x="24.8" y="867.0" width="163.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.8" y="878.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.63%)</title><rect x="24.8" y="851.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.63%)</title><rect x="24.8" y="835.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.63%)</title><rect x="24.8" y="819.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.63%)</title><rect x="24.8" y="803.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.63%)</title><rect x="24.8" y="787.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.63%)</title><rect x="24.8" y="771.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.63%)</title><rect x="24.8" y="755.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.8" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.63%)</title><rect x="24.8" y="739.0" width="7.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="27.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (18 samples, 11.32%)</title><rect x="32.3" y="851.0" width="133.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.3" y="862.0">java/lang/Iterabl..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1257843912.accept (17 samples, 10.69%)</title><rect x="32.3" y="835.0" width="126.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="35.3" y="846.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 10.69%)</title><rect x="32.3" y="819.0" width="126.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.3" y="830.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 10.06%)</title><rect x="32.3" y="803.0" width="118.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.3" y="814.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 10.06%)</title><rect x="32.3" y="787.0" width="118.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.3" y="798.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (16 samples, 10.06%)</title><rect x="32.3" y="771.0" width="118.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.3" y="782.0">com/linecorp/d..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (16 samples, 10.06%)</title><rect x="32.3" y="755.0" width="118.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.3" y="766.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 10.06%)</title><rect x="32.3" y="739.0" width="118.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.3" y="750.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (16 samples, 10.06%)</title><rect x="32.3" y="723.0" width="118.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="35.3" y="734.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 6.92%)</title><rect x="32.3" y="707.0" width="81.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.3" y="718.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.63%)</title><rect x="32.3" y="691.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.63%)</title><rect x="32.3" y="675.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 6.29%)</title><rect x="39.7" y="691.0" width="74.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.7" y="702.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 6.29%)</title><rect x="39.7" y="675.0" width="74.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.7" y="686.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 6.29%)</title><rect x="39.7" y="659.0" width="74.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.7" y="670.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 6.29%)</title><rect x="39.7" y="643.0" width="74.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.7" y="654.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (10 samples, 6.29%)</title><rect x="39.7" y="627.0" width="74.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.7" y="638.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 6.29%)</title><rect x="39.7" y="611.0" width="74.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="42.7" y="622.0">Unsafe_U..</text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 4.40%)</title><rect x="39.7" y="595.0" width="51.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="42.7" y="606.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.63%)</title><rect x="91.6" y="595.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="94.6" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.26%)</title><rect x="99.1" y="595.0" width="14.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="102.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.89%)</title><rect x="113.9" y="707.0" width="22.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="116.9" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.89%)</title><rect x="113.9" y="691.0" width="22.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.9" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.89%)</title><rect x="113.9" y="675.0" width="22.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.9" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.26%)</title><rect x="136.2" y="707.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 1.26%)</title><rect x="136.2" y="691.0" width="14.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.26%)</title><rect x="136.2" y="675.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.63%)</title><rect x="151.0" y="803.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="154.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.63%)</title><rect x="151.0" y="787.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="154.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.63%)</title><rect x="158.4" y="835.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="161.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.63%)</title><rect x="158.4" y="819.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.63%)</title><rect x="158.4" y="803.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.63%)</title><rect x="158.4" y="787.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.63%)</title><rect x="158.4" y="771.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.63%)</title><rect x="158.4" y="755.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 1.89%)</title><rect x="165.8" y="851.0" width="22.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="168.8" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 1.89%)</title><rect x="165.8" y="835.0" width="22.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.8" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.26%)</title><rect x="165.8" y="819.0" width="14.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="168.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.26%)</title><rect x="165.8" y="803.0" width="14.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.63%)</title><rect x="165.8" y="787.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.63%)</title><rect x="165.8" y="771.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.63%)</title><rect x="165.8" y="755.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.63%)</title><rect x="165.8" y="739.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.63%)</title><rect x="165.8" y="723.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.63%)</title><rect x="165.8" y="707.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="168.8" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.63%)</title><rect x="165.8" y="691.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.63%)</title><rect x="173.3" y="787.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.63%)</title><rect x="180.7" y="819.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="183.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.63%)</title><rect x="180.7" y="803.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="183.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.63%)</title><rect x="180.7" y="787.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.63%)</title><rect x="180.7" y="771.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="183.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.63%)</title><rect x="180.7" y="755.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.7" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.63%)</title><rect x="180.7" y="739.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.63%)</title><rect x="180.7" y="723.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.63%)</title><rect x="180.7" y="707.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.63%)</title><rect x="180.7" y="691.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.63%)</title><rect x="180.7" y="675.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.7" y="686.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.63%)</title><rect x="180.7" y="659.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="183.7" y="670.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.63%)</title><rect x="180.7" y="643.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="183.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.63%)</title><rect x="180.7" y="627.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.63%)</title><rect x="180.7" y="611.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.63%)</title><rect x="180.7" y="595.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.7" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.63%)</title><rect x="180.7" y="579.0" width="7.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="183.7" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.run (55 samples, 34.59%)</title><rect x="188.1" y="883.0" width="408.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.1" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (55 samples, 34.59%)</title><rect x="188.1" y="867.0" width="408.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.1" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (55 samples, 34.59%)</title><rect x="188.1" y="851.0" width="408.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="191.1" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/466194598.run (31 samples, 19.50%)</title><rect x="195.5" y="835.0" width="230.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="198.5" y="846.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (31 samples, 19.50%)</title><rect x="195.5" y="819.0" width="230.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.5" y="830.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (31 samples, 19.50%)</title><rect x="195.5" y="803.0" width="230.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.5" y="814.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.63%)</title><rect x="195.5" y="787.0" width="7.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="198.5" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.63%)</title><rect x="195.5" y="771.0" width="7.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="198.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (30 samples, 18.87%)</title><rect x="203.0" y="787.0" width="222.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.0" y="798.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (10 samples, 6.29%)</title><rect x="210.4" y="771.0" width="74.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="213.4" y="782.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 6.29%)</title><rect x="210.4" y="755.0" width="74.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.4" y="766.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 6.29%)</title><rect x="210.4" y="739.0" width="74.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="213.4" y="750.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.29%)</title><rect x="210.4" y="723.0" width="74.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.4" y="734.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.29%)</title><rect x="210.4" y="707.0" width="74.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.4" y="718.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 6.29%)</title><rect x="210.4" y="691.0" width="74.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.4" y="702.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 3.77%)</title><rect x="210.4" y="675.0" width="44.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.4" y="686.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 1.26%)</title><rect x="210.4" y="659.0" width="14.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="213.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 1.26%)</title><rect x="210.4" y="643.0" width="14.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="213.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 1.26%)</title><rect x="210.4" y="627.0" width="14.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.26%)</title><rect x="210.4" y="611.0" width="14.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="213.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 2.52%)</title><rect x="225.2" y="659.0" width="29.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.2" y="670.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 2.52%)</title><rect x="225.2" y="643.0" width="29.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.2" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 1.26%)</title><rect x="225.2" y="627.0" width="14.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 1.26%)</title><rect x="225.2" y="611.0" width="14.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.26%)</title><rect x="240.1" y="627.0" width="14.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 1.26%)</title><rect x="240.1" y="611.0" width="14.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 2.52%)</title><rect x="254.9" y="675.0" width="29.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.9" y="686.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.63%)</title><rect x="254.9" y="659.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.89%)</title><rect x="262.3" y="659.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.3" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.89%)</title><rect x="262.3" y="643.0" width="22.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.3" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.89%)</title><rect x="262.3" y="627.0" width="22.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.3" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.89%)</title><rect x="262.3" y="611.0" width="22.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.3" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 1.26%)</title><rect x="269.7" y="595.0" width="14.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 1.26%)</title><rect x="269.7" y="579.0" width="14.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.26%)</title><rect x="269.7" y="563.0" width="14.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.26%)</title><rect x="269.7" y="547.0" width="14.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.7" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 1.26%)</title><rect x="269.7" y="531.0" width="14.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="272.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (19 samples, 11.95%)</title><rect x="284.6" y="771.0" width="141.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.6" y="782.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.63%)</title><rect x="284.6" y="755.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.6" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.63%)</title><rect x="284.6" y="739.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.6" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.63%)</title><rect x="284.6" y="723.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.6" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.63%)</title><rect x="284.6" y="707.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.63%)</title><rect x="284.6" y="691.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.63%)</title><rect x="292.0" y="755.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.63%)</title><rect x="292.0" y="739.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.63%)</title><rect x="292.0" y="723.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (13 samples, 8.18%)</title><rect x="299.4" y="755.0" width="96.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.4" y="766.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (13 samples, 8.18%)</title><rect x="299.4" y="739.0" width="96.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="302.4" y="750.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 5.03%)</title><rect x="299.4" y="723.0" width="59.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.4" y="734.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 5.03%)</title><rect x="299.4" y="707.0" width="59.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.4" y="718.0">java/l..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.63%)</title><rect x="321.7" y="691.0" width="7.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="324.7" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 2.52%)</title><rect x="329.1" y="691.0" width="29.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="332.1" y="702.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 2.52%)</title><rect x="329.1" y="675.0" width="29.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="332.1" y="686.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 2.52%)</title><rect x="329.1" y="659.0" width="29.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.1" y="670.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.63%)</title><rect x="351.4" y="643.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="354.4" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.63%)</title><rect x="351.4" y="627.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="354.4" y="638.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.63%)</title><rect x="351.4" y="611.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="354.4" y="622.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.63%)</title><rect x="351.4" y="595.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="354.4" y="606.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.63%)</title><rect x="351.4" y="579.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="354.4" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.63%)</title><rect x="358.8" y="723.0" width="7.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="361.8" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 2.52%)</title><rect x="366.2" y="723.0" width="29.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="369.2" y="734.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 2.52%)</title><rect x="366.2" y="707.0" width="29.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.2" y="718.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.52%)</title><rect x="366.2" y="691.0" width="29.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.2" y="702.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.52%)</title><rect x="366.2" y="675.0" width="29.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="369.2" y="686.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.26%)</title><rect x="381.1" y="659.0" width="14.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="384.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.63%)</title><rect x="388.5" y="643.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="391.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 1.26%)</title><rect x="395.9" y="755.0" width="14.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 1.26%)</title><rect x="395.9" y="739.0" width="14.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="398.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/240690661.process (2 samples, 1.26%)</title><rect x="395.9" y="723.0" width="14.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="398.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.26%)</title><rect x="395.9" y="707.0" width="14.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="398.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.26%)</title><rect x="395.9" y="691.0" width="14.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="398.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.26%)</title><rect x="395.9" y="675.0" width="14.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="398.9" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 1.26%)</title><rect x="395.9" y="659.0" width="14.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="398.9" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.26%)</title><rect x="395.9" y="643.0" width="14.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="398.9" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.26%)</title><rect x="395.9" y="627.0" width="14.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.9" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.63%)</title><rect x="403.3" y="611.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.3" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.63%)</title><rect x="403.3" y="595.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="406.3" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.63%)</title><rect x="403.3" y="579.0" width="7.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="406.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.26%)</title><rect x="410.8" y="755.0" width="14.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="413.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.63%)</title><rect x="418.2" y="739.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="421.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.63%)</title><rect x="418.2" y="723.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="421.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/955928819.accept (1 samples, 0.63%)</title><rect x="418.2" y="707.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="421.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.63%)</title><rect x="418.2" y="691.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="421.2" y="702.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.63%)</title><rect x="418.2" y="675.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="421.2" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.63%)</title><rect x="418.2" y="659.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.2" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.63%)</title><rect x="425.6" y="835.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="428.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 1.89%)</title><rect x="433.0" y="835.0" width="22.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="436.0" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.26%)</title><rect x="440.4" y="819.0" width="14.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="443.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.63%)</title><rect x="447.9" y="803.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="450.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.26%)</title><rect x="455.3" y="835.0" width="14.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="458.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.63%)</title><rect x="462.7" y="819.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="465.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.63%)</title><rect x="462.7" y="803.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="465.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (17 samples, 10.69%)</title><rect x="470.1" y="835.0" width="126.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="473.1" y="846.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (17 samples, 10.69%)</title><rect x="470.1" y="819.0" width="126.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.1" y="830.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 8.81%)</title><rect x="470.1" y="803.0" width="103.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="473.1" y="814.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.63%)</title><rect x="477.5" y="787.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.63%)</title><rect x="477.5" y="771.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.63%)</title><rect x="477.5" y="755.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.63%)</title><rect x="477.5" y="739.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="480.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 7.55%)</title><rect x="485.0" y="787.0" width="89.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="488.0" y="798.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (12 samples, 7.55%)</title><rect x="485.0" y="771.0" width="89.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.0" y="782.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Park (11 samples, 6.92%)</title><rect x="485.0" y="755.0" width="81.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="488.0" y="766.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 1.89%)</title><rect x="485.0" y="739.0" width="22.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="488.0" y="750.0">P..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.63%)</title><rect x="499.8" y="723.0" width="7.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="502.8" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.63%)</title><rect x="507.2" y="739.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.2" y="750.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.63%)</title><rect x="514.7" y="739.0" width="7.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="517.7" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (6 samples, 3.77%)</title><rect x="522.1" y="739.0" width="44.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="525.1" y="750.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.63%)</title><rect x="566.6" y="755.0" width="7.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="569.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.89%)</title><rect x="574.0" y="803.0" width="22.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="577.0" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.89%)</title><rect x="574.0" y="787.0" width="22.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="577.0" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.89%)</title><rect x="574.0" y="771.0" width="22.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="577.0" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.89%)</title><rect x="574.0" y="755.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="577.0" y="766.0">j..</text>
</g>
<g>
<title>start_thread (80 samples, 50.31%)</title><rect x="596.3" y="883.0" width="593.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="599.3" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (80 samples, 50.31%)</title><rect x="596.3" y="867.0" width="593.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="599.3" y="878.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 8.81%)</title><rect x="596.3" y="851.0" width="103.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="599.3" y="862.0">GangWorker::..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.63%)</title><rect x="596.3" y="835.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="599.3" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.63%)</title><rect x="596.3" y="819.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="599.3" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.63%)</title><rect x="596.3" y="803.0" width="7.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="599.3" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 8.18%)</title><rect x="603.7" y="835.0" width="96.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="606.7" y="846.0">G1ParTask::..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 6.92%)</title><rect x="603.7" y="819.0" width="81.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="606.7" y="830.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.52%)</title><rect x="603.7" y="803.0" width="29.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="606.7" y="814.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.26%)</title><rect x="611.1" y="787.0" width="14.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="614.1" y="798.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.63%)</title><rect x="626.0" y="787.0" width="7.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="629.0" y="798.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (5 samples, 3.14%)</title><rect x="633.4" y="803.0" width="37.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="636.4" y="814.0">Gen..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.26%)</title><rect x="670.5" y="803.0" width="14.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="673.5" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.26%)</title><rect x="685.3" y="819.0" width="14.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="688.3" y="830.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.63%)</title><rect x="685.3" y="803.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="688.3" y="814.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.63%)</title><rect x="685.3" y="787.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="688.3" y="798.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.63%)</title><rect x="685.3" y="771.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="688.3" y="782.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.63%)</title><rect x="685.3" y="755.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="688.3" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.63%)</title><rect x="685.3" y="739.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="688.3" y="750.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.63%)</title><rect x="685.3" y="723.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="688.3" y="734.0"></text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.63%)</title><rect x="685.3" y="707.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="688.3" y="718.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.63%)</title><rect x="692.8" y="803.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="695.8" y="814.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (66 samples, 41.51%)</title><rect x="700.2" y="851.0" width="489.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="703.2" y="862.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (66 samples, 41.51%)</title><rect x="700.2" y="835.0" width="489.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="703.2" y="846.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (66 samples, 41.51%)</title><rect x="700.2" y="819.0" width="489.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="703.2" y="830.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (63 samples, 39.62%)</title><rect x="700.2" y="803.0" width="467.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="703.2" y="814.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (63 samples, 39.62%)</title><rect x="700.2" y="787.0" width="467.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="703.2" y="798.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (30 samples, 18.87%)</title><rect x="700.2" y="771.0" width="222.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="703.2" y="782.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.63%)</title><rect x="700.2" y="755.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="703.2" y="766.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.63%)</title><rect x="700.2" y="739.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="703.2" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.26%)</title><rect x="707.6" y="755.0" width="14.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="710.6" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.63%)</title><rect x="707.6" y="739.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="710.6" y="750.0"></text>
</g>
<g>
<title>storeImmNKlassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.63%)</title><rect x="715.0" y="739.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="718.0" y="750.0"></text>
</g>
<g>
<title>MacroAssembler::set_narrow_klass(Address, Klass*) (1 samples, 0.63%)</title><rect x="715.0" y="723.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="718.0" y="734.0"></text>
</g>
<g>
<title>Assembler::mov_narrow_oop(Address, int, RelocationHolder const&amp;) (1 samples, 0.63%)</title><rect x="715.0" y="707.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="718.0" y="718.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.63%)</title><rect x="715.0" y="691.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="718.0" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.26%)</title><rect x="722.5" y="755.0" width="14.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="725.5" y="766.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.63%)</title><rect x="722.5" y="739.0" width="7.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="725.5" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.63%)</title><rect x="729.9" y="739.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="732.9" y="750.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.63%)</title><rect x="729.9" y="723.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="732.9" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.89%)</title><rect x="737.3" y="755.0" width="22.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="740.3" y="766.0">P..</text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.63%)</title><rect x="737.3" y="739.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="740.3" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.26%)</title><rect x="744.7" y="739.0" width="14.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="747.7" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.26%)</title><rect x="744.7" y="723.0" width="14.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="747.7" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.63%)</title><rect x="752.1" y="707.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="755.1" y="718.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.63%)</title><rect x="752.1" y="691.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="755.1" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.63%)</title><rect x="752.1" y="675.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="755.1" y="686.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.63%)</title><rect x="752.1" y="659.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="755.1" y="670.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.63%)</title><rect x="752.1" y="643.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="755.1" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 13.84%)</title><rect x="759.6" y="755.0" width="163.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="762.6" y="766.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.63%)</title><rect x="759.6" y="739.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="762.6" y="750.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.26%)</title><rect x="767.0" y="739.0" width="14.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="770.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.63%)</title><rect x="781.8" y="739.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="784.8" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.63%)</title><rect x="781.8" y="723.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.89%)</title><rect x="789.2" y="739.0" width="22.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="792.2" y="750.0">P..</text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.26%)</title><rect x="796.7" y="723.0" width="14.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="799.7" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.63%)</title><rect x="804.1" y="707.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="807.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.89%)</title><rect x="811.5" y="739.0" width="22.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="814.5" y="750.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 3.77%)</title><rect x="833.8" y="739.0" width="44.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.8" y="750.0">Phas..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.63%)</title><rect x="841.2" y="723.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="844.2" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.26%)</title><rect x="848.6" y="723.0" width="14.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="851.6" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.63%)</title><rect x="863.5" y="723.0" width="7.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="866.5" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.63%)</title><rect x="870.9" y="723.0" width="7.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="873.9" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.63%)</title><rect x="878.3" y="739.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="881.3" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.26%)</title><rect x="885.7" y="739.0" width="14.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="888.7" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.26%)</title><rect x="885.7" y="723.0" width="14.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.7" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 1.26%)</title><rect x="885.7" y="707.0" width="14.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="888.7" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.63%)</title><rect x="893.1" y="691.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="896.1" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.26%)</title><rect x="900.6" y="739.0" width="14.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.6" y="750.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.63%)</title><rect x="908.0" y="723.0" width="7.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="911.0" y="734.0"></text>
</g>
<g>
<title>loadUBNode::oper_input_base() const (1 samples, 0.63%)</title><rect x="915.4" y="739.0" width="7.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="918.4" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 15.72%)</title><rect x="922.8" y="771.0" width="185.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="925.8" y="782.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.63%)</title><rect x="922.8" y="755.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="925.8" y="766.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.63%)</title><rect x="922.8" y="739.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="925.8" y="750.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.63%)</title><rect x="922.8" y="723.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="925.8" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.63%)</title><rect x="922.8" y="707.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="925.8" y="718.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.63%)</title><rect x="922.8" y="691.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="925.8" y="702.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.63%)</title><rect x="922.8" y="675.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="925.8" y="686.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 1.26%)</title><rect x="930.3" y="755.0" width="14.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="933.3" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.63%)</title><rect x="937.7" y="739.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="940.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.63%)</title><rect x="937.7" y="723.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="940.7" y="734.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.63%)</title><rect x="937.7" y="707.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.7" y="718.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.63%)</title><rect x="937.7" y="691.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="940.7" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="937.7" y="675.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.26%)</title><rect x="945.1" y="755.0" width="14.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.26%)</title><rect x="945.1" y="739.0" width="14.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="948.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.63%)</title><rect x="952.5" y="723.0" width="7.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="955.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (15 samples, 9.43%)</title><rect x="959.9" y="755.0" width="111.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="962.9" y="766.0">PhaseIdealLoo..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 1.26%)</title><rect x="959.9" y="739.0" width="14.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.9" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.63%)</title><rect x="959.9" y="723.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="962.9" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.63%)</title><rect x="959.9" y="707.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="962.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.63%)</title><rect x="959.9" y="691.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="962.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.63%)</title><rect x="959.9" y="675.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="962.9" y="686.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.63%)</title><rect x="959.9" y="659.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="962.9" y="670.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.63%)</title><rect x="959.9" y="643.0" width="7.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="962.9" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.63%)</title><rect x="967.4" y="723.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.63%)</title><rect x="967.4" y="707.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="970.4" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.63%)</title><rect x="967.4" y="691.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="970.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.89%)</title><rect x="974.8" y="739.0" width="22.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="977.8" y="750.0">P..</text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.63%)</title><rect x="989.6" y="723.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.63%)</title><rect x="997.0" y="739.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.0" y="750.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.63%)</title><rect x="997.0" y="723.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1000.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 5.03%)</title><rect x="1004.5" y="739.0" width="59.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1007.5" y="750.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 5.03%)</title><rect x="1004.5" y="723.0" width="59.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1007.5" y="734.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 5.03%)</title><rect x="1004.5" y="707.0" width="59.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1007.5" y="718.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (7 samples, 4.40%)</title><rect x="1011.9" y="691.0" width="51.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1014.9" y="702.0">Phase..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.63%)</title><rect x="1063.8" y="739.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.8" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.63%)</title><rect x="1063.8" y="723.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.8" y="734.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.63%)</title><rect x="1063.8" y="707.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.8" y="718.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.63%)</title><rect x="1063.8" y="691.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.8" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 3.14%)</title><rect x="1071.3" y="755.0" width="37.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.3" y="766.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 3.14%)</title><rect x="1071.3" y="739.0" width="37.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1074.3" y="750.0">Pha..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.63%)</title><rect x="1071.3" y="723.0" width="7.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1074.3" y="734.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.63%)</title><rect x="1071.3" y="707.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.3" y="718.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.63%)</title><rect x="1078.7" y="723.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.7" y="734.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.63%)</title><rect x="1078.7" y="707.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.7" y="718.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.63%)</title><rect x="1078.7" y="691.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.7" y="702.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.63%)</title><rect x="1078.7" y="675.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1081.7" y="686.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.63%)</title><rect x="1086.1" y="723.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1089.1" y="734.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.63%)</title><rect x="1086.1" y="707.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.1" y="718.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.63%)</title><rect x="1086.1" y="691.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.1" y="702.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.63%)</title><rect x="1086.1" y="675.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.1" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.63%)</title><rect x="1086.1" y="659.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.1" y="670.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.63%)</title><rect x="1086.1" y="643.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1089.1" y="654.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.63%)</title><rect x="1086.1" y="627.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.1" y="638.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.63%)</title><rect x="1093.5" y="723.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.5" y="734.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.63%)</title><rect x="1093.5" y="707.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.5" y="718.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.63%)</title><rect x="1100.9" y="723.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.63%)</title><rect x="1100.9" y="707.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.9" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="691.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.9" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="675.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.9" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="659.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.9" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="643.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.9" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="627.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.9" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="611.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.9" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="595.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.9" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="579.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.9" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="563.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.9" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="547.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.9" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="531.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.9" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="515.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.9" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="499.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.9" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="483.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.9" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="467.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.9" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="451.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.9" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="435.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.9" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="419.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.9" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="403.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.9" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="387.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.9" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="371.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.9" y="382.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.63%)</title><rect x="1100.9" y="355.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.9" y="366.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.63%)</title><rect x="1100.9" y="339.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.77%)</title><rect x="1108.4" y="771.0" width="44.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.4" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.77%)</title><rect x="1108.4" y="755.0" width="44.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.4" y="766.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.77%)</title><rect x="1108.4" y="739.0" width="44.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.4" y="750.0">Pars..</text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.63%)</title><rect x="1108.4" y="723.0" width="7.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.4" y="734.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.63%)</title><rect x="1108.4" y="707.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.4" y="718.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.63%)</title><rect x="1108.4" y="691.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.14%)</title><rect x="1115.8" y="723.0" width="37.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.8" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.14%)</title><rect x="1115.8" y="707.0" width="37.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.8" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.14%)</title><rect x="1115.8" y="691.0" width="37.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.8" y="702.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.63%)</title><rect x="1115.8" y="675.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.8" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.63%)</title><rect x="1115.8" y="659.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.8" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.63%)</title><rect x="1115.8" y="643.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.8" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.63%)</title><rect x="1115.8" y="627.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.8" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.63%)</title><rect x="1115.8" y="611.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.8" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.63%)</title><rect x="1115.8" y="595.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.89%)</title><rect x="1123.2" y="675.0" width="22.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.2" y="686.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.89%)</title><rect x="1123.2" y="659.0" width="22.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.2" y="670.0">P..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.63%)</title><rect x="1123.2" y="643.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.2" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.63%)</title><rect x="1123.2" y="627.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.2" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.63%)</title><rect x="1123.2" y="611.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.2" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.63%)</title><rect x="1123.2" y="595.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.2" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.63%)</title><rect x="1123.2" y="579.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.2" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.63%)</title><rect x="1123.2" y="563.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.2" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.63%)</title><rect x="1123.2" y="547.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.2" y="558.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.63%)</title><rect x="1123.2" y="531.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.63%)</title><rect x="1130.6" y="643.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.63%)</title><rect x="1130.6" y="627.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.63%)</title><rect x="1130.6" y="611.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1133.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.63%)</title><rect x="1130.6" y="595.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.63%)</title><rect x="1130.6" y="579.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.63%)</title><rect x="1130.6" y="563.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.63%)</title><rect x="1130.6" y="547.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.63%)</title><rect x="1130.6" y="531.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.63%)</title><rect x="1130.6" y="515.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.63%)</title><rect x="1130.6" y="499.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.63%)</title><rect x="1130.6" y="483.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.63%)</title><rect x="1130.6" y="467.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.63%)</title><rect x="1130.6" y="451.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.63%)</title><rect x="1130.6" y="435.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.63%)</title><rect x="1130.6" y="419.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.63%)</title><rect x="1130.6" y="403.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.6" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.63%)</title><rect x="1130.6" y="387.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.63%)</title><rect x="1130.6" y="371.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.63%)</title><rect x="1130.6" y="355.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.63%)</title><rect x="1130.6" y="339.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.63%)</title><rect x="1130.6" y="323.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.63%)</title><rect x="1130.6" y="307.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.63%)</title><rect x="1130.6" y="291.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.63%)</title><rect x="1130.6" y="275.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.63%)</title><rect x="1130.6" y="259.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.63%)</title><rect x="1130.6" y="243.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.63%)</title><rect x="1130.6" y="227.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.63%)</title><rect x="1130.6" y="211.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.63%)</title><rect x="1130.6" y="195.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.6" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.63%)</title><rect x="1130.6" y="179.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.6" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.63%)</title><rect x="1130.6" y="163.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.63%)</title><rect x="1130.6" y="147.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.63%)</title><rect x="1130.6" y="131.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.63%)</title><rect x="1130.6" y="115.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.63%)</title><rect x="1130.6" y="99.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.6" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.63%)</title><rect x="1130.6" y="83.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.6" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.63%)</title><rect x="1130.6" y="67.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.6" y="78.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.63%)</title><rect x="1130.6" y="51.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.6" y="62.0"></text>
</g>
<g>
<title>GraphKit::GraphKit(JVMState*) (1 samples, 0.63%)</title><rect x="1130.6" y="35.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.6" y="46.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.63%)</title><rect x="1138.1" y="643.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.1" y="654.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.63%)</title><rect x="1138.1" y="627.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.1" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.63%)</title><rect x="1145.5" y="675.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.5" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.63%)</title><rect x="1145.5" y="659.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.5" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.63%)</title><rect x="1145.5" y="643.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.5" y="654.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.63%)</title><rect x="1145.5" y="627.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.5" y="638.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.63%)</title><rect x="1145.5" y="611.0" width="7.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.5" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.63%)</title><rect x="1145.5" y="595.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.5" y="606.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.63%)</title><rect x="1145.5" y="579.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.5" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.63%)</title><rect x="1145.5" y="563.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.5" y="574.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.63%)</title><rect x="1152.9" y="771.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.9" y="782.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.63%)</title><rect x="1152.9" y="755.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.9" y="766.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.63%)</title><rect x="1160.3" y="771.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="782.0"></text>
</g>
<g>
<title>DictI::operator++() (1 samples, 0.63%)</title><rect x="1160.3" y="755.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.3" y="766.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.89%)</title><rect x="1167.7" y="803.0" width="22.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.7" y="814.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.89%)</title><rect x="1167.7" y="787.0" width="22.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.7" y="798.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.89%)</title><rect x="1167.7" y="771.0" width="22.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.7" y="782.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.89%)</title><rect x="1167.7" y="755.0" width="22.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.7" y="766.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.63%)</title><rect x="1167.7" y="739.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.7" y="750.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.63%)</title><rect x="1167.7" y="723.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.7" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 1.26%)</title><rect x="1175.2" y="739.0" width="14.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.63%)</title><rect x="1175.2" y="723.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.63%)</title><rect x="1175.2" y="707.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="718.0"></text>
</g>
<g>
<title>LIR_Assembler::ic_call(LIR_OpJavaCall*) (1 samples, 0.63%)</title><rect x="1175.2" y="691.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.2" y="702.0"></text>
</g>
<g>
<title>MacroAssembler::ic_call(unsigned char*) (1 samples, 0.63%)</title><rect x="1175.2" y="675.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.2" y="686.0"></text>
</g>
<g>
<title>Assembler::call_literal(unsigned char*, RelocationHolder const&amp;) (1 samples, 0.63%)</title><rect x="1175.2" y="659.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.2" y="670.0"></text>
</g>
<g>
<title>relocInfo::initialize(CodeSection*, Relocation*) (1 samples, 0.63%)</title><rect x="1175.2" y="643.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.2" y="654.0"></text>
</g>
<g>
<title>virtual_call_Relocation::pack_data_to(CodeSection*) (1 samples, 0.63%)</title><rect x="1175.2" y="627.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.2" y="638.0"></text>
</g>
<g>
<title>LIR_Op1::emit_code(LIR_Assembler*) (1 samples, 0.63%)</title><rect x="1182.6" y="723.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="734.0"></text>
</g>
</g>
</svg>
