<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (123 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (3 samples, 2.44%)</title><rect x="10.0" y="883.0" width="28.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="894.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (3 samples, 2.44%)</title><rect x="10.0" y="867.0" width="28.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="878.0">co..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 2.44%)</title><rect x="10.0" y="851.0" width="28.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 2.44%)</title><rect x="10.0" y="835.0" width="28.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="846.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 2.44%)</title><rect x="10.0" y="819.0" width="28.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="830.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 2.44%)</title><rect x="10.0" y="803.0" width="28.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="814.0">or..</text>
</g>
<g>
<title>java/util/ArrayDeque.&lt;init&gt; (1 samples, 0.81%)</title><rect x="10.0" y="787.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.63%)</title><rect x="19.6" y="787.0" width="19.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.81%)</title><rect x="19.6" y="771.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.81%)</title><rect x="19.6" y="755.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.81%)</title><rect x="19.6" y="739.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.81%)</title><rect x="19.6" y="723.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.81%)</title><rect x="19.6" y="707.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.81%)</title><rect x="19.6" y="691.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.81%)</title><rect x="19.6" y="675.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.81%)</title><rect x="19.6" y="659.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.81%)</title><rect x="19.6" y="643.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.81%)</title><rect x="19.6" y="627.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.81%)</title><rect x="29.2" y="771.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.81%)</title><rect x="38.8" y="883.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.81%)</title><rect x="38.8" y="867.0" width="9.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.81%)</title><rect x="38.8" y="851.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/523396890.run (1 samples, 0.81%)</title><rect x="38.8" y="835.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (1 samples, 0.81%)</title><rect x="38.8" y="819.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.81%)</title><rect x="38.8" y="803.0" width="9.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 0.81%)</title><rect x="38.8" y="787.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.81%)</title><rect x="38.8" y="771.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.8" y="782.0"></text>
</g>
<g>
<title>start_thread (119 samples, 96.75%)</title><rect x="48.4" y="883.0" width="1141.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="51.4" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (119 samples, 96.75%)</title><rect x="48.4" y="867.0" width="1141.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="51.4" y="878.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (119 samples, 96.75%)</title><rect x="48.4" y="851.0" width="1141.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="51.4" y="862.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (119 samples, 96.75%)</title><rect x="48.4" y="835.0" width="1141.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="51.4" y="846.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (119 samples, 96.75%)</title><rect x="48.4" y="819.0" width="1141.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="51.4" y="830.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (117 samples, 95.12%)</title><rect x="48.4" y="803.0" width="1122.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="51.4" y="814.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (117 samples, 95.12%)</title><rect x="48.4" y="787.0" width="1122.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="51.4" y="798.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (54 samples, 43.90%)</title><rect x="48.4" y="771.0" width="518.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="51.4" y="782.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.81%)</title><rect x="48.4" y="755.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="51.4" y="766.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.81%)</title><rect x="48.4" y="739.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="51.4" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 2.44%)</title><rect x="58.0" y="755.0" width="28.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="61.0" y="766.0">Co..</text>
</g>
<g>
<title>CodeBuffer::locator_address(int) const (1 samples, 0.81%)</title><rect x="67.6" y="739.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="70.6" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.81%)</title><rect x="77.2" y="739.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="80.2" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.81%)</title><rect x="77.2" y="723.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="80.2" y="734.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 0.81%)</title><rect x="86.7" y="755.0" width="9.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="89.7" y="766.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 4.07%)</title><rect x="96.3" y="755.0" width="48.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="99.3" y="766.0">Matc..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 4.07%)</title><rect x="96.3" y="739.0" width="48.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="99.3" y="750.0">Matc..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 1.63%)</title><rect x="96.3" y="723.0" width="19.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="99.3" y="734.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.81%)</title><rect x="115.5" y="723.0" width="9.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="118.5" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::c_calling_convention(BasicType const*, VMRegPair*, VMRegPair*, int) (1 samples, 0.81%)</title><rect x="115.5" y="707.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="118.5" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.63%)</title><rect x="125.1" y="723.0" width="19.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="128.1" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 1.63%)</title><rect x="125.1" y="707.0" width="19.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="128.1" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.81%)</title><rect x="125.1" y="691.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="128.1" y="702.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.81%)</title><rect x="134.7" y="691.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="137.7" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 2.44%)</title><rect x="144.3" y="755.0" width="28.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="147.3" y="766.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 2.44%)</title><rect x="144.3" y="739.0" width="28.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="147.3" y="750.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.81%)</title><rect x="153.9" y="723.0" width="9.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="156.9" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.81%)</title><rect x="163.5" y="723.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="166.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (41 samples, 33.33%)</title><rect x="173.1" y="755.0" width="393.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="176.1" y="766.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.81%)</title><rect x="173.1" y="739.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="176.1" y="750.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.81%)</title><rect x="182.7" y="739.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="185.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.63%)</title><rect x="192.3" y="739.0" width="19.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="195.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 4.07%)</title><rect x="211.5" y="739.0" width="47.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="214.5" y="750.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.63%)</title><rect x="221.1" y="723.0" width="19.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="224.1" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.63%)</title><rect x="240.2" y="723.0" width="19.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="243.2" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.81%)</title><rect x="249.8" y="707.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="252.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 4.07%)</title><rect x="259.4" y="739.0" width="48.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="262.4" y="750.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.81%)</title><rect x="297.8" y="723.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="300.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.81%)</title><rect x="297.8" y="707.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="300.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 6.50%)</title><rect x="307.4" y="739.0" width="76.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="310.4" y="750.0">PhaseCha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.63%)</title><rect x="317.0" y="723.0" width="19.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="320.0" y="734.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.81%)</title><rect x="336.2" y="723.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="339.2" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 2.44%)</title><rect x="345.8" y="723.0" width="28.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="348.8" y="734.0">Ph..</text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.81%)</title><rect x="374.6" y="723.0" width="9.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="377.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.81%)</title><rect x="384.1" y="739.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="387.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.81%)</title><rect x="393.7" y="739.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="396.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (5 samples, 4.07%)</title><rect x="403.3" y="739.0" width="48.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="406.3" y="750.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.63%)</title><rect x="451.3" y="739.0" width="19.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="454.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.81%)</title><rect x="460.9" y="723.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="463.9" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 2.44%)</title><rect x="470.5" y="739.0" width="28.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="473.5" y="750.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 2.44%)</title><rect x="470.5" y="723.0" width="28.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="473.5" y="734.0">In..</text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.81%)</title><rect x="499.3" y="739.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="502.3" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.81%)</title><rect x="499.3" y="723.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="502.3" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.81%)</title><rect x="508.9" y="739.0" width="9.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="511.9" y="750.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.81%)</title><rect x="508.9" y="723.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="511.9" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 4.07%)</title><rect x="518.5" y="739.0" width="47.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="521.5" y="750.0">Phas..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 2.44%)</title><rect x="537.6" y="723.0" width="28.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="540.6" y="734.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.81%)</title><rect x="556.8" y="707.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="559.8" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (54 samples, 43.90%)</title><rect x="566.4" y="771.0" width="518.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="569.4" y="782.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 1.63%)</title><rect x="566.4" y="755.0" width="19.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="569.4" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.81%)</title><rect x="576.0" y="739.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="579.0" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.81%)</title><rect x="576.0" y="723.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="579.0" y="734.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.81%)</title><rect x="576.0" y="707.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="579.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.81%)</title><rect x="576.0" y="691.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="579.0" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="675.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="579.0" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="659.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="579.0" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="643.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.0" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="627.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="579.0" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="611.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="579.0" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="595.0" width="9.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="579.0" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="579.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="579.0" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="563.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="579.0" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="547.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="579.0" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="531.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="579.0" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="515.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="579.0" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="499.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="579.0" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="483.0" width="9.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="579.0" y="494.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.81%)</title><rect x="576.0" y="467.0" width="9.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="579.0" y="478.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.81%)</title><rect x="576.0" y="451.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="579.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.63%)</title><rect x="585.6" y="755.0" width="19.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="588.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.63%)</title><rect x="585.6" y="739.0" width="19.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="588.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.81%)</title><rect x="595.2" y="723.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="598.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_init_values(JavaObjectNode*, PointsToNode*, PhaseTransform*) (1 samples, 0.81%)</title><rect x="595.2" y="707.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="598.2" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.81%)</title><rect x="595.2" y="691.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="598.2" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.81%)</title><rect x="595.2" y="675.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="598.2" y="686.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.81%)</title><rect x="595.2" y="659.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="598.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (43 samples, 34.96%)</title><rect x="604.8" y="755.0" width="412.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="607.8" y="766.0">PhaseIdealLoop::build_and_optimize(bool, bool)</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.81%)</title><rect x="604.8" y="739.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="607.8" y="750.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.81%)</title><rect x="604.8" y="723.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="607.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.81%)</title><rect x="614.4" y="739.0" width="9.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="617.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.81%)</title><rect x="614.4" y="723.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="617.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (37 samples, 30.08%)</title><rect x="624.0" y="739.0" width="354.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="627.0" y="750.0">PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (35 samples, 28.46%)</title><rect x="643.2" y="723.0" width="335.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="646.2" y="734.0">PhaseIdealLoop::build_loop_late_post(Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.81%)</title><rect x="643.2" y="707.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="646.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (34 samples, 27.64%)</title><rect x="652.8" y="707.0" width="326.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="655.8" y="718.0">PhaseIdealLoop::get_late_ctrl(Node*, Node*)</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.81%)</title><rect x="691.1" y="691.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="694.1" y="702.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.81%)</title><rect x="691.1" y="675.0" width="9.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="694.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.81%)</title><rect x="700.7" y="691.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="703.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (28 samples, 22.76%)</title><rect x="710.3" y="691.0" width="268.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="713.3" y="702.0">PhaseIdealLoop::is_dominator(Node*, ..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 2.44%)</title><rect x="978.9" y="739.0" width="28.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.9" y="750.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.81%)</title><rect x="978.9" y="723.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.81%)</title><rect x="978.9" y="707.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.63%)</title><rect x="988.5" y="723.0" width="19.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="991.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.81%)</title><rect x="998.1" y="707.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.81%)</title><rect x="998.1" y="691.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.1" y="702.0"></text>
</g>
<g>
<title>SuperWord::SuperWord(PhaseIdealLoop*) (1 samples, 0.81%)</title><rect x="1007.7" y="739.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1010.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 4.88%)</title><rect x="1017.3" y="755.0" width="57.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1020.3" y="766.0">PhaseI..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 4.88%)</title><rect x="1017.3" y="739.0" width="57.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1020.3" y="750.0">PhaseI..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.81%)</title><rect x="1017.3" y="723.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.3" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.81%)</title><rect x="1017.3" y="707.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1020.3" y="718.0"></text>
</g>
<g>
<title>ConPNode::Opcode() const (1 samples, 0.81%)</title><rect x="1017.3" y="691.0" width="9.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1020.3" y="702.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.81%)</title><rect x="1026.9" y="723.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1029.9" y="734.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.81%)</title><rect x="1026.9" y="707.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.9" y="718.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.81%)</title><rect x="1026.9" y="691.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1029.9" y="702.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.81%)</title><rect x="1026.9" y="675.0" width="9.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.9" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 1.63%)</title><rect x="1036.5" y="723.0" width="19.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1039.5" y="734.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.81%)</title><rect x="1046.1" y="707.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.1" y="718.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.81%)</title><rect x="1055.7" y="723.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.7" y="734.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.81%)</title><rect x="1055.7" y="707.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1058.7" y="718.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.81%)</title><rect x="1065.3" y="723.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1068.3" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.81%)</title><rect x="1074.9" y="755.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.9" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_unlock_node(UnlockNode*) (1 samples, 0.81%)</title><rect x="1074.9" y="739.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1077.9" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.81%)</title><rect x="1074.9" y="723.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.9" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.81%)</title><rect x="1074.9" y="707.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1077.9" y="718.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.81%)</title><rect x="1074.9" y="691.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 6.50%)</title><rect x="1084.5" y="771.0" width="76.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.5" y="782.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 6.50%)</title><rect x="1084.5" y="755.0" width="76.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.5" y="766.0">Parse::P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 6.50%)</title><rect x="1084.5" y="739.0" width="76.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.5" y="750.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 6.50%)</title><rect x="1084.5" y="723.0" width="76.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.5" y="734.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 6.50%)</title><rect x="1084.5" y="707.0" width="76.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.5" y="718.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 6.50%)</title><rect x="1084.5" y="691.0" width="76.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.5" y="702.0">Parse::d..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 6.50%)</title><rect x="1084.5" y="675.0" width="76.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.5" y="686.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 6.50%)</title><rect x="1084.5" y="659.0" width="76.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.5" y="670.0">Parse::P..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.81%)</title><rect x="1084.5" y="643.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1087.5" y="654.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.81%)</title><rect x="1084.5" y="627.0" width="9.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.5" y="638.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.81%)</title><rect x="1084.5" y="611.0" width="9.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.5" y="622.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.81%)</title><rect x="1084.5" y="595.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.5" y="606.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.81%)</title><rect x="1084.5" y="579.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.5" y="590.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.81%)</title><rect x="1084.5" y="563.0" width="9.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.5" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.81%)</title><rect x="1084.5" y="547.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.5" y="558.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.81%)</title><rect x="1084.5" y="531.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.5" y="542.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.81%)</title><rect x="1084.5" y="515.0" width="9.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1087.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 5.69%)</title><rect x="1094.1" y="643.0" width="67.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.1" y="654.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 5.69%)</title><rect x="1094.1" y="627.0" width="67.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.1" y="638.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 5.69%)</title><rect x="1094.1" y="611.0" width="67.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.1" y="622.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 5.69%)</title><rect x="1094.1" y="595.0" width="67.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.1" y="606.0">Parse::..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 4.07%)</title><rect x="1094.1" y="579.0" width="47.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.1" y="590.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 4.07%)</title><rect x="1094.1" y="563.0" width="47.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.1" y="574.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 4.07%)</title><rect x="1094.1" y="547.0" width="47.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.1" y="558.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 4.07%)</title><rect x="1094.1" y="531.0" width="47.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.1" y="542.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 4.07%)</title><rect x="1094.1" y="515.0" width="47.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.1" y="526.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 4.07%)</title><rect x="1094.1" y="499.0" width="47.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.1" y="510.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 3.25%)</title><rect x="1094.1" y="483.0" width="38.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.1" y="494.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 3.25%)</title><rect x="1094.1" y="467.0" width="38.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.1" y="478.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 3.25%)</title><rect x="1094.1" y="451.0" width="38.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.1" y="462.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 3.25%)</title><rect x="1094.1" y="435.0" width="38.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.1" y="446.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 3.25%)</title><rect x="1094.1" y="419.0" width="38.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.1" y="430.0">Par..</text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.81%)</title><rect x="1094.1" y="403.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.1" y="414.0"></text>
</g>
<g>
<title>GraphKit::load_array_length(Node*) (1 samples, 0.81%)</title><rect x="1094.1" y="387.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.1" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.81%)</title><rect x="1094.1" y="371.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.1" y="382.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.81%)</title><rect x="1094.1" y="355.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.1" y="366.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.81%)</title><rect x="1094.1" y="339.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.1" y="350.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.81%)</title><rect x="1094.1" y="323.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.44%)</title><rect x="1103.7" y="403.0" width="28.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.7" y="414.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.44%)</title><rect x="1103.7" y="387.0" width="28.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.7" y="398.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.44%)</title><rect x="1103.7" y="371.0" width="28.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.7" y="382.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.44%)</title><rect x="1103.7" y="355.0" width="28.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.7" y="366.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.44%)</title><rect x="1103.7" y="339.0" width="28.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.7" y="350.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.44%)</title><rect x="1103.7" y="323.0" width="28.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.7" y="334.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.44%)</title><rect x="1103.7" y="307.0" width="28.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.7" y="318.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.44%)</title><rect x="1103.7" y="291.0" width="28.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.7" y="302.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.44%)</title><rect x="1103.7" y="275.0" width="28.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.7" y="286.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.44%)</title><rect x="1103.7" y="259.0" width="28.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.7" y="270.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.44%)</title><rect x="1103.7" y="243.0" width="28.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.7" y="254.0">Pa..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.81%)</title><rect x="1103.7" y="227.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.7" y="238.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.81%)</title><rect x="1103.7" y="211.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.63%)</title><rect x="1113.3" y="227.0" width="19.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.81%)</title><rect x="1113.3" y="211.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.3" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.81%)</title><rect x="1113.3" y="195.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.3" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.81%)</title><rect x="1113.3" y="179.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.81%)</title><rect x="1113.3" y="163.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.81%)</title><rect x="1113.3" y="147.0" width="9.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.81%)</title><rect x="1113.3" y="131.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.81%)</title><rect x="1113.3" y="115.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.3" y="126.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.81%)</title><rect x="1113.3" y="99.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.3" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.81%)</title><rect x="1113.3" y="83.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.3" y="94.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.81%)</title><rect x="1113.3" y="67.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.3" y="78.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.81%)</title><rect x="1113.3" y="51.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.3" y="62.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.81%)</title><rect x="1113.3" y="35.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.81%)</title><rect x="1122.8" y="211.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.81%)</title><rect x="1122.8" y="195.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.8" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.81%)</title><rect x="1132.4" y="483.0" width="9.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.4" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.81%)</title><rect x="1132.4" y="467.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.81%)</title><rect x="1132.4" y="451.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.81%)</title><rect x="1132.4" y="435.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.81%)</title><rect x="1132.4" y="419.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.81%)</title><rect x="1132.4" y="403.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.81%)</title><rect x="1132.4" y="387.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.81%)</title><rect x="1132.4" y="371.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.4" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.81%)</title><rect x="1132.4" y="355.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.4" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.81%)</title><rect x="1132.4" y="339.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.4" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.81%)</title><rect x="1132.4" y="323.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.4" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.81%)</title><rect x="1132.4" y="307.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.4" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.81%)</title><rect x="1132.4" y="291.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.4" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.81%)</title><rect x="1132.4" y="275.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.4" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.81%)</title><rect x="1132.4" y="259.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.4" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.81%)</title><rect x="1132.4" y="243.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.4" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.81%)</title><rect x="1132.4" y="227.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.4" y="238.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.81%)</title><rect x="1132.4" y="211.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.4" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.81%)</title><rect x="1132.4" y="195.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.4" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.81%)</title><rect x="1132.4" y="179.0" width="9.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.4" y="190.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.81%)</title><rect x="1132.4" y="163.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.4" y="174.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.81%)</title><rect x="1132.4" y="147.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.4" y="158.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.81%)</title><rect x="1132.4" y="131.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.4" y="142.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.81%)</title><rect x="1132.4" y="115.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.4" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.81%)</title><rect x="1132.4" y="99.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.4" y="110.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.81%)</title><rect x="1132.4" y="83.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.4" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.63%)</title><rect x="1142.0" y="579.0" width="19.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.63%)</title><rect x="1142.0" y="563.0" width="19.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.63%)</title><rect x="1142.0" y="547.0" width="19.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.63%)</title><rect x="1142.0" y="531.0" width="19.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.63%)</title><rect x="1142.0" y="515.0" width="19.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.63%)</title><rect x="1142.0" y="499.0" width="19.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.63%)</title><rect x="1142.0" y="483.0" width="19.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.63%)</title><rect x="1142.0" y="467.0" width="19.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.63%)</title><rect x="1142.0" y="451.0" width="19.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.63%)</title><rect x="1142.0" y="435.0" width="19.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.63%)</title><rect x="1142.0" y="419.0" width="19.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.81%)</title><rect x="1142.0" y="403.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.0" y="414.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.81%)</title><rect x="1142.0" y="387.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.0" y="398.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.81%)</title><rect x="1142.0" y="371.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.81%)</title><rect x="1151.6" y="403.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.81%)</title><rect x="1151.6" y="387.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.81%)</title><rect x="1151.6" y="371.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.81%)</title><rect x="1151.6" y="355.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.81%)</title><rect x="1151.6" y="339.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.81%)</title><rect x="1151.6" y="323.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.81%)</title><rect x="1151.6" y="307.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.81%)</title><rect x="1151.6" y="291.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.81%)</title><rect x="1151.6" y="275.0" width="9.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.81%)</title><rect x="1151.6" y="259.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.81%)</title><rect x="1151.6" y="243.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.81%)</title><rect x="1151.6" y="227.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.81%)</title><rect x="1151.6" y="211.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.81%)</title><rect x="1151.6" y="195.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.6" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.81%)</title><rect x="1151.6" y="179.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.6" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.81%)</title><rect x="1151.6" y="163.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.81%)</title><rect x="1151.6" y="147.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.81%)</title><rect x="1151.6" y="131.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.81%)</title><rect x="1151.6" y="115.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.81%)</title><rect x="1151.6" y="99.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.6" y="110.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.81%)</title><rect x="1151.6" y="83.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.6" y="94.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.81%)</title><rect x="1151.6" y="67.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.6" y="78.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.81%)</title><rect x="1151.6" y="51.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.6" y="62.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.81%)</title><rect x="1161.2" y="771.0" width="9.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="782.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.81%)</title><rect x="1161.2" y="755.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.2" y="766.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.63%)</title><rect x="1170.8" y="803.0" width="19.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.8" y="814.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.63%)</title><rect x="1170.8" y="787.0" width="19.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.8" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.63%)</title><rect x="1170.8" y="771.0" width="19.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.8" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.63%)</title><rect x="1170.8" y="755.0" width="19.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.8" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 1.63%)</title><rect x="1170.8" y="739.0" width="19.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.8" y="750.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 1.63%)</title><rect x="1170.8" y="723.0" width="19.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.8" y="734.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.81%)</title><rect x="1170.8" y="707.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.8" y="718.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.81%)</title><rect x="1170.8" y="691.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.8" y="702.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.81%)</title><rect x="1180.4" y="707.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="718.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.81%)</title><rect x="1180.4" y="691.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="702.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.81%)</title><rect x="1180.4" y="675.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="686.0"></text>
</g>
</g>
</svg>
