<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="885"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="885"> </text>
<g id="frames">
<g>
<title>all (200 samples, 100.00%)</title><rect x="10.0" y="851.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="862.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 12.50%)</title><rect x="10.0" y="835.0" width="147.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="846.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (25 samples, 12.50%)</title><rect x="10.0" y="819.0" width="147.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="830.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 1.00%)</title><rect x="10.0" y="803.0" width="11.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.50%)</title><rect x="15.9" y="787.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (16 samples, 8.00%)</title><rect x="21.8" y="803.0" width="94.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.8" y="814.0">java/lang/I..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1503268746.accept (16 samples, 8.00%)</title><rect x="21.8" y="787.0" width="94.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.8" y="798.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (16 samples, 8.00%)</title><rect x="21.8" y="771.0" width="94.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.8" y="782.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 8.00%)</title><rect x="21.8" y="755.0" width="94.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.8" y="766.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 8.00%)</title><rect x="21.8" y="739.0" width="94.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.8" y="750.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (16 samples, 8.00%)</title><rect x="21.8" y="723.0" width="94.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.8" y="734.0">com/linecor..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (16 samples, 8.00%)</title><rect x="21.8" y="707.0" width="94.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.8" y="718.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 8.00%)</title><rect x="21.8" y="691.0" width="94.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.8" y="702.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (16 samples, 8.00%)</title><rect x="21.8" y="675.0" width="94.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.8" y="686.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 4.50%)</title><rect x="21.8" y="659.0" width="53.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.8" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.00%)</title><rect x="21.8" y="643.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.00%)</title><rect x="21.8" y="627.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.50%)</title><rect x="33.6" y="643.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="36.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.50%)</title><rect x="33.6" y="627.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 3.00%)</title><rect x="39.5" y="643.0" width="35.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.5" y="654.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 3.00%)</title><rect x="39.5" y="627.0" width="35.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.5" y="638.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 3.00%)</title><rect x="39.5" y="611.0" width="35.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.5" y="622.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 3.00%)</title><rect x="39.5" y="595.0" width="35.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.5" y="606.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 2.50%)</title><rect x="45.4" y="579.0" width="29.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.4" y="590.0">su..</text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 2.00%)</title><rect x="45.4" y="563.0" width="23.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="48.4" y="574.0">U..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.00%)</title><rect x="45.4" y="547.0" width="23.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="48.4" y="558.0">_..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.50%)</title><rect x="69.0" y="563.0" width="5.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="72.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 3.00%)</title><rect x="74.9" y="659.0" width="35.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="77.9" y="670.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 3.00%)</title><rect x="74.9" y="643.0" width="35.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.9" y="654.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 3.00%)</title><rect x="74.9" y="627.0" width="35.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.9" y="638.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.50%)</title><rect x="110.3" y="659.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="113.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.50%)</title><rect x="110.3" y="643.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="113.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.50%)</title><rect x="110.3" y="627.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="113.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.50%)</title><rect x="116.2" y="803.0" width="41.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.2" y="814.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.50%)</title><rect x="116.2" y="787.0" width="41.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="119.2" y="798.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 1.50%)</title><rect x="116.2" y="771.0" width="17.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.50%)</title><rect x="116.2" y="755.0" width="17.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="119.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.00%)</title><rect x="116.2" y="739.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.00%)</title><rect x="116.2" y="723.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.00%)</title><rect x="116.2" y="707.0" width="11.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.2" y="718.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.50%)</title><rect x="116.2" y="691.0" width="5.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="119.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.50%)</title><rect x="122.1" y="691.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="125.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.50%)</title><rect x="122.1" y="675.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="125.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.50%)</title><rect x="122.1" y="659.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="125.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.50%)</title><rect x="122.1" y="643.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.50%)</title><rect x="122.1" y="627.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="125.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.50%)</title><rect x="122.1" y="611.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="125.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.50%)</title><rect x="122.1" y="595.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="125.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.50%)</title><rect x="122.1" y="579.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="125.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.50%)</title><rect x="128.0" y="739.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="131.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.50%)</title><rect x="128.0" y="723.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.50%)</title><rect x="128.0" y="707.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="131.0" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.50%)</title><rect x="128.0" y="691.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.50%)</title><rect x="128.0" y="675.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="131.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.50%)</title><rect x="128.0" y="659.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="131.0" y="670.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.50%)</title><rect x="128.0" y="643.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="131.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.00%)</title><rect x="133.9" y="771.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.00%)</title><rect x="133.9" y="755.0" width="11.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="136.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.00%)</title><rect x="133.9" y="739.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 1.00%)</title><rect x="133.9" y="723.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 1.00%)</title><rect x="133.9" y="707.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (2 samples, 1.00%)</title><rect x="133.9" y="691.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (2 samples, 1.00%)</title><rect x="133.9" y="675.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.9" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/743254051.linkToTargetMethod (1 samples, 0.50%)</title><rect x="133.9" y="659.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="136.9" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.50%)</title><rect x="133.9" y="643.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$68/1385740894.get$Lambda (1 samples, 0.50%)</title><rect x="133.9" y="627.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="136.9" y="638.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.50%)</title><rect x="139.8" y="659.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.50%)</title><rect x="139.8" y="643.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="142.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerInterceptors.onConsume (1 samples, 0.50%)</title><rect x="145.7" y="771.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.7" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.50%)</title><rect x="145.7" y="755.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="148.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.50%)</title><rect x="145.7" y="739.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="148.7" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.50%)</title><rect x="145.7" y="723.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="148.7" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.50%)</title><rect x="145.7" y="707.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="148.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.50%)</title><rect x="145.7" y="691.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="148.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.50%)</title><rect x="151.6" y="771.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="154.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.50%)</title><rect x="151.6" y="755.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="154.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (60 samples, 30.00%)</title><rect x="157.5" y="835.0" width="354.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.5" y="846.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (60 samples, 30.00%)</title><rect x="157.5" y="819.0" width="354.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.5" y="830.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (60 samples, 30.00%)</title><rect x="157.5" y="803.0" width="354.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.5" y="814.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1978585736.run (40 samples, 20.00%)</title><rect x="169.3" y="787.0" width="236.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.3" y="798.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (40 samples, 20.00%)</title><rect x="169.3" y="771.0" width="236.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.3" y="782.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (40 samples, 20.00%)</title><rect x="169.3" y="755.0" width="236.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.3" y="766.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (39 samples, 19.50%)</title><rect x="169.3" y="739.0" width="230.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.3" y="750.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (9 samples, 4.50%)</title><rect x="181.1" y="723.0" width="53.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.1" y="734.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (9 samples, 4.50%)</title><rect x="181.1" y="707.0" width="53.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.1" y="718.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (9 samples, 4.50%)</title><rect x="181.1" y="691.0" width="53.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="184.1" y="702.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (9 samples, 4.50%)</title><rect x="181.1" y="675.0" width="53.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.1" y="686.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (9 samples, 4.50%)</title><rect x="181.1" y="659.0" width="53.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.1" y="670.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (9 samples, 4.50%)</title><rect x="181.1" y="643.0" width="53.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.1" y="654.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.50%)</title><rect x="181.1" y="627.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.50%)</title><rect x="181.1" y="611.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.50%)</title><rect x="181.1" y="595.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.50%)</title><rect x="181.1" y="579.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.50%)</title><rect x="181.1" y="563.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.1" y="574.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.50%)</title><rect x="181.1" y="547.0" width="5.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="184.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 4.00%)</title><rect x="187.0" y="627.0" width="47.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.0" y="638.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.50%)</title><rect x="187.0" y="611.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.50%)</title><rect x="187.0" y="595.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.50%)</title><rect x="187.0" y="579.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.50%)</title><rect x="187.0" y="563.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 3.50%)</title><rect x="192.9" y="611.0" width="41.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="195.9" y="622.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.50%)</title><rect x="192.9" y="595.0" width="17.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 1.00%)</title><rect x="192.9" y="579.0" width="11.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 1.00%)</title><rect x="192.9" y="563.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 1.00%)</title><rect x="192.9" y="547.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 1.00%)</title><rect x="192.9" y="531.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 1.00%)</title><rect x="192.9" y="515.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.50%)</title><rect x="204.7" y="579.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.50%)</title><rect x="204.7" y="563.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.50%)</title><rect x="204.7" y="547.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.50%)</title><rect x="204.7" y="531.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.50%)</title><rect x="204.7" y="515.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.00%)</title><rect x="210.6" y="595.0" width="23.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.6" y="606.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.00%)</title><rect x="210.6" y="579.0" width="23.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.6" y="590.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.00%)</title><rect x="210.6" y="563.0" width="23.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.6" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.00%)</title><rect x="210.6" y="547.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.50%)</title><rect x="210.6" y="531.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.50%)</title><rect x="210.6" y="515.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="213.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.50%)</title><rect x="210.6" y="499.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.50%)</title><rect x="210.6" y="483.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.50%)</title><rect x="210.6" y="467.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.50%)</title><rect x="210.6" y="451.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.50%)</title><rect x="210.6" y="435.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="213.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.50%)</title><rect x="216.5" y="531.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.50%)</title><rect x="222.4" y="547.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.50%)</title><rect x="228.3" y="547.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.50%)</title><rect x="228.3" y="531.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.50%)</title><rect x="228.3" y="515.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.3" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (24 samples, 12.00%)</title><rect x="234.2" y="723.0" width="141.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.2" y="734.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.00%)</title><rect x="234.2" y="707.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.2" y="718.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.00%)</title><rect x="234.2" y="691.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.2" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.00%)</title><rect x="234.2" y="675.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.2" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.00%)</title><rect x="234.2" y="659.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (13 samples, 6.50%)</title><rect x="246.0" y="707.0" width="76.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.0" y="718.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (13 samples, 6.50%)</title><rect x="246.0" y="691.0" width="76.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="702.0">com/line..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.50%)</title><rect x="251.9" y="675.0" width="5.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="254.9" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.50%)</title><rect x="251.9" y="659.0" width="5.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="254.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.00%)</title><rect x="257.8" y="675.0" width="23.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.8" y="686.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.50%)</title><rect x="263.7" y="659.0" width="17.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.7" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.00%)</title><rect x="263.7" y="643.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.7" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.50%)</title><rect x="275.5" y="643.0" width="5.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="278.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.topicPartition (1 samples, 0.50%)</title><rect x="281.4" y="675.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="284.4" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.00%)</title><rect x="287.3" y="675.0" width="35.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.3" y="686.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.00%)</title><rect x="287.3" y="659.0" width="35.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.3" y="670.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.00%)</title><rect x="287.3" y="643.0" width="11.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.00%)</title><rect x="287.3" y="627.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.3" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.00%)</title><rect x="287.3" y="611.0" width="11.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.00%)</title><rect x="287.3" y="595.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.3" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.00%)</title><rect x="299.1" y="643.0" width="23.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.1" y="654.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.50%)</title><rect x="305.0" y="627.0" width="17.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.00%)</title><rect x="310.9" y="611.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 2.50%)</title><rect x="322.7" y="707.0" width="29.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.7" y="718.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 2.50%)</title><rect x="322.7" y="691.0" width="29.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.7" y="702.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/969553632.process (4 samples, 2.00%)</title><rect x="322.7" y="675.0" width="23.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.7" y="686.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (4 samples, 2.00%)</title><rect x="322.7" y="659.0" width="23.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.7" y="670.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (4 samples, 2.00%)</title><rect x="322.7" y="643.0" width="23.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.7" y="654.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.50%)</title><rect x="322.7" y="627.0" width="17.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 1.00%)</title><rect x="322.7" y="611.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 1.00%)</title><rect x="322.7" y="595.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="325.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 1.00%)</title><rect x="322.7" y="579.0" width="11.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.50%)</title><rect x="334.5" y="611.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.5" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.50%)</title><rect x="334.5" y="595.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.50%)</title><rect x="334.5" y="579.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="337.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.50%)</title><rect x="334.5" y="563.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="337.5" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.50%)</title><rect x="340.4" y="627.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="343.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.50%)</title><rect x="340.4" y="611.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.4" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.50%)</title><rect x="340.4" y="595.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="343.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.50%)</title><rect x="340.4" y="579.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="343.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.50%)</title><rect x="340.4" y="563.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="343.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.50%)</title><rect x="340.4" y="547.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="343.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.50%)</title><rect x="340.4" y="531.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="343.4" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.50%)</title><rect x="346.3" y="675.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="349.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.00%)</title><rect x="352.2" y="707.0" width="23.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="355.2" y="718.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.50%)</title><rect x="352.2" y="691.0" width="5.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="355.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.50%)</title><rect x="358.1" y="691.0" width="17.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.50%)</title><rect x="358.1" y="675.0" width="17.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="361.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1522853763.accept (3 samples, 1.50%)</title><rect x="358.1" y="659.0" width="17.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="361.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (3 samples, 1.50%)</title><rect x="358.1" y="643.0" width="17.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="361.1" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 1.50%)</title><rect x="358.1" y="627.0" width="17.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.1" y="638.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 1.50%)</title><rect x="358.1" y="611.0" width="17.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.1" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.50%)</title><rect x="358.1" y="595.0" width="17.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="361.1" y="606.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.50%)</title><rect x="358.1" y="579.0" width="17.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="361.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.00%)</title><rect x="375.8" y="723.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.50%)</title><rect x="381.7" y="707.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="384.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.50%)</title><rect x="381.7" y="691.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="384.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1593538563.accept (1 samples, 0.50%)</title><rect x="381.7" y="675.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="384.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.50%)</title><rect x="381.7" y="659.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="384.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1420891706.complete (1 samples, 0.50%)</title><rect x="381.7" y="643.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="384.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.50%)</title><rect x="381.7" y="627.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.50%)</title><rect x="381.7" y="611.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="384.7" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.50%)</title><rect x="381.7" y="595.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.7" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.50%)</title><rect x="381.7" y="579.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.7" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.50%)</title><rect x="381.7" y="563.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="384.7" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.50%)</title><rect x="381.7" y="547.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="384.7" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.00%)</title><rect x="387.6" y="723.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="390.6" y="734.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.00%)</title><rect x="387.6" y="707.0" width="11.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="390.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.50%)</title><rect x="399.4" y="739.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="402.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.50%)</title><rect x="399.4" y="723.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.4" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.50%)</title><rect x="399.4" y="707.0" width="5.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="402.4" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.50%)</title><rect x="399.4" y="691.0" width="5.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="402.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.50%)</title><rect x="405.3" y="787.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="408.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.50%)</title><rect x="405.3" y="771.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="408.3" y="782.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.50%)</title><rect x="405.3" y="755.0" width="5.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="408.3" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.273] (1 samples, 0.50%)</title><rect x="405.3" y="739.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="408.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.50%)</title><rect x="411.2" y="787.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="414.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 8.00%)</title><rect x="417.1" y="787.0" width="94.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.1" y="798.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 8.00%)</title><rect x="417.1" y="771.0" width="94.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.1" y="782.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 5.50%)</title><rect x="434.8" y="755.0" width="64.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="437.8" y="766.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 5.50%)</title><rect x="434.8" y="739.0" width="64.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="437.8" y="750.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 5.50%)</title><rect x="434.8" y="723.0" width="64.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="437.8" y="734.0">sun/mis..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.50%)</title><rect x="434.8" y="707.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="437.8" y="718.0"></text>
</g>
<g>
<title>Unsafe_Park (10 samples, 5.00%)</title><rect x="440.7" y="707.0" width="59.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="443.7" y="718.0">Unsafe..</text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 1.50%)</title><rect x="458.4" y="691.0" width="17.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="461.4" y="702.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 1.00%)</title><rect x="458.4" y="675.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="461.4" y="686.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 1.00%)</title><rect x="458.4" y="659.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="461.4" y="670.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.50%)</title><rect x="470.2" y="675.0" width="5.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="473.2" y="686.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.50%)</title><rect x="476.1" y="691.0" width="5.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="479.1" y="702.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.50%)</title><rect x="482.0" y="691.0" width="5.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="485.0" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.50%)</title><rect x="487.9" y="691.0" width="5.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="490.9" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.50%)</title><rect x="493.8" y="691.0" width="5.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="496.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.00%)</title><rect x="499.7" y="755.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="502.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.00%)</title><rect x="499.7" y="739.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.00%)</title><rect x="499.7" y="723.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="502.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.00%)</title><rect x="499.7" y="707.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="502.7" y="718.0"></text>
</g>
<g>
<title>start_thread (115 samples, 57.50%)</title><rect x="511.5" y="835.0" width="678.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="514.5" y="846.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (115 samples, 57.50%)</title><rect x="511.5" y="819.0" width="678.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="514.5" y="830.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 5.00%)</title><rect x="511.5" y="803.0" width="59.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="514.5" y="814.0">GangWo..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.50%)</title><rect x="511.5" y="787.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="514.5" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.50%)</title><rect x="511.5" y="771.0" width="5.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="514.5" y="782.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.50%)</title><rect x="517.4" y="787.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="520.4" y="798.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.50%)</title><rect x="517.4" y="771.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="520.4" y="782.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.50%)</title><rect x="517.4" y="755.0" width="5.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="520.4" y="766.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 4.00%)</title><rect x="523.3" y="787.0" width="47.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="526.3" y="798.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 3.00%)</title><rect x="523.3" y="771.0" width="35.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="526.3" y="782.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.50%)</title><rect x="523.3" y="755.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="526.3" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.50%)</title><rect x="529.2" y="755.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="532.2" y="766.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.00%)</title><rect x="535.1" y="755.0" width="11.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="538.1" y="766.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.00%)</title><rect x="546.9" y="755.0" width="11.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="549.9" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.50%)</title><rect x="558.7" y="771.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="561.7" y="782.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.50%)</title><rect x="558.7" y="755.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="561.7" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.50%)</title><rect x="564.6" y="771.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="567.6" y="782.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.50%)</title><rect x="564.6" y="755.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="567.6" y="766.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.50%)</title><rect x="564.6" y="739.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="567.6" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.50%)</title><rect x="564.6" y="723.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="567.6" y="734.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.50%)</title><rect x="564.6" y="707.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="567.6" y="718.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.50%)</title><rect x="564.6" y="691.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="567.6" y="702.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.50%)</title><rect x="564.6" y="675.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="567.6" y="686.0"></text>
</g>
<g>
<title>nmethod::test_set_oops_do_mark() (1 samples, 0.50%)</title><rect x="564.6" y="659.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="567.6" y="670.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (105 samples, 52.50%)</title><rect x="570.5" y="803.0" width="619.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="573.5" y="814.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (104 samples, 52.00%)</title><rect x="570.5" y="787.0" width="613.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="573.5" y="798.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (104 samples, 52.00%)</title><rect x="570.5" y="771.0" width="613.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="573.5" y="782.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (101 samples, 50.50%)</title><rect x="570.5" y="755.0" width="595.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="573.5" y="766.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (101 samples, 50.50%)</title><rect x="570.5" y="739.0" width="595.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="573.5" y="750.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.50%)</title><rect x="570.5" y="723.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="573.5" y="734.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.50%)</title><rect x="570.5" y="707.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="573.5" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.50%)</title><rect x="570.5" y="691.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="573.5" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.50%)</title><rect x="570.5" y="675.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="573.5" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.50%)</title><rect x="570.5" y="659.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="573.5" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="570.5" y="643.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="573.5" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.50%)</title><rect x="570.5" y="627.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="573.5" y="638.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 20.50%)</title><rect x="576.4" y="723.0" width="241.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="579.4" y="734.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.50%)</title><rect x="576.4" y="707.0" width="17.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="579.4" y="718.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 1.00%)</title><rect x="576.4" y="691.0" width="11.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="579.4" y="702.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 1.00%)</title><rect x="576.4" y="675.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="579.4" y="686.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 1.00%)</title><rect x="576.4" y="659.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="579.4" y="670.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.50%)</title><rect x="576.4" y="643.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="579.4" y="654.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.50%)</title><rect x="576.4" y="627.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="579.4" y="638.0"></text>
</g>
<g>
<title>cmpFastUnlockNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.50%)</title><rect x="582.3" y="643.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="585.3" y="654.0"></text>
</g>
<g>
<title>Assembler::testl(RegisterImpl*, int) (1 samples, 0.50%)</title><rect x="582.3" y="627.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="585.3" y="638.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.50%)</title><rect x="588.2" y="691.0" width="5.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="591.2" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.50%)</title><rect x="594.1" y="707.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="597.1" y="718.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.50%)</title><rect x="594.1" y="691.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="597.1" y="702.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.50%)</title><rect x="594.1" y="675.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="597.1" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.50%)</title><rect x="600.0" y="707.0" width="17.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="603.0" y="718.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.50%)</title><rect x="600.0" y="691.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.0" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.00%)</title><rect x="605.9" y="691.0" width="11.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="608.9" y="702.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.50%)</title><rect x="611.8" y="675.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="614.8" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.50%)</title><rect x="617.7" y="707.0" width="17.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="620.7" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.50%)</title><rect x="617.7" y="691.0" width="17.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="620.7" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.50%)</title><rect x="623.6" y="675.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="626.6" y="686.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.50%)</title><rect x="623.6" y="659.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="626.6" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.50%)</title><rect x="629.5" y="675.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="632.5" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::needed_for_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.50%)</title><rect x="629.5" y="659.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="632.5" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 15.50%)</title><rect x="635.4" y="707.0" width="182.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="638.4" y="718.0">PhaseChaitin::Register_A..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.00%)</title><rect x="641.3" y="691.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="644.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.00%)</title><rect x="653.1" y="691.0" width="11.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="656.1" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 1.00%)</title><rect x="653.1" y="675.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="656.1" y="686.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.50%)</title><rect x="653.1" y="659.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="656.1" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="659.0" y="659.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="662.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.50%)</title><rect x="664.9" y="691.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="667.9" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.50%)</title><rect x="664.9" y="675.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="667.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.00%)</title><rect x="670.8" y="691.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="673.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 4.00%)</title><rect x="682.6" y="691.0" width="47.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="685.6" y="702.0">Phas..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.50%)</title><rect x="700.3" y="675.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="703.3" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.00%)</title><rect x="706.2" y="675.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="709.2" y="686.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.50%)</title><rect x="718.0" y="675.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="721.0" y="686.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.50%)</title><rect x="723.9" y="675.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="726.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 2.00%)</title><rect x="729.8" y="691.0" width="23.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="732.8" y="702.0">P..</text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.50%)</title><rect x="735.7" y="675.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="738.7" y="686.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.50%)</title><rect x="741.6" y="675.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="744.6" y="686.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.50%)</title><rect x="747.5" y="675.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="750.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.50%)</title><rect x="753.4" y="691.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="756.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.50%)</title><rect x="753.4" y="675.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="756.4" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.50%)</title><rect x="753.4" y="659.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="756.4" y="670.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.50%)</title><rect x="753.4" y="643.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="756.4" y="654.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.00%)</title><rect x="759.3" y="691.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="762.3" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.00%)</title><rect x="759.3" y="675.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="762.3" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 1.00%)</title><rect x="759.3" y="659.0" width="11.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="762.3" y="670.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.50%)</title><rect x="765.2" y="643.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="768.2" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.50%)</title><rect x="771.1" y="691.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="774.1" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="771.1" y="675.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="774.1" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.50%)</title><rect x="777.0" y="691.0" width="17.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="780.0" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.00%)</title><rect x="782.9" y="675.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="785.9" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.00%)</title><rect x="794.7" y="691.0" width="23.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="797.7" y="702.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.50%)</title><rect x="812.4" y="675.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="815.4" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="812.4" y="659.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="815.4" y="670.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 24.00%)</title><rect x="818.3" y="723.0" width="283.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="821.3" y="734.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.50%)</title><rect x="818.3" y="707.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="821.3" y="718.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.50%)</title><rect x="818.3" y="691.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="821.3" y="702.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.50%)</title><rect x="818.3" y="675.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="821.3" y="686.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.50%)</title><rect x="818.3" y="659.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="821.3" y="670.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.50%)</title><rect x="818.3" y="643.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="821.3" y="654.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.50%)</title><rect x="824.2" y="707.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="827.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 2.50%)</title><rect x="830.1" y="707.0" width="29.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.1" y="718.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 2.50%)</title><rect x="830.1" y="691.0" width="29.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.1" y="702.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="830.1" y="675.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="830.1" y="659.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="833.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.50%)</title><rect x="830.1" y="643.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="833.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.50%)</title><rect x="830.1" y="627.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="833.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.50%)</title><rect x="836.0" y="675.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.0" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.50%)</title><rect x="836.0" y="659.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.0" y="670.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.50%)</title><rect x="836.0" y="643.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="839.0" y="654.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.50%)</title><rect x="836.0" y="627.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="839.0" y="638.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.50%)</title><rect x="836.0" y="611.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="839.0" y="622.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.50%)</title><rect x="836.0" y="595.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="839.0" y="606.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.50%)</title><rect x="836.0" y="579.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.0" y="590.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.50%)</title><rect x="836.0" y="563.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="839.0" y="574.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.50%)</title><rect x="836.0" y="547.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="839.0" y="558.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.50%)</title><rect x="836.0" y="531.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="839.0" y="542.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.50%)</title><rect x="836.0" y="515.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="839.0" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.50%)</title><rect x="836.0" y="499.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="839.0" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.50%)</title><rect x="836.0" y="483.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="839.0" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.50%)</title><rect x="836.0" y="467.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="839.0" y="478.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.50%)</title><rect x="836.0" y="451.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="839.0" y="462.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.50%)</title><rect x="836.0" y="435.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.0" y="446.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.50%)</title><rect x="836.0" y="419.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="839.0" y="430.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.50%)</title><rect x="836.0" y="403.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="839.0" y="414.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.50%)</title><rect x="836.0" y="387.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="839.0" y="398.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.50%)</title><rect x="836.0" y="371.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="839.0" y="382.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.50%)</title><rect x="836.0" y="355.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="839.0" y="366.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.50%)</title><rect x="836.0" y="339.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 1.50%)</title><rect x="841.9" y="675.0" width="17.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="844.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.00%)</title><rect x="841.9" y="659.0" width="11.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="844.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.00%)</title><rect x="841.9" y="643.0" width="11.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="844.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.00%)</title><rect x="841.9" y="627.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="844.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.00%)</title><rect x="841.9" y="611.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="844.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.00%)</title><rect x="841.9" y="595.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="844.9" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="841.9" y="579.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="841.9" y="563.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="844.9" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="841.9" y="547.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="844.9" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.50%)</title><rect x="841.9" y="531.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="844.9" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="847.8" y="579.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="850.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="847.8" y="563.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="850.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="847.8" y="547.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="850.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="847.8" y="531.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="850.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="847.8" y="515.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="850.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="847.8" y="499.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="850.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="847.8" y="483.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="850.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="847.8" y="467.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="850.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.50%)</title><rect x="847.8" y="451.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="850.8" y="462.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.50%)</title><rect x="847.8" y="435.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="850.8" y="446.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.50%)</title><rect x="853.7" y="659.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="856.7" y="670.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.50%)</title><rect x="853.7" y="643.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="856.7" y="654.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 1.00%)</title><rect x="859.6" y="707.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="862.6" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.50%)</title><rect x="865.5" y="691.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="868.5" y="702.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.50%)</title><rect x="865.5" y="675.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="868.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (27 samples, 13.50%)</title><rect x="871.4" y="707.0" width="159.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="874.4" y="718.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.00%)</title><rect x="871.4" y="691.0" width="11.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="874.4" y="702.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.50%)</title><rect x="877.3" y="675.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 9.00%)</title><rect x="883.2" y="691.0" width="106.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="886.2" y="702.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 8.00%)</title><rect x="895.0" y="675.0" width="94.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="898.0" y="686.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (16 samples, 8.00%)</title><rect x="895.0" y="659.0" width="94.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="898.0" y="670.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (15 samples, 7.50%)</title><rect x="900.9" y="643.0" width="88.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="903.9" y="654.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 2.50%)</title><rect x="989.4" y="691.0" width="29.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.4" y="702.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (5 samples, 2.50%)</title><rect x="989.4" y="675.0" width="29.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.4" y="686.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.50%)</title><rect x="995.3" y="659.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (2 samples, 1.00%)</title><rect x="1001.2" y="659.0" width="11.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1004.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 1.00%)</title><rect x="1001.2" y="643.0" width="11.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1004.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.50%)</title><rect x="1013.0" y="659.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.0" y="670.0"></text>
</g>
<g>
<title>PhiNode::make_blank(Node*, Node*) (1 samples, 0.50%)</title><rect x="1013.0" y="643.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1016.0" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.50%)</title><rect x="1018.9" y="691.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1021.9" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.50%)</title><rect x="1018.9" y="675.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.9" y="686.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseTransform*) (1 samples, 0.50%)</title><rect x="1018.9" y="659.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.9" y="670.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.50%)</title><rect x="1018.9" y="643.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.9" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.50%)</title><rect x="1018.9" y="627.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1021.9" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.50%)</title><rect x="1018.9" y="611.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1021.9" y="622.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.50%)</title><rect x="1024.8" y="691.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1027.8" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 4.50%)</title><rect x="1030.7" y="707.0" width="53.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1033.7" y="718.0">Phase..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 4.50%)</title><rect x="1030.7" y="691.0" width="53.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1033.7" y="702.0">Phase..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1030.7" y="675.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1033.7" y="686.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.50%)</title><rect x="1030.7" y="659.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1033.7" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.50%)</title><rect x="1030.7" y="643.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1033.7" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.50%)</title><rect x="1030.7" y="627.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1033.7" y="638.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.50%)</title><rect x="1036.6" y="675.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1039.6" y="686.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.50%)</title><rect x="1036.6" y="659.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1039.6" y="670.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.50%)</title><rect x="1036.6" y="643.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.6" y="654.0"></text>
</g>
<g>
<title>ShenandoahBarrierNode::skip_through_barrier(Node*) (1 samples, 0.50%)</title><rect x="1036.6" y="627.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1039.6" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 1.00%)</title><rect x="1042.5" y="675.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.5" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.50%)</title><rect x="1048.4" y="659.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1051.4" y="670.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.50%)</title><rect x="1048.4" y="643.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.4" y="654.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1054.3" y="675.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.3" y="686.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.50%)</title><rect x="1054.3" y="659.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.3" y="670.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 2.00%)</title><rect x="1060.2" y="675.0" width="23.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.2" y="686.0">S..</text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 1.50%)</title><rect x="1066.1" y="659.0" width="17.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.1" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.50%)</title><rect x="1066.1" y="643.0" width="17.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.1" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.50%)</title><rect x="1066.1" y="627.0" width="17.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.1" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.50%)</title><rect x="1066.1" y="611.0" width="17.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.1" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.00%)</title><rect x="1066.1" y="595.0" width="11.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.1" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.00%)</title><rect x="1066.1" y="579.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1069.1" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.50%)</title><rect x="1066.1" y="563.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.1" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.50%)</title><rect x="1066.1" y="547.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.1" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.50%)</title><rect x="1066.1" y="531.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.1" y="542.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.50%)</title><rect x="1066.1" y="515.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.1" y="526.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.50%)</title><rect x="1066.1" y="499.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1069.1" y="510.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.50%)</title><rect x="1072.0" y="563.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.0" y="574.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.50%)</title><rect x="1072.0" y="547.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1075.0" y="558.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.50%)</title><rect x="1077.9" y="595.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.9" y="606.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.50%)</title><rect x="1077.9" y="579.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.9" y="590.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.50%)</title><rect x="1083.8" y="707.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1086.8" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.50%)</title><rect x="1083.8" y="691.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.8" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.50%)</title><rect x="1083.8" y="675.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.8" y="686.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_card_mark(Node*) (1 samples, 0.50%)</title><rect x="1083.8" y="659.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.8" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.50%)</title><rect x="1083.8" y="643.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.8" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.50%)</title><rect x="1083.8" y="627.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.8" y="638.0"></text>
</g>
<g>
<title>CastP2XNode::Opcode() const (1 samples, 0.50%)</title><rect x="1083.8" y="611.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.8" y="622.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.50%)</title><rect x="1089.7" y="707.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.7" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.50%)</title><rect x="1089.7" y="691.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.7" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.50%)</title><rect x="1089.7" y="675.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.7" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.50%)</title><rect x="1089.7" y="659.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.7" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.50%)</title><rect x="1089.7" y="643.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.7" y="654.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.50%)</title><rect x="1089.7" y="627.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.7" y="638.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.50%)</title><rect x="1095.6" y="707.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.6" y="718.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.50%)</title><rect x="1095.6" y="691.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.6" y="702.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.50%)</title><rect x="1095.6" y="675.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 5.50%)</title><rect x="1101.5" y="723.0" width="64.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.5" y="734.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 5.50%)</title><rect x="1101.5" y="707.0" width="64.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.5" y="718.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 5.50%)</title><rect x="1101.5" y="691.0" width="64.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.5" y="702.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 5.50%)</title><rect x="1101.5" y="675.0" width="64.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.5" y="686.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 5.50%)</title><rect x="1101.5" y="659.0" width="64.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.5" y="670.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 4.50%)</title><rect x="1107.4" y="643.0" width="53.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.4" y="654.0">Parse..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.50%)</title><rect x="1107.4" y="627.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.4" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.50%)</title><rect x="1107.4" y="611.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.4" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.50%)</title><rect x="1107.4" y="595.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.4" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.50%)</title><rect x="1107.4" y="579.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.4" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.50%)</title><rect x="1107.4" y="563.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.4" y="574.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.50%)</title><rect x="1107.4" y="547.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.00%)</title><rect x="1113.3" y="627.0" width="35.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.3" y="638.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.00%)</title><rect x="1113.3" y="611.0" width="35.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.3" y="622.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.00%)</title><rect x="1113.3" y="595.0" width="35.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1116.3" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.00%)</title><rect x="1113.3" y="579.0" width="35.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.3" y="590.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.00%)</title><rect x="1113.3" y="563.0" width="35.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.3" y="574.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.50%)</title><rect x="1113.3" y="547.0" width="29.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.3" y="558.0">Pa..</text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.50%)</title><rect x="1113.3" y="531.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.3" y="542.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.50%)</title><rect x="1113.3" y="515.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.3" y="526.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.50%)</title><rect x="1113.3" y="499.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.3" y="510.0"></text>
</g>
<g>
<title>methodHandle::remove() (1 samples, 0.50%)</title><rect x="1113.3" y="483.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.50%)</title><rect x="1119.2" y="531.0" width="17.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.50%)</title><rect x="1119.2" y="515.0" width="17.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.50%)</title><rect x="1119.2" y="499.0" width="17.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.50%)</title><rect x="1119.2" y="483.0" width="17.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.50%)</title><rect x="1119.2" y="467.0" width="17.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.50%)</title><rect x="1119.2" y="451.0" width="17.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.50%)</title><rect x="1119.2" y="435.0" width="17.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.50%)</title><rect x="1119.2" y="419.0" width="17.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.50%)</title><rect x="1119.2" y="403.0" width="17.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.50%)</title><rect x="1119.2" y="387.0" width="17.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.50%)</title><rect x="1119.2" y="371.0" width="17.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.50%)</title><rect x="1119.2" y="355.0" width="17.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.2" y="366.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.50%)</title><rect x="1119.2" y="339.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.2" y="350.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.50%)</title><rect x="1119.2" y="323.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.2" y="334.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.50%)</title><rect x="1119.2" y="307.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.2" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.00%)</title><rect x="1125.1" y="339.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.00%)</title><rect x="1125.1" y="323.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.00%)</title><rect x="1125.1" y="307.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.00%)</title><rect x="1125.1" y="291.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.00%)</title><rect x="1125.1" y="275.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1125.1" y="259.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1125.1" y="243.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1125.1" y="227.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1125.1" y="211.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1125.1" y="195.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1125.1" y="179.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1125.1" y="163.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.1" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1125.1" y="147.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.1" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1125.1" y="131.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.1" y="142.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.50%)</title><rect x="1125.1" y="115.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.1" y="126.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.50%)</title><rect x="1125.1" y="99.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.1" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.50%)</title><rect x="1125.1" y="83.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.1" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.50%)</title><rect x="1125.1" y="67.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.1" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.50%)</title><rect x="1125.1" y="51.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.1" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.50%)</title><rect x="1125.1" y="35.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1131.0" y="259.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.50%)</title><rect x="1131.0" y="243.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.0" y="254.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.50%)</title><rect x="1131.0" y="227.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.0" y="238.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.50%)</title><rect x="1131.0" y="211.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.0" y="222.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1131.0" y="195.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.0" y="206.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.50%)</title><rect x="1131.0" y="179.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.0" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.50%)</title><rect x="1131.0" y="163.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.0" y="174.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.50%)</title><rect x="1131.0" y="147.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.0" y="158.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.50%)</title><rect x="1131.0" y="131.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.0" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1136.9" y="531.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1136.9" y="515.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1136.9" y="499.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1136.9" y="483.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1136.9" y="467.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1136.9" y="451.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1136.9" y="435.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1136.9" y="419.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1136.9" y="403.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1136.9" y="387.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1136.9" y="371.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1136.9" y="355.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1136.9" y="339.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.50%)</title><rect x="1136.9" y="323.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.9" y="334.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.50%)</title><rect x="1136.9" y="307.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.9" y="318.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.50%)</title><rect x="1136.9" y="291.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.9" y="302.0"></text>
</g>
<g>
<title>IdealKit::delay_transform(Node*) (1 samples, 0.50%)</title><rect x="1136.9" y="275.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1142.8" y="547.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.50%)</title><rect x="1142.8" y="531.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.8" y="542.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.50%)</title><rect x="1142.8" y="515.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.8" y="526.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.50%)</title><rect x="1142.8" y="499.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.8" y="510.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.50%)</title><rect x="1142.8" y="483.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.8" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.50%)</title><rect x="1142.8" y="467.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.8" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.00%)</title><rect x="1148.7" y="627.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.00%)</title><rect x="1148.7" y="611.0" width="11.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.00%)</title><rect x="1148.7" y="595.0" width="11.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.00%)</title><rect x="1148.7" y="579.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.00%)</title><rect x="1148.7" y="563.0" width="11.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.00%)</title><rect x="1148.7" y="547.0" width="11.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.00%)</title><rect x="1148.7" y="531.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.00%)</title><rect x="1148.7" y="515.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.00%)</title><rect x="1148.7" y="499.0" width="11.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.7" y="510.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.50%)</title><rect x="1148.7" y="483.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.50%)</title><rect x="1148.7" y="467.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.7" y="478.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.50%)</title><rect x="1148.7" y="451.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.7" y="462.0"></text>
</g>
<g>
<title>Compile::too_many_recompiles(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.50%)</title><rect x="1148.7" y="435.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.7" y="446.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.50%)</title><rect x="1148.7" y="419.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.7" y="430.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.50%)</title><rect x="1148.7" y="403.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.7" y="414.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.50%)</title><rect x="1148.7" y="387.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1154.6" y="483.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1154.6" y="467.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1154.6" y="451.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1154.6" y="435.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1154.6" y="419.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1154.6" y="403.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1154.6" y="387.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1154.6" y="371.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1154.6" y="355.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1154.6" y="339.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.6" y="350.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.50%)</title><rect x="1154.6" y="323.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.6" y="334.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.50%)</title><rect x="1154.6" y="307.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1160.5" y="643.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.50%)</title><rect x="1160.5" y="627.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.5" y="638.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.50%)</title><rect x="1160.5" y="611.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.5" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.50%)</title><rect x="1160.5" y="595.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.5" y="606.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.50%)</title><rect x="1160.5" y="579.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.5" y="590.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.50%)</title><rect x="1160.5" y="563.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.5" y="574.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.00%)</title><rect x="1166.4" y="755.0" width="11.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.4" y="766.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.00%)</title><rect x="1166.4" y="739.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.4" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.00%)</title><rect x="1166.4" y="723.0" width="11.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.4" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.00%)</title><rect x="1166.4" y="707.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.4" y="718.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.50%)</title><rect x="1166.4" y="691.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.4" y="702.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.50%)</title><rect x="1166.4" y="675.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.4" y="686.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.50%)</title><rect x="1166.4" y="659.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.4" y="670.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.50%)</title><rect x="1166.4" y="643.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.4" y="654.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.50%)</title><rect x="1166.4" y="627.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.4" y="638.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.50%)</title><rect x="1166.4" y="611.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.4" y="622.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.50%)</title><rect x="1166.4" y="595.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.4" y="606.0"></text>
</g>
<g>
<title>Instruction::state_values_do(ValueVisitor*) (1 samples, 0.50%)</title><rect x="1166.4" y="579.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.4" y="590.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.50%)</title><rect x="1172.3" y="691.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="702.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.50%)</title><rect x="1172.3" y="675.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="686.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.50%)</title><rect x="1172.3" y="659.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.3" y="670.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.50%)</title><rect x="1172.3" y="643.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="654.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.50%)</title><rect x="1172.3" y="627.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="638.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.50%)</title><rect x="1172.3" y="611.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.3" y="622.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.50%)</title><rect x="1178.2" y="755.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="766.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.50%)</title><rect x="1178.2" y="739.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="750.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.50%)</title><rect x="1184.1" y="787.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="798.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.50%)</title><rect x="1184.1" y="771.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="782.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.50%)</title><rect x="1184.1" y="755.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="766.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.50%)</title><rect x="1184.1" y="739.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.1" y="750.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.50%)</title><rect x="1184.1" y="723.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="734.0"></text>
</g>
</g>
</svg>
