<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (177 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.56%)</title><rect x="10.0" y="947.0" width="6.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 14.69%)</title><rect x="16.7" y="947.0" width="173.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="958.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (26 samples, 14.69%)</title><rect x="16.7" y="931.0" width="173.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="942.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.56%)</title><rect x="16.7" y="915.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.56%)</title><rect x="16.7" y="899.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/548151818.accept (1 samples, 0.56%)</title><rect x="16.7" y="883.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.56%)</title><rect x="16.7" y="867.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.56%)</title><rect x="16.7" y="851.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.7" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.56%)</title><rect x="16.7" y="835.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.7" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (15 samples, 8.47%)</title><rect x="23.3" y="915.0" width="100.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.3" y="926.0">java/lang/It..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1503268746.accept (15 samples, 8.47%)</title><rect x="23.3" y="899.0" width="100.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.3" y="910.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (15 samples, 8.47%)</title><rect x="23.3" y="883.0" width="100.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.3" y="894.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 7.34%)</title><rect x="23.3" y="867.0" width="86.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="878.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 7.34%)</title><rect x="23.3" y="851.0" width="86.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.3" y="862.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 7.34%)</title><rect x="23.3" y="835.0" width="86.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.3" y="846.0">com/lineco..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 7.34%)</title><rect x="23.3" y="819.0" width="86.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.3" y="830.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 7.34%)</title><rect x="23.3" y="803.0" width="86.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.3" y="814.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 7.34%)</title><rect x="23.3" y="787.0" width="86.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.3" y="798.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 6.21%)</title><rect x="23.3" y="771.0" width="73.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.3" y="782.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.56%)</title><rect x="23.3" y="755.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.56%)</title><rect x="23.3" y="739.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.56%)</title><rect x="23.3" y="723.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.56%)</title><rect x="23.3" y="707.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.56%)</title><rect x="30.0" y="755.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.56%)</title><rect x="30.0" y="739.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.56%)</title><rect x="30.0" y="723.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 5.08%)</title><rect x="36.7" y="755.0" width="60.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.7" y="766.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 5.08%)</title><rect x="36.7" y="739.0" width="60.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.7" y="750.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 5.08%)</title><rect x="36.7" y="723.0" width="60.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.7" y="734.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 5.08%)</title><rect x="36.7" y="707.0" width="60.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.7" y="718.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (8 samples, 4.52%)</title><rect x="43.3" y="691.0" width="53.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.3" y="702.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 3.95%)</title><rect x="43.3" y="675.0" width="46.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="46.3" y="686.0">Unsa..</text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 3.39%)</title><rect x="43.3" y="659.0" width="40.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="46.3" y="670.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.56%)</title><rect x="83.3" y="659.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="86.3" y="670.0"></text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.56%)</title><rect x="83.3" y="643.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="86.3" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.56%)</title><rect x="90.0" y="675.0" width="6.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="93.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.13%)</title><rect x="96.7" y="771.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.13%)</title><rect x="96.7" y="755.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.13%)</title><rect x="96.7" y="739.0" width="13.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.56%)</title><rect x="110.0" y="867.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="113.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.56%)</title><rect x="110.0" y="851.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="113.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.56%)</title><rect x="116.7" y="867.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="119.7" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.56%)</title><rect x="116.7" y="851.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.7" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.56%)</title><rect x="116.7" y="835.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.7" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.56%)</title><rect x="116.7" y="819.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="119.7" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.56%)</title><rect x="116.7" y="803.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="119.7" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.56%)</title><rect x="116.7" y="787.0" width="6.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="119.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.56%)</title><rect x="123.3" y="915.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="126.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.08%)</title><rect x="130.0" y="915.0" width="60.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="133.0" y="926.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.08%)</title><rect x="130.0" y="899.0" width="60.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="133.0" y="910.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.13%)</title><rect x="130.0" y="883.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.13%)</title><rect x="130.0" y="867.0" width="13.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.56%)</title><rect x="130.0" y="851.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.56%)</title><rect x="130.0" y="835.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.56%)</title><rect x="130.0" y="819.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.56%)</title><rect x="130.0" y="803.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.56%)</title><rect x="136.7" y="851.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="139.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.56%)</title><rect x="136.7" y="835.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="139.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.13%)</title><rect x="143.3" y="883.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="146.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.13%)</title><rect x="143.3" y="867.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="146.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.13%)</title><rect x="143.3" y="851.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 1.13%)</title><rect x="143.3" y="835.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 1.13%)</title><rect x="143.3" y="819.0" width="13.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.56%)</title><rect x="143.3" y="803.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="146.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.56%)</title><rect x="143.3" y="787.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.56%)</title><rect x="143.3" y="771.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="146.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.56%)</title><rect x="143.3" y="755.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.56%)</title><rect x="143.3" y="739.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.3" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.56%)</title><rect x="143.3" y="723.0" width="6.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="146.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.56%)</title><rect x="150.0" y="803.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.56%)</title><rect x="150.0" y="787.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 2.26%)</title><rect x="156.7" y="883.0" width="26.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.7" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 2.26%)</title><rect x="156.7" y="867.0" width="26.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.7" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (3 samples, 1.69%)</title><rect x="156.7" y="851.0" width="20.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 1.13%)</title><rect x="156.7" y="835.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="159.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 1.13%)</title><rect x="156.7" y="819.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="159.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 1.13%)</title><rect x="156.7" y="803.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="159.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (2 samples, 1.13%)</title><rect x="156.7" y="787.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 1.13%)</title><rect x="156.7" y="771.0" width="13.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 1.13%)</title><rect x="156.7" y="755.0" width="13.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.56%)</title><rect x="156.7" y="739.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.56%)</title><rect x="156.7" y="723.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.56%)</title><rect x="156.7" y="707.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.56%)</title><rect x="156.7" y="691.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.56%)</title><rect x="156.7" y="675.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="159.7" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.56%)</title><rect x="156.7" y="659.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.56%)</title><rect x="163.3" y="739.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.56%)</title><rect x="163.3" y="723.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.56%)</title><rect x="163.3" y="707.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.56%)</title><rect x="163.3" y="691.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="166.3" y="702.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.56%)</title><rect x="163.3" y="675.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.3" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.56%)</title><rect x="163.3" y="659.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.56%)</title><rect x="163.3" y="643.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.56%)</title><rect x="163.3" y="627.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.3" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.56%)</title><rect x="163.3" y="611.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.3" y="622.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.56%)</title><rect x="163.3" y="595.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.3" y="606.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.56%)</title><rect x="163.3" y="579.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.3" y="590.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.replaceWith (1 samples, 0.56%)</title><rect x="163.3" y="563.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.3" y="574.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.56%)</title><rect x="163.3" y="547.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.56%)</title><rect x="170.0" y="835.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="173.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.56%)</title><rect x="170.0" y="819.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="173.0" y="830.0"></text>
</g>
<g>
<title>java/util/Optional.filter (1 samples, 0.56%)</title><rect x="170.0" y="803.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="173.0" y="814.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$257/1824165022.test (1 samples, 0.56%)</title><rect x="170.0" y="787.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.0" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.56%)</title><rect x="170.0" y="771.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="173.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.56%)</title><rect x="176.7" y="851.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.56%)</title><rect x="176.7" y="835.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.56%)</title><rect x="176.7" y="819.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="179.7" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.56%)</title><rect x="176.7" y="803.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="179.7" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.56%)</title><rect x="176.7" y="787.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.7" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.56%)</title><rect x="176.7" y="771.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.7" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.56%)</title><rect x="176.7" y="755.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.7" y="766.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.56%)</title><rect x="176.7" y="739.0" width="6.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="179.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.56%)</title><rect x="183.3" y="883.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.56%)</title><rect x="183.3" y="867.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="186.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.56%)</title><rect x="183.3" y="851.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="186.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.56%)</title><rect x="183.3" y="835.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="186.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$1700 (1 samples, 0.56%)</title><rect x="183.3" y="819.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="186.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.preferredReadReplica (1 samples, 0.56%)</title><rect x="183.3" y="803.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="186.3" y="814.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.56%)</title><rect x="183.3" y="787.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.3" y="798.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.56%)</title><rect x="183.3" y="771.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.3" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.run (51 samples, 28.81%)</title><rect x="190.0" y="947.0" width="340.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="193.0" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (51 samples, 28.81%)</title><rect x="190.0" y="931.0" width="340.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.0" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (51 samples, 28.81%)</title><rect x="190.0" y="915.0" width="340.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.0" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1978585736.run (38 samples, 21.47%)</title><rect x="196.7" y="899.0" width="253.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.7" y="910.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (38 samples, 21.47%)</title><rect x="196.7" y="883.0" width="253.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.7" y="894.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (38 samples, 21.47%)</title><rect x="196.7" y="867.0" width="253.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.7" y="878.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (38 samples, 21.47%)</title><rect x="196.7" y="851.0" width="253.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.7" y="862.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (14 samples, 7.91%)</title><rect x="203.3" y="835.0" width="93.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.3" y="846.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (14 samples, 7.91%)</title><rect x="203.3" y="819.0" width="93.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.3" y="830.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (14 samples, 7.91%)</title><rect x="203.3" y="803.0" width="93.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.3" y="814.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 7.34%)</title><rect x="203.3" y="787.0" width="86.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.3" y="798.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 7.34%)</title><rect x="203.3" y="771.0" width="86.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.3" y="782.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (13 samples, 7.34%)</title><rect x="203.3" y="755.0" width="86.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.3" y="766.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 3.39%)</title><rect x="203.3" y="739.0" width="40.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.3" y="750.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 2.26%)</title><rect x="203.3" y="723.0" width="26.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="206.3" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 2.26%)</title><rect x="203.3" y="707.0" width="26.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.3" y="718.0">c..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.13%)</title><rect x="216.7" y="691.0" width="13.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="219.7" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="223.3" y="675.0" width="6.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="226.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.13%)</title><rect x="230.0" y="723.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.13%)</title><rect x="230.0" y="707.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.56%)</title><rect x="236.7" y="691.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.82%)</title><rect x="243.3" y="739.0" width="33.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.3" y="750.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.82%)</title><rect x="243.3" y="723.0" width="33.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.3" y="734.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.82%)</title><rect x="243.3" y="707.0" width="33.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.3" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.82%)</title><rect x="243.3" y="691.0" width="33.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.3" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.82%)</title><rect x="243.3" y="675.0" width="33.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.3" y="686.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.56%)</title><rect x="243.3" y="659.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.56%)</title><rect x="243.3" y="643.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.56%)</title><rect x="243.3" y="627.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.56%)</title><rect x="243.3" y="611.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.3" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.56%)</title><rect x="243.3" y="595.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.3" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.56%)</title><rect x="243.3" y="579.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.3" y="590.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor13.newInstance (1 samples, 0.56%)</title><rect x="243.3" y="563.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 2.26%)</title><rect x="250.0" y="659.0" width="26.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.0" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.56%)</title><rect x="270.0" y="643.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.0" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.56%)</title><rect x="270.0" y="627.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="273.0" y="638.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.56%)</title><rect x="270.0" y="611.0" width="6.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="273.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 1.13%)</title><rect x="276.7" y="739.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 1.13%)</title><rect x="276.7" y="723.0" width="13.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 1.13%)</title><rect x="276.7" y="707.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.56%)</title><rect x="276.7" y="691.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.56%)</title><rect x="283.3" y="691.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.56%)</title><rect x="283.3" y="675.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.56%)</title><rect x="290.0" y="787.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.0" y="798.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.56%)</title><rect x="290.0" y="771.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="293.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (23 samples, 12.99%)</title><rect x="296.7" y="835.0" width="153.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.7" y="846.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.taskData (1 samples, 0.56%)</title><rect x="296.7" y="819.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 2.26%)</title><rect x="303.3" y="819.0" width="26.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.3" y="830.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.26%)</title><rect x="303.3" y="803.0" width="26.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="306.3" y="814.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.26%)</title><rect x="303.3" y="787.0" width="26.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.3" y="798.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.26%)</title><rect x="303.3" y="771.0" width="26.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.3" y="782.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 2.26%)</title><rect x="303.3" y="755.0" width="26.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="306.3" y="766.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.56%)</title><rect x="323.3" y="739.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (11 samples, 6.21%)</title><rect x="330.0" y="819.0" width="73.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="333.0" y="830.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (11 samples, 6.21%)</title><rect x="330.0" y="803.0" width="73.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.0" y="814.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.69%)</title><rect x="336.7" y="787.0" width="20.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="339.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.69%)</title><rect x="336.7" y="771.0" width="20.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="339.7" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.69%)</title><rect x="336.7" y="755.0" width="20.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="339.7" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.69%)</title><rect x="336.7" y="739.0" width="20.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.7" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.69%)</title><rect x="336.7" y="723.0" width="20.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="339.7" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.56%)</title><rect x="350.0" y="707.0" width="6.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="353.0" y="718.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 1.13%)</title><rect x="356.7" y="787.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.7" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.56%)</title><rect x="363.3" y="771.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.3" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.82%)</title><rect x="370.0" y="787.0" width="33.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="373.0" y="798.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 2.82%)</title><rect x="370.0" y="771.0" width="33.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="373.0" y="782.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.13%)</title><rect x="370.0" y="755.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="373.0" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.13%)</title><rect x="370.0" y="739.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.13%)</title><rect x="370.0" y="723.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.0" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.13%)</title><rect x="370.0" y="707.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="373.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.69%)</title><rect x="383.3" y="755.0" width="20.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.13%)</title><rect x="390.0" y="739.0" width="13.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="393.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.13%)</title><rect x="390.0" y="723.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.56%)</title><rect x="396.7" y="707.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="399.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 2.26%)</title><rect x="403.3" y="819.0" width="26.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="406.3" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.26%)</title><rect x="403.3" y="803.0" width="26.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="406.3" y="814.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/969553632.process (1 samples, 0.56%)</title><rect x="403.3" y="787.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.56%)</title><rect x="403.3" y="771.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.56%)</title><rect x="403.3" y="755.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.56%)</title><rect x="403.3" y="739.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.56%)</title><rect x="403.3" y="723.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.56%)</title><rect x="403.3" y="707.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="406.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.56%)</title><rect x="403.3" y="691.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.3" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.56%)</title><rect x="410.0" y="787.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="413.0" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.56%)</title><rect x="416.7" y="787.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.7" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.56%)</title><rect x="416.7" y="771.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.7" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.56%)</title><rect x="416.7" y="755.0" width="6.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="419.7" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.56%)</title><rect x="423.3" y="787.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="426.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.56%)</title><rect x="430.0" y="819.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="433.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.&lt;init&gt; (1 samples, 0.56%)</title><rect x="430.0" y="803.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.13%)</title><rect x="436.7" y="819.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.56%)</title><rect x="443.3" y="803.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="446.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.56%)</title><rect x="450.0" y="899.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.0" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.56%)</title><rect x="450.0" y="883.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.0" y="894.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.56%)</title><rect x="450.0" y="867.0" width="6.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="453.0" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.272] (1 samples, 0.56%)</title><rect x="450.0" y="851.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="453.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.56%)</title><rect x="456.7" y="899.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="459.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.56%)</title><rect x="456.7" y="883.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="459.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.56%)</title><rect x="456.7" y="867.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="459.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 5.65%)</title><rect x="463.3" y="899.0" width="66.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="466.3" y="910.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (10 samples, 5.65%)</title><rect x="463.3" y="883.0" width="66.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="466.3" y="894.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (10 samples, 5.65%)</title><rect x="463.3" y="867.0" width="66.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.3" y="878.0">java/ut..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 1.69%)</title><rect x="463.3" y="851.0" width="20.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="466.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 1.13%)</title><rect x="483.3" y="851.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="486.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.13%)</title><rect x="483.3" y="835.0" width="13.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="486.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.13%)</title><rect x="483.3" y="819.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="486.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.13%)</title><rect x="483.3" y="803.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="486.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 2.82%)</title><rect x="496.7" y="851.0" width="33.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="499.7" y="862.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (5 samples, 2.82%)</title><rect x="496.7" y="835.0" width="33.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="499.7" y="846.0">su..</text>
</g>
<g>
<title>Unsafe_Park (5 samples, 2.82%)</title><rect x="496.7" y="819.0" width="33.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="499.7" y="830.0">Un..</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.13%)</title><rect x="496.7" y="803.0" width="13.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="499.7" y="814.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.56%)</title><rect x="510.0" y="803.0" width="6.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="513.0" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.13%)</title><rect x="516.7" y="803.0" width="13.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="519.7" y="814.0"></text>
</g>
<g>
<title>start_thread (99 samples, 55.93%)</title><rect x="530.0" y="947.0" width="660.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="533.0" y="958.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (99 samples, 55.93%)</title><rect x="530.0" y="931.0" width="660.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="533.0" y="942.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 7.34%)</title><rect x="530.0" y="915.0" width="86.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="533.0" y="926.0">GangWorker..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 1.13%)</title><rect x="530.0" y="899.0" width="13.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="533.0" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 1.13%)</title><rect x="530.0" y="883.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="533.0" y="894.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.13%)</title><rect x="530.0" y="867.0" width="13.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="533.0" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (11 samples, 6.21%)</title><rect x="543.3" y="899.0" width="73.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="546.3" y="910.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 5.08%)</title><rect x="543.3" y="883.0" width="60.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="546.3" y="894.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.13%)</title><rect x="543.3" y="867.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="546.3" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.56%)</title><rect x="550.0" y="851.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="553.0" y="862.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.56%)</title><rect x="556.7" y="867.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="559.7" y="878.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 2.26%)</title><rect x="563.3" y="867.0" width="26.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="566.3" y="878.0">P..</text>
</g>
<g>
<title>SpinPause (2 samples, 1.13%)</title><rect x="590.0" y="867.0" width="13.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="593.0" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.13%)</title><rect x="603.3" y="883.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="606.3" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.56%)</title><rect x="603.3" y="867.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="606.3" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.56%)</title><rect x="603.3" y="851.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="606.3" y="862.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.56%)</title><rect x="603.3" y="835.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="606.3" y="846.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.56%)</title><rect x="610.0" y="867.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="613.0" y="878.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (86 samples, 48.59%)</title><rect x="616.7" y="915.0" width="573.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="619.7" y="926.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (86 samples, 48.59%)</title><rect x="616.7" y="899.0" width="573.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="619.7" y="910.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (86 samples, 48.59%)</title><rect x="616.7" y="883.0" width="573.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="619.7" y="894.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (82 samples, 46.33%)</title><rect x="616.7" y="867.0" width="546.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="619.7" y="878.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (82 samples, 46.33%)</title><rect x="616.7" y="851.0" width="546.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="619.7" y="862.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 24.86%)</title><rect x="616.7" y="835.0" width="293.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="619.7" y="846.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.69%)</title><rect x="616.7" y="819.0" width="20.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="619.7" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.13%)</title><rect x="616.7" y="803.0" width="13.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="619.7" y="814.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.56%)</title><rect x="630.0" y="803.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="633.0" y="814.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.56%)</title><rect x="630.0" y="787.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="633.0" y="798.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.56%)</title><rect x="630.0" y="771.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="633.0" y="782.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.56%)</title><rect x="630.0" y="755.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="633.0" y="766.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.56%)</title><rect x="630.0" y="739.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="633.0" y="750.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.56%)</title><rect x="630.0" y="723.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="633.0" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.69%)</title><rect x="636.7" y="819.0" width="20.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="639.7" y="830.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.56%)</title><rect x="636.7" y="803.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="639.7" y="814.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.13%)</title><rect x="643.3" y="803.0" width="13.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="646.3" y="814.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.56%)</title><rect x="643.3" y="787.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="646.3" y="798.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.56%)</title><rect x="650.0" y="787.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="653.0" y="798.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.56%)</title><rect x="650.0" y="771.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="653.0" y="782.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.56%)</title><rect x="650.0" y="755.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="653.0" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.13%)</title><rect x="656.7" y="819.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="659.7" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.13%)</title><rect x="656.7" y="803.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="659.7" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.13%)</title><rect x="656.7" y="787.0" width="13.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="659.7" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.56%)</title><rect x="663.3" y="771.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="666.3" y="782.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.56%)</title><rect x="663.3" y="755.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="666.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (36 samples, 20.34%)</title><rect x="670.0" y="819.0" width="240.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="673.0" y="830.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.56%)</title><rect x="670.0" y="803.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="673.0" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.56%)</title><rect x="670.0" y="787.0" width="6.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="673.0" y="798.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.56%)</title><rect x="676.7" y="803.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="679.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.13%)</title><rect x="683.3" y="803.0" width="13.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="686.3" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.56%)</title><rect x="690.0" y="787.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="693.0" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="690.0" y="771.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="693.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.13%)</title><rect x="696.7" y="803.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="699.7" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.13%)</title><rect x="696.7" y="787.0" width="13.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="699.7" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.13%)</title><rect x="696.7" y="771.0" width="13.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="699.7" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.82%)</title><rect x="710.0" y="803.0" width="33.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="713.0" y="814.0">Ph..</text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.56%)</title><rect x="736.7" y="787.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="739.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 5.65%)</title><rect x="743.3" y="803.0" width="66.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="746.3" y="814.0">PhaseCh..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.56%)</title><rect x="770.0" y="787.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="773.0" y="798.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.56%)</title><rect x="776.7" y="787.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="779.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.26%)</title><rect x="783.3" y="787.0" width="26.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="786.3" y="798.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="803.3" y="771.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="806.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.13%)</title><rect x="810.0" y="803.0" width="13.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="813.0" y="814.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.56%)</title><rect x="810.0" y="787.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="813.0" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.56%)</title><rect x="816.7" y="787.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="819.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 1.13%)</title><rect x="823.3" y="803.0" width="13.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="826.3" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.13%)</title><rect x="836.7" y="803.0" width="13.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="839.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.56%)</title><rect x="836.7" y="787.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="839.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::skip_copies(Node*) (1 samples, 0.56%)</title><rect x="843.3" y="787.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="846.3" y="798.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.69%)</title><rect x="850.0" y="803.0" width="20.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.0" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.13%)</title><rect x="850.0" y="787.0" width="13.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.0" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 1.13%)</title><rect x="850.0" y="771.0" width="13.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="853.0" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 1.13%)</title><rect x="850.0" y="755.0" width="13.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="853.0" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="856.7" y="739.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="859.7" y="750.0"></text>
</g>
<g>
<title>xorI_rReg_immNode::two_adr() const (1 samples, 0.56%)</title><rect x="863.3" y="787.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="866.3" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 1.13%)</title><rect x="870.0" y="803.0" width="13.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="873.0" y="814.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.69%)</title><rect x="883.3" y="803.0" width="20.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="886.3" y="814.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.13%)</title><rect x="890.0" y="787.0" width="13.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="893.0" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="896.7" y="771.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="899.7" y="782.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.56%)</title><rect x="903.3" y="803.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="906.3" y="814.0"></text>
</g>
<g>
<title>Compile::Optimize() (30 samples, 16.95%)</title><rect x="910.0" y="835.0" width="200.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="913.0" y="846.0">Compile::Optimize()</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 11.30%)</title><rect x="910.0" y="819.0" width="133.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.0" y="830.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 8.47%)</title><rect x="910.0" y="803.0" width="100.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="913.0" y="814.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (14 samples, 7.91%)</title><rect x="916.7" y="787.0" width="93.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="919.7" y="798.0">PhaseIdealL..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.56%)</title><rect x="916.7" y="771.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="919.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 7.34%)</title><rect x="923.3" y="771.0" width="86.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="926.3" y="782.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 1.13%)</title><rect x="930.0" y="755.0" width="13.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const [clone .isra.192] (1 samples, 0.56%)</title><rect x="936.7" y="739.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="939.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (10 samples, 5.65%)</title><rect x="943.3" y="755.0" width="66.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="946.3" y="766.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.56%)</title><rect x="1003.3" y="739.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1006.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.56%)</title><rect x="1010.0" y="803.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.56%)</title><rect x="1016.7" y="803.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1019.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.56%)</title><rect x="1016.7" y="787.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1019.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.56%)</title><rect x="1016.7" y="771.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1019.7" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.69%)</title><rect x="1023.3" y="803.0" width="20.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.3" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.13%)</title><rect x="1030.0" y="787.0" width="13.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.0" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.56%)</title><rect x="1030.0" y="771.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1033.0" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1036.7" y="771.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.7" y="782.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.56%)</title><rect x="1036.7" y="755.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.7" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 4.52%)</title><rect x="1043.3" y="819.0" width="53.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1046.3" y="830.0">Phase..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 4.52%)</title><rect x="1043.3" y="803.0" width="53.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1046.3" y="814.0">Phase..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1043.3" y="787.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.3" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 1.13%)</title><rect x="1050.0" y="787.0" width="13.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.0" y="798.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.56%)</title><rect x="1056.7" y="771.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1059.7" y="782.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.56%)</title><rect x="1056.7" y="755.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1059.7" y="766.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.56%)</title><rect x="1056.7" y="739.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1059.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 1.13%)</title><rect x="1063.3" y="787.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.3" y="798.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.56%)</title><rect x="1070.0" y="771.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.0" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 1.13%)</title><rect x="1076.7" y="787.0" width="13.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.7" y="798.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.56%)</title><rect x="1076.7" y="771.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.7" y="782.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.56%)</title><rect x="1083.3" y="771.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1086.3" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1090.0" y="787.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.0" y="798.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.56%)</title><rect x="1090.0" y="771.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.0" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1090.0" y="755.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.0" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1090.0" y="739.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.0" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1090.0" y="723.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1090.0" y="707.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1090.0" y="691.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.0" y="702.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.56%)</title><rect x="1090.0" y="675.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.0" y="686.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.56%)</title><rect x="1090.0" y="659.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.0" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 1.13%)</title><rect x="1096.7" y="819.0" width="13.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.7" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.13%)</title><rect x="1096.7" y="803.0" width="13.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.7" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.13%)</title><rect x="1096.7" y="787.0" width="13.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.7" y="798.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1096.7" y="771.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.7" y="782.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.56%)</title><rect x="1103.3" y="771.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 4.52%)</title><rect x="1110.0" y="835.0" width="53.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.0" y="846.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 4.52%)</title><rect x="1110.0" y="819.0" width="53.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.0" y="830.0">Parse..</text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.56%)</title><rect x="1110.0" y="803.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.0" y="814.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.56%)</title><rect x="1110.0" y="787.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.95%)</title><rect x="1116.7" y="803.0" width="46.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.7" y="814.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.95%)</title><rect x="1116.7" y="787.0" width="46.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.7" y="798.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.95%)</title><rect x="1116.7" y="771.0" width="46.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.7" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.95%)</title><rect x="1116.7" y="755.0" width="46.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.7" y="766.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.95%)</title><rect x="1116.7" y="739.0" width="46.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.7" y="750.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.95%)</title><rect x="1116.7" y="723.0" width="46.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.7" y="734.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.95%)</title><rect x="1116.7" y="707.0" width="46.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.7" y="718.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.95%)</title><rect x="1116.7" y="691.0" width="46.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1119.7" y="702.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.95%)</title><rect x="1116.7" y="675.0" width="46.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.7" y="686.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.95%)</title><rect x="1116.7" y="659.0" width="46.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.7" y="670.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.95%)</title><rect x="1116.7" y="643.0" width="46.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.7" y="654.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.95%)</title><rect x="1116.7" y="627.0" width="46.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.7" y="638.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.95%)</title><rect x="1116.7" y="611.0" width="46.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.7" y="622.0">Pars..</text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.56%)</title><rect x="1116.7" y="595.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.39%)</title><rect x="1123.3" y="595.0" width="40.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.3" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.39%)</title><rect x="1123.3" y="579.0" width="40.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.3" y="590.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.82%)</title><rect x="1123.3" y="563.0" width="33.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.3" y="574.0">Pa..</text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.56%)</title><rect x="1123.3" y="547.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.3" y="558.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.56%)</title><rect x="1123.3" y="531.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.3" y="542.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.56%)</title><rect x="1123.3" y="515.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.3" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.56%)</title><rect x="1123.3" y="499.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.69%)</title><rect x="1130.0" y="547.0" width="20.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1133.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.69%)</title><rect x="1130.0" y="531.0" width="20.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.69%)</title><rect x="1130.0" y="515.0" width="20.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.69%)</title><rect x="1130.0" y="499.0" width="20.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.69%)</title><rect x="1130.0" y="483.0" width="20.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.13%)</title><rect x="1130.0" y="467.0" width="13.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.0" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.56%)</title><rect x="1130.0" y="451.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.0" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.56%)</title><rect x="1130.0" y="435.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.0" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.56%)</title><rect x="1130.0" y="419.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.0" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.56%)</title><rect x="1130.0" y="403.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.0" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.56%)</title><rect x="1130.0" y="387.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.0" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.56%)</title><rect x="1130.0" y="371.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.0" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.56%)</title><rect x="1130.0" y="355.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.0" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.56%)</title><rect x="1130.0" y="339.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.0" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.56%)</title><rect x="1130.0" y="323.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.0" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.56%)</title><rect x="1130.0" y="307.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.0" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1130.0" y="291.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.0" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1130.0" y="275.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.0" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1130.0" y="259.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.0" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1136.7" y="451.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1136.7" y="435.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1136.7" y="419.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1136.7" y="403.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1136.7" y="387.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1136.7" y="371.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1136.7" y="355.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1136.7" y="339.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1136.7" y="323.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1136.7" y="307.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1136.7" y="291.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.56%)</title><rect x="1136.7" y="275.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.7" y="286.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.56%)</title><rect x="1136.7" y="259.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.7" y="270.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.56%)</title><rect x="1136.7" y="243.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.7" y="254.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.56%)</title><rect x="1136.7" y="227.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.56%)</title><rect x="1143.3" y="467.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.56%)</title><rect x="1143.3" y="451.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.3" y="462.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.56%)</title><rect x="1143.3" y="435.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.3" y="446.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.56%)</title><rect x="1143.3" y="419.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.3" y="430.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1143.3" y="403.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.3" y="414.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.56%)</title><rect x="1143.3" y="387.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.3" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="371.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.3" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="355.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.3" y="366.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.56%)</title><rect x="1143.3" y="339.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.3" y="350.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="323.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.3" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="547.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="531.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.0" y="515.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.0" y="499.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.0" y="483.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.0" y="467.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.0" y="451.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.0" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="435.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.0" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="419.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="403.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.0" y="387.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.0" y="371.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.0" y="355.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.0" y="339.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.0" y="323.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.0" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="307.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="291.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.0" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.0" y="275.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.0" y="259.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.0" y="243.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.0" y="227.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.56%)</title><rect x="1150.0" y="211.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.56%)</title><rect x="1150.0" y="195.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.0" y="206.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.56%)</title><rect x="1150.0" y="179.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.0" y="190.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.56%)</title><rect x="1150.0" y="163.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.0" y="174.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.56%)</title><rect x="1150.0" y="147.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.0" y="158.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.56%)</title><rect x="1150.0" y="131.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.0" y="142.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.56%)</title><rect x="1150.0" y="115.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.0" y="126.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.56%)</title><rect x="1150.0" y="99.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.0" y="110.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.56%)</title><rect x="1150.0" y="83.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.0" y="94.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.56%)</title><rect x="1150.0" y="67.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.0" y="78.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.56%)</title><rect x="1150.0" y="51.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.0" y="62.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.56%)</title><rect x="1150.0" y="35.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.56%)</title><rect x="1156.7" y="563.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.7" y="574.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.56%)</title><rect x="1156.7" y="547.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.7" y="558.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.56%)</title><rect x="1156.7" y="531.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="542.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.69%)</title><rect x="1163.3" y="867.0" width="20.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="878.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.69%)</title><rect x="1163.3" y="851.0" width="20.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.69%)</title><rect x="1163.3" y="835.0" width="20.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.3" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.69%)</title><rect x="1163.3" y="819.0" width="20.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.3" y="830.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.13%)</title><rect x="1163.3" y="803.0" width="13.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.3" y="814.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 1.13%)</title><rect x="1163.3" y="787.0" width="13.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.3" y="798.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 1.13%)</title><rect x="1163.3" y="771.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 1.13%)</title><rect x="1163.3" y="755.0" width="13.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.3" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.13%)</title><rect x="1163.3" y="739.0" width="13.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.3" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.13%)</title><rect x="1163.3" y="723.0" width="13.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.3" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 1.13%)</title><rect x="1163.3" y="707.0" width="13.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.3" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.56%)</title><rect x="1163.3" y="691.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.3" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1163.3" y="675.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.3" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1163.3" y="659.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="670.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.56%)</title><rect x="1170.0" y="691.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.0" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.56%)</title><rect x="1170.0" y="675.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.0" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.56%)</title><rect x="1170.0" y="659.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.0" y="670.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1170.0" y="643.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.0" y="654.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.56%)</title><rect x="1170.0" y="627.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.0" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.56%)</title><rect x="1176.7" y="803.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="814.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.56%)</title><rect x="1176.7" y="787.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="798.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.56%)</title><rect x="1176.7" y="771.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="782.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.56%)</title><rect x="1176.7" y="755.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="766.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.56%)</title><rect x="1176.7" y="739.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="750.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.56%)</title><rect x="1183.3" y="867.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.56%)</title><rect x="1183.3" y="851.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.3" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.56%)</title><rect x="1183.3" y="835.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.56%)</title><rect x="1183.3" y="819.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.3" y="830.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.56%)</title><rect x="1183.3" y="803.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="814.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.56%)</title><rect x="1183.3" y="787.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="798.0"></text>
</g>
</g>
</svg>
