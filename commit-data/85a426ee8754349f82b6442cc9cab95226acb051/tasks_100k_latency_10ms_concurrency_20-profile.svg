<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (218 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 10.55%)</title><rect x="10.0" y="1011.0" width="124.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.46%)</title><rect x="10.0" y="995.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.46%)</title><rect x="10.0" y="979.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.46%)</title><rect x="10.0" y="963.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.46%)</title><rect x="10.0" y="947.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="10.0" y="931.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="10.0" y="915.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="10.0" y="899.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.46%)</title><rect x="10.0" y="883.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.46%)</title><rect x="10.0" y="867.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.46%)</title><rect x="10.0" y="851.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.46%)</title><rect x="10.0" y="835.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.46%)</title><rect x="10.0" y="819.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.46%)</title><rect x="10.0" y="803.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.46%)</title><rect x="10.0" y="787.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.46%)</title><rect x="10.0" y="771.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.46%)</title><rect x="10.0" y="755.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.46%)</title><rect x="10.0" y="739.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.46%)</title><rect x="10.0" y="723.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.46%)</title><rect x="10.0" y="707.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.46%)</title><rect x="10.0" y="691.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>__read (1 samples, 0.46%)</title><rect x="10.0" y="675.0" width="5.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (22 samples, 10.09%)</title><rect x="15.4" y="995.0" width="119.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.4" y="1006.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 1.38%)</title><rect x="15.4" y="979.0" width="16.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.92%)</title><rect x="15.4" y="963.0" width="10.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.46%)</title><rect x="20.8" y="947.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.46%)</title><rect x="20.8" y="931.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.46%)</title><rect x="20.8" y="915.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.46%)</title><rect x="20.8" y="899.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.46%)</title><rect x="20.8" y="883.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.46%)</title><rect x="20.8" y="867.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.46%)</title><rect x="20.8" y="851.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.46%)</title><rect x="26.2" y="963.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.2" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 4.13%)</title><rect x="31.7" y="979.0" width="48.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.7" y="990.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/227670971.accept (7 samples, 3.21%)</title><rect x="31.7" y="963.0" width="37.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.7" y="974.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (7 samples, 3.21%)</title><rect x="31.7" y="947.0" width="37.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.7" y="958.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.46%)</title><rect x="31.7" y="931.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.46%)</title><rect x="31.7" y="915.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.46%)</title><rect x="31.7" y="899.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.46%)</title><rect x="31.7" y="883.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.46%)</title><rect x="31.7" y="867.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.46%)</title><rect x="31.7" y="851.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.46%)</title><rect x="31.7" y="835.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.46%)</title><rect x="31.7" y="819.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.46%)</title><rect x="31.7" y="803.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.46%)</title><rect x="31.7" y="787.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (6 samples, 2.75%)</title><rect x="37.1" y="931.0" width="32.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.1" y="942.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.38%)</title><rect x="42.5" y="915.0" width="16.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.5" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.38%)</title><rect x="42.5" y="899.0" width="16.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.5" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.38%)</title><rect x="42.5" y="883.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.5" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.38%)</title><rect x="42.5" y="867.0" width="16.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.5" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.38%)</title><rect x="42.5" y="851.0" width="16.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="45.5" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.92%)</title><rect x="47.9" y="835.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="50.9" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.92%)</title><rect x="47.9" y="819.0" width="10.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="50.9" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.46%)</title><rect x="53.3" y="803.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="56.3" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.46%)</title><rect x="53.3" y="787.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="56.3" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.46%)</title><rect x="53.3" y="771.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="56.3" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.92%)</title><rect x="58.7" y="915.0" width="10.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="61.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.92%)</title><rect x="69.5" y="963.0" width="10.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.46%)</title><rect x="75.0" y="947.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.59%)</title><rect x="80.4" y="979.0" width="54.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.4" y="990.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.59%)</title><rect x="80.4" y="963.0" width="54.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.4" y="974.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.75%)</title><rect x="80.4" y="947.0" width="32.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.4" y="958.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="80.4" y="931.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="80.4" y="915.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.46%)</title><rect x="80.4" y="899.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.46%)</title><rect x="80.4" y="883.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.46%)</title><rect x="80.4" y="867.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.4" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.46%)</title><rect x="80.4" y="851.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.4" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.46%)</title><rect x="80.4" y="835.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.46%)</title><rect x="80.4" y="819.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.4" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.46%)</title><rect x="80.4" y="803.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.4" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.46%)</title><rect x="80.4" y="787.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.4" y="798.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.46%)</title><rect x="80.4" y="771.0" width="5.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="83.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.83%)</title><rect x="85.8" y="931.0" width="21.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.8" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.83%)</title><rect x="85.8" y="915.0" width="21.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.8" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.38%)</title><rect x="85.8" y="899.0" width="16.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.38%)</title><rect x="85.8" y="883.0" width="16.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.92%)</title><rect x="85.8" y="867.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.46%)</title><rect x="91.2" y="851.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (1 samples, 0.46%)</title><rect x="91.2" y="835.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.46%)</title><rect x="96.6" y="867.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.46%)</title><rect x="96.6" y="851.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.46%)</title><rect x="96.6" y="835.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.6" y="846.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.46%)</title><rect x="96.6" y="819.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.46%)</title><rect x="102.0" y="899.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.46%)</title><rect x="102.0" y="883.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.46%)</title><rect x="102.0" y="867.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.46%)</title><rect x="102.0" y="851.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.46%)</title><rect x="102.0" y="835.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.46%)</title><rect x="102.0" y="819.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.46%)</title><rect x="107.4" y="931.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.92%)</title><rect x="112.8" y="947.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="115.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.92%)</title><rect x="112.8" y="931.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.92%)</title><rect x="112.8" y="915.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.92%)</title><rect x="112.8" y="899.0" width="10.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="115.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/583464164.accept (2 samples, 0.92%)</title><rect x="112.8" y="883.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.92%)</title><rect x="112.8" y="867.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.92%)</title><rect x="112.8" y="851.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.46%)</title><rect x="112.8" y="835.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="115.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.46%)</title><rect x="112.8" y="819.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="115.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.46%)</title><rect x="112.8" y="803.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.46%)</title><rect x="118.3" y="835.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.46%)</title><rect x="118.3" y="819.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="121.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.46%)</title><rect x="118.3" y="803.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.46%)</title><rect x="118.3" y="787.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="121.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.46%)</title><rect x="123.7" y="947.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.46%)</title><rect x="123.7" y="931.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.46%)</title><rect x="123.7" y="915.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="123.7" y="899.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="123.7" y="883.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="126.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.46%)</title><rect x="123.7" y="867.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="126.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.46%)</title><rect x="123.7" y="851.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="126.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.46%)</title><rect x="123.7" y="835.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.setLeaderEpochIfExists (1 samples, 0.46%)</title><rect x="123.7" y="819.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.46%)</title><rect x="123.7" y="803.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="126.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.46%)</title><rect x="123.7" y="787.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.46%)</title><rect x="123.7" y="771.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.46%)</title><rect x="129.1" y="947.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.46%)</title><rect x="129.1" y="931.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.1" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.46%)</title><rect x="129.1" y="915.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/22324372.accept (1 samples, 0.46%)</title><rect x="129.1" y="899.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="132.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.46%)</title><rect x="129.1" y="883.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.46%)</title><rect x="129.1" y="867.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="132.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.46%)</title><rect x="129.1" y="851.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.46%)</title><rect x="129.1" y="835.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="132.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (158 samples, 72.48%)</title><rect x="134.5" y="1011.0" width="855.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="137.5" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (158 samples, 72.48%)</title><rect x="134.5" y="995.0" width="855.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.5" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (158 samples, 72.48%)</title><rect x="134.5" y="979.0" width="855.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="137.5" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1995388547.run (152 samples, 69.72%)</title><rect x="134.5" y="963.0" width="822.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="137.5" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1995388547.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (152 samples, 69.72%)</title><rect x="134.5" y="947.0" width="822.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="137.5" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (152 samples, 69.72%)</title><rect x="134.5" y="931.0" width="822.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="137.5" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (148 samples, 67.89%)</title><rect x="134.5" y="915.0" width="801.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.5" y="926.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (32 samples, 14.68%)</title><rect x="156.1" y="899.0" width="173.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.1" y="910.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (32 samples, 14.68%)</title><rect x="156.1" y="883.0" width="173.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="159.1" y="894.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (32 samples, 14.68%)</title><rect x="156.1" y="867.0" width="173.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="159.1" y="878.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 14.68%)</title><rect x="156.1" y="851.0" width="173.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="159.1" y="862.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 14.68%)</title><rect x="156.1" y="835.0" width="173.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.1" y="846.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (32 samples, 14.68%)</title><rect x="156.1" y="819.0" width="173.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="159.1" y="830.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 4.59%)</title><rect x="167.0" y="803.0" width="54.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.0" y="814.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.46%)</title><rect x="167.0" y="787.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.46%)</title><rect x="167.0" y="771.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="170.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.46%)</title><rect x="167.0" y="755.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="170.0" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.46%)</title><rect x="167.0" y="739.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="170.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.46%)</title><rect x="167.0" y="723.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="170.0" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.46%)</title><rect x="167.0" y="707.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.0" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.46%)</title><rect x="167.0" y="691.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.46%)</title><rect x="167.0" y="675.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.46%)</title><rect x="167.0" y="659.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="170.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.46%)</title><rect x="167.0" y="643.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.0" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.46%)</title><rect x="167.0" y="627.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="170.0" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.46%)</title><rect x="167.0" y="611.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="170.0" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.46%)</title><rect x="167.0" y="595.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="170.0" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.46%)</title><rect x="167.0" y="579.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="170.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (9 samples, 4.13%)</title><rect x="172.4" y="787.0" width="48.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.4" y="798.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 2.75%)</title><rect x="188.6" y="771.0" width="32.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.6" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.46%)</title><rect x="188.6" y="755.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="191.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.46%)</title><rect x="188.6" y="739.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.46%)</title><rect x="194.0" y="755.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.46%)</title><rect x="194.0" y="739.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.46%)</title><rect x="194.0" y="723.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.0" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.46%)</title><rect x="194.0" y="707.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="197.0" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.46%)</title><rect x="194.0" y="691.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="197.0" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.46%)</title><rect x="194.0" y="675.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="197.0" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.46%)</title><rect x="194.0" y="659.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="197.0" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.46%)</title><rect x="194.0" y="643.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="197.0" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.46%)</title><rect x="194.0" y="627.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="197.0" y="638.0"></text>
</g>
<g>
<title>Thread::is_VM_thread() const (1 samples, 0.46%)</title><rect x="194.0" y="611.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="197.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (4 samples, 1.83%)</title><rect x="199.4" y="755.0" width="21.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.4" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 8.26%)</title><rect x="221.1" y="803.0" width="97.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.1" y="814.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.46%)</title><rect x="221.1" y="787.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.46%)</title><rect x="221.1" y="771.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="224.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 2.75%)</title><rect x="226.5" y="787.0" width="32.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.5" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.75%)</title><rect x="226.5" y="771.0" width="32.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.5" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 2.75%)</title><rect x="226.5" y="755.0" width="32.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.5" y="766.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 2.75%)</title><rect x="226.5" y="739.0" width="32.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.5" y="750.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.46%)</title><rect x="237.3" y="723.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="240.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.46%)</title><rect x="237.3" y="707.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="240.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.46%)</title><rect x="237.3" y="691.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="240.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.46%)</title><rect x="237.3" y="675.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="240.3" y="686.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.46%)</title><rect x="237.3" y="659.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="240.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 1.38%)</title><rect x="242.8" y="723.0" width="16.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.92%)</title><rect x="259.0" y="787.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.92%)</title><rect x="259.0" y="771.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 3.67%)</title><rect x="269.8" y="787.0" width="43.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.8" y="798.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.46%)</title><rect x="275.2" y="771.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.46%)</title><rect x="275.2" y="755.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.46%)</title><rect x="275.2" y="739.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.46%)</title><rect x="275.2" y="723.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.75%)</title><rect x="280.6" y="771.0" width="32.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.6" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.75%)</title><rect x="280.6" y="755.0" width="32.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.6" y="766.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.75%)</title><rect x="280.6" y="739.0" width="32.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.6" y="750.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.92%)</title><rect x="280.6" y="723.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.46%)</title><rect x="286.1" y="707.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.46%)</title><rect x="291.5" y="723.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.46%)</title><rect x="291.5" y="707.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.46%)</title><rect x="291.5" y="691.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.46%)</title><rect x="291.5" y="675.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.5" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.46%)</title><rect x="291.5" y="659.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 1.38%)</title><rect x="296.9" y="723.0" width="16.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.38%)</title><rect x="296.9" y="707.0" width="16.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.9" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.38%)</title><rect x="296.9" y="691.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.46%)</title><rect x="307.7" y="675.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.46%)</title><rect x="313.1" y="787.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.92%)</title><rect x="318.5" y="803.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.92%)</title><rect x="318.5" y="787.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.92%)</title><rect x="318.5" y="771.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.92%)</title><rect x="318.5" y="755.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.92%)</title><rect x="318.5" y="739.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (107 samples, 49.08%)</title><rect x="329.4" y="899.0" width="579.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.4" y="910.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (17 samples, 7.80%)</title><rect x="329.4" y="883.0" width="92.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.4" y="894.0">com/linecor..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 7.34%)</title><rect x="334.8" y="867.0" width="86.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.8" y="878.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 5.96%)</title><rect x="351.0" y="851.0" width="70.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.0" y="862.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.46%)</title><rect x="351.0" y="835.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.0" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.46%)</title><rect x="351.0" y="819.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.46%)</title><rect x="351.0" y="803.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.0" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.46%)</title><rect x="351.0" y="787.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.0" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 5.50%)</title><rect x="356.4" y="835.0" width="65.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.4" y="846.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 5.05%)</title><rect x="361.8" y="819.0" width="59.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="364.8" y="830.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 3.21%)</title><rect x="383.5" y="803.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="386.5" y="814.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (21 samples, 9.63%)</title><rect x="421.4" y="883.0" width="113.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="424.4" y="894.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (21 samples, 9.63%)</title><rect x="421.4" y="867.0" width="113.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="424.4" y="878.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 3.67%)</title><rect x="421.4" y="851.0" width="43.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="424.4" y="862.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 3.21%)</title><rect x="426.8" y="835.0" width="37.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="429.8" y="846.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 3.21%)</title><rect x="426.8" y="819.0" width="37.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="429.8" y="830.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 2.29%)</title><rect x="432.2" y="803.0" width="27.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="435.2" y="814.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 2.29%)</title><rect x="432.2" y="787.0" width="27.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.2" y="798.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 2.29%)</title><rect x="432.2" y="771.0" width="27.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="435.2" y="782.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.92%)</title><rect x="443.0" y="755.0" width="10.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="446.0" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.92%)</title><rect x="443.0" y="739.0" width="10.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="446.0" y="750.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.46%)</title><rect x="448.4" y="723.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="451.4" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.46%)</title><rect x="453.9" y="755.0" width="5.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="456.9" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.46%)</title><rect x="459.3" y="803.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="462.3" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 5.96%)</title><rect x="464.7" y="851.0" width="70.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="467.7" y="862.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 5.96%)</title><rect x="464.7" y="835.0" width="70.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="467.7" y="846.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.92%)</title><rect x="464.7" y="819.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="467.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.92%)</title><rect x="464.7" y="803.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="467.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.92%)</title><rect x="464.7" y="787.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.92%)</title><rect x="464.7" y="771.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="467.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.46%)</title><rect x="470.1" y="755.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.46%)</title><rect x="470.1" y="739.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.1" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 5.05%)</title><rect x="475.5" y="819.0" width="59.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.5" y="830.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 4.59%)</title><rect x="480.9" y="803.0" width="54.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="483.9" y="814.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 2.75%)</title><rect x="502.6" y="787.0" width="32.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="505.6" y="798.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.46%)</title><rect x="529.6" y="771.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="532.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (62 samples, 28.44%)</title><rect x="535.0" y="883.0" width="335.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="538.0" y="894.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (62 samples, 28.44%)</title><rect x="535.0" y="867.0" width="335.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="538.0" y="878.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.46%)</title><rect x="545.9" y="851.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="548.9" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.46%)</title><rect x="545.9" y="835.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="548.9" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.46%)</title><rect x="545.9" y="819.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="548.9" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.46%)</title><rect x="545.9" y="803.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="548.9" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.46%)</title><rect x="545.9" y="787.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="548.9" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.46%)</title><rect x="545.9" y="771.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="548.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/961380999.process (58 samples, 26.61%)</title><rect x="551.3" y="851.0" width="313.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="554.3" y="862.0">com/linecorp/decaton/benchmark/DecatonRunn..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.46%)</title><rect x="551.3" y="835.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="554.3" y="846.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.46%)</title><rect x="551.3" y="819.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="554.3" y="830.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.46%)</title><rect x="551.3" y="803.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="554.3" y="814.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.46%)</title><rect x="551.3" y="787.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="554.3" y="798.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.46%)</title><rect x="551.3" y="771.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="554.3" y="782.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.46%)</title><rect x="551.3" y="755.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="554.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (57 samples, 26.15%)</title><rect x="556.7" y="835.0" width="308.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="559.7" y="846.0">com/linecorp/decaton/benchmark/DecatonRunn..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (55 samples, 25.23%)</title><rect x="556.7" y="819.0" width="297.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="559.7" y="830.0">com/linecorp/decaton/benchmark/Recording..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (6 samples, 2.75%)</title><rect x="556.7" y="803.0" width="32.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="559.7" y="814.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.46%)</title><rect x="583.8" y="787.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="586.8" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.46%)</title><rect x="583.8" y="771.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="586.8" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.46%)</title><rect x="583.8" y="755.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="586.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (49 samples, 22.48%)</title><rect x="589.2" y="803.0" width="265.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="592.2" y="814.0">com/linecorp/decaton/benchmark/Reco..</text>
</g>
<g>
<title>java/lang/Thread.sleep (48 samples, 22.02%)</title><rect x="589.2" y="787.0" width="259.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="592.2" y="798.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (41 samples, 18.81%)</title><rect x="621.7" y="771.0" width="221.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="624.7" y="782.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.92%)</title><rect x="643.3" y="755.0" width="10.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="646.3" y="766.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.92%)</title><rect x="654.1" y="755.0" width="10.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="657.1" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.38%)</title><rect x="665.0" y="755.0" width="16.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="668.0" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="675.8" y="739.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="678.8" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.46%)</title><rect x="681.2" y="755.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="684.2" y="766.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 13.30%)</title><rect x="686.6" y="755.0" width="157.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="689.6" y="766.0">os::sleep(Thread*, l..</text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.38%)</title><rect x="729.9" y="739.0" width="16.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="732.9" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 3.67%)</title><rect x="746.1" y="739.0" width="43.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="749.1" y="750.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 1.38%)</title><rect x="789.4" y="739.0" width="16.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="792.4" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.38%)</title><rect x="805.7" y="739.0" width="16.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="808.7" y="750.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 1.38%)</title><rect x="821.9" y="739.0" width="16.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="824.9" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.46%)</title><rect x="838.2" y="739.0" width="5.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="841.2" y="750.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.46%)</title><rect x="843.6" y="771.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="846.6" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.46%)</title><rect x="849.0" y="787.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="852.0" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="849.0" y="771.0" width="5.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="852.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.46%)</title><rect x="854.4" y="819.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="857.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.46%)</title><rect x="854.4" y="803.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="857.4" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.46%)</title><rect x="854.4" y="787.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.4" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.46%)</title><rect x="854.4" y="771.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="857.4" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.getId (1 samples, 0.46%)</title><rect x="859.8" y="819.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="862.8" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.46%)</title><rect x="865.2" y="851.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="868.2" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.46%)</title><rect x="865.2" y="835.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="868.2" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.46%)</title><rect x="865.2" y="819.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="868.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 3.21%)</title><rect x="870.6" y="883.0" width="37.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="873.6" y="894.0">jav..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="892.3" y="867.0" width="5.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="895.3" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="892.3" y="851.0" width="5.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="895.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.92%)</title><rect x="897.7" y="867.0" width="10.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="900.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.92%)</title><rect x="897.7" y="851.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="900.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/485823199.accept (2 samples, 0.92%)</title><rect x="897.7" y="835.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="900.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.92%)</title><rect x="897.7" y="819.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="900.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.46%)</title><rect x="897.7" y="803.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="900.7" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.46%)</title><rect x="897.7" y="787.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.7" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.46%)</title><rect x="897.7" y="771.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.7" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.46%)</title><rect x="897.7" y="755.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="900.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.46%)</title><rect x="897.7" y="739.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="900.7" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.46%)</title><rect x="903.1" y="803.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="906.1" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.46%)</title><rect x="903.1" y="787.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="906.1" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (2 samples, 0.92%)</title><rect x="908.5" y="899.0" width="10.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="911.5" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (2 samples, 0.92%)</title><rect x="908.5" y="883.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/1978283842.get$Lambda (2 samples, 0.92%)</title><rect x="908.5" y="867.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="911.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.92%)</title><rect x="908.5" y="851.0" width="10.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="911.5" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.46%)</title><rect x="908.5" y="835.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="911.5" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.46%)</title><rect x="913.9" y="835.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.9" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.46%)</title><rect x="913.9" y="819.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="916.9" y="830.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.46%)</title><rect x="913.9" y="803.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.38%)</title><rect x="919.4" y="899.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="922.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.92%)</title><rect x="924.8" y="883.0" width="10.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="927.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.46%)</title><rect x="930.2" y="867.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="933.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/1978283842.accept (1 samples, 0.46%)</title><rect x="930.2" y="851.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="933.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (1 samples, 0.46%)</title><rect x="930.2" y="835.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="933.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/337657888.complete (1 samples, 0.46%)</title><rect x="930.2" y="819.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="933.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (1 samples, 0.46%)</title><rect x="930.2" y="803.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="933.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.46%)</title><rect x="930.2" y="787.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="933.2" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.46%)</title><rect x="930.2" y="771.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="933.2" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.46%)</title><rect x="930.2" y="755.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="933.2" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.46%)</title><rect x="930.2" y="739.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="933.2" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.46%)</title><rect x="930.2" y="723.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="933.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 1.83%)</title><rect x="935.6" y="915.0" width="21.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="938.6" y="926.0">c..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.46%)</title><rect x="957.2" y="963.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="960.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.46%)</title><rect x="957.2" y="947.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="960.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.46%)</title><rect x="957.2" y="931.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="960.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.46%)</title><rect x="957.2" y="915.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="960.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 2.29%)</title><rect x="962.7" y="963.0" width="27.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="965.7" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 2.29%)</title><rect x="962.7" y="947.0" width="27.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="965.7" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.83%)</title><rect x="968.1" y="931.0" width="21.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="971.1" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.83%)</title><rect x="968.1" y="915.0" width="21.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="971.1" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.83%)</title><rect x="968.1" y="899.0" width="21.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="971.1" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.83%)</title><rect x="968.1" y="883.0" width="21.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="971.1" y="894.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.92%)</title><rect x="989.7" y="1011.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="992.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.46%)</title><rect x="989.7" y="995.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="992.7" y="1006.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.46%)</title><rect x="989.7" y="979.0" width="5.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="992.7" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.46%)</title><rect x="989.7" y="963.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.7" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.46%)</title><rect x="989.7" y="947.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.46%)</title><rect x="995.1" y="995.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="998.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="995.1" y="979.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="998.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.46%)</title><rect x="995.1" y="963.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="998.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.46%)</title><rect x="995.1" y="947.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="998.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.recoverableException (1 samples, 0.46%)</title><rect x="995.1" y="931.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="998.1" y="942.0"></text>
</g>
<g>
<title>start_thread (35 samples, 16.06%)</title><rect x="1000.6" y="1011.0" width="189.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1003.6" y="1022.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (35 samples, 16.06%)</title><rect x="1000.6" y="995.0" width="189.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1003.6" y="1006.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 1.38%)</title><rect x="1000.6" y="979.0" width="16.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1003.6" y="990.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.92%)</title><rect x="1000.6" y="963.0" width="10.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1003.6" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.92%)</title><rect x="1000.6" y="947.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1003.6" y="958.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.92%)</title><rect x="1000.6" y="931.0" width="10.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1003.6" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.46%)</title><rect x="1006.0" y="915.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.0" y="926.0"></text>
</g>
<g>
<title>Monitor::notify_all() (1 samples, 0.46%)</title><rect x="1011.4" y="963.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.4" y="974.0"></text>
</g>
<g>
<title>JavaThread::run() (30 samples, 13.76%)</title><rect x="1016.8" y="979.0" width="162.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1019.8" y="990.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (30 samples, 13.76%)</title><rect x="1016.8" y="963.0" width="162.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1019.8" y="974.0">JavaThread::thread_ma..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (30 samples, 13.76%)</title><rect x="1016.8" y="947.0" width="162.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1019.8" y="958.0">CompileBroker::compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (28 samples, 12.84%)</title><rect x="1016.8" y="931.0" width="151.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1019.8" y="942.0">CompileBroker::invo..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (25 samples, 11.47%)</title><rect x="1016.8" y="915.0" width="135.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1019.8" y="926.0">C2Compiler::compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (25 samples, 11.47%)</title><rect x="1016.8" y="899.0" width="135.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1019.8" y="910.0">Compile::Compile(..</text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 7.80%)</title><rect x="1016.8" y="883.0" width="92.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1019.8" y="894.0">Compile::Co..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 1.83%)</title><rect x="1016.8" y="867.0" width="21.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1019.8" y="878.0">C..</text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.46%)</title><rect x="1016.8" y="851.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1019.8" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.46%)</title><rect x="1016.8" y="835.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1019.8" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.46%)</title><rect x="1016.8" y="819.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1019.8" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.92%)</title><rect x="1022.2" y="851.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.2" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.46%)</title><rect x="1022.2" y="835.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1025.2" y="846.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.46%)</title><rect x="1027.6" y="835.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.6" y="846.0"></text>
</g>
<g>
<title>indIndexOffsetOper::index(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.46%)</title><rect x="1033.0" y="851.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.0" y="862.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.38%)</title><rect x="1038.4" y="867.0" width="16.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1041.4" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.38%)</title><rect x="1038.4" y="851.0" width="16.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1041.4" y="862.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.92%)</title><rect x="1043.9" y="835.0" width="10.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1046.9" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.92%)</title><rect x="1043.9" y="819.0" width="10.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.9" y="830.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.46%)</title><rect x="1043.9" y="803.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.9" y="814.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.46%)</title><rect x="1049.3" y="803.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1052.3" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.92%)</title><rect x="1054.7" y="867.0" width="10.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1057.7" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.92%)</title><rect x="1054.7" y="851.0" width="10.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.7" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.46%)</title><rect x="1054.7" y="835.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.7" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.46%)</title><rect x="1060.1" y="835.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1063.1" y="846.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.46%)</title><rect x="1060.1" y="819.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.1" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (8 samples, 3.67%)</title><rect x="1065.5" y="867.0" width="43.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1068.5" y="878.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.92%)</title><rect x="1065.5" y="851.0" width="10.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1068.5" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="1065.5" y="835.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1068.5" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.46%)</title><rect x="1070.9" y="835.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.9" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="1070.9" y="819.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.9" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.92%)</title><rect x="1076.3" y="851.0" width="10.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.46%)</title><rect x="1087.2" y="851.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.2" y="862.0"></text>
</g>
<g>
<title>cmpOpUOper::num_edges() const (1 samples, 0.46%)</title><rect x="1087.2" y="835.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.2" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.38%)</title><rect x="1092.6" y="851.0" width="16.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.6" y="862.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.46%)</title><rect x="1103.4" y="835.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.4" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 3.21%)</title><rect x="1108.8" y="883.0" width="37.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.8" y="894.0">Com..</text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.46%)</title><rect x="1108.8" y="867.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.8" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.46%)</title><rect x="1108.8" y="851.0" width="5.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1111.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 1.83%)</title><rect x="1114.2" y="867.0" width="21.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.2" y="878.0">P..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.46%)</title><rect x="1114.2" y="851.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.92%)</title><rect x="1119.6" y="851.0" width="10.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.46%)</title><rect x="1130.5" y="851.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.5" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.46%)</title><rect x="1135.9" y="867.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.9" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.46%)</title><rect x="1135.9" y="851.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.9" y="862.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.46%)</title><rect x="1141.3" y="867.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1144.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1146.7" y="883.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1146.7" y="867.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1146.7" y="851.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1146.7" y="835.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1146.7" y="819.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1146.7" y="803.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1146.7" y="787.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1146.7" y="771.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1146.7" y="755.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1146.7" y="739.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1146.7" y="723.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1146.7" y="707.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.7" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1146.7" y="691.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1146.7" y="675.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1146.7" y="659.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1146.7" y="643.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1146.7" y="627.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1146.7" y="611.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1146.7" y="595.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1146.7" y="579.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1146.7" y="563.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1146.7" y="547.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1146.7" y="531.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1146.7" y="515.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1146.7" y="499.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1146.7" y="483.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1146.7" y="467.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1146.7" y="451.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1146.7" y="435.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1146.7" y="419.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1146.7" y="403.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1146.7" y="387.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1146.7" y="371.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1146.7" y="355.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1146.7" y="339.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1146.7" y="323.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1146.7" y="307.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1146.7" y="291.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.7" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1146.7" y="275.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1146.7" y="259.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1146.7" y="243.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1146.7" y="227.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1146.7" y="211.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.7" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1146.7" y="195.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.7" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1146.7" y="179.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1146.7" y="163.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1146.7" y="147.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1146.7" y="131.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1146.7" y="115.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.7" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1146.7" y="99.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.7" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1146.7" y="83.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.7" y="94.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.46%)</title><rect x="1146.7" y="67.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.7" y="78.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.46%)</title><rect x="1146.7" y="51.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.7" y="62.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.46%)</title><rect x="1146.7" y="35.0" width="5.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1149.7" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.38%)</title><rect x="1152.1" y="915.0" width="16.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.1" y="926.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.38%)</title><rect x="1152.1" y="899.0" width="16.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.38%)</title><rect x="1152.1" y="883.0" width="16.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.1" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.38%)</title><rect x="1152.1" y="867.0" width="16.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.1" y="878.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.46%)</title><rect x="1152.1" y="851.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.1" y="862.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.46%)</title><rect x="1152.1" y="835.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="846.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.46%)</title><rect x="1152.1" y="819.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.1" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.46%)</title><rect x="1152.1" y="803.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.1" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.46%)</title><rect x="1152.1" y="787.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.46%)</title><rect x="1152.1" y="771.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.1" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.46%)</title><rect x="1152.1" y="755.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.1" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.46%)</title><rect x="1152.1" y="739.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.1" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.46%)</title><rect x="1152.1" y="723.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.1" y="734.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.46%)</title><rect x="1152.1" y="707.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="718.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.46%)</title><rect x="1152.1" y="691.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.1" y="702.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle, Thread*) (1 samples, 0.46%)</title><rect x="1152.1" y="675.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.1" y="686.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle, Thread*) (1 samples, 0.46%)</title><rect x="1152.1" y="659.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.1" y="670.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, bool, MetaspaceObj::Type, Thread*) (1 samples, 0.46%)</title><rect x="1152.1" y="643.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.1" y="654.0"></text>
</g>
<g>
<title>SpaceManager::allocate(unsigned long) (1 samples, 0.46%)</title><rect x="1152.1" y="627.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.92%)</title><rect x="1157.5" y="851.0" width="10.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="862.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.92%)</title><rect x="1157.5" y="835.0" width="10.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.5" y="846.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.92%)</title><rect x="1157.5" y="819.0" width="10.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="830.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (2 samples, 0.92%)</title><rect x="1157.5" y="803.0" width="10.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.5" y="814.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (2 samples, 0.92%)</title><rect x="1157.5" y="787.0" width="10.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="798.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (2 samples, 0.92%)</title><rect x="1157.5" y="771.0" width="10.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.5" y="782.0"></text>
</g>
<g>
<title>LinearScanWalker::set_use_pos(Interval*, int, bool) (1 samples, 0.46%)</title><rect x="1162.9" y="755.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.9" y="766.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.92%)</title><rect x="1168.3" y="931.0" width="10.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.46%)</title><rect x="1173.8" y="915.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.46%)</title><rect x="1173.8" y="899.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.46%)</title><rect x="1173.8" y="883.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="894.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.46%)</title><rect x="1179.2" y="979.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.2" y="990.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.46%)</title><rect x="1184.6" y="979.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.6" y="990.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.46%)</title><rect x="1184.6" y="963.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.6" y="974.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.46%)</title><rect x="1184.6" y="947.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.6" y="958.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.46%)</title><rect x="1184.6" y="931.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="942.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.46%)</title><rect x="1184.6" y="915.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.6" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.46%)</title><rect x="1184.6" y="899.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="910.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::used_region() const (1 samples, 0.46%)</title><rect x="1184.6" y="883.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.6" y="894.0"></text>
</g>
</g>
</svg>
