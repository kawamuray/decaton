<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (1,440 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (271 samples, 18.82%)</title><rect x="10.0" y="1299.0" width="222.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1310.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (270 samples, 18.75%)</title><rect x="10.8" y="1283.0" width="221.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.8" y="1294.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.28%)</title><rect x="10.8" y="1267.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.8" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.21%)</title><rect x="11.6" y="1251.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.6" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/983242277.accept (3 samples, 0.21%)</title><rect x="11.6" y="1235.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.6" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.21%)</title><rect x="11.6" y="1219.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.21%)</title><rect x="11.6" y="1203.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.6" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.21%)</title><rect x="11.6" y="1187.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.14%)</title><rect x="14.1" y="1267.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.14%)</title><rect x="14.1" y="1251.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.1" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="14.9" y="1235.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.9" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="14.9" y="1219.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="14.9" y="1203.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="14.9" y="1187.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="14.9" y="1171.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="14.9" y="1155.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="15.7" y="1267.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.7" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="15.7" y="1251.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.7" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="15.7" y="1235.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.7" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="15.7" y="1219.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="15.7" y="1203.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="15.7" y="1187.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="15.7" y="1171.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.7" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="15.7" y="1155.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="15.7" y="1139.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="15.7" y="1123.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.7" y="1134.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="15.7" y="1107.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="18.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (207 samples, 14.38%)</title><rect x="16.6" y="1267.0" width="169.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="1278.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/227670971.accept (199 samples, 13.82%)</title><rect x="16.6" y="1251.0" width="163.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.6" y="1262.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (199 samples, 13.82%)</title><rect x="16.6" y="1235.0" width="163.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.6" y="1246.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (164 samples, 11.39%)</title><rect x="18.2" y="1219.0" width="134.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.2" y="1230.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (164 samples, 11.39%)</title><rect x="18.2" y="1203.0" width="134.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.2" y="1214.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (164 samples, 11.39%)</title><rect x="18.2" y="1187.0" width="134.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.2" y="1198.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (164 samples, 11.39%)</title><rect x="18.2" y="1171.0" width="134.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.2" y="1182.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (164 samples, 11.39%)</title><rect x="18.2" y="1155.0" width="134.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.2" y="1166.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (142 samples, 9.86%)</title><rect x="35.4" y="1139.0" width="116.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.4" y="1150.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (109 samples, 7.57%)</title><rect x="60.0" y="1123.0" width="89.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.0" y="1134.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (17 samples, 1.18%)</title><rect x="67.4" y="1107.0" width="13.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (17 samples, 1.18%)</title><rect x="67.4" y="1091.0" width="13.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.18%)</title><rect x="67.4" y="1075.0" width="13.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (83 samples, 5.76%)</title><rect x="81.3" y="1107.0" width="68.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.3" y="1118.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (83 samples, 5.76%)</title><rect x="81.3" y="1091.0" width="68.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.3" y="1102.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (83 samples, 5.76%)</title><rect x="81.3" y="1075.0" width="68.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.3" y="1086.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 5.76%)</title><rect x="81.3" y="1059.0" width="68.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.3" y="1070.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (80 samples, 5.56%)</title><rect x="83.7" y="1043.0" width="65.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.7" y="1054.0">sun/mis..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="84.6" y="1027.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="87.6" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Unpark (70 samples, 4.86%)</title><rect x="85.4" y="1027.0" width="57.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="88.4" y="1038.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="85.4" y="1011.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="88.4" y="1022.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="87.0" y="1011.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="90.0" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_signal (56 samples, 3.89%)</title><rect x="87.8" y="1011.0" width="45.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="90.8" y="1022.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.14%)</title><rect x="133.7" y="1011.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="136.7" y="1022.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.62%)</title><rect x="135.4" y="1011.0" width="7.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="138.4" y="1022.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="142.7" y="1027.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="145.7" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.35%)</title><rect x="143.6" y="1027.0" width="4.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="146.6" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="147.7" y="1027.0" width="1.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="150.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.21%)</title><rect x="149.3" y="1123.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.21%)</title><rect x="149.3" y="1107.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.21%)</title><rect x="149.3" y="1091.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.21%)</title><rect x="149.3" y="1075.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="152.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="151.8" y="1139.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.07%)</title><rect x="151.8" y="1123.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="154.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.07%)</title><rect x="151.8" y="1107.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="154.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.07%)</title><rect x="151.8" y="1091.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.07%)</title><rect x="152.6" y="1219.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.07%)</title><rect x="152.6" y="1203.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.35%)</title><rect x="153.4" y="1219.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.4" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.35%)</title><rect x="153.4" y="1203.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.4" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.35%)</title><rect x="153.4" y="1187.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="156.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (23 samples, 1.60%)</title><rect x="157.5" y="1219.0" width="18.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.42%)</title><rect x="167.3" y="1203.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.42%)</title><rect x="167.3" y="1187.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.14%)</title><rect x="167.3" y="1171.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.14%)</title><rect x="167.3" y="1155.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.14%)</title><rect x="167.3" y="1139.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.3" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="168.2" y="1123.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="171.2" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="168.2" y="1107.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="171.2" y="1118.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="168.2" y="1091.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="171.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.21%)</title><rect x="169.0" y="1171.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.07%)</title><rect x="171.4" y="1171.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="174.4" y="1182.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="172.2" y="1203.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="175.2" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="173.1" y="1203.0" width="3.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="176.1" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="176.3" y="1219.0" width="3.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="179.3" y="1230.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="179.6" y="1251.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="182.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.35%)</title><rect x="180.4" y="1251.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.35%)</title><rect x="180.4" y="1235.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.35%)</title><rect x="180.4" y="1219.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.35%)</title><rect x="180.4" y="1203.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.4" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.07%)</title><rect x="182.9" y="1187.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.9" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.07%)</title><rect x="183.7" y="1187.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="186.7" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="183.7" y="1171.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.14%)</title><rect x="184.5" y="1251.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.14%)</title><rect x="184.5" y="1235.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="187.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="185.4" y="1219.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="185.4" y="1203.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="185.4" y="1187.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.4" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.07%)</title><rect x="185.4" y="1171.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="188.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 3.89%)</title><rect x="186.2" y="1267.0" width="45.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.2" y="1278.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 3.89%)</title><rect x="186.2" y="1251.0" width="45.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="189.2" y="1262.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (29 samples, 2.01%)</title><rect x="186.2" y="1235.0" width="23.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.2" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (29 samples, 2.01%)</title><rect x="186.2" y="1219.0" width="23.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.2" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (29 samples, 2.01%)</title><rect x="186.2" y="1203.0" width="23.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.2" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 1.81%)</title><rect x="186.2" y="1187.0" width="21.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.2" y="1198.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 1.81%)</title><rect x="186.2" y="1171.0" width="21.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="189.2" y="1182.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (9 samples, 0.62%)</title><rect x="190.3" y="1155.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="193.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.28%)</title><rect x="193.6" y="1139.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.28%)</title><rect x="193.6" y="1123.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.28%)</title><rect x="193.6" y="1107.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.28%)</title><rect x="193.6" y="1091.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.28%)</title><rect x="193.6" y="1075.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.28%)</title><rect x="193.6" y="1059.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.28%)</title><rect x="193.6" y="1043.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="196.8" y="1139.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="196.8" y="1123.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="196.8" y="1107.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="199.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="196.8" y="1091.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 0.83%)</title><rect x="197.7" y="1155.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.83%)</title><rect x="197.7" y="1139.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (12 samples, 0.83%)</title><rect x="197.7" y="1123.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.7" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (12 samples, 0.83%)</title><rect x="197.7" y="1107.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.7" y="1118.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (8 samples, 0.56%)</title><rect x="200.9" y="1091.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="203.9" y="1102.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="206.7" y="1075.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="209.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="207.5" y="1187.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="207.5" y="1171.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="207.5" y="1155.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="207.5" y="1139.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="208.3" y="1187.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="208.3" y="1171.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="208.3" y="1155.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="208.3" y="1139.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="208.3" y="1123.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="208.3" y="1107.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="211.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.07%)</title><rect x="209.1" y="1187.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="209.1" y="1171.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="209.1" y="1155.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.1" y="1166.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="209.1" y="1139.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.1" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="209.1" y="1123.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.07%)</title><rect x="209.1" y="1107.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="212.1" y="1118.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.07%)</title><rect x="209.1" y="1091.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.69%)</title><rect x="209.9" y="1235.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.62%)</title><rect x="209.9" y="1219.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.62%)</title><rect x="209.9" y="1203.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.14%)</title><rect x="209.9" y="1187.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.9" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.14%)</title><rect x="209.9" y="1171.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="211.6" y="1187.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (3 samples, 0.21%)</title><rect x="212.4" y="1187.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (3 samples, 0.21%)</title><rect x="212.4" y="1171.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.4" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.21%)</title><rect x="212.4" y="1155.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.4" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="212.4" y="1139.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="212.4" y="1123.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="212.4" y="1107.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="212.4" y="1091.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="212.4" y="1075.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="213.2" y="1139.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="213.2" y="1123.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.2" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="213.2" y="1107.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.2" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="213.2" y="1091.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.2" y="1102.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="213.2" y="1075.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.07%)</title><rect x="213.2" y="1059.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.2" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="214.0" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.0" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="214.0" y="1059.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="217.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="214.9" y="1187.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.9" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="214.9" y="1171.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.9" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="214.9" y="1155.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="217.9" y="1166.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="214.9" y="1139.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="214.9" y="1123.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="214.9" y="1107.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.9" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.07%)</title><rect x="214.9" y="1091.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.14%)</title><rect x="215.7" y="1187.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.14%)</title><rect x="215.7" y="1171.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="217.3" y="1219.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.07%)</title><rect x="217.3" y="1203.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="217.3" y="1187.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.49%)</title><rect x="218.1" y="1235.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.42%)</title><rect x="218.1" y="1219.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="218.1" y="1203.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="218.1" y="1187.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.07%)</title><rect x="218.1" y="1171.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="218.1" y="1155.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.read (1 samples, 0.07%)</title><rect x="218.1" y="1139.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.35%)</title><rect x="219.0" y="1203.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.28%)</title><rect x="219.0" y="1187.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.14%)</title><rect x="219.0" y="1171.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.14%)</title><rect x="219.0" y="1155.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.0" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="219.0" y="1139.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="222.0" y="1150.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="219.0" y="1123.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="222.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.14%)</title><rect x="220.6" y="1171.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.14%)</title><rect x="220.6" y="1155.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.14%)</title><rect x="220.6" y="1139.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.14%)</title><rect x="220.6" y="1123.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.14%)</title><rect x="220.6" y="1107.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.6" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.14%)</title><rect x="220.6" y="1091.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.6" y="1102.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="220.6" y="1075.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="223.6" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.07%)</title><rect x="221.4" y="1075.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.4" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.07%)</title><rect x="221.4" y="1059.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.4" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.07%)</title><rect x="221.4" y="1043.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="222.2" y="1187.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.2" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="222.2" y="1171.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="223.1" y="1219.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="223.1" y="1203.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="223.1" y="1187.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="223.1" y="1171.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.add (1 samples, 0.07%)</title><rect x="223.1" y="1155.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.1" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addFirst (1 samples, 0.07%)</title><rect x="223.1" y="1139.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.1" y="1150.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.07%)</title><rect x="223.1" y="1123.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="226.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.56%)</title><rect x="223.9" y="1235.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.42%)</title><rect x="225.5" y="1219.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.14%)</title><rect x="225.5" y="1203.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/22324372.accept (2 samples, 0.14%)</title><rect x="225.5" y="1187.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.14%)</title><rect x="225.5" y="1171.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.14%)</title><rect x="225.5" y="1155.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (2 samples, 0.14%)</title><rect x="225.5" y="1139.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.5" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.14%)</title><rect x="225.5" y="1123.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.14%)</title><rect x="225.5" y="1107.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.07%)</title><rect x="226.3" y="1091.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.07%)</title><rect x="227.2" y="1203.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.07%)</title><rect x="227.2" y="1187.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/22324372.get$Lambda (1 samples, 0.07%)</title><rect x="227.2" y="1171.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/22324372.&lt;init&gt; (1 samples, 0.07%)</title><rect x="227.2" y="1155.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.21%)</title><rect x="228.0" y="1203.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.21%)</title><rect x="228.0" y="1187.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.0" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.21%)</title><rect x="228.0" y="1171.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.0" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="228.0" y="1155.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="228.0" y="1139.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="228.0" y="1123.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="228.0" y="1107.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="228.0" y="1091.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="228.8" y="1155.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="228.8" y="1139.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.8" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="228.8" y="1123.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.8" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="228.8" y="1107.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.8" y="1118.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="228.8" y="1091.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="228.8" y="1075.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="228.8" y="1059.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="228.8" y="1043.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="228.8" y="1027.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.07%)</title><rect x="228.8" y="1011.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$170/490077400.accept (1 samples, 0.07%)</title><rect x="228.8" y="995.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.8" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.07%)</title><rect x="228.8" y="979.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.8" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="228.8" y="963.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.8" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.07%)</title><rect x="228.8" y="947.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.8" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.07%)</title><rect x="228.8" y="931.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.8" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="228.8" y="915.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="229.6" y="1091.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="229.6" y="1075.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="232.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="229.6" y="1059.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="229.6" y="1043.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.6" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="229.6" y="1027.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="232.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="230.4" y="1235.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="230.4" y="1219.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="230.4" y="1203.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="230.4" y="1187.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="231.2" y="1235.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="234.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="231.2" y="1219.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="231.2" y="1203.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.run (709 samples, 49.24%)</title><rect x="232.1" y="1299.0" width="581.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.1" y="1310.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (709 samples, 49.24%)</title><rect x="232.1" y="1283.0" width="581.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.1" y="1294.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (709 samples, 49.24%)</title><rect x="232.1" y="1267.0" width="581.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.1" y="1278.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1995388547.run (475 samples, 32.99%)</title><rect x="234.5" y="1251.0" width="389.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.5" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (475 samples, 32.99%)</title><rect x="234.5" y="1235.0" width="389.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.5" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (475 samples, 32.99%)</title><rect x="234.5" y="1219.0" width="389.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.5" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (470 samples, 32.64%)</title><rect x="234.5" y="1203.0" width="385.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.5" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessPipelin..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.07%)</title><rect x="241.9" y="1187.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (157 samples, 10.90%)</title><rect x="242.7" y="1187.0" width="128.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.7" y="1198.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (157 samples, 10.90%)</title><rect x="242.7" y="1171.0" width="128.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.7" y="1182.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (157 samples, 10.90%)</title><rect x="242.7" y="1155.0" width="128.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.7" y="1166.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (157 samples, 10.90%)</title><rect x="242.7" y="1139.0" width="128.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.7" y="1150.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (157 samples, 10.90%)</title><rect x="242.7" y="1123.0" width="128.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.7" y="1134.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (157 samples, 10.90%)</title><rect x="242.7" y="1107.0" width="128.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.7" y="1118.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (40 samples, 2.78%)</title><rect x="242.7" y="1091.0" width="32.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.7" y="1102.0">co..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="250.9" y="1075.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="253.9" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.56%)</title><rect x="251.7" y="1075.0" width="6.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="254.7" y="1086.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.42%)</title><rect x="253.4" y="1059.0" width="4.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="256.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.49%)</title><rect x="258.3" y="1075.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 0.49%)</title><rect x="258.3" y="1059.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.49%)</title><rect x="258.3" y="1043.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.49%)</title><rect x="258.3" y="1027.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.49%)</title><rect x="258.3" y="1011.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="261.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.49%)</title><rect x="258.3" y="995.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 0.97%)</title><rect x="264.0" y="1075.0" width="11.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 0.56%)</title><rect x="268.9" y="1059.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.9" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="268.9" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="271.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.28%)</title><rect x="269.8" y="1043.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.8" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="269.8" y="1027.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="272.8" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="269.8" y="1011.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="272.8" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="270.6" y="995.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="273.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.14%)</title><rect x="271.4" y="1027.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.21%)</title><rect x="273.0" y="1043.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.0" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="273.0" y="1027.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="276.0" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="273.0" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="276.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.14%)</title><rect x="273.9" y="1027.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.14%)</title><rect x="273.9" y="1011.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.9" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="273.9" y="995.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="276.9" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="273.9" y="979.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="276.9" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="273.9" y="963.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="276.9" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="274.7" y="947.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="277.7" y="958.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="274.7" y="931.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="277.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (107 samples, 7.43%)</title><rect x="275.5" y="1091.0" width="87.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.5" y="1102.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.21%)</title><rect x="277.1" y="1075.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.07%)</title><rect x="279.6" y="1075.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.14%)</title><rect x="280.4" y="1075.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.42%)</title><rect x="282.1" y="1075.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.35%)</title><rect x="282.9" y="1059.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.56%)</title><rect x="287.0" y="1075.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.07%)</title><rect x="287.0" y="1059.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.49%)</title><rect x="287.8" y="1059.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.42%)</title><rect x="288.6" y="1043.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.07%)</title><rect x="292.7" y="1027.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="295.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.35%)</title><rect x="293.5" y="1075.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.21%)</title><rect x="295.2" y="1059.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (74 samples, 5.14%)</title><rect x="297.6" y="1075.0" width="60.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.6" y="1086.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (24 samples, 1.67%)</title><rect x="297.6" y="1059.0" width="19.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.07%)</title><rect x="297.6" y="1043.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.42%)</title><rect x="298.4" y="1043.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.42%)</title><rect x="298.4" y="1027.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.42%)</title><rect x="298.4" y="1011.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.42%)</title><rect x="298.4" y="995.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="301.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.07%)</title><rect x="302.5" y="979.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="305.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (14 samples, 0.97%)</title><rect x="303.4" y="1043.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (11 samples, 0.76%)</title><rect x="303.4" y="1027.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.14%)</title><rect x="310.7" y="1011.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.21%)</title><rect x="312.4" y="1027.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="315.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.21%)</title><rect x="312.4" y="1011.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="315.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.14%)</title><rect x="313.2" y="995.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.14%)</title><rect x="313.2" y="979.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="314.8" y="1043.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="314.8" y="1027.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.07%)</title><rect x="316.5" y="1043.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="319.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="317.3" y="1059.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="320.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (49 samples, 3.40%)</title><rect x="318.1" y="1059.0" width="40.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.1" y="1070.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (49 samples, 3.40%)</title><rect x="318.1" y="1043.0" width="40.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.1" y="1054.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 3.40%)</title><rect x="318.1" y="1027.0" width="40.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="321.1" y="1038.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (25 samples, 1.74%)</title><rect x="323.0" y="1011.0" width="20.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.28%)</title><rect x="323.8" y="995.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (11 samples, 0.76%)</title><rect x="327.1" y="995.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (11 samples, 0.76%)</title><rect x="327.1" y="979.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="330.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (11 samples, 0.76%)</title><rect x="327.1" y="963.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.21%)</title><rect x="327.9" y="947.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.49%)</title><rect x="330.4" y="947.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="333.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.49%)</title><rect x="330.4" y="931.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="333.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.21%)</title><rect x="333.7" y="915.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.21%)</title><rect x="333.7" y="899.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="336.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.21%)</title><rect x="336.1" y="995.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.07%)</title><rect x="336.1" y="979.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="339.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.14%)</title><rect x="337.0" y="979.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="340.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.14%)</title><rect x="337.0" y="963.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="340.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.28%)</title><rect x="338.6" y="995.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.28%)</title><rect x="338.6" y="979.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="341.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.14%)</title><rect x="340.2" y="963.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="343.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.14%)</title><rect x="341.9" y="995.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="344.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.21%)</title><rect x="343.5" y="1011.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.21%)</title><rect x="343.5" y="995.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="346.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.21%)</title><rect x="343.5" y="979.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.21%)</title><rect x="343.5" y="963.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.5" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.21%)</title><rect x="343.5" y="947.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="346.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.76%)</title><rect x="346.0" y="1011.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.76%)</title><rect x="346.0" y="995.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="349.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.76%)</title><rect x="346.0" y="979.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="349.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.76%)</title><rect x="346.0" y="963.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="349.0" y="974.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.76%)</title><rect x="346.0" y="947.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="349.0" y="958.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.62%)</title><rect x="347.6" y="931.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.6" y="942.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor7.newInstance (5 samples, 0.35%)</title><rect x="350.9" y="915.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.28%)</title><rect x="355.0" y="1011.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="358.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.28%)</title><rect x="355.0" y="995.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.28%)</title><rect x="355.0" y="979.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="358.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (4 samples, 0.28%)</title><rect x="358.3" y="1075.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="361.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.14%)</title><rect x="361.5" y="1075.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 0.69%)</title><rect x="363.2" y="1091.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="366.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 0.21%)</title><rect x="363.2" y="1075.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="366.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.49%)</title><rect x="365.6" y="1075.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.49%)</title><rect x="365.6" y="1059.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.49%)</title><rect x="365.6" y="1043.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.49%)</title><rect x="365.6" y="1027.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (285 samples, 19.79%)</title><rect x="371.4" y="1187.0" width="233.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="374.4" y="1198.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (52 samples, 3.61%)</title><rect x="373.0" y="1171.0" width="42.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.0" y="1182.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.14%)</title><rect x="373.0" y="1155.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="376.0" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (50 samples, 3.47%)</title><rect x="374.7" y="1155.0" width="40.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="377.7" y="1166.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (49 samples, 3.40%)</title><rect x="375.5" y="1139.0" width="40.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="378.5" y="1150.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (19 samples, 1.32%)</title><rect x="376.3" y="1123.0" width="15.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.56%)</title><rect x="385.3" y="1107.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.56%)</title><rect x="385.3" y="1091.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.56%)</title><rect x="385.3" y="1075.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.21%)</title><rect x="391.9" y="1123.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="394.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.21%)</title><rect x="391.9" y="1107.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.21%)</title><rect x="391.9" y="1091.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.14%)</title><rect x="392.7" y="1075.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="395.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (26 samples, 1.81%)</title><rect x="394.3" y="1123.0" width="21.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="397.3" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 1.32%)</title><rect x="400.1" y="1107.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.42%)</title><rect x="402.5" y="1091.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="405.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.42%)</title><rect x="402.5" y="1075.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="405.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.69%)</title><rect x="407.4" y="1091.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="410.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.62%)</title><rect x="415.6" y="1171.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="418.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.62%)</title><rect x="415.6" y="1155.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="418.6" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.62%)</title><rect x="415.6" y="1139.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="418.6" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.07%)</title><rect x="422.2" y="1123.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="425.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (161 samples, 11.18%)</title><rect x="423.0" y="1171.0" width="131.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="426.0" y="1182.0">com/linecorp/dec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="423.0" y="1155.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="426.0" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="423.0" y="1139.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="426.0" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="423.0" y="1123.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="426.0" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="423.0" y="1107.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="426.0" y="1118.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="423.0" y="1091.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="426.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (160 samples, 11.11%)</title><rect x="423.8" y="1155.0" width="131.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.8" y="1166.0">com/linecorp/dec..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.28%)</title><rect x="425.5" y="1139.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="428.5" y="1150.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="425.5" y="1123.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="428.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (65 samples, 4.51%)</title><rect x="428.7" y="1139.0" width="53.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="431.7" y="1150.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 2.71%)</title><rect x="435.3" y="1123.0" width="32.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.3" y="1134.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (35 samples, 2.43%)</title><rect x="438.6" y="1107.0" width="28.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.6" y="1118.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.62%)</title><rect x="450.0" y="1091.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="453.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.62%)</title><rect x="450.0" y="1075.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.0" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.62%)</title><rect x="450.0" y="1059.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="453.0" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.62%)</title><rect x="450.0" y="1043.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="453.0" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.28%)</title><rect x="450.0" y="1027.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="453.0" y="1038.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.07%)</title><rect x="450.0" y="1011.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="453.0" y="1022.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="450.9" y="1011.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="453.9" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.14%)</title><rect x="451.7" y="1011.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="454.7" y="1022.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="452.5" y="995.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="455.5" y="1006.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="452.5" y="979.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="455.5" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.35%)</title><rect x="453.3" y="1027.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="456.3" y="1038.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="453.3" y="1011.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="456.3" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.28%)</title><rect x="454.1" y="1011.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="457.1" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="454.1" y="995.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="457.1" y="1006.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="455.0" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="458.0" y="1006.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="455.8" y="995.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="458.8" y="1006.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.07%)</title><rect x="455.8" y="979.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="458.8" y="990.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="456.6" y="995.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="459.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.28%)</title><rect x="457.4" y="1091.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="460.4" y="1102.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (7 samples, 0.49%)</title><rect x="460.7" y="1091.0" width="5.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="463.7" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="466.4" y="1091.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="469.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="467.2" y="1123.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.2" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="467.2" y="1107.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="470.2" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="467.2" y="1091.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="470.2" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="467.2" y="1075.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="470.2" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="467.2" y="1059.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="470.2" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="467.2" y="1043.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="470.2" y="1054.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="467.2" y="1027.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="470.2" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="467.2" y="1011.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="470.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="467.2" y="995.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="470.2" y="1006.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.07%)</title><rect x="467.2" y="979.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="470.2" y="990.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.21%)</title><rect x="468.1" y="1123.0" width="2.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="471.1" y="1134.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (14 samples, 0.97%)</title><rect x="470.5" y="1123.0" width="11.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="473.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="482.0" y="1139.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.21%)</title><rect x="482.8" y="1139.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.21%)</title><rect x="482.8" y="1123.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.21%)</title><rect x="482.8" y="1107.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="485.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="484.5" y="1091.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="487.5" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (85 samples, 5.90%)</title><rect x="485.3" y="1139.0" width="69.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.3" y="1150.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (78 samples, 5.42%)</title><rect x="491.0" y="1123.0" width="63.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="494.0" y="1134.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 1.53%)</title><rect x="491.0" y="1107.0" width="18.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="494.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 0.69%)</title><rect x="500.8" y="1091.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="503.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.69%)</title><rect x="500.8" y="1075.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="503.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.69%)</title><rect x="500.8" y="1059.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="503.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (56 samples, 3.89%)</title><rect x="509.0" y="1107.0" width="45.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="512.0" y="1118.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (51 samples, 3.54%)</title><rect x="513.1" y="1091.0" width="41.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="516.1" y="1102.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="514.0" y="1075.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="517.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.28%)</title><rect x="514.8" y="1075.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="517.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.28%)</title><rect x="514.8" y="1059.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="517.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (45 samples, 3.12%)</title><rect x="518.1" y="1075.0" width="36.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.1" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.21%)</title><rect x="540.2" y="1059.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="543.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 0.83%)</title><rect x="542.6" y="1059.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="545.6" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="551.7" y="1043.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="554.7" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="551.7" y="1027.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="554.7" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="551.7" y="1011.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="554.7" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="551.7" y="995.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="554.7" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="551.7" y="979.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="554.7" y="990.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.21%)</title><rect x="552.5" y="1059.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="555.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (46 samples, 3.19%)</title><rect x="554.9" y="1171.0" width="37.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="557.9" y="1182.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (46 samples, 3.19%)</title><rect x="554.9" y="1155.0" width="37.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="557.9" y="1166.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/961380999.process (19 samples, 1.32%)</title><rect x="555.8" y="1139.0" width="15.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="558.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (19 samples, 1.32%)</title><rect x="555.8" y="1123.0" width="15.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="558.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.18%)</title><rect x="556.6" y="1107.0" width="13.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="559.6" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.28%)</title><rect x="561.5" y="1091.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="564.5" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.28%)</title><rect x="561.5" y="1075.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="564.5" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.28%)</title><rect x="561.5" y="1059.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="564.5" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.28%)</title><rect x="561.5" y="1043.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="564.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.14%)</title><rect x="563.1" y="1027.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="566.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.07%)</title><rect x="563.9" y="1011.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="566.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.49%)</title><rect x="564.8" y="1091.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="567.8" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.35%)</title><rect x="566.4" y="1075.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="569.4" y="1086.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="566.4" y="1059.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="569.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="570.5" y="1107.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="573.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="570.5" y="1091.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="570.5" y="1075.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="570.5" y="1059.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$273/1876240506.complete (1 samples, 0.07%)</title><rect x="571.3" y="1139.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="574.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.42%)</title><rect x="572.1" y="1139.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="575.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.42%)</title><rect x="572.1" y="1123.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="575.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (7 samples, 0.49%)</title><rect x="577.1" y="1139.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="580.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (7 samples, 0.49%)</title><rect x="577.1" y="1123.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="580.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$273/1876240506.get$Lambda (7 samples, 0.49%)</title><rect x="577.1" y="1107.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="580.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$273/1876240506.&lt;init&gt; (6 samples, 0.42%)</title><rect x="577.9" y="1091.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="580.9" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.14%)</title><rect x="582.8" y="1139.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="585.8" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.14%)</title><rect x="582.8" y="1123.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.8" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (2 samples, 0.14%)</title><rect x="582.8" y="1107.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="585.8" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.42%)</title><rect x="584.4" y="1139.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="587.4" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.21%)</title><rect x="586.9" y="1123.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="589.9" y="1134.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="586.9" y="1107.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="589.9" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.07%)</title><rect x="588.5" y="1107.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="591.5" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.28%)</title><rect x="589.3" y="1139.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="592.3" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="591.0" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="594.0" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="591.0" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="594.0" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="591.0" y="1091.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="594.0" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="591.0" y="1075.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="594.0" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="591.0" y="1059.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="594.0" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="591.0" y="1043.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="594.0" y="1054.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="591.0" y="1027.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="594.0" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="591.0" y="1011.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="594.0" y="1022.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="591.0" y="995.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="594.0" y="1006.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="591.0" y="979.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="594.0" y="990.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.07%)</title><rect x="591.0" y="963.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="594.0" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.07%)</title><rect x="591.8" y="1123.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="594.8" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="591.8" y="1107.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="594.8" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="591.8" y="1091.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="594.8" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="591.8" y="1075.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="594.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.07%)</title><rect x="592.6" y="1171.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="595.6" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="592.6" y="1155.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="595.6" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="592.6" y="1139.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="595.6" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="592.6" y="1123.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="595.6" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="592.6" y="1107.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="595.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 0.97%)</title><rect x="593.4" y="1171.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="596.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 0.97%)</title><rect x="593.4" y="1155.0" width="11.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="596.4" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="595.1" y="1139.0" width="1.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="598.1" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="595.1" y="1123.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="598.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.69%)</title><rect x="596.7" y="1139.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="599.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/794246900.accept (10 samples, 0.69%)</title><rect x="596.7" y="1123.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="599.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (10 samples, 0.69%)</title><rect x="596.7" y="1107.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="599.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (10 samples, 0.69%)</title><rect x="596.7" y="1091.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="599.7" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 0.69%)</title><rect x="596.7" y="1075.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="599.7" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 0.69%)</title><rect x="596.7" y="1059.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="599.7" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="602.5" y="1043.0" width="2.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="605.5" y="1054.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="602.5" y="1027.0" width="2.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="605.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.11%)</title><rect x="604.9" y="1187.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="607.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.11%)</title><rect x="604.9" y="1171.0" width="13.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="607.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="606.6" y="1155.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="609.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 0.90%)</title><rect x="607.4" y="1155.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/794246900.accept (13 samples, 0.90%)</title><rect x="607.4" y="1139.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="610.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (13 samples, 0.90%)</title><rect x="607.4" y="1123.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="610.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (13 samples, 0.90%)</title><rect x="607.4" y="1107.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="610.4" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (13 samples, 0.90%)</title><rect x="607.4" y="1091.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.4" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.create (13 samples, 0.90%)</title><rect x="607.4" y="1075.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="610.4" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.14%)</title><rect x="618.0" y="1187.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="621.0" y="1198.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="618.0" y="1171.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="621.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.35%)</title><rect x="619.7" y="1203.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="622.7" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="621.3" y="1187.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="624.3" y="1198.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="621.3" y="1171.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="624.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.21%)</title><rect x="623.8" y="1251.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.21%)</title><rect x="623.8" y="1235.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="626.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.21%)</title><rect x="623.8" y="1219.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="626.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.21%)</title><rect x="623.8" y="1203.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="626.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (228 samples, 15.83%)</title><rect x="626.2" y="1251.0" width="186.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="629.2" y="1262.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (228 samples, 15.83%)</title><rect x="626.2" y="1235.0" width="186.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="629.2" y="1246.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (6 samples, 0.42%)</title><rect x="632.0" y="1219.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="635.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (3 samples, 0.21%)</title><rect x="636.9" y="1219.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="639.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.07%)</title><rect x="638.5" y="1203.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="641.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (206 samples, 14.31%)</title><rect x="639.3" y="1219.0" width="168.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="642.3" y="1230.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.21%)</title><rect x="651.6" y="1203.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="654.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.21%)</title><rect x="651.6" y="1187.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="654.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.04%)</title><rect x="654.1" y="1203.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.69%)</title><rect x="666.4" y="1203.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="669.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.69%)</title><rect x="666.4" y="1187.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="669.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.69%)</title><rect x="666.4" y="1171.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="669.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.69%)</title><rect x="666.4" y="1155.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="669.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (163 samples, 11.32%)</title><rect x="674.6" y="1203.0" width="133.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="677.6" y="1214.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (162 samples, 11.25%)</title><rect x="675.4" y="1187.0" width="132.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="678.4" y="1198.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="677.8" y="1171.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="680.8" y="1182.0"></text>
</g>
<g>
<title>Unsafe_Park (154 samples, 10.69%)</title><rect x="678.7" y="1171.0" width="126.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="681.7" y="1182.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="683.6" y="1155.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="686.6" y="1166.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.07%)</title><rect x="685.2" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="688.2" y="1166.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 1.94%)</title><rect x="686.0" y="1155.0" width="23.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="689.0" y="1166.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.69%)</title><rect x="691.8" y="1139.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="694.8" y="1150.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.21%)</title><rect x="692.6" y="1123.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="695.6" y="1134.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.21%)</title><rect x="692.6" y="1107.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="695.6" y="1118.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="695.1" y="1123.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.1" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.28%)</title><rect x="696.7" y="1123.0" width="3.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="699.7" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (11 samples, 0.76%)</title><rect x="700.0" y="1139.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="703.0" y="1150.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.14%)</title><rect x="709.0" y="1155.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="712.0" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.14%)</title><rect x="710.6" y="1155.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="713.6" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="712.3" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="715.3" y="1166.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.42%)</title><rect x="713.1" y="1155.0" width="4.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="716.1" y="1166.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 1.88%)</title><rect x="718.0" y="1155.0" width="22.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="721.0" y="1166.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (58 samples, 4.03%)</title><rect x="740.1" y="1155.0" width="47.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="743.1" y="1166.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.21%)</title><rect x="787.7" y="1155.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="790.7" y="1166.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="790.1" y="1155.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="793.1" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.21%)</title><rect x="790.9" y="1155.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="793.9" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.21%)</title><rect x="793.4" y="1155.0" width="2.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="796.4" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.28%)</title><rect x="795.8" y="1155.0" width="3.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="798.8" y="1166.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="799.1" y="1155.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="802.1" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.28%)</title><rect x="799.9" y="1155.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="802.9" y="1166.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.14%)</title><rect x="803.2" y="1155.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="806.2" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.28%)</title><rect x="804.9" y="1171.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="807.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.42%)</title><rect x="808.1" y="1219.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="811.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.42%)</title><rect x="808.1" y="1203.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="811.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.42%)</title><rect x="808.1" y="1187.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="811.1" y="1198.0"></text>
</g>
<g>
<title>start_thread (460 samples, 31.94%)</title><rect x="813.1" y="1299.0" width="376.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="816.1" y="1310.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (460 samples, 31.94%)</title><rect x="813.1" y="1283.0" width="376.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="816.1" y="1294.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.46%)</title><rect x="813.1" y="1267.0" width="17.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="816.1" y="1278.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.21%)</title><rect x="813.1" y="1251.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="816.1" y="1262.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.21%)</title><rect x="813.1" y="1235.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="816.1" y="1246.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="813.1" y="1219.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="816.1" y="1230.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="813.9" y="1219.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="816.9" y="1230.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.07%)</title><rect x="814.7" y="1219.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="817.7" y="1230.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.18%)</title><rect x="815.5" y="1251.0" width="13.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="818.5" y="1262.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.42%)</title><rect x="815.5" y="1235.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="818.5" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 0.28%)</title><rect x="815.5" y="1219.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="818.5" y="1230.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::mark_card_deferred(unsigned long) (1 samples, 0.07%)</title><rect x="816.3" y="1203.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="819.3" y="1214.0"></text>
</g>
<g>
<title>Atomic::cmpxchg(signed char, signed char volatile*, signed char) (1 samples, 0.07%)</title><rect x="816.3" y="1187.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="819.3" y="1198.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.07%)</title><rect x="817.2" y="1203.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="820.2" y="1214.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.07%)</title><rect x="818.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="821.0" y="1214.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="818.8" y="1219.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="821.8" y="1230.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="819.6" y="1219.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="822.6" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.35%)</title><rect x="820.4" y="1235.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="823.4" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="820.4" y="1219.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="823.4" y="1230.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="820.4" y="1203.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="823.4" y="1214.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="820.4" y="1187.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="823.4" y="1198.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="820.4" y="1171.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="823.4" y="1182.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="821.2" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="824.2" y="1214.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="821.2" y="1187.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="824.2" y="1198.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="821.2" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="824.2" y="1182.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="821.2" y="1155.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="824.2" y="1166.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="821.2" y="1139.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="824.2" y="1150.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="821.2" y="1123.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="824.2" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.21%)</title><rect x="822.1" y="1219.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="825.1" y="1230.0"></text>
</g>
<g>
<title>JvmtiExport::oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="822.1" y="1203.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="825.1" y="1214.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.14%)</title><rect x="822.9" y="1203.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="825.9" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.42%)</title><rect x="824.5" y="1235.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="827.5" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.42%)</title><rect x="824.5" y="1219.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="827.5" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.35%)</title><rect x="824.5" y="1203.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="827.5" y="1214.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.35%)</title><rect x="824.5" y="1187.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="827.5" y="1198.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.35%)</title><rect x="824.5" y="1171.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="827.5" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.35%)</title><rect x="824.5" y="1155.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="827.5" y="1166.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.21%)</title><rect x="826.2" y="1139.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.2" y="1150.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.07%)</title><rect x="826.2" y="1123.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="829.2" y="1134.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="826.2" y="1107.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="829.2" y="1118.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.14%)</title><rect x="827.0" y="1123.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="830.0" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="828.6" y="1203.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="831.6" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.07%)</title><rect x="828.6" y="1187.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.6" y="1198.0"></text>
</g>
<g>
<title>HeapRegionRemSet::claim_iter() (1 samples, 0.07%)</title><rect x="828.6" y="1171.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="831.6" y="1182.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="829.4" y="1251.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="832.4" y="1262.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="829.4" y="1235.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="832.4" y="1246.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) (1 samples, 0.07%)</title><rect x="829.4" y="1219.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="832.4" y="1230.0"></text>
</g>
<g>
<title>JavaThread::run() (437 samples, 30.35%)</title><rect x="830.3" y="1267.0" width="358.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="833.3" y="1278.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (437 samples, 30.35%)</title><rect x="830.3" y="1251.0" width="358.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="833.3" y="1262.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (436 samples, 30.28%)</title><rect x="830.3" y="1235.0" width="357.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="833.3" y="1246.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (435 samples, 30.21%)</title><rect x="830.3" y="1219.0" width="356.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.3" y="1230.0">CompileBroker::invoke_compiler_on_method(Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (435 samples, 30.21%)</title><rect x="830.3" y="1203.0" width="356.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="833.3" y="1214.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (435 samples, 30.21%)</title><rect x="830.3" y="1187.0" width="356.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="833.3" y="1198.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (169 samples, 11.74%)</title><rect x="830.3" y="1171.0" width="138.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.3" y="1182.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.21%)</title><rect x="830.3" y="1155.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="833.3" y="1166.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.14%)</title><rect x="830.3" y="1139.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="833.3" y="1150.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="831.9" y="1139.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="834.9" y="1150.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="831.9" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="834.9" y="1134.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (8 samples, 0.56%)</title><rect x="832.7" y="1155.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="835.7" y="1166.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.14%)</title><rect x="833.5" y="1139.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="836.5" y="1150.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="833.5" y="1123.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="836.5" y="1134.0"></text>
</g>
<g>
<title>new_loc_value(PhaseRegAlloc*, int, Location::Type) (1 samples, 0.07%)</title><rect x="833.5" y="1107.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="836.5" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="834.4" y="1123.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="837.4" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="834.4" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="837.4" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (5 samples, 0.35%)</title><rect x="835.2" y="1139.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="838.2" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (5 samples, 0.35%)</title><rect x="835.2" y="1123.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="838.2" y="1134.0"></text>
</g>
<g>
<title>Matcher::match() (21 samples, 1.46%)</title><rect x="839.3" y="1155.0" width="17.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="842.3" y="1166.0"></text>
</g>
<g>
<title>ConINode::Opcode() const (1 samples, 0.07%)</title><rect x="839.3" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="842.3" y="1150.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (4 samples, 0.28%)</title><rect x="840.1" y="1139.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="843.1" y="1150.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (16 samples, 1.11%)</title><rect x="843.4" y="1139.0" width="13.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="846.4" y="1150.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (10 samples, 0.69%)</title><rect x="845.0" y="1123.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="848.0" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.21%)</title><rect x="853.2" y="1123.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="856.2" y="1134.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="854.0" y="1107.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="857.0" y="1118.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="854.0" y="1091.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="857.0" y="1102.0"></text>
</g>
<g>
<title>TypeKlassPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="854.0" y="1075.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="857.0" y="1086.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="854.0" y="1059.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="857.0" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="854.8" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="857.8" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="854.8" y="1091.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="857.8" y="1102.0"></text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.07%)</title><rect x="854.8" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="857.8" y="1086.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="855.7" y="1123.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="858.7" y="1134.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="856.5" y="1155.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="859.5" y="1166.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.07%)</title><rect x="856.5" y="1139.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="859.5" y="1150.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="856.5" y="1123.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="859.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.56%)</title><rect x="857.3" y="1155.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="860.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.07%)</title><rect x="857.3" y="1139.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="860.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.07%)</title><rect x="857.3" y="1123.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="860.3" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.49%)</title><rect x="858.1" y="1139.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="861.1" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="858.1" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="861.1" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.21%)</title><rect x="858.9" y="1123.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="861.9" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="859.8" y="1107.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="862.8" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="860.6" y="1107.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="863.6" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.21%)</title><rect x="861.4" y="1123.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="864.4" y="1134.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.07%)</title><rect x="862.2" y="1107.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="865.2" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="863.0" y="1107.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="866.0" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="863.9" y="1155.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="866.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (127 samples, 8.82%)</title><rect x="864.7" y="1155.0" width="104.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="867.7" y="1166.0">PhaseChaitin..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="866.3" y="1139.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="869.3" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="867.1" y="1139.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="870.1" y="1150.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="868.0" y="1139.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="871.0" y="1150.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="868.8" y="1139.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="871.8" y="1150.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.28%)</title><rect x="869.6" y="1139.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="872.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 0.42%)</title><rect x="872.9" y="1139.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="875.9" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="875.3" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="878.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.14%)</title><rect x="876.2" y="1123.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.2" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="877.0" y="1107.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="880.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.49%)</title><rect x="877.8" y="1139.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="880.8" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="878.6" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="881.6" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="879.4" y="1123.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="882.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.21%)</title><rect x="881.1" y="1123.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="884.1" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="881.1" y="1107.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="884.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (16 samples, 1.11%)</title><rect x="883.5" y="1139.0" width="13.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="886.5" y="1150.0"></text>
</g>
<g>
<title>MachSpillCopyNode::MachSpillCopyNode(Node*, RegMask const&amp;, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="893.4" y="1123.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="896.4" y="1134.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="894.2" y="1123.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="897.2" y="1134.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="895.0" y="1123.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="898.0" y="1134.0"></text>
</g>
<g>
<title>loadPNode::rule() const (1 samples, 0.07%)</title><rect x="895.8" y="1123.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (25 samples, 1.74%)</title><rect x="896.6" y="1139.0" width="20.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="899.6" y="1150.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.14%)</title><rect x="903.2" y="1123.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="906.2" y="1134.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="904.8" y="1123.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="907.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.76%)</title><rect x="905.7" y="1123.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="908.7" y="1134.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="911.4" y="1107.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="914.4" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="912.2" y="1107.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="915.2" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="914.7" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="917.7" y="1134.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.14%)</title><rect x="915.5" y="1123.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="918.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="917.1" y="1139.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="920.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.07%)</title><rect x="917.9" y="1139.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="920.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.49%)</title><rect x="918.8" y="1139.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="921.8" y="1150.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="921.2" y="1123.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="924.2" y="1134.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="922.0" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.0" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="922.9" y="1123.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="925.9" y="1134.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.07%)</title><rect x="923.7" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="926.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.14%)</title><rect x="924.5" y="1139.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="927.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.42%)</title><rect x="926.1" y="1139.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="929.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.28%)</title><rect x="927.8" y="1123.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="930.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="929.4" y="1107.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="932.4" y="1118.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="929.4" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="932.4" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.07%)</title><rect x="930.2" y="1091.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.2" y="1102.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="930.2" y="1075.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.2" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="931.1" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="934.1" y="1150.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="931.1" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.1" y="1134.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (17 samples, 1.18%)</title><rect x="931.9" y="1139.0" width="13.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="934.9" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (17 samples, 1.18%)</title><rect x="931.9" y="1123.0" width="13.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="934.9" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="931.9" y="1107.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.9" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (16 samples, 1.11%)</title><rect x="932.7" y="1107.0" width="13.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="935.7" y="1118.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.21%)</title><rect x="933.5" y="1091.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="936.5" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="935.2" y="1075.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="938.2" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (10 samples, 0.69%)</title><rect x="936.0" y="1091.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="939.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.14%)</title><rect x="944.2" y="1091.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="947.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.28%)</title><rect x="945.8" y="1139.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="948.8" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="947.4" y="1123.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="950.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.14%)</title><rect x="949.1" y="1139.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.1" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="949.1" y="1123.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.28%)</title><rect x="950.7" y="1139.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="953.7" y="1150.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.21%)</title><rect x="950.7" y="1123.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="953.7" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="953.2" y="1123.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="956.2" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (16 samples, 1.11%)</title><rect x="954.0" y="1139.0" width="13.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="957.0" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (10 samples, 0.69%)</title><rect x="958.9" y="1123.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="961.9" y="1134.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.14%)</title><rect x="965.5" y="1107.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="968.5" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="967.1" y="1139.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="970.1" y="1150.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="967.9" y="1139.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="970.9" y="1150.0"></text>
</g>
<g>
<title>Compile::Optimize() (247 samples, 17.15%)</title><rect x="968.8" y="1171.0" width="202.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.8" y="1182.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="968.8" y="1155.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="971.8" y="1166.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="968.8" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="971.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (8 samples, 0.56%)</title><rect x="969.6" y="1155.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (8 samples, 0.56%)</title><rect x="969.6" y="1139.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="970.4" y="1123.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (6 samples, 0.42%)</title><rect x="971.2" y="1123.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.35%)</title><rect x="971.2" y="1107.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="974.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="1091.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="974.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="1075.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="1059.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="1043.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="974.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="1027.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="1011.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="995.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="979.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="974.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="963.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="974.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="947.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="974.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="931.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="974.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="915.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="899.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="974.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="883.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="867.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="851.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="974.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="835.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="819.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="803.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="974.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="787.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="974.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="771.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="974.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="755.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="739.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="723.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="974.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="707.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="974.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.2" y="691.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.2" y="702.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="971.2" y="675.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="974.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="972.0" y="1091.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="972.0" y="1075.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="975.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="1059.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="975.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="1043.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="1027.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="1011.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="975.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="995.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="975.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="963.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="947.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="931.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="975.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="915.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="899.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="975.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="883.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="867.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="975.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="851.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="975.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="835.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="819.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="975.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="803.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="787.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="975.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="771.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="755.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="975.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="739.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="723.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="975.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="707.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="975.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="691.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="975.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="675.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="975.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="659.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="643.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="627.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="611.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="595.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="975.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="579.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="975.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="563.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="972.0" y="547.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="975.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="972.8" y="1059.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="975.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="972.8" y="1043.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="975.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="972.8" y="1027.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="972.8" y="1011.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="972.8" y="995.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="979.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="975.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="963.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="975.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="975.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="915.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="975.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="975.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="867.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="851.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="975.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="975.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="819.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="975.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="975.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="975.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="975.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="723.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="975.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="707.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="691.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="659.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="975.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="643.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="595.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="579.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="563.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="975.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="547.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="975.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="531.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="975.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="515.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="972.8" y="499.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.7" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="976.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.7" y="963.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.7" y="947.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.7" y="931.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.7" y="915.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.7" y="899.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="976.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.7" y="883.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="976.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.7" y="867.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.7" y="851.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="973.7" y="835.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.7" y="846.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.07%)</title><rect x="974.5" y="1011.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="977.5" y="1022.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="975.3" y="1107.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="978.3" y="1118.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.21%)</title><rect x="976.1" y="1155.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.1" y="1166.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="977.8" y="1139.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (206 samples, 14.31%)</title><rect x="978.6" y="1155.0" width="168.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="981.6" y="1166.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="978.6" y="1139.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.6" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="978.6" y="1123.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.6" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="978.6" y="1107.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.6" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="978.6" y="1091.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.6" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="978.6" y="1075.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.6" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="978.6" y="1059.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.6" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="978.6" y="1043.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.6" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="978.6" y="1027.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="978.6" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.07%)</title><rect x="978.6" y="995.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.6" y="1006.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.07%)</title><rect x="979.4" y="1139.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="982.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.14%)</title><rect x="980.2" y="1139.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 0.69%)</title><rect x="981.9" y="1139.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.9" y="1150.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (3 samples, 0.21%)</title><rect x="987.6" y="1123.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="990.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (178 samples, 12.36%)</title><rect x="990.1" y="1139.0" width="145.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="993.1" y="1150.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (168 samples, 11.67%)</title><rect x="998.3" y="1123.0" width="137.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.3" y="1134.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1001.5" y="1107.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1004.5" y="1118.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.07%)</title><rect x="1002.3" y="1107.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.28%)</title><rect x="1003.2" y="1107.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1006.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (158 samples, 10.97%)</title><rect x="1006.4" y="1107.0" width="129.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.4" y="1118.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.14%)</title><rect x="1108.1" y="1091.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1108.1" y="1075.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1111.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1108.9" y="1059.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (26 samples, 1.81%)</title><rect x="1109.7" y="1091.0" width="21.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.7" y="1102.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (6 samples, 0.42%)</title><rect x="1131.0" y="1091.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1135.1" y="1075.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (5 samples, 0.35%)</title><rect x="1135.9" y="1139.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.14%)</title><rect x="1138.4" y="1123.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.28%)</title><rect x="1140.0" y="1139.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.0" y="1150.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.07%)</title><rect x="1141.7" y="1123.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1142.5" y="1123.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1142.5" y="1107.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1142.5" y="1091.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.28%)</title><rect x="1143.3" y="1139.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.3" y="1150.0"></text>
</g>
<g>
<title>CProjNode::hash() const (1 samples, 0.07%)</title><rect x="1143.3" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.21%)</title><rect x="1144.1" y="1123.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.1" y="1134.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1144.1" y="1107.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.1" y="1118.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1144.1" y="1091.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.1" y="1102.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1144.9" y="1107.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.9" y="1118.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1144.9" y="1091.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.9" y="1102.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1144.9" y="1075.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.9" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1144.9" y="1059.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1144.9" y="1043.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.9" y="1054.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1144.9" y="1027.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.9" y="1038.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1144.9" y="1011.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1144.9" y="995.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.9" y="1006.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.07%)</title><rect x="1145.7" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.7" y="1118.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1146.6" y="1139.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (26 samples, 1.81%)</title><rect x="1147.4" y="1155.0" width="21.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.4" y="1166.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (26 samples, 1.81%)</title><rect x="1147.4" y="1139.0" width="21.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.4" y="1150.0">P..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.0" y="1123.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.0" y="1134.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.0" y="1107.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.0" y="1118.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.07%)</title><rect x="1149.0" y="1091.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.0" y="1102.0"></text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.8" y="1123.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="1134.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1149.8" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.8" y="1118.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.7" y="1123.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1150.7" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1150.7" y="1091.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.7" y="1102.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.07%)</title><rect x="1151.5" y="1123.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.5" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1152.3" y="1123.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.3" y="1134.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1152.3" y="1107.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="1118.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.07%)</title><rect x="1153.1" y="1091.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.1" y="1102.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1153.1" y="1075.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="1086.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1153.1" y="1059.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.1" y="1070.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1153.1" y="1043.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.1" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1153.1" y="1027.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.1" y="1038.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1153.1" y="1011.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.1" y="1022.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1153.1" y="995.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.1" y="1006.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1153.9" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.9" y="1118.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1153.9" y="1091.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.9" y="1102.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1153.9" y="1075.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.9" y="1086.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1154.8" y="1123.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.28%)</title><rect x="1157.2" y="1123.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1159.7" y="1107.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.7" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1159.7" y="1091.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.7" y="1102.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (4 samples, 0.28%)</title><rect x="1160.5" y="1123.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.5" y="1134.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1163.0" y="1107.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.0" y="1118.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.28%)</title><rect x="1163.8" y="1123.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1163.8" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1163.8" y="1091.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.8" y="1102.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1163.8" y="1075.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.8" y="1086.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1164.6" y="1107.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.6" y="1118.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1165.4" y="1107.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.4" y="1118.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1166.2" y="1107.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="1118.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1167.1" y="1123.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.1" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1167.1" y="1107.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.1" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.1" y="1091.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.1" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.1" y="1075.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.1" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.1" y="1059.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.1" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.1" y="1043.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.1" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.1" y="1027.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.1" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.1" y="1011.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.1" y="995.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.1" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.1" y="979.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.1" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1167.1" y="963.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.1" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1167.1" y="947.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="958.0"></text>
</g>
<g>
<title>StoreNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1167.9" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.9" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.14%)</title><rect x="1168.7" y="1155.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.7" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.14%)</title><rect x="1168.7" y="1139.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.7" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1168.7" y="1123.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.7" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (2 samples, 0.14%)</title><rect x="1168.7" y="1107.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="1118.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1168.7" y="1091.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="1102.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1168.7" y="1075.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.7" y="1086.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1168.7" y="1059.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="1070.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="1168.7" y="1043.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.7" y="1054.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1168.7" y="1027.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.7" y="1038.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1169.5" y="1091.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1172.5" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1170.3" y="1155.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.3" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1170.3" y="1139.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.3" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1170.3" y="1123.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.3" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1170.3" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.3" y="1091.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1170.3" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="1086.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.3" y="1059.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (18 samples, 1.25%)</title><rect x="1171.2" y="1171.0" width="14.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (18 samples, 1.25%)</title><rect x="1171.2" y="1155.0" width="14.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 1.18%)</title><rect x="1171.2" y="1139.0" width="13.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 1.18%)</title><rect x="1171.2" y="1123.0" width="13.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (17 samples, 1.18%)</title><rect x="1171.2" y="1107.0" width="13.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 1.18%)</title><rect x="1171.2" y="1091.0" width="13.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.2" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.97%)</title><rect x="1171.2" y="1075.0" width="11.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.2" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.97%)</title><rect x="1171.2" y="1059.0" width="11.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.97%)</title><rect x="1171.2" y="1043.0" width="11.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.97%)</title><rect x="1171.2" y="1027.0" width="11.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.97%)</title><rect x="1171.2" y="1011.0" width="11.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.90%)</title><rect x="1171.2" y="995.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="1006.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.07%)</title><rect x="1171.2" y="979.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="990.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1171.2" y="963.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="974.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1171.2" y="947.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.2" y="958.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1171.2" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1171.2" y="915.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.2" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1171.2" y="899.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1171.2" y="883.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.2" y="894.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.07%)</title><rect x="1171.2" y="867.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.56%)</title><rect x="1172.0" y="979.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.0" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.56%)</title><rect x="1172.0" y="963.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.49%)</title><rect x="1172.0" y="947.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.49%)</title><rect x="1172.0" y="931.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.49%)</title><rect x="1172.0" y="915.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.49%)</title><rect x="1172.0" y="899.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1172.0" y="883.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.35%)</title><rect x="1172.0" y="867.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1172.0" y="851.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1172.0" y="835.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1172.0" y="819.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.35%)</title><rect x="1172.0" y="803.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.0" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1172.0" y="787.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1172.0" y="771.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1172.0" y="755.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1172.0" y="739.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1172.0" y="723.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.0" y="734.0"></text>
</g>
<g>
<title>GraphKit::shared_unlock(Node*, Node*) (1 samples, 0.07%)</title><rect x="1172.0" y="707.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.0" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1172.0" y="691.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.0" y="702.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1172.0" y="675.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1172.8" y="707.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1172.8" y="691.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1172.8" y="675.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1172.8" y="659.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1172.8" y="643.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1172.8" y="627.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1172.8" y="611.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1172.8" y="595.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1172.8" y="579.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1172.8" y="563.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1172.8" y="547.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1172.8" y="531.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1172.8" y="515.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.8" y="526.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.8" y="499.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.8" y="510.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.07%)</title><rect x="1172.8" y="483.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.8" y="494.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1172.8" y="467.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1173.6" y="499.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1173.6" y="483.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1173.6" y="467.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1173.6" y="451.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1173.6" y="435.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1173.6" y="419.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1173.6" y="403.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1173.6" y="387.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1173.6" y="371.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1173.6" y="355.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1173.6" y="339.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1173.6" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.6" y="307.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1173.6" y="291.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="302.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1173.6" y="275.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.6" y="286.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.07%)</title><rect x="1173.6" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="270.0"></text>
</g>
<g>
<title>ciMethod::should_not_inline() (1 samples, 0.07%)</title><rect x="1173.6" y="243.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.4" y="691.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.4" y="675.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.4" y="659.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.4" y="643.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.4" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.4" y="611.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.4" y="595.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.4" y="579.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.4" y="563.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.4" y="547.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.4" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.4" y="515.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.4" y="499.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.4" y="483.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.4" y="467.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.4" y="451.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.4" y="435.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.4" y="419.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.4" y="403.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.4" y="387.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.4" y="371.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.4" y="355.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.4" y="339.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.4" y="323.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.4" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1174.4" y="291.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="302.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.4" y="275.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="286.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1174.4" y="259.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.4" y="270.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1174.4" y="243.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="254.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.07%)</title><rect x="1174.4" y="227.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.4" y="238.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.07%)</title><rect x="1174.4" y="211.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.2" y="787.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.2" y="771.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.2" y="755.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.2" y="739.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.2" y="723.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.2" y="707.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.2" y="691.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.2" y="675.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.2" y="659.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.2" y="643.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.2" y="627.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.2" y="611.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.2" y="595.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="579.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1175.2" y="563.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="574.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1175.2" y="547.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1175.2" y="531.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1175.2" y="515.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1175.2" y="499.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1175.2" y="483.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1175.2" y="467.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="451.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="462.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1175.2" y="435.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1175.2" y="419.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1175.2" y="403.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="414.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1175.2" y="387.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="398.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="371.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.2" y="382.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1175.2" y="355.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="366.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1175.2" y="339.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="350.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1175.2" y="323.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="1175.2" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="291.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.2" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1176.1" y="883.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.1" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.1" y="867.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.1" y="851.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="835.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="819.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.1" y="803.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.1" y="787.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.1" y="771.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.1" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.1" y="755.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="739.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="723.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.1" y="707.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.1" y="691.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.1" y="675.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.1" y="659.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="627.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.1" y="611.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.1" y="595.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.1" y="579.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.1" y="563.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.1" y="547.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="531.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="515.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.1" y="499.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.1" y="483.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.1" y="467.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.1" y="451.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="435.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="419.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.1" y="403.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.1" y="387.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.1" y="371.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.1" y="355.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="339.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="323.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.1" y="307.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.1" y="291.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.1" y="275.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.1" y="259.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="243.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="227.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.1" y="211.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.1" y="195.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.1" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.1" y="179.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.1" y="163.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="147.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.1" y="115.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="99.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.1" y="94.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1176.1" y="67.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="78.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="51.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1176.1" y="35.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="867.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="851.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.9" y="835.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.9" y="819.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.9" y="803.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.9" y="787.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.9" y="771.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="755.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.9" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.9" y="739.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.9" y="723.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.9" y="707.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.9" y="691.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.9" y="675.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="659.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.9" y="643.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.9" y="627.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.9" y="611.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.9" y="595.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.9" y="579.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="563.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.9" y="547.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.9" y="531.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.9" y="515.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.9" y="499.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.9" y="483.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="467.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.9" y="451.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.9" y="435.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.9" y="419.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.9" y="403.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="414.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1176.9" y="387.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="398.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1176.9" y="371.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="382.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1176.9" y="355.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.9" y="366.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.07%)</title><rect x="1176.9" y="339.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="350.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.07%)</title><rect x="1176.9" y="323.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="334.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1177.7" y="947.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1177.7" y="931.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1178.5" y="979.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1178.5" y="963.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1178.5" y="947.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1178.5" y="931.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1178.5" y="915.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1178.5" y="899.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1178.5" y="883.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.5" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.5" y="867.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.5" y="851.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="862.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.5" y="835.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="846.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.07%)</title><rect x="1178.5" y="819.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.07%)</title><rect x="1178.5" y="803.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="814.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.07%)</title><rect x="1178.5" y="787.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="798.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.07%)</title><rect x="1178.5" y="771.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.5" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.07%)</title><rect x="1178.5" y="755.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.3" y="867.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.3" y="851.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.3" y="835.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.3" y="819.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.3" y="803.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.3" y="787.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.3" y="771.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.3" y="755.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.3" y="739.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.3" y="723.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.3" y="707.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.3" y="691.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.3" y="675.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.3" y="659.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.3" y="643.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.3" y="627.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.3" y="611.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.3" y="595.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.3" y="579.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.3" y="563.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.3" y="547.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.3" y="531.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.3" y="515.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.3" y="499.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.3" y="483.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.3" y="467.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.3" y="451.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.3" y="435.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.3" y="419.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.3" y="403.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.3" y="387.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.3" y="371.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.3" y="355.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.3" y="339.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.3" y="323.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.3" y="307.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.3" y="291.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.3" y="275.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.3" y="259.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.3" y="243.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.3" y="227.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.3" y="211.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.3" y="195.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.3" y="179.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.3" y="163.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.3" y="147.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.3" y="131.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.3" y="115.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="126.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.3" y="99.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="110.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.07%)</title><rect x="1179.3" y="83.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1179.3" y="67.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="78.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1179.3" y="51.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="62.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1179.3" y="35.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.2" y="211.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1180.2" y="195.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="206.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1180.2" y="179.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="190.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.2" y="163.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.2" y="174.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1180.2" y="147.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.2" y="158.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1180.2" y="131.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="142.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_exactness(bool) const (1 samples, 0.07%)</title><rect x="1181.0" y="963.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1181.8" y="995.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="1006.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1181.8" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="990.0"></text>
</g>
<g>
<title>AllocateNode::AllocateNode(Compile*, TypeFunc const*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1181.8" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="974.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1181.8" y="947.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.6" y="1075.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.6" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.6" y="1059.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1182.6" y="1043.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1182.6" y="1027.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1182.6" y="1011.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1182.6" y="995.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1182.6" y="979.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.6" y="963.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1182.6" y="947.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1182.6" y="931.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1182.6" y="915.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1182.6" y="899.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.6" y="883.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.6" y="867.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.6" y="851.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.6" y="835.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.6" y="819.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.6" y="803.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.6" y="787.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="771.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.6" y="755.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.6" y="739.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.6" y="723.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.6" y="707.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.6" y="691.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="675.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.6" y="659.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.6" y="643.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.6" y="627.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.6" y="611.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.6" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="579.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.6" y="563.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.6" y="547.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.6" y="531.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.6" y="515.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.6" y="499.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="483.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.6" y="467.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.6" y="451.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.6" y="435.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.6" y="419.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.6" y="403.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="387.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.6" y="371.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.6" y="355.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.6" y="339.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.6" y="323.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1182.6" y="307.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1182.6" y="291.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="302.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1182.6" y="275.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="286.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1182.6" y="259.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="270.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1182.6" y="243.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="254.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1182.6" y="227.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.6" y="238.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1182.6" y="211.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="222.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1182.6" y="195.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.6" y="206.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1182.6" y="179.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1185.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1183.4" y="787.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="798.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="771.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="782.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1183.4" y="755.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="766.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1183.4" y="739.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.4" y="750.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.07%)</title><rect x="1183.4" y="723.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1184.3" y="883.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1184.3" y="867.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.3" y="878.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1184.3" y="851.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="862.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1184.3" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.3" y="846.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.07%)</title><rect x="1184.3" y="819.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="830.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.07%)</title><rect x="1184.3" y="803.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="814.0"></text>
</g>
<g>
<title>Parse::load_interpreter_state(Node*) (1 samples, 0.07%)</title><rect x="1185.1" y="1139.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.1" y="1150.0"></text>
</g>
<g>
<title>ciMethod::live_local_oops_at_bci(int) (1 samples, 0.07%)</title><rect x="1185.1" y="1123.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.1" y="1134.0"></text>
</g>
<g>
<title>OopMapCache::compute_one_oop_map(methodHandle, int, InterpreterOopMap*) (1 samples, 0.07%)</title><rect x="1185.1" y="1107.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.1" y="1118.0"></text>
</g>
<g>
<title>OopMapCacheEntry::fill(methodHandle, int) (1 samples, 0.07%)</title><rect x="1185.1" y="1091.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.1" y="1102.0"></text>
</g>
<g>
<title>OopMapForCacheEntry::compute_map(Thread*) (1 samples, 0.07%)</title><rect x="1185.1" y="1075.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.1" y="1086.0"></text>
</g>
<g>
<title>GenerateOopMap::compute_map(Thread*) (1 samples, 0.07%)</title><rect x="1185.1" y="1059.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.1" y="1070.0"></text>
</g>
<g>
<title>GenerateOopMap::do_interpretation() (1 samples, 0.07%)</title><rect x="1185.1" y="1043.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.1" y="1054.0"></text>
</g>
<g>
<title>GenerateOopMap::init_basic_blocks() (1 samples, 0.07%)</title><rect x="1185.1" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.1" y="1038.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1185.9" y="1171.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="1182.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.9" y="1155.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.9" y="1166.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1186.7" y="1219.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="1230.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1186.7" y="1203.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="1214.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1186.7" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="1198.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.07%)</title><rect x="1186.7" y="1171.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.7" y="1182.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.07%)</title><rect x="1186.7" y="1155.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="1166.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.5" y="1235.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.5" y="1246.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.5" y="1219.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="1230.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.5" y="1203.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.5" y="1214.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1187.5" y="1187.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1190.5" y="1198.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1187.5" y="1171.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="1182.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1187.5" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="1166.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1187.5" y="1139.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.5" y="1150.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.14%)</title><rect x="1188.4" y="1267.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.4" y="1278.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.14%)</title><rect x="1188.4" y="1251.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.4" y="1262.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1188.4" y="1235.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.4" y="1246.0"></text>
</g>
<g>
<title>RuntimeService::record_safepoint_synchronized() (1 samples, 0.07%)</title><rect x="1188.4" y="1219.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="1230.0"></text>
</g>
<g>
<title>SuspendibleThreadSet::desynchronize() (1 samples, 0.07%)</title><rect x="1189.2" y="1235.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.2" y="1246.0"></text>
</g>
</g>
</svg>
