<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (1,386 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (239 samples, 17.24%)</title><rect x="10.0" y="1203.0" width="203.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (238 samples, 17.17%)</title><rect x="10.9" y="1187.0" width="202.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1198.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.14%)</title><rect x="10.9" y="1171.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.07%)</title><rect x="11.7" y="1155.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/113598580.accept (1 samples, 0.07%)</title><rect x="11.7" y="1139.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.07%)</title><rect x="11.7" y="1123.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.07%)</title><rect x="11.7" y="1107.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.7" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.07%)</title><rect x="11.7" y="1091.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.14%)</title><rect x="12.6" y="1171.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.14%)</title><rect x="12.6" y="1155.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="12.6" y="1139.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="12.6" y="1123.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="12.6" y="1107.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="12.6" y="1091.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="12.6" y="1075.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="12.6" y="1059.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.6" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="12.6" y="1043.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="15.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="13.4" y="1091.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="13.4" y="1075.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="13.4" y="1059.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="14.3" y="1171.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="14.3" y="1155.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (181 samples, 13.06%)</title><rect x="15.1" y="1171.0" width="154.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.1" y="1182.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2074020945.accept (175 samples, 12.63%)</title><rect x="15.1" y="1155.0" width="149.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.1" y="1166.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (175 samples, 12.63%)</title><rect x="15.1" y="1139.0" width="149.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.1" y="1150.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (147 samples, 10.61%)</title><rect x="15.1" y="1123.0" width="125.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.1" y="1134.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (147 samples, 10.61%)</title><rect x="15.1" y="1107.0" width="125.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.1" y="1118.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (147 samples, 10.61%)</title><rect x="15.1" y="1091.0" width="125.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.1" y="1102.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (147 samples, 10.61%)</title><rect x="15.1" y="1075.0" width="125.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.1" y="1086.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (147 samples, 10.61%)</title><rect x="15.1" y="1059.0" width="125.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.1" y="1070.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (147 samples, 10.61%)</title><rect x="15.1" y="1043.0" width="125.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.1" y="1054.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (98 samples, 7.07%)</title><rect x="15.1" y="1027.0" width="83.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.1" y="1038.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (15 samples, 1.08%)</title><rect x="15.1" y="1011.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (15 samples, 1.08%)</title><rect x="15.1" y="995.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (12 samples, 0.87%)</title><rect x="17.7" y="979.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (12 samples, 0.87%)</title><rect x="17.7" y="963.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.29%)</title><rect x="27.9" y="1011.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (4 samples, 0.29%)</title><rect x="27.9" y="995.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="29.6" y="979.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.6" y="990.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.07%)</title><rect x="29.6" y="963.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="32.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="30.4" y="979.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 5.70%)</title><rect x="31.3" y="1011.0" width="67.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.3" y="1022.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 5.70%)</title><rect x="31.3" y="995.0" width="67.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.3" y="1006.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (78 samples, 5.63%)</title><rect x="31.3" y="979.0" width="66.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.3" y="990.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (78 samples, 5.63%)</title><rect x="31.3" y="963.0" width="66.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.3" y="974.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (78 samples, 5.63%)</title><rect x="31.3" y="947.0" width="66.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.3" y="958.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (69 samples, 4.98%)</title><rect x="31.3" y="931.0" width="58.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="34.3" y="942.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.29%)</title><rect x="32.1" y="915.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="35.1" y="926.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="35.5" y="915.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="38.5" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.22%)</title><rect x="36.4" y="915.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="39.4" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 2.89%)</title><rect x="38.9" y="915.0" width="34.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="41.9" y="926.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.14%)</title><rect x="73.0" y="915.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="76.0" y="926.0"></text>
</g>
<g>
<title>pthread_mutex_lock (18 samples, 1.30%)</title><rect x="74.7" y="915.0" width="15.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="77.7" y="926.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="90.0" y="931.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="93.0" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.14%)</title><rect x="90.9" y="931.0" width="1.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="93.9" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.43%)</title><rect x="92.6" y="931.0" width="5.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="95.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="97.7" y="979.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="100.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (44 samples, 3.17%)</title><rect x="98.5" y="1027.0" width="37.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.5" y="1038.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (44 samples, 3.17%)</title><rect x="98.5" y="1011.0" width="37.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.5" y="1022.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (44 samples, 3.17%)</title><rect x="98.5" y="995.0" width="37.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="101.5" y="1006.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="134.3" y="979.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="137.3" y="990.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="135.2" y="979.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="138.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.36%)</title><rect x="136.0" y="1027.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.36%)</title><rect x="136.0" y="1011.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="139.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="136.0" y="995.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="136.0" y="979.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="139.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.29%)</title><rect x="136.9" y="995.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (4 samples, 0.29%)</title><rect x="136.9" y="979.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.22%)</title><rect x="140.3" y="1123.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.22%)</title><rect x="140.3" y="1107.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.22%)</title><rect x="140.3" y="1091.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (25 samples, 1.80%)</title><rect x="142.8" y="1123.0" width="21.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="145.8" y="1134.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (25 samples, 1.80%)</title><rect x="142.8" y="1107.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="145.8" y="1118.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.58%)</title><rect x="153.9" y="1091.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.29%)</title><rect x="153.9" y="1075.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="156.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.29%)</title><rect x="153.9" y="1059.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.29%)</title><rect x="153.9" y="1043.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="156.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="157.3" y="1075.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.22%)</title><rect x="158.1" y="1075.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.1" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.29%)</title><rect x="160.7" y="1091.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="163.7" y="1102.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="164.1" y="1155.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="167.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.22%)</title><rect x="165.8" y="1155.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="168.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.22%)</title><rect x="165.8" y="1139.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="168.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.22%)</title><rect x="165.8" y="1123.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="168.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.22%)</title><rect x="165.8" y="1107.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="168.8" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.22%)</title><rect x="165.8" y="1091.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="168.4" y="1155.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="168.4" y="1139.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 3.75%)</title><rect x="169.2" y="1171.0" width="44.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.2" y="1182.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 3.68%)</title><rect x="169.2" y="1155.0" width="43.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="172.2" y="1166.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.07%)</title><rect x="169.2" y="1139.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="172.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (38 samples, 2.74%)</title><rect x="170.1" y="1139.0" width="32.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.1" y="1150.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (38 samples, 2.74%)</title><rect x="170.1" y="1123.0" width="32.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.1" y="1134.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 2.60%)</title><rect x="170.9" y="1107.0" width="30.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.9" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (32 samples, 2.31%)</title><rect x="170.9" y="1091.0" width="27.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.9" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (32 samples, 2.31%)</title><rect x="170.9" y="1075.0" width="27.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.9" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 0.94%)</title><rect x="172.6" y="1059.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.29%)</title><rect x="180.3" y="1043.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.29%)</title><rect x="180.3" y="1027.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.29%)</title><rect x="180.3" y="1011.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.29%)</title><rect x="180.3" y="995.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="183.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.29%)</title><rect x="180.3" y="979.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.29%)</title><rect x="180.3" y="963.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.29%)</title><rect x="180.3" y="947.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (17 samples, 1.23%)</title><rect x="183.7" y="1059.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (17 samples, 1.23%)</title><rect x="183.7" y="1043.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (9 samples, 0.65%)</title><rect x="183.7" y="1027.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="186.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Optional.of (9 samples, 0.65%)</title><rect x="183.7" y="1011.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="186.7" y="1022.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="190.5" y="995.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="193.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (8 samples, 0.58%)</title><rect x="191.3" y="1027.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.3" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.58%)</title><rect x="191.3" y="1011.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="194.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="198.2" y="1091.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="198.2" y="1075.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.07%)</title><rect x="198.2" y="1059.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="198.2" y="1043.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="198.2" y="1027.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="201.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.22%)</title><rect x="199.0" y="1091.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.22%)</title><rect x="199.0" y="1075.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.07%)</title><rect x="199.0" y="1059.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="199.0" y="1043.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.07%)</title><rect x="199.0" y="1027.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.07%)</title><rect x="199.0" y="1011.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.0" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="199.0" y="995.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="202.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="199.9" y="1059.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="199.9" y="1043.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="200.7" y="1059.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="200.7" y="1043.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="200.7" y="1027.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="200.7" y="1011.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.07%)</title><rect x="201.6" y="1107.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.51%)</title><rect x="202.4" y="1139.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.43%)</title><rect x="202.4" y="1123.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.07%)</title><rect x="202.4" y="1107.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="205.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="202.4" y="1091.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="202.4" y="1075.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.4" y="1086.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="202.4" y="1059.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="202.4" y="1043.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="202.4" y="1027.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="202.4" y="1011.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (5 samples, 0.36%)</title><rect x="203.3" y="1107.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (4 samples, 0.29%)</title><rect x="204.1" y="1091.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.29%)</title><rect x="204.1" y="1075.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.22%)</title><rect x="205.0" y="1059.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.22%)</title><rect x="205.0" y="1043.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="208.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.22%)</title><rect x="205.0" y="1027.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.22%)</title><rect x="205.0" y="1011.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (3 samples, 0.22%)</title><rect x="205.0" y="995.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (3 samples, 0.22%)</title><rect x="205.0" y="979.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.0" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (2 samples, 0.14%)</title><rect x="205.0" y="963.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="205.8" y="947.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.07%)</title><rect x="205.8" y="931.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.07%)</title><rect x="206.7" y="963.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="207.5" y="1123.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="207.5" y="1107.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="210.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="207.5" y="1091.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.14%)</title><rect x="208.4" y="1139.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="211.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="208.4" y="1123.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="208.4" y="1107.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.07%)</title><rect x="208.4" y="1091.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.07%)</title><rect x="208.4" y="1075.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.07%)</title><rect x="208.4" y="1059.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="208.4" y="1043.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="208.4" y="1027.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.07%)</title><rect x="208.4" y="1011.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.07%)</title><rect x="208.4" y="995.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="208.4" y="979.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="209.2" y="1123.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="209.2" y="1107.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="209.2" y="1091.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="209.2" y="1075.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="209.2" y="1059.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="209.2" y="1043.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="212.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.toStruct (1 samples, 0.07%)</title><rect x="209.2" y="1027.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.14%)</title><rect x="210.1" y="1139.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.14%)</title><rect x="210.1" y="1123.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.14%)</title><rect x="210.1" y="1107.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="210.9" y="1091.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="211.8" y="1139.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="211.8" y="1123.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="211.8" y="1107.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="214.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="211.8" y="1091.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="214.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.07%)</title><rect x="212.6" y="1155.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (699 samples, 50.43%)</title><rect x="213.5" y="1203.0" width="595.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.5" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (699 samples, 50.43%)</title><rect x="213.5" y="1187.0" width="595.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.5" y="1198.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (699 samples, 50.43%)</title><rect x="213.5" y="1171.0" width="595.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.5" y="1182.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883020.run (457 samples, 32.97%)</title><rect x="217.7" y="1155.0" width="389.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.7" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (457 samples, 32.97%)</title><rect x="217.7" y="1139.0" width="389.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.7" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (457 samples, 32.97%)</title><rect x="217.7" y="1123.0" width="389.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.7" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (449 samples, 32.40%)</title><rect x="217.7" y="1107.0" width="382.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.7" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.07%)</title><rect x="222.0" y="1091.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.07%)</title><rect x="222.0" y="1075.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/1542620057.get (1 samples, 0.07%)</title><rect x="222.0" y="1059.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.07%)</title><rect x="222.0" y="1043.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.0" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="222.0" y="1027.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="225.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (146 samples, 10.53%)</title><rect x="222.8" y="1091.0" width="124.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.8" y="1102.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (146 samples, 10.53%)</title><rect x="222.8" y="1075.0" width="124.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.8" y="1086.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (146 samples, 10.53%)</title><rect x="222.8" y="1059.0" width="124.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.8" y="1070.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (146 samples, 10.53%)</title><rect x="222.8" y="1043.0" width="124.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.8" y="1054.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (146 samples, 10.53%)</title><rect x="222.8" y="1027.0" width="124.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.8" y="1038.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (146 samples, 10.53%)</title><rect x="222.8" y="1011.0" width="124.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.8" y="1022.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (53 samples, 3.82%)</title><rect x="222.8" y="995.0" width="45.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.8" y="1006.0">com/..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="237.3" y="979.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="240.3" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.79%)</title><rect x="239.0" y="979.0" width="9.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="242.0" y="990.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.36%)</title><rect x="244.1" y="963.0" width="4.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="247.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.29%)</title><rect x="248.4" y="979.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.22%)</title><rect x="249.2" y="963.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.22%)</title><rect x="249.2" y="947.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.2" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.22%)</title><rect x="249.2" y="931.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.2" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.22%)</title><rect x="249.2" y="915.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.2" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.22%)</title><rect x="249.2" y="899.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.2" y="910.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.07%)</title><rect x="250.9" y="883.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="253.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (19 samples, 1.37%)</title><rect x="251.8" y="979.0" width="16.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 0.51%)</title><rect x="262.0" y="963.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.0" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="262.0" y="947.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="265.0" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="262.0" y="931.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="265.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.36%)</title><rect x="262.9" y="947.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.36%)</title><rect x="262.9" y="931.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="267.1" y="947.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.07%)</title><rect x="267.1" y="931.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.07%)</title><rect x="267.1" y="915.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.1" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="267.1" y="899.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="270.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (86 samples, 6.20%)</title><rect x="268.0" y="995.0" width="73.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.0" y="1006.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.22%)</title><rect x="269.7" y="979.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (4 samples, 0.29%)</title><rect x="272.2" y="979.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.07%)</title><rect x="275.6" y="979.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="278.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 0.94%)</title><rect x="276.5" y="979.0" width="11.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.87%)</title><rect x="277.3" y="963.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.65%)</title><rect x="279.9" y="947.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (9 samples, 0.65%)</title><rect x="279.9" y="931.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.9" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="282.4" y="915.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="285.4" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="282.4" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="285.4" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="282.4" y="883.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="285.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (5 samples, 0.36%)</title><rect x="283.3" y="915.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.51%)</title><rect x="287.5" y="979.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.5" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="288.4" y="963.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="291.4" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="288.4" y="947.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="291.4" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="288.4" y="931.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="291.4" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="289.2" y="947.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="292.2" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="289.2" y="931.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="292.2" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="289.2" y="915.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="292.2" y="926.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="289.2" y="899.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="292.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.29%)</title><rect x="290.1" y="963.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (54 samples, 3.90%)</title><rect x="293.5" y="979.0" width="46.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.5" y="990.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.79%)</title><rect x="293.5" y="963.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.07%)</title><rect x="299.5" y="947.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.07%)</title><rect x="299.5" y="931.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.07%)</title><rect x="299.5" y="915.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="300.3" y="947.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="303.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="300.3" y="931.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="302.0" y="947.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 0.36%)</title><rect x="302.9" y="963.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (38 samples, 2.74%)</title><rect x="307.1" y="963.0" width="32.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.1" y="974.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (38 samples, 2.74%)</title><rect x="307.1" y="947.0" width="32.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.1" y="958.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="307.1" y="931.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (37 samples, 2.67%)</title><rect x="308.0" y="931.0" width="31.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.0" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.87%)</title><rect x="309.7" y="915.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.51%)</title><rect x="312.2" y="899.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="315.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.51%)</title><rect x="312.2" y="883.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="315.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.51%)</title><rect x="312.2" y="867.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.14%)</title><rect x="316.5" y="851.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="318.2" y="899.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="319.0" y="899.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.36%)</title><rect x="319.9" y="915.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="322.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.29%)</title><rect x="320.8" y="899.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.29%)</title><rect x="320.8" y="883.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.29%)</title><rect x="320.8" y="867.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.8" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.29%)</title><rect x="320.8" y="851.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="324.2" y="915.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="327.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.43%)</title><rect x="325.0" y="915.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="328.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.43%)</title><rect x="325.0" y="899.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="328.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.43%)</title><rect x="325.0" y="883.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="328.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.43%)</title><rect x="325.0" y="867.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="328.0" y="878.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.22%)</title><rect x="327.6" y="851.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.6" y="862.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.22%)</title><rect x="327.6" y="835.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.6" y="846.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.22%)</title><rect x="327.6" y="819.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (9 samples, 0.65%)</title><rect x="330.1" y="915.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="333.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.65%)</title><rect x="330.1" y="899.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.65%)</title><rect x="330.1" y="883.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="333.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.14%)</title><rect x="336.1" y="867.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="339.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.14%)</title><rect x="337.8" y="915.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="340.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.14%)</title><rect x="339.5" y="979.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="342.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.51%)</title><rect x="341.2" y="995.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.07%)</title><rect x="342.0" y="979.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="345.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.36%)</title><rect x="342.9" y="979.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.36%)</title><rect x="342.9" y="963.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="345.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.36%)</title><rect x="342.9" y="947.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="345.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.36%)</title><rect x="342.9" y="931.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (277 samples, 19.99%)</title><rect x="347.1" y="1091.0" width="235.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.1" y="1102.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (44 samples, 3.17%)</title><rect x="347.1" y="1075.0" width="37.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.1" y="1086.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="347.1" y="1059.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="350.1" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (43 samples, 3.10%)</title><rect x="348.0" y="1059.0" width="36.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.0" y="1070.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (41 samples, 2.96%)</title><rect x="349.7" y="1043.0" width="34.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="352.7" y="1054.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (31 samples, 2.24%)</title><rect x="351.4" y="1027.0" width="26.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.4" y="1038.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (31 samples, 2.24%)</title><rect x="351.4" y="1011.0" width="26.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="354.4" y="1022.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (31 samples, 2.24%)</title><rect x="351.4" y="995.0" width="26.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.4" y="1006.0">j..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 0.58%)</title><rect x="377.8" y="1027.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.14%)</title><rect x="382.9" y="1011.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="385.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.14%)</title><rect x="382.9" y="995.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.29%)</title><rect x="384.6" y="1075.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="387.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.22%)</title><rect x="385.5" y="1059.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.5" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.22%)</title><rect x="385.5" y="1043.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (164 samples, 11.83%)</title><rect x="388.0" y="1075.0" width="139.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.0" y="1086.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (164 samples, 11.83%)</title><rect x="388.0" y="1059.0" width="139.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="391.0" y="1070.0">com/linecorp/deca..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="398.2" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="401.2" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="398.2" y="1027.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="401.2" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="398.2" y="1011.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="401.2" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="398.2" y="995.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="401.2" y="1006.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="398.2" y="979.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="401.2" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="399.1" y="1043.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="402.1" y="1054.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="399.1" y="1027.0" width="2.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="402.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (56 samples, 4.04%)</title><rect x="401.6" y="1043.0" width="47.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="404.6" y="1054.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (53 samples, 3.82%)</title><rect x="404.2" y="1027.0" width="45.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.2" y="1038.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (39 samples, 2.81%)</title><rect x="410.1" y="1011.0" width="33.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="413.1" y="1022.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (22 samples, 1.59%)</title><rect x="417.0" y="995.0" width="18.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (22 samples, 1.59%)</title><rect x="417.0" y="979.0" width="18.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="420.0" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (22 samples, 1.59%)</title><rect x="417.0" y="963.0" width="18.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.0" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.65%)</title><rect x="422.9" y="947.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="425.9" y="958.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="423.8" y="931.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="426.8" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.14%)</title><rect x="424.6" y="931.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="427.6" y="942.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.14%)</title><rect x="424.6" y="915.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="427.6" y="926.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="424.6" y="899.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="427.6" y="910.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="424.6" y="883.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="427.6" y="894.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.07%)</title><rect x="425.5" y="899.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="428.5" y="910.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.14%)</title><rect x="426.3" y="931.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="429.3" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.22%)</title><rect x="428.0" y="931.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="431.0" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="428.9" y="915.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="431.9" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="428.9" y="899.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="431.9" y="910.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="428.9" y="883.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="431.9" y="894.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="429.7" y="899.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="432.7" y="910.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="429.7" y="883.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="432.7" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="430.6" y="947.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="433.6" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.36%)</title><rect x="431.4" y="947.0" width="4.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="434.4" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.51%)</title><rect x="435.7" y="995.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.7" y="1006.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="441.6" y="995.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="444.6" y="1006.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.14%)</title><rect x="443.3" y="1011.0" width="1.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="446.3" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.36%)</title><rect x="445.1" y="1011.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="448.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="449.3" y="1043.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (10 samples, 0.72%)</title><rect x="450.2" y="1043.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.toString (10 samples, 0.72%)</title><rect x="450.2" y="1027.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="453.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (10 samples, 0.72%)</title><rect x="450.2" y="1011.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="453.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="457.8" y="995.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="460.8" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (81 samples, 5.84%)</title><rect x="458.7" y="1043.0" width="68.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="461.7" y="1054.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (80 samples, 5.77%)</title><rect x="459.5" y="1027.0" width="68.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="462.5" y="1038.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="459.5" y="1011.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="462.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="459.5" y="995.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="462.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="459.5" y="979.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="462.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="459.5" y="963.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="462.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.29%)</title><rect x="460.4" y="1011.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="463.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.29%)</title><rect x="460.4" y="995.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="463.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.29%)</title><rect x="460.4" y="979.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.22%)</title><rect x="461.2" y="963.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="464.2" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (75 samples, 5.41%)</title><rect x="463.8" y="1011.0" width="63.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.8" y="1022.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (69 samples, 4.98%)</title><rect x="468.9" y="995.0" width="58.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.9" y="1006.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (26 samples, 1.88%)</title><rect x="505.5" y="979.0" width="22.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="508.5" y="990.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.14%)</title><rect x="515.7" y="963.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="518.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.65%)</title><rect x="517.4" y="963.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="520.4" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="524.2" y="947.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="527.2" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="524.2" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="527.2" y="942.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="524.2" y="915.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="527.2" y="926.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.22%)</title><rect x="525.1" y="963.0" width="2.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="528.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 3.25%)</title><rect x="527.6" y="1075.0" width="38.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="530.6" y="1086.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 3.25%)</title><rect x="527.6" y="1059.0" width="38.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="530.6" y="1070.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/588734280.process (24 samples, 1.73%)</title><rect x="529.3" y="1043.0" width="20.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="532.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (22 samples, 1.59%)</title><rect x="531.0" y="1027.0" width="18.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="534.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (19 samples, 1.37%)</title><rect x="531.0" y="1011.0" width="16.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.0" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.22%)</title><rect x="534.4" y="995.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="537.4" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.22%)</title><rect x="534.4" y="979.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="537.4" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.22%)</title><rect x="534.4" y="963.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="537.4" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.22%)</title><rect x="534.4" y="947.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="536.1" y="931.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="539.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.29%)</title><rect x="537.0" y="995.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="540.0" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="537.0" y="979.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="540.0" y="990.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="537.0" y="963.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="540.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.51%)</title><rect x="540.4" y="995.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="543.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.07%)</title><rect x="546.4" y="995.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="549.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.22%)</title><rect x="547.2" y="1011.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="550.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="548.1" y="995.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="551.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.07%)</title><rect x="548.1" y="979.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="551.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.07%)</title><rect x="548.1" y="963.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="548.9" y="995.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="551.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="548.9" y="979.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.9" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="548.9" y="963.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="551.9" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="548.9" y="947.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="551.9" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="548.9" y="931.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.9" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="548.9" y="915.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="551.9" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="548.9" y="899.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="551.9" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="548.9" y="883.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="551.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.43%)</title><rect x="549.8" y="1043.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.8" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="549.8" y="1027.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="552.8" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="549.8" y="1011.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="552.8" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="549.8" y="995.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="552.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="549.8" y="979.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="552.8" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="549.8" y="963.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="552.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="549.8" y="947.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="552.8" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.36%)</title><rect x="550.6" y="1027.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="553.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.07%)</title><rect x="554.9" y="1043.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.07%)</title><rect x="554.9" y="1027.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="557.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/831911414.get$Lambda (1 samples, 0.07%)</title><rect x="554.9" y="1011.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="557.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.22%)</title><rect x="555.7" y="1043.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="558.7" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.14%)</title><rect x="556.6" y="1027.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="559.6" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.07%)</title><rect x="557.4" y="1011.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="560.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.29%)</title><rect x="558.3" y="1043.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="561.3" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.29%)</title><rect x="558.3" y="1027.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="561.3" y="1038.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.22%)</title><rect x="558.3" y="1011.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="561.3" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.07%)</title><rect x="560.8" y="1011.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="563.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="561.7" y="1043.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="564.7" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="561.7" y="1027.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="564.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.29%)</title><rect x="562.5" y="1043.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="565.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="565.1" y="1027.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="568.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.44%)</title><rect x="565.9" y="1075.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 1.44%)</title><rect x="565.9" y="1059.0" width="17.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="568.9" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.43%)</title><rect x="570.2" y="1043.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="573.2" y="1054.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="571.9" y="1027.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="574.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.65%)</title><rect x="575.3" y="1043.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="578.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/817248441.accept (9 samples, 0.65%)</title><rect x="575.3" y="1027.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="578.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.65%)</title><rect x="575.3" y="1011.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="578.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.65%)</title><rect x="575.3" y="995.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="578.3" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.65%)</title><rect x="575.3" y="979.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="578.3" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.65%)</title><rect x="575.3" y="963.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.3" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="579.6" y="947.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="582.6" y="958.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="579.6" y="931.0" width="2.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="582.6" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="582.1" y="947.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="585.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 0.87%)</title><rect x="583.0" y="1091.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="586.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 0.87%)</title><rect x="583.0" y="1075.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="586.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.87%)</title><rect x="583.0" y="1059.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="586.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/817248441.accept (12 samples, 0.87%)</title><rect x="583.0" y="1043.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="586.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (12 samples, 0.87%)</title><rect x="583.0" y="1027.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="586.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (12 samples, 0.87%)</title><rect x="583.0" y="1011.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="586.0" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (12 samples, 0.87%)</title><rect x="583.0" y="995.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="586.0" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.create (12 samples, 0.87%)</title><rect x="583.0" y="979.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="586.0" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="593.2" y="1091.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="596.2" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.07%)</title><rect x="593.2" y="1075.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="596.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="593.2" y="1059.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="596.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="593.2" y="1043.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="596.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="593.2" y="1027.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="596.2" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.51%)</title><rect x="594.0" y="1091.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="597.0" y="1102.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.51%)</title><rect x="594.0" y="1075.0" width="6.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="597.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="600.0" y="1107.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.0" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="600.0" y="1091.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.0" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="600.0" y="1075.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.0" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="600.0" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="603.0" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="600.0" y="1043.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="603.0" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="600.0" y="1027.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="603.0" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="600.0" y="1011.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="603.0" y="1022.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="600.0" y="995.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="603.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.51%)</title><rect x="600.9" y="1107.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="603.9" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.43%)</title><rect x="601.7" y="1091.0" width="5.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="604.7" y="1102.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.43%)</title><rect x="601.7" y="1075.0" width="5.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="604.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.43%)</title><rect x="606.8" y="1155.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.43%)</title><rect x="606.8" y="1139.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="609.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.43%)</title><rect x="606.8" y="1123.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.43%)</title><rect x="606.8" y="1107.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883020.run (3 samples, 0.22%)</title><rect x="609.4" y="1091.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="612.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (231 samples, 16.67%)</title><rect x="611.9" y="1155.0" width="196.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="614.9" y="1166.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (229 samples, 16.52%)</title><rect x="612.8" y="1139.0" width="194.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="615.8" y="1150.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (208 samples, 15.01%)</title><rect x="617.0" y="1123.0" width="177.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="620.0" y="1134.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (21 samples, 1.52%)</title><rect x="626.4" y="1107.0" width="17.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="629.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (13 samples, 0.94%)</title><rect x="644.3" y="1107.0" width="11.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="644.3" y="1091.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="647.3" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="644.3" y="1075.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="647.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.87%)</title><rect x="645.1" y="1091.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.87%)</title><rect x="645.1" y="1075.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="648.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.87%)</title><rect x="645.1" y="1059.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (163 samples, 11.76%)</title><rect x="655.3" y="1107.0" width="138.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.3" y="1118.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (163 samples, 11.76%)</title><rect x="655.3" y="1091.0" width="138.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="658.3" y="1102.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="663.0" y="1075.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="666.0" y="1086.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="663.9" y="1075.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="666.9" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Park (148 samples, 10.68%)</title><rect x="664.7" y="1075.0" width="126.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="667.7" y="1086.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="669.0" y="1059.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="672.0" y="1070.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="669.8" y="1059.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="672.8" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (34 samples, 2.45%)</title><rect x="670.7" y="1059.0" width="28.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="673.7" y="1070.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.65%)</title><rect x="680.9" y="1043.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="683.9" y="1054.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.29%)</title><rect x="682.6" y="1027.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="685.6" y="1038.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="685.1" y="1011.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="688.1" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.22%)</title><rect x="686.0" y="1027.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="689.0" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.22%)</title><rect x="688.5" y="1043.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="691.5" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.65%)</title><rect x="691.1" y="1043.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="694.1" y="1054.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="698.8" y="1043.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="701.8" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="699.6" y="1059.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="702.6" y="1070.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.58%)</title><rect x="700.5" y="1059.0" width="6.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="703.5" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 2.38%)</title><rect x="707.3" y="1059.0" width="28.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="710.3" y="1070.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (43 samples, 3.10%)</title><rect x="735.4" y="1059.0" width="36.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="738.4" y="1070.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.14%)</title><rect x="772.0" y="1059.0" width="1.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="775.0" y="1070.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="773.7" y="1059.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="776.7" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.29%)</title><rect x="774.5" y="1059.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="777.5" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.36%)</title><rect x="777.9" y="1059.0" width="4.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="780.9" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.22%)</title><rect x="782.2" y="1059.0" width="2.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="785.2" y="1070.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="784.7" y="1059.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="787.7" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.14%)</title><rect x="785.6" y="1059.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="788.6" y="1070.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="787.3" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="790.3" y="1070.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.22%)</title><rect x="788.2" y="1059.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="791.2" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.14%)</title><rect x="790.7" y="1075.0" width="1.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="793.7" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="792.4" y="1075.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="795.4" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="793.3" y="1075.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="796.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 1.15%)</title><rect x="794.1" y="1123.0" width="13.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="797.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.15%)</title><rect x="794.1" y="1107.0" width="13.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="797.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.15%)</title><rect x="794.1" y="1091.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="797.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.15%)</title><rect x="794.1" y="1075.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.07%)</title><rect x="807.7" y="1139.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="810.7" y="1150.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.07%)</title><rect x="808.6" y="1203.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="811.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="809.4" y="1203.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="809.4" y="1187.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="812.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="809.4" y="1171.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="812.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="809.4" y="1155.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="812.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="809.4" y="1139.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="812.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="809.4" y="1123.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="812.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="809.4" y="1107.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="809.4" y="1091.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="812.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="809.4" y="1075.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="812.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="809.4" y="1059.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="812.4" y="1070.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.07%)</title><rect x="809.4" y="1043.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="812.4" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="809.4" y="1027.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.4" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.07%)</title><rect x="809.4" y="1011.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="812.4" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.07%)</title><rect x="809.4" y="995.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="812.4" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.07%)</title><rect x="809.4" y="979.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.4" y="990.0"></text>
</g>
<g>
<title>__writev (1 samples, 0.07%)</title><rect x="809.4" y="963.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="812.4" y="974.0"></text>
</g>
<g>
<title>start_thread (446 samples, 32.18%)</title><rect x="810.3" y="1203.0" width="379.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="813.3" y="1214.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (446 samples, 32.18%)</title><rect x="810.3" y="1187.0" width="379.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="813.3" y="1198.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.52%)</title><rect x="810.3" y="1171.0" width="17.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="813.3" y="1182.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.14%)</title><rect x="810.3" y="1155.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="813.3" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.14%)</title><rect x="810.3" y="1139.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="813.3" y="1150.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.14%)</title><rect x="810.3" y="1123.0" width="1.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="813.3" y="1134.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.37%)</title><rect x="812.0" y="1155.0" width="16.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="815.0" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.07%)</title><rect x="812.0" y="1139.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="815.0" y="1150.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="812.0" y="1123.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="815.0" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (12 samples, 0.87%)</title><rect x="812.8" y="1139.0" width="10.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="815.8" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="812.8" y="1123.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="815.8" y="1134.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.14%)</title><rect x="812.8" y="1107.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="815.8" y="1118.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.14%)</title><rect x="812.8" y="1091.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="815.8" y="1102.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.07%)</title><rect x="812.8" y="1075.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="815.8" y="1086.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.07%)</title><rect x="812.8" y="1059.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="815.8" y="1070.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.07%)</title><rect x="812.8" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="815.8" y="1054.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.07%)</title><rect x="812.8" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="815.8" y="1038.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.07%)</title><rect x="813.7" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="816.7" y="1086.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="813.7" y="1059.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="816.7" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (10 samples, 0.72%)</title><rect x="814.5" y="1123.0" width="8.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="817.5" y="1134.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (10 samples, 0.72%)</title><rect x="814.5" y="1107.0" width="8.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="817.5" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.43%)</title><rect x="823.1" y="1139.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="826.1" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.43%)</title><rect x="823.1" y="1123.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="826.1" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.43%)</title><rect x="823.1" y="1107.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="826.1" y="1118.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.43%)</title><rect x="823.1" y="1091.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="826.1" y="1102.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.43%)</title><rect x="823.1" y="1075.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="826.1" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.43%)</title><rect x="823.1" y="1059.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="826.1" y="1070.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.29%)</title><rect x="824.8" y="1043.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="827.8" y="1054.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="827.3" y="1027.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="830.3" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="827.3" y="1011.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="830.3" y="1022.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.07%)</title><rect x="827.3" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="830.3" y="1006.0"></text>
</g>
<g>
<title>JavaThread::run() (422 samples, 30.45%)</title><rect x="828.2" y="1171.0" width="359.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="831.2" y="1182.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (422 samples, 30.45%)</title><rect x="828.2" y="1155.0" width="359.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="831.2" y="1166.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (420 samples, 30.30%)</title><rect x="828.2" y="1139.0" width="357.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="831.2" y="1150.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (419 samples, 30.23%)</title><rect x="828.2" y="1123.0" width="356.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="831.2" y="1134.0">CompileBroker::invoke_compiler_on_method(Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (419 samples, 30.23%)</title><rect x="828.2" y="1107.0" width="356.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="831.2" y="1118.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (419 samples, 30.23%)</title><rect x="828.2" y="1091.0" width="356.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="831.2" y="1102.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (167 samples, 12.05%)</title><rect x="828.2" y="1075.0" width="142.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="831.2" y="1086.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.29%)</title><rect x="828.2" y="1059.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="831.2" y="1070.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.22%)</title><rect x="828.2" y="1043.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.2" y="1054.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="829.9" y="1027.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="832.9" y="1038.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.07%)</title><rect x="829.9" y="1011.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="832.9" y="1022.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="830.7" y="1043.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="833.7" y="1054.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="830.7" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="833.7" y="1038.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (11 samples, 0.79%)</title><rect x="831.6" y="1059.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="834.6" y="1070.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.22%)</title><rect x="833.3" y="1043.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="836.3" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.14%)</title><rect x="833.3" y="1027.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="836.3" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="833.3" y="1011.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="836.3" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="835.0" y="1027.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="838.0" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="835.0" y="1011.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="838.0" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.29%)</title><rect x="835.8" y="1043.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="838.8" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.22%)</title><rect x="836.7" y="1027.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="839.7" y="1038.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.07%)</title><rect x="839.2" y="1043.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="842.2" y="1054.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.07%)</title><rect x="840.1" y="1043.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="843.1" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (18 samples, 1.30%)</title><rect x="840.9" y="1059.0" width="15.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="843.9" y="1070.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.07%)</title><rect x="840.9" y="1043.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="843.9" y="1054.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (4 samples, 0.29%)</title><rect x="841.8" y="1043.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="844.8" y="1054.0"></text>
</g>
<g>
<title>ConINode::Opcode() const (1 samples, 0.07%)</title><rect x="843.5" y="1027.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="846.5" y="1038.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.07%)</title><rect x="844.3" y="1027.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="847.3" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (13 samples, 0.94%)</title><rect x="845.2" y="1043.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="848.2" y="1054.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (7 samples, 0.51%)</title><rect x="846.9" y="1027.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="849.9" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="852.9" y="1027.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="855.9" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="852.9" y="1011.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="855.9" y="1022.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="852.9" y="995.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="855.9" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.22%)</title><rect x="853.7" y="1027.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="856.7" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.22%)</title><rect x="853.7" y="1011.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="856.7" y="1022.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.14%)</title><rect x="853.7" y="995.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="856.7" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.14%)</title><rect x="853.7" y="979.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="856.7" y="990.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.14%)</title><rect x="853.7" y="963.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="856.7" y="974.0"></text>
</g>
<g>
<title>MachOper::operator new(unsigned long, Compile*) (1 samples, 0.07%)</title><rect x="854.6" y="947.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="857.6" y="958.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="855.4" y="995.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="858.4" y="1006.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="856.3" y="1059.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="859.3" y="1070.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.07%)</title><rect x="856.3" y="1043.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="859.3" y="1054.0"></text>
</g>
<g>
<title>Block::succ_fall_through(unsigned int) (1 samples, 0.07%)</title><rect x="856.3" y="1027.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="859.3" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.07%)</title><rect x="857.1" y="1059.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="860.1" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.07%)</title><rect x="857.1" y="1043.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="860.1" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.36%)</title><rect x="858.0" y="1059.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="861.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.07%)</title><rect x="858.0" y="1043.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.0" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.07%)</title><rect x="858.0" y="1027.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="861.0" y="1038.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.07%)</title><rect x="858.0" y="1011.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="861.0" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.29%)</title><rect x="858.8" y="1043.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="861.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.07%)</title><rect x="858.8" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="861.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.07%)</title><rect x="858.8" y="1011.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="861.8" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="859.7" y="1027.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="862.7" y="1038.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="859.7" y="1011.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="862.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="860.5" y="1011.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="863.5" y="1022.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="861.4" y="1027.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="864.4" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.07%)</title><rect x="862.2" y="1059.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="865.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (126 samples, 9.09%)</title><rect x="863.1" y="1059.0" width="107.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="866.1" y="1070.0">PhaseChaitin:..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="863.1" y="1043.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="866.1" y="1054.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.22%)</title><rect x="863.9" y="1043.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="866.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.58%)</title><rect x="866.5" y="1043.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="869.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.22%)</title><rect x="869.9" y="1027.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="872.9" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="871.6" y="1011.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.6" y="1022.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.07%)</title><rect x="872.4" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (12 samples, 0.87%)</title><rect x="873.3" y="1043.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="876.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (9 samples, 0.65%)</title><rect x="875.8" y="1027.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="878.8" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="877.5" y="1011.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.5" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.43%)</title><rect x="878.4" y="1011.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="881.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (15 samples, 1.08%)</title><rect x="883.5" y="1043.0" width="12.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="886.5" y="1054.0"></text>
</g>
<g>
<title>loadRangeNode::rule() const (1 samples, 0.07%)</title><rect x="895.4" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="898.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (25 samples, 1.80%)</title><rect x="896.3" y="1043.0" width="21.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.3" y="1054.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="904.8" y="1027.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="907.8" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="905.6" y="1027.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="908.6" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="906.5" y="1027.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="909.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.79%)</title><rect x="907.3" y="1027.0" width="9.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="910.3" y="1038.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="911.6" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="914.6" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.36%)</title><rect x="912.5" y="1011.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="915.5" y="1022.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="916.7" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="919.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="917.6" y="1043.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="920.6" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (13 samples, 0.94%)</title><rect x="918.4" y="1043.0" width="11.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.4" y="1054.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="924.4" y="1027.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="927.4" y="1038.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.29%)</title><rect x="925.2" y="1027.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="928.2" y="1038.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.07%)</title><rect x="928.6" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="931.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.14%)</title><rect x="929.5" y="1043.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="932.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.3" y="1027.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.51%)</title><rect x="931.2" y="1043.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.22%)</title><rect x="934.6" y="1027.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="937.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="937.1" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="940.1" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (11 samples, 0.79%)</title><rect x="938.0" y="1043.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="941.0" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 0.72%)</title><rect x="938.8" y="1027.0" width="8.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="941.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="938.8" y="1011.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.8" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 0.65%)</title><rect x="939.7" y="1011.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="942.7" y="1022.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="995.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="942.7" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.07%)</title><rect x="941.4" y="995.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="944.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Union(Node const*, Node const*) (1 samples, 0.07%)</title><rect x="941.4" y="979.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="944.4" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.22%)</title><rect x="942.3" y="995.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="945.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (3 samples, 0.22%)</title><rect x="944.8" y="995.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.29%)</title><rect x="947.4" y="1043.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="950.4" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="949.9" y="1027.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="952.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (6 samples, 0.43%)</title><rect x="950.8" y="1043.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="953.8" y="1054.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="953.3" y="1027.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="956.3" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="954.2" y="1027.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="957.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (6 samples, 0.43%)</title><rect x="955.9" y="1043.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="958.9" y="1054.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (5 samples, 0.36%)</title><rect x="956.7" y="1027.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.7" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (10 samples, 0.72%)</title><rect x="961.0" y="1043.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="964.0" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.29%)</title><rect x="966.1" y="1027.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.1" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="967.8" y="1011.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="970.8" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="969.5" y="1043.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="972.5" y="1054.0"></text>
</g>
<g>
<title>Compile::Optimize() (236 samples, 17.03%)</title><rect x="970.3" y="1075.0" width="201.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.3" y="1086.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="970.3" y="1059.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.3" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="970.3" y="1043.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="973.3" y="1054.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="970.3" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.3" y="1038.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.07%)</title><rect x="970.3" y="1011.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.3" y="1022.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.14%)</title><rect x="971.2" y="1059.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="974.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="972.0" y="1043.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="975.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (8 samples, 0.58%)</title><rect x="972.9" y="1059.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="975.9" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (8 samples, 0.58%)</title><rect x="972.9" y="1043.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="975.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.07%)</title><rect x="972.9" y="1027.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.07%)</title><rect x="972.9" y="1011.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.9" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.07%)</title><rect x="972.9" y="995.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.9" y="1006.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="972.9" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.9" y="990.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="972.9" y="963.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.9" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="972.9" y="947.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="975.9" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.9" y="931.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="975.9" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.07%)</title><rect x="972.9" y="915.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="975.9" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="972.9" y="899.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="975.9" y="910.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.07%)</title><rect x="972.9" y="883.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.9" y="894.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.07%)</title><rect x="972.9" y="867.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="975.9" y="878.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_from(ProfileData const*) (1 samples, 0.07%)</title><rect x="972.9" y="851.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="975.9" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="972.9" y="835.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.9" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="972.9" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="975.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.8" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="973.8" y="1011.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="976.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (6 samples, 0.43%)</title><rect x="974.6" y="1027.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="977.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.29%)</title><rect x="974.6" y="1011.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="977.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.29%)</title><rect x="974.6" y="995.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="977.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.14%)</title><rect x="974.6" y="979.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="977.6" y="990.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="975.5" y="963.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="978.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="976.3" y="979.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.3" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.3" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.3" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.3" y="947.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.3" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.3" y="931.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.3" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.3" y="915.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.3" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.3" y="899.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.3" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.3" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.3" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.3" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.3" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="976.3" y="851.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.3" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="963.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="947.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="931.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="915.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="899.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="867.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="980.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="851.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="980.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="819.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="803.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="787.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="980.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="771.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="755.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="739.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="723.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="980.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="707.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="691.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="980.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="675.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="643.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="980.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="627.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="611.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="595.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="579.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="980.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="563.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="980.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="547.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="531.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="980.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="515.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="483.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="467.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="451.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="980.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="435.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="980.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="419.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="403.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="980.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="387.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="371.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="980.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="355.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="980.2" y="366.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="977.2" y="339.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.2" y="350.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="978.0" y="1011.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="981.0" y="1022.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="978.0" y="995.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.0" y="1006.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="978.0" y="979.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="981.0" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.07%)</title><rect x="978.9" y="1011.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="981.9" y="1022.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="978.9" y="995.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.9" y="1006.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="978.9" y="979.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.9" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.07%)</title><rect x="979.7" y="1059.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="982.7" y="1070.0"></text>
</g>
<g>
<title>LoadNode::klass_value_common(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="979.7" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="982.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (3 samples, 0.22%)</title><rect x="980.6" y="1059.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.6" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (3 samples, 0.22%)</title><rect x="980.6" y="1043.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="983.6" y="1054.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::push(Node* const&amp;) (1 samples, 0.07%)</title><rect x="981.4" y="1027.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.4" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.07%)</title><rect x="982.3" y="1027.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.3" y="1038.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="982.3" y="1011.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (197 samples, 14.21%)</title><rect x="983.1" y="1059.0" width="167.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="986.1" y="1070.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.14%)</title><rect x="983.1" y="1043.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.43%)</title><rect x="984.8" y="1043.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.8" y="1054.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (4 samples, 0.29%)</title><rect x="986.5" y="1027.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="989.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.51%)</title><rect x="989.9" y="1043.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.22%)</title><rect x="993.3" y="1027.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="995.0" y="1011.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="998.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (167 samples, 12.05%)</title><rect x="995.9" y="1043.0" width="142.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.9" y="1054.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.07%)</title><rect x="1005.3" y="1027.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1008.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (155 samples, 11.18%)</title><rect x="1006.1" y="1027.0" width="132.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.1" y="1038.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.43%)</title><rect x="1007.8" y="1011.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1010.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (147 samples, 10.61%)</title><rect x="1012.9" y="1011.0" width="125.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1015.9" y="1022.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1119.3" y="995.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1119.3" y="979.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (18 samples, 1.30%)</title><rect x="1120.2" y="995.0" width="15.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.22%)</title><rect x="1135.5" y="995.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1137.2" y="979.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.07%)</title><rect x="1138.1" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.07%)</title><rect x="1138.9" y="1043.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1138.9" y="1027.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.9" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1138.9" y="1011.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1141.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (8 samples, 0.58%)</title><rect x="1139.8" y="1043.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1141.5" y="1027.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1141.5" y="1011.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (5 samples, 0.36%)</title><rect x="1142.3" y="1027.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca(Node*, Node*) const (1 samples, 0.07%)</title><rect x="1143.2" y="1011.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.07%)</title><rect x="1143.2" y="995.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1144.0" y="1011.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.07%)</title><rect x="1144.9" y="1011.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1144.9" y="995.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1145.7" y="1011.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.7" y="1022.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1145.7" y="995.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.14%)</title><rect x="1146.6" y="1043.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.14%)</title><rect x="1146.6" y="1027.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.6" y="1038.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1146.6" y="1011.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1147.4" y="1011.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1147.4" y="995.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.4" y="1006.0"></text>
</g>
<g>
<title>VectorSet::operator[](unsigned int) const (1 samples, 0.07%)</title><rect x="1147.4" y="979.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.4" y="990.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (2 samples, 0.14%)</title><rect x="1148.3" y="1043.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.3" y="1054.0"></text>
</g>
<g>
<title>SuperWord::SuperWord(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1150.0" y="1043.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.0" y="1054.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.07%)</title><rect x="1150.0" y="1027.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.0" y="1038.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1150.0" y="1011.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.0" y="1022.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="1150.0" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.0" y="1006.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1150.0" y="979.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.0" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="1150.0" y="963.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1153.0" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (23 samples, 1.66%)</title><rect x="1150.8" y="1059.0" width="19.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (23 samples, 1.66%)</title><rect x="1150.8" y="1043.0" width="19.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.8" y="1054.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1150.8" y="1027.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.8" y="1038.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1150.8" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.8" y="1022.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1150.8" y="995.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1150.8" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="990.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1150.8" y="963.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.8" y="974.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1150.8" y="947.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.8" y="958.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1150.8" y="931.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.8" y="942.0"></text>
</g>
<g>
<title>EncodePNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1151.7" y="1027.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.7" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1151.7" y="1011.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.7" y="1022.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1151.7" y="995.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.7" y="1006.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1152.5" y="1027.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.5" y="1038.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.07%)</title><rect x="1154.2" y="1011.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.2" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (5 samples, 0.36%)</title><rect x="1155.1" y="1027.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.1" y="1038.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (3 samples, 0.22%)</title><rect x="1155.1" y="1011.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.1" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (3 samples, 0.22%)</title><rect x="1155.1" y="995.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.1" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 0.22%)</title><rect x="1155.1" y="979.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.1" y="990.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1157.6" y="1011.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.6" y="1022.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.07%)</title><rect x="1157.6" y="995.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.6" y="1006.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1157.6" y="979.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.6" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.07%)</title><rect x="1157.6" y="963.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.6" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1157.6" y="947.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.6" y="958.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1157.6" y="931.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1160.6" y="942.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1158.5" y="1011.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.5" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1158.5" y="995.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.5" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1158.5" y="979.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.5" y="990.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1159.4" y="1027.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.4" y="1038.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1159.4" y="1011.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.4" y="1022.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1160.2" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.2" y="1038.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1161.1" y="1027.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.1" y="1038.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1161.9" y="1027.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.43%)</title><rect x="1162.8" y="1027.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.14%)</title><rect x="1166.2" y="1011.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.2" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1167.9" y="1027.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1167.9" y="1011.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1167.9" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.9" y="1006.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1167.9" y="979.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="990.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1168.7" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.7" y="1022.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.6" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.6" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1169.6" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="995.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="979.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="963.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.6" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="947.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.6" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="931.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.6" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="915.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.6" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="899.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.6" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="883.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.6" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="867.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.6" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="851.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.6" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="835.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.6" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="819.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.6" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="803.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.6" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.6" y="787.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.6" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="771.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.6" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1170.4" y="1059.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1170.4" y="1043.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1170.4" y="1027.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.4" y="1038.0"></text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.07%)</title><rect x="1170.4" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.4" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 1.15%)</title><rect x="1171.3" y="1075.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.3" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 1.15%)</title><rect x="1171.3" y="1059.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 1.15%)</title><rect x="1171.3" y="1043.0" width="13.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 1.15%)</title><rect x="1171.3" y="1027.0" width="13.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (16 samples, 1.15%)</title><rect x="1171.3" y="1011.0" width="13.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 1.15%)</title><rect x="1171.3" y="995.0" width="13.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.3" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 1.01%)</title><rect x="1171.3" y="979.0" width="11.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.3" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 1.01%)</title><rect x="1171.3" y="963.0" width="11.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 1.01%)</title><rect x="1171.3" y="947.0" width="11.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 1.01%)</title><rect x="1171.3" y="931.0" width="11.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 1.01%)</title><rect x="1171.3" y="915.0" width="11.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 1.01%)</title><rect x="1171.3" y="899.0" width="11.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.58%)</title><rect x="1171.3" y="883.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.58%)</title><rect x="1171.3" y="867.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.51%)</title><rect x="1171.3" y="851.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.51%)</title><rect x="1171.3" y="835.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.51%)</title><rect x="1171.3" y="819.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.51%)</title><rect x="1171.3" y="803.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.3" y="814.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1171.3" y="787.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.3" y="798.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1171.3" y="771.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.3" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1171.3" y="755.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.3" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1171.3" y="739.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.3" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1171.3" y="723.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.3" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1171.3" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1171.3" y="691.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.3" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1171.3" y="675.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.3" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.07%)</title><rect x="1171.3" y="659.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.3" y="670.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::GrowableArray(Arena*, int, int, ciTypeFlow::Block* const&amp;) (1 samples, 0.07%)</title><rect x="1171.3" y="643.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.3" y="654.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.07%)</title><rect x="1171.3" y="627.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.43%)</title><rect x="1172.1" y="787.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.1" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.43%)</title><rect x="1172.1" y="771.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.43%)</title><rect x="1172.1" y="755.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.43%)</title><rect x="1172.1" y="739.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.43%)</title><rect x="1172.1" y="723.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.43%)</title><rect x="1172.1" y="707.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.1" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1172.1" y="691.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1172.1" y="675.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.1" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1172.1" y="659.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.1" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1172.1" y="643.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.1" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1172.1" y="627.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.1" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.1" y="611.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.1" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.1" y="595.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.1" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1172.1" y="579.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.1" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1172.1" y="563.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.1" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1172.1" y="547.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.1" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1172.1" y="531.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.1" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1172.1" y="515.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="526.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1172.1" y="499.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.1" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1172.1" y="483.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.1" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1172.1" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.1" y="478.0"></text>
</g>
<g>
<title>ciInstanceKlass::protection_domain() (1 samples, 0.07%)</title><rect x="1172.1" y="451.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1173.0" y="691.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1173.0" y="675.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1173.0" y="659.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1173.0" y="643.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1173.0" y="627.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1173.0" y="611.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.0" y="622.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.0" y="595.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.0" y="606.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1173.0" y="579.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.0" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1173.0" y="563.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.0" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1173.0" y="547.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.0" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1173.0" y="531.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.0" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.0" y="515.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::build_loop_tree(ciTypeFlow::Block*) (1 samples, 0.07%)</title><rect x="1173.0" y="499.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1173.8" y="595.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1173.8" y="579.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1173.8" y="563.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1173.8" y="547.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1173.8" y="531.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1173.8" y="515.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1173.8" y="499.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1173.8" y="483.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1173.8" y="467.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1173.8" y="451.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1173.8" y="435.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1173.8" y="419.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1173.8" y="403.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1173.8" y="387.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1173.8" y="371.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1173.8" y="355.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1173.8" y="339.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1173.8" y="323.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1173.8" y="307.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.8" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1173.8" y="291.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1173.8" y="275.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1173.8" y="259.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1173.8" y="243.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1173.8" y="227.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1173.8" y="211.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1173.8" y="195.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1173.8" y="179.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1173.8" y="163.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1173.8" y="147.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="158.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1173.8" y="131.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1174.7" y="419.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1174.7" y="403.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="414.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1174.7" y="387.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.7" y="398.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1174.7" y="371.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="382.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1174.7" y="355.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.7" y="366.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1174.7" y="339.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.7" y="350.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1174.7" y="323.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1175.5" y="515.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1175.5" y="499.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="510.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1175.5" y="483.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.5" y="494.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1175.5" y="467.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1175.5" y="451.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1175.5" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.4" y="691.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.4" y="675.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.4" y="659.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.4" y="643.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.4" y="627.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.4" y="611.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.4" y="595.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.4" y="579.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.4" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.4" y="547.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.4" y="531.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.4" y="515.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.4" y="499.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.4" y="483.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.4" y="467.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.4" y="451.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.4" y="435.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.4" y="419.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.4" y="403.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.4" y="387.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.4" y="371.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.4" y="382.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.07%)</title><rect x="1176.4" y="355.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="366.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1176.4" y="339.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="350.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1176.4" y="323.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="334.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1176.4" y="307.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1177.2" y="851.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="862.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1177.2" y="835.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.2" y="846.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1177.2" y="819.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.43%)</title><rect x="1178.1" y="883.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.36%)</title><rect x="1178.1" y="867.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.1" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.36%)</title><rect x="1178.1" y="851.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.36%)</title><rect x="1178.1" y="835.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.36%)</title><rect x="1178.1" y="819.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.36%)</title><rect x="1178.1" y="803.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.36%)</title><rect x="1178.1" y="787.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.36%)</title><rect x="1178.1" y="771.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.1" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.36%)</title><rect x="1178.1" y="755.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.36%)</title><rect x="1178.1" y="739.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.36%)</title><rect x="1178.1" y="723.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.36%)</title><rect x="1178.1" y="707.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.36%)</title><rect x="1178.1" y="691.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.1" y="675.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.1" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.1" y="659.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1178.1" y="643.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1178.1" y="627.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.1" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1178.1" y="611.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.1" y="595.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.1" y="579.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1178.1" y="563.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1178.1" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1178.1" y="531.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1178.1" y="515.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.1" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1178.1" y="499.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.1" y="510.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1178.1" y="483.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.1" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.1" y="467.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.1" y="451.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.1" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1178.1" y="435.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.1" y="446.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.07%)</title><rect x="1178.1" y="419.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1178.9" y="675.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1178.9" y="659.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1178.9" y="643.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1178.9" y="627.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1178.9" y="611.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1178.9" y="595.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1178.9" y="579.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1178.9" y="563.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1178.9" y="547.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1178.9" y="531.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1178.9" y="515.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1178.9" y="499.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1178.9" y="483.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1178.9" y="467.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1178.9" y="451.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1178.9" y="435.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1178.9" y="419.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1178.9" y="403.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="414.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1178.9" y="387.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="398.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1178.9" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="382.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.07%)</title><rect x="1178.9" y="355.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="366.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.07%)</title><rect x="1178.9" y="339.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="350.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1178.9" y="323.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.8" y="387.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.8" y="371.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.8" y="355.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.8" y="339.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.8" y="323.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.8" y="307.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.8" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.8" y="291.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.8" y="275.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.8" y="259.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.8" y="243.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.8" y="227.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.6" y="211.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.6" y="195.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.6" y="179.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.6" y="163.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.6" y="147.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.6" y="131.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.6" y="115.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.6" y="99.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.6" y="83.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.6" y="67.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.6" y="51.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="62.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.07%)</title><rect x="1180.6" y="35.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.5" y="595.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1181.5" y="579.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="590.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1181.5" y="563.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="574.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1181.5" y="547.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="558.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1181.5" y="531.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="542.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1181.5" y="515.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="867.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="851.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.3" y="835.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.3" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.3" y="803.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.3" y="787.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.3" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="739.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.3" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.3" y="707.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.3" y="691.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.3" y="675.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.3" y="659.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="643.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1182.3" y="627.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1182.3" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1182.3" y="595.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1182.3" y="579.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1182.3" y="563.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1182.3" y="547.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1182.3" y="531.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.2" y="979.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.2" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.2" y="963.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.2" y="947.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.2" y="931.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.2" y="915.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.2" y="899.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.2" y="883.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.2" y="867.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.2" y="851.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.2" y="835.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.2" y="819.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.2" y="803.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.2" y="787.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.2" y="771.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.2" y="755.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.2" y="739.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.2" y="723.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.2" y="707.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.2" y="691.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.2" y="675.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.2" y="659.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.2" y="643.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.2" y="627.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.2" y="611.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.2" y="595.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.2" y="579.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.2" y="563.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.2" y="547.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.2" y="531.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.2" y="515.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.2" y="499.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.2" y="483.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.2" y="467.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.2" y="451.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.2" y="435.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.2" y="419.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.2" y="403.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.2" y="387.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.2" y="371.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.2" y="355.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.2" y="339.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.2" y="350.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.07%)</title><rect x="1183.2" y="323.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.0" y="323.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.0" y="307.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="291.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.0" y="275.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.0" y="259.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.0" y="243.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.0" y="227.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.0" y="211.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.0" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="195.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="179.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.0" y="163.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.0" y="147.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="158.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1184.0" y="131.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.0" y="115.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="126.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="99.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="110.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1184.0" y="83.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="94.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1184.9" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.9" y="1134.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1184.9" y="1107.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1184.9" y="1091.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.9" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1184.9" y="1075.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.9" y="1086.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.07%)</title><rect x="1184.9" y="1059.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="1070.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.07%)</title><rect x="1184.9" y="1043.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="1054.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.14%)</title><rect x="1185.7" y="1139.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.7" y="1150.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.14%)</title><rect x="1185.7" y="1123.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="1134.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.14%)</title><rect x="1185.7" y="1107.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.7" y="1118.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.14%)</title><rect x="1185.7" y="1091.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1188.7" y="1102.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (2 samples, 0.14%)</title><rect x="1185.7" y="1075.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="1086.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (2 samples, 0.14%)</title><rect x="1185.7" y="1059.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="1070.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.07%)</title><rect x="1186.6" y="1043.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="1054.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.22%)</title><rect x="1187.4" y="1171.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.4" y="1182.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.22%)</title><rect x="1187.4" y="1155.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.4" y="1166.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1187.4" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.4" y="1150.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.14%)</title><rect x="1188.3" y="1139.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.3" y="1150.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.14%)</title><rect x="1188.3" y="1123.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.3" y="1134.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.14%)</title><rect x="1188.3" y="1107.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.3" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.14%)</title><rect x="1188.3" y="1091.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.3" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1188.3" y="1075.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.07%)</title><rect x="1188.3" y="1059.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="1070.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.07%)</title><rect x="1188.3" y="1043.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.3" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.07%)</title><rect x="1189.1" y="1075.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.1" y="1086.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.07%)</title><rect x="1189.1" y="1059.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="1070.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::doHeapRegion(HeapRegion*) (1 samples, 0.07%)</title><rect x="1189.1" y="1043.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.1" y="1054.0"></text>
</g>
</g>
</svg>
