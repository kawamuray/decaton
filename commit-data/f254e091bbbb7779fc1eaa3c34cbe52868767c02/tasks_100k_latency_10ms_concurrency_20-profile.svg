<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1350" onload="init(evt)" viewBox="0 0 1200 1350" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1333"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1333"> </text>
<g id="frames">
<g>
<title>all (281 samples, 100.00%)</title><rect x="10.0" y="1299.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1310.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 8.19%)</title><rect x="10.0" y="1283.0" width="96.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1294.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.71%)</title><rect x="10.0" y="1267.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.71%)</title><rect x="10.0" y="1251.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.71%)</title><rect x="10.0" y="1235.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.71%)</title><rect x="10.0" y="1219.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.71%)</title><rect x="10.0" y="1203.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.71%)</title><rect x="10.0" y="1187.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.71%)</title><rect x="10.0" y="1171.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.36%)</title><rect x="10.0" y="1155.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.iterator (1 samples, 0.36%)</title><rect x="10.0" y="1139.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.36%)</title><rect x="14.2" y="1155.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.36%)</title><rect x="14.2" y="1139.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.36%)</title><rect x="14.2" y="1123.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.36%)</title><rect x="14.2" y="1107.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.36%)</title><rect x="14.2" y="1091.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.36%)</title><rect x="14.2" y="1075.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.36%)</title><rect x="14.2" y="1059.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.36%)</title><rect x="14.2" y="1043.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 7.47%)</title><rect x="18.4" y="1267.0" width="88.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.4" y="1278.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.36%)</title><rect x="18.4" y="1251.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.36%)</title><rect x="18.4" y="1235.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 3.20%)</title><rect x="22.6" y="1251.0" width="37.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.6" y="1262.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/943125262.accept (9 samples, 3.20%)</title><rect x="22.6" y="1235.0" width="37.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.6" y="1246.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (9 samples, 3.20%)</title><rect x="22.6" y="1219.0" width="37.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.6" y="1230.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (6 samples, 2.14%)</title><rect x="22.6" y="1203.0" width="25.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.6" y="1214.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (6 samples, 2.14%)</title><rect x="22.6" y="1187.0" width="25.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.6" y="1198.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (6 samples, 2.14%)</title><rect x="22.6" y="1171.0" width="25.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.6" y="1182.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.42%)</title><rect x="31.0" y="1155.0" width="16.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.42%)</title><rect x="31.0" y="1139.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.42%)</title><rect x="31.0" y="1123.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.42%)</title><rect x="31.0" y="1107.0" width="16.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.42%)</title><rect x="31.0" y="1091.0" width="16.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.42%)</title><rect x="31.0" y="1075.0" width="16.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.42%)</title><rect x="31.0" y="1059.0" width="16.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.36%)</title><rect x="47.8" y="1203.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.8" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="47.8" y="1187.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.8" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="47.8" y="1171.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.71%)</title><rect x="52.0" y="1203.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.71%)</title><rect x="52.0" y="1187.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.36%)</title><rect x="56.2" y="1171.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.91%)</title><rect x="60.4" y="1251.0" width="46.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.4" y="1262.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.91%)</title><rect x="60.4" y="1235.0" width="46.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.4" y="1246.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 2.85%)</title><rect x="60.4" y="1219.0" width="33.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.4" y="1230.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.36%)</title><rect x="60.4" y="1203.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.4" y="1214.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.36%)</title><rect x="60.4" y="1187.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="63.4" y="1198.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (1 samples, 0.36%)</title><rect x="60.4" y="1171.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="63.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.71%)</title><rect x="64.6" y="1203.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.71%)</title><rect x="64.6" y="1187.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.36%)</title><rect x="64.6" y="1171.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.36%)</title><rect x="64.6" y="1155.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.36%)</title><rect x="64.6" y="1139.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.36%)</title><rect x="64.6" y="1123.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.36%)</title><rect x="64.6" y="1107.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.36%)</title><rect x="64.6" y="1091.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.36%)</title><rect x="64.6" y="1075.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.isDebugEnabled (1 samples, 0.36%)</title><rect x="64.6" y="1059.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.36%)</title><rect x="68.8" y="1171.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="71.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.36%)</title><rect x="68.8" y="1155.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.36%)</title><rect x="68.8" y="1139.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.36%)</title><rect x="68.8" y="1123.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.36%)</title><rect x="68.8" y="1107.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.36%)</title><rect x="68.8" y="1091.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.36%)</title><rect x="68.8" y="1075.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.36%)</title><rect x="68.8" y="1059.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.36%)</title><rect x="68.8" y="1043.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="71.8" y="1054.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.36%)</title><rect x="68.8" y="1027.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="71.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.42%)</title><rect x="73.0" y="1203.0" width="16.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.42%)</title><rect x="73.0" y="1187.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.42%)</title><rect x="73.0" y="1171.0" width="16.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.42%)</title><rect x="73.0" y="1155.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.07%)</title><rect x="73.0" y="1139.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.36%)</title><rect x="73.0" y="1123.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.36%)</title><rect x="73.0" y="1107.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.36%)</title><rect x="73.0" y="1091.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.36%)</title><rect x="73.0" y="1075.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="76.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.36%)</title><rect x="73.0" y="1059.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.36%)</title><rect x="73.0" y="1043.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.36%)</title><rect x="73.0" y="1027.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.71%)</title><rect x="77.2" y="1123.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.71%)</title><rect x="77.2" y="1107.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (2 samples, 0.71%)</title><rect x="77.2" y="1091.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (2 samples, 0.71%)</title><rect x="77.2" y="1075.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.36%)</title><rect x="81.4" y="1059.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.4" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.36%)</title><rect x="81.4" y="1043.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.36%)</title><rect x="85.6" y="1139.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.36%)</title><rect x="85.6" y="1123.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.36%)</title><rect x="85.6" y="1107.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.36%)</title><rect x="85.6" y="1091.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.36%)</title><rect x="89.8" y="1203.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.36%)</title><rect x="89.8" y="1187.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.36%)</title><rect x="89.8" y="1171.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="92.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.36%)</title><rect x="94.0" y="1219.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.36%)</title><rect x="98.2" y="1219.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="101.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.36%)</title><rect x="98.2" y="1203.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.36%)</title><rect x="98.2" y="1187.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.36%)</title><rect x="98.2" y="1171.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.36%)</title><rect x="98.2" y="1155.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.36%)</title><rect x="98.2" y="1139.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.36%)</title><rect x="98.2" y="1123.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.36%)</title><rect x="98.2" y="1107.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="101.2" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.36%)</title><rect x="98.2" y="1091.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.2" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.36%)</title><rect x="98.2" y="1075.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.2" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.36%)</title><rect x="98.2" y="1059.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.36%)</title><rect x="98.2" y="1043.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.36%)</title><rect x="98.2" y="1027.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.36%)</title><rect x="102.4" y="1219.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.36%)</title><rect x="102.4" y="1203.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="105.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.36%)</title><rect x="102.4" y="1187.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="105.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.36%)</title><rect x="102.4" y="1171.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.4" y="1182.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.36%)</title><rect x="102.4" y="1155.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="105.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (151 samples, 53.74%)</title><rect x="106.6" y="1283.0" width="634.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="109.6" y="1294.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (151 samples, 53.74%)</title><rect x="106.6" y="1267.0" width="634.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.6" y="1278.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (151 samples, 53.74%)</title><rect x="106.6" y="1251.0" width="634.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.6" y="1262.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1581344107.run (146 samples, 51.96%)</title><rect x="115.0" y="1235.0" width="613.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="118.0" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1581344107.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (146 samples, 51.96%)</title><rect x="115.0" y="1219.0" width="613.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="118.0" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (145 samples, 51.60%)</title><rect x="115.0" y="1203.0" width="608.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="118.0" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (145 samples, 51.60%)</title><rect x="115.0" y="1187.0" width="608.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="118.0" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (29 samples, 10.32%)</title><rect x="123.4" y="1171.0" width="121.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.4" y="1182.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (29 samples, 10.32%)</title><rect x="123.4" y="1155.0" width="121.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="126.4" y="1166.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (29 samples, 10.32%)</title><rect x="123.4" y="1139.0" width="121.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="126.4" y="1150.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="123.4" y="1123.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="126.4" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="123.4" y="1107.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="126.4" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="123.4" y="1091.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="126.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 9.96%)</title><rect x="127.6" y="1123.0" width="117.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="130.6" y="1134.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 9.96%)</title><rect x="127.6" y="1107.0" width="117.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="130.6" y="1118.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (28 samples, 9.96%)</title><rect x="127.6" y="1091.0" width="117.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.6" y="1102.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 1.78%)</title><rect x="127.6" y="1075.0" width="21.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.42%)</title><rect x="127.6" y="1059.0" width="16.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="130.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.42%)</title><rect x="127.6" y="1043.0" width="16.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 1.07%)</title><rect x="131.8" y="1027.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.07%)</title><rect x="131.8" y="1011.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.07%)</title><rect x="131.8" y="995.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.07%)</title><rect x="131.8" y="979.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="134.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.36%)</title><rect x="144.4" y="1059.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.36%)</title><rect x="144.4" y="1043.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="147.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.36%)</title><rect x="144.4" y="1027.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="147.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.36%)</title><rect x="144.4" y="1011.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.36%)</title><rect x="144.4" y="995.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (21 samples, 7.47%)</title><rect x="148.6" y="1075.0" width="88.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.6" y="1086.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 1.78%)</title><rect x="148.6" y="1059.0" width="21.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 1.78%)</title><rect x="148.6" y="1043.0" width="21.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="151.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.36%)</title><rect x="169.6" y="1059.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="172.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.36%)</title><rect x="169.6" y="1043.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.36%)</title><rect x="169.6" y="1027.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="172.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.36%)</title><rect x="169.6" y="1011.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.36%)</title><rect x="173.8" y="1059.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="176.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.36%)</title><rect x="173.8" y="1043.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="173.8" y="1027.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.36%)</title><rect x="173.8" y="1011.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.36%)</title><rect x="173.8" y="995.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.8" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="173.8" y="979.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="176.8" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="173.8" y="963.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="176.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="173.8" y="947.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="176.8" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="173.8" y="931.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="176.8" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.36%)</title><rect x="173.8" y="915.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="176.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 4.98%)</title><rect x="178.0" y="1059.0" width="58.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="181.0" y="1070.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.07%)</title><rect x="178.0" y="1043.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="181.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.71%)</title><rect x="178.0" y="1027.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.36%)</title><rect x="186.4" y="1027.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="189.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.36%)</title><rect x="186.4" y="1011.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 3.91%)</title><rect x="190.6" y="1043.0" width="46.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.6" y="1054.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 3.91%)</title><rect x="190.6" y="1027.0" width="46.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.6" y="1038.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (11 samples, 3.91%)</title><rect x="190.6" y="1011.0" width="46.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.6" y="1022.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.42%)</title><rect x="199.0" y="995.0" width="16.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.07%)</title><rect x="199.0" y="979.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.07%)</title><rect x="199.0" y="963.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.07%)</title><rect x="199.0" y="947.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.71%)</title><rect x="203.2" y="931.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.36%)</title><rect x="207.4" y="915.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="210.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.36%)</title><rect x="211.6" y="979.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.07%)</title><rect x="215.8" y="995.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.71%)</title><rect x="220.0" y="979.0" width="8.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.71%)</title><rect x="220.0" y="963.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.71%)</title><rect x="220.0" y="947.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.0" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.71%)</title><rect x="220.0" y="931.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.36%)</title><rect x="228.4" y="995.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.36%)</title><rect x="228.4" y="979.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.36%)</title><rect x="228.4" y="963.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.36%)</title><rect x="228.4" y="947.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.4" y="958.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.36%)</title><rect x="228.4" y="931.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.4" y="942.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.36%)</title><rect x="228.4" y="915.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.36%)</title><rect x="232.6" y="995.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="232.6" y="979.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="235.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="232.6" y="963.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.71%)</title><rect x="236.8" y="1075.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.71%)</title><rect x="236.8" y="1059.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.71%)</title><rect x="236.8" y="1043.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.36%)</title><rect x="236.8" y="1027.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.36%)</title><rect x="241.0" y="1027.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (108 samples, 38.43%)</title><rect x="245.2" y="1171.0" width="453.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.2" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (24 samples, 8.54%)</title><rect x="245.2" y="1155.0" width="100.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.2" y="1166.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (22 samples, 7.83%)</title><rect x="253.6" y="1139.0" width="92.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.6" y="1150.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (18 samples, 6.41%)</title><rect x="270.4" y="1123.0" width="75.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.4" y="1134.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.36%)</title><rect x="270.4" y="1107.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.36%)</title><rect x="270.4" y="1091.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.36%)</title><rect x="270.4" y="1075.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.36%)</title><rect x="270.4" y="1059.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (17 samples, 6.05%)</title><rect x="274.6" y="1107.0" width="71.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.6" y="1118.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 3.91%)</title><rect x="299.8" y="1091.0" width="46.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.8" y="1102.0">java..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 3.91%)</title><rect x="299.8" y="1075.0" width="46.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.8" y="1086.0">java..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.71%)</title><rect x="337.5" y="1059.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="345.9" y="1155.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (18 samples, 6.41%)</title><rect x="350.1" y="1155.0" width="75.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.1" y="1166.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (18 samples, 6.41%)</title><rect x="350.1" y="1139.0" width="75.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.1" y="1150.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.85%)</title><rect x="354.3" y="1123.0" width="33.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="357.3" y="1134.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.49%)</title><rect x="358.5" y="1107.0" width="29.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="361.5" y="1118.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 2.49%)</title><rect x="358.5" y="1091.0" width="29.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.5" y="1102.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 1.78%)</title><rect x="362.7" y="1075.0" width="21.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 1.78%)</title><rect x="362.7" y="1059.0" width="21.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 1.78%)</title><rect x="362.7" y="1043.0" width="21.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.7" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.71%)</title><rect x="371.1" y="1027.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="374.1" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.71%)</title><rect x="371.1" y="1011.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="374.1" y="1022.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.36%)</title><rect x="371.1" y="995.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="374.1" y="1006.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.36%)</title><rect x="375.3" y="995.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="378.3" y="1006.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.36%)</title><rect x="375.3" y="979.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="378.3" y="990.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.36%)</title><rect x="375.3" y="963.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="378.3" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="379.5" y="1027.0" width="4.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="382.5" y="1038.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="383.7" y="1075.0" width="4.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="386.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="387.9" y="1123.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.36%)</title><rect x="392.1" y="1123.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="395.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.36%)</title><rect x="392.1" y="1107.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.36%)</title><rect x="392.1" y="1091.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="395.1" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 2.49%)</title><rect x="396.3" y="1123.0" width="29.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="399.3" y="1134.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 2.14%)</title><rect x="400.5" y="1107.0" width="25.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.5" y="1118.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.36%)</title><rect x="400.5" y="1091.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="403.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.36%)</title><rect x="400.5" y="1075.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="403.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.36%)</title><rect x="400.5" y="1059.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.36%)</title><rect x="400.5" y="1043.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="403.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 1.78%)</title><rect x="404.7" y="1091.0" width="21.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="407.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.78%)</title><rect x="404.7" y="1075.0" width="21.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="407.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.78%)</title><rect x="404.7" y="1059.0" width="21.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.36%)</title><rect x="421.5" y="1043.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="424.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (62 samples, 22.06%)</title><rect x="425.7" y="1155.0" width="260.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="428.7" y="1166.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (62 samples, 22.06%)</title><rect x="425.7" y="1139.0" width="260.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="428.7" y="1150.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1186306248.process (53 samples, 18.86%)</title><rect x="434.1" y="1123.0" width="222.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="437.1" y="1134.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (53 samples, 18.86%)</title><rect x="434.1" y="1107.0" width="222.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="437.1" y="1118.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (53 samples, 18.86%)</title><rect x="434.1" y="1091.0" width="222.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="437.1" y="1102.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.36%)</title><rect x="438.3" y="1075.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="441.3" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.36%)</title><rect x="438.3" y="1059.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="441.3" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.36%)</title><rect x="438.3" y="1043.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="441.3" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.36%)</title><rect x="438.3" y="1027.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.3" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.36%)</title><rect x="438.3" y="1011.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.3" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.36%)</title><rect x="438.3" y="995.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="441.3" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.36%)</title><rect x="438.3" y="979.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="441.3" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.36%)</title><rect x="438.3" y="963.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="441.3" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.36%)</title><rect x="438.3" y="947.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.3" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (1 samples, 0.36%)</title><rect x="438.3" y="931.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="441.3" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (1 samples, 0.36%)</title><rect x="438.3" y="915.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="441.3" y="926.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (1 samples, 0.36%)</title><rect x="438.3" y="899.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="441.3" y="910.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (1 samples, 0.36%)</title><rect x="438.3" y="883.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="441.3" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.71%)</title><rect x="442.5" y="1075.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="445.5" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.71%)</title><rect x="442.5" y="1059.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.5" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.71%)</title><rect x="442.5" y="1043.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="445.5" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.71%)</title><rect x="442.5" y="1027.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (49 samples, 17.44%)</title><rect x="450.9" y="1075.0" width="205.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.9" y="1086.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.36%)</title><rect x="455.1" y="1059.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="458.1" y="1070.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="455.1" y="1043.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="458.1" y="1054.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="455.1" y="1027.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="458.1" y="1038.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.36%)</title><rect x="455.1" y="1011.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="458.1" y="1022.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.36%)</title><rect x="455.1" y="995.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="458.1" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.36%)</title><rect x="455.1" y="979.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="458.1" y="990.0"></text>
</g>
<g>
<title>Method::load_signature_classes(methodHandle, Thread*) (1 samples, 0.36%)</title><rect x="455.1" y="963.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="458.1" y="974.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.36%)</title><rect x="455.1" y="947.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="458.1" y="958.0"></text>
</g>
<g>
<title>Atomic::inc(short volatile*) (1 samples, 0.36%)</title><rect x="455.1" y="931.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="458.1" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (47 samples, 16.73%)</title><rect x="459.3" y="1059.0" width="197.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="462.3" y="1070.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (42 samples, 14.95%)</title><rect x="476.1" y="1043.0" width="176.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="479.1" y="1054.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.36%)</title><rect x="488.7" y="1027.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="491.7" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.36%)</title><rect x="492.9" y="1027.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.9" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="497.1" y="1027.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="500.1" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.71%)</title><rect x="501.3" y="1027.0" width="8.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="504.3" y="1038.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.71%)</title><rect x="501.3" y="1011.0" width="8.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="504.3" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 1.07%)</title><rect x="509.7" y="1027.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="512.7" y="1038.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (31 samples, 11.03%)</title><rect x="522.3" y="1027.0" width="130.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="525.3" y="1038.0">os::sleep(Thread..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.71%)</title><rect x="543.3" y="1011.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="546.3" y="1022.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.36%)</title><rect x="547.5" y="995.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="550.5" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 2.14%)</title><rect x="551.7" y="1011.0" width="25.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="554.7" y="1022.0">_..</text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.36%)</title><rect x="576.9" y="1011.0" width="4.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="579.9" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 4.27%)</title><rect x="581.1" y="1011.0" width="50.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="584.1" y="1022.0">__pth..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.36%)</title><rect x="631.5" y="1011.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="634.5" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 1.07%)</title><rect x="635.7" y="1011.0" width="12.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="638.7" y="1022.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.36%)</title><rect x="648.3" y="1011.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="651.3" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.36%)</title><rect x="652.5" y="1043.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="655.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="656.7" y="1123.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="659.7" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.36%)</title><rect x="656.7" y="1107.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.71%)</title><rect x="660.9" y="1123.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.71%)</title><rect x="660.9" y="1107.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="663.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$271/2025981146.get$Lambda (2 samples, 0.71%)</title><rect x="660.9" y="1091.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="663.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$271/2025981146.&lt;init&gt; (1 samples, 0.36%)</title><rect x="665.1" y="1075.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="668.1" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.36%)</title><rect x="669.3" y="1123.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.3" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.36%)</title><rect x="669.3" y="1107.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.36%)</title><rect x="673.5" y="1123.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="676.5" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.36%)</title><rect x="673.5" y="1107.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="676.5" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.36%)</title><rect x="673.5" y="1091.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="676.5" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.36%)</title><rect x="677.7" y="1123.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="680.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.36%)</title><rect x="681.9" y="1123.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="684.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.07%)</title><rect x="686.1" y="1155.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="689.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.07%)</title><rect x="686.1" y="1139.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="689.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.71%)</title><rect x="690.3" y="1123.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="693.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/1130044719.accept (2 samples, 0.71%)</title><rect x="690.3" y="1107.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="693.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.71%)</title><rect x="690.3" y="1091.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="693.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.71%)</title><rect x="690.3" y="1075.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.3" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.71%)</title><rect x="690.3" y="1059.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.3" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.71%)</title><rect x="690.3" y="1043.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="693.3" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="694.5" y="1027.0" width="4.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="697.5" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="694.5" y="1011.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="697.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.78%)</title><rect x="698.7" y="1171.0" width="21.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="701.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.78%)</title><rect x="698.7" y="1155.0" width="21.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="701.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.42%)</title><rect x="702.9" y="1139.0" width="16.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="705.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/1130044719.accept (4 samples, 1.42%)</title><rect x="702.9" y="1123.0" width="16.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="705.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (4 samples, 1.42%)</title><rect x="702.9" y="1107.0" width="16.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="705.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 1.42%)</title><rect x="702.9" y="1091.0" width="16.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="705.9" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 1.42%)</title><rect x="702.9" y="1075.0" width="16.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="705.9" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 1.42%)</title><rect x="702.9" y="1059.0" width="16.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="705.9" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.36%)</title><rect x="719.7" y="1171.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="722.7" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="719.7" y="1155.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="722.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.36%)</title><rect x="723.9" y="1203.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="726.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.07%)</title><rect x="728.1" y="1235.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="731.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.07%)</title><rect x="728.1" y="1219.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="731.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 1.07%)</title><rect x="728.1" y="1203.0" width="12.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 1.07%)</title><rect x="728.1" y="1187.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="731.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.07%)</title><rect x="728.1" y="1171.0" width="12.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="731.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.71%)</title><rect x="740.7" y="1283.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="743.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.36%)</title><rect x="744.9" y="1267.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.9" y="1278.0"></text>
</g>
<g>
<title>start_thread (105 samples, 37.37%)</title><rect x="749.1" y="1283.0" width="440.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="752.1" y="1294.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (105 samples, 37.37%)</title><rect x="749.1" y="1267.0" width="440.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="752.1" y="1278.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 2.85%)</title><rect x="749.1" y="1251.0" width="33.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="752.1" y="1262.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 2.85%)</title><rect x="749.1" y="1235.0" width="33.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="752.1" y="1246.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 2.49%)</title><rect x="749.1" y="1219.0" width="29.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="752.1" y="1230.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 2.49%)</title><rect x="749.1" y="1203.0" width="29.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="752.1" y="1214.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.71%)</title><rect x="770.1" y="1187.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="773.1" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.36%)</title><rect x="774.3" y="1171.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="777.3" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.36%)</title><rect x="778.5" y="1219.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="781.5" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.36%)</title><rect x="778.5" y="1203.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="781.5" y="1214.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.36%)</title><rect x="778.5" y="1187.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="781.5" y="1198.0"></text>
</g>
<g>
<title>JavaThread::run() (96 samples, 34.16%)</title><rect x="782.7" y="1251.0" width="403.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="785.7" y="1262.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (96 samples, 34.16%)</title><rect x="782.7" y="1235.0" width="403.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="785.7" y="1246.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (96 samples, 34.16%)</title><rect x="782.7" y="1219.0" width="403.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="785.7" y="1230.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (96 samples, 34.16%)</title><rect x="782.7" y="1203.0" width="403.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="785.7" y="1214.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (92 samples, 32.74%)</title><rect x="782.7" y="1187.0" width="386.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="785.7" y="1198.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (92 samples, 32.74%)</title><rect x="782.7" y="1171.0" width="386.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="785.7" y="1182.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Code_Gen() (42 samples, 14.95%)</title><rect x="782.7" y="1155.0" width="176.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="785.7" y="1166.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.71%)</title><rect x="782.7" y="1139.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="785.7" y="1150.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.36%)</title><rect x="782.7" y="1123.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="785.7" y="1134.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.36%)</title><rect x="782.7" y="1107.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="785.7" y="1118.0"></text>
</g>
<g>
<title>CodeHeap::header_size() (1 samples, 0.36%)</title><rect x="782.7" y="1091.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="785.7" y="1102.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.36%)</title><rect x="786.9" y="1123.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="789.9" y="1134.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.36%)</title><rect x="791.1" y="1139.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="794.1" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.36%)</title><rect x="791.1" y="1123.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="794.1" y="1134.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.36%)</title><rect x="795.3" y="1139.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="798.3" y="1150.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.14%)</title><rect x="799.5" y="1139.0" width="25.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="802.5" y="1150.0">M..</text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.36%)</title><rect x="799.5" y="1123.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="802.5" y="1134.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.36%)</title><rect x="803.7" y="1123.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="806.7" y="1134.0"></text>
</g>
<g>
<title>StoreLNode::Opcode() const (1 samples, 0.36%)</title><rect x="803.7" y="1107.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="806.7" y="1118.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.42%)</title><rect x="807.9" y="1123.0" width="16.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="810.9" y="1134.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.36%)</title><rect x="807.9" y="1107.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="810.9" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 1.07%)</title><rect x="812.1" y="1107.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="815.1" y="1118.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.71%)</title><rect x="816.3" y="1091.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="819.3" y="1102.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.36%)</title><rect x="816.3" y="1075.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="819.3" y="1086.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.36%)</title><rect x="820.5" y="1075.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="823.5" y="1086.0"></text>
</g>
<g>
<title>ConLNode::Opcode() const (1 samples, 0.36%)</title><rect x="820.5" y="1059.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="823.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.71%)</title><rect x="824.7" y="1139.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="827.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.71%)</title><rect x="824.7" y="1123.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="827.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.71%)</title><rect x="824.7" y="1107.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="827.7" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.36%)</title><rect x="824.7" y="1091.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="827.7" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.36%)</title><rect x="828.9" y="1091.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="831.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (30 samples, 10.68%)</title><rect x="833.1" y="1139.0" width="125.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="836.1" y="1150.0">PhaseChaitin::R..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.36%)</title><rect x="837.3" y="1123.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="840.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.07%)</title><rect x="841.5" y="1123.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="844.5" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="841.5" y="1107.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="844.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.71%)</title><rect x="845.7" y="1107.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="848.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.14%)</title><rect x="854.1" y="1123.0" width="25.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="857.1" y="1134.0">P..</text>
</g>
<g>
<title>indOffset8Oper::in_RegMask(int) const (1 samples, 0.36%)</title><rect x="875.1" y="1107.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="878.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 3.56%)</title><rect x="879.3" y="1123.0" width="41.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="882.3" y="1134.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.78%)</title><rect x="896.0" y="1107.0" width="21.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="899.0" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="912.8" y="1091.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.8" y="1102.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.36%)</title><rect x="917.0" y="1107.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="920.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.07%)</title><rect x="921.2" y="1123.0" width="12.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="924.2" y="1134.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.36%)</title><rect x="925.4" y="1107.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="928.4" y="1118.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.36%)</title><rect x="929.6" y="1107.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="932.6" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.71%)</title><rect x="933.8" y="1123.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.71%)</title><rect x="933.8" y="1107.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="936.8" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.42%)</title><rect x="942.2" y="1123.0" width="16.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="945.2" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.36%)</title><rect x="954.8" y="1107.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="957.8" y="1118.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.36%)</title><rect x="954.8" y="1091.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="957.8" y="1102.0"></text>
</g>
<g>
<title>Compile::Optimize() (41 samples, 14.59%)</title><rect x="959.0" y="1155.0" width="172.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.0" y="1166.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.36%)</title><rect x="959.0" y="1139.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="962.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.36%)</title><rect x="959.0" y="1123.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="1107.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="1091.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="962.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="1075.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="962.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="1059.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="1043.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="1027.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="962.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="1011.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="962.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="995.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="962.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="979.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="962.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="963.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="962.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="947.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="931.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="962.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="915.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="962.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="899.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="883.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="867.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="851.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="835.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="962.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="819.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="962.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="803.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="962.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="787.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="771.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="755.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="962.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="739.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="723.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="962.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="707.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="691.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="675.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="659.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="643.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="627.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="962.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="611.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="595.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="579.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="563.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="547.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="962.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="531.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="962.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="515.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="962.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="499.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="962.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="483.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="467.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="451.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="962.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="435.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="419.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="962.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="403.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="962.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="387.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="962.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="371.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="962.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="355.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="339.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="323.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="962.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="307.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="962.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="291.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="275.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="962.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="259.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="962.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="243.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="227.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="962.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="211.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="962.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="195.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="962.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="179.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="163.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="962.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="147.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="131.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.36%)</title><rect x="959.0" y="115.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="962.0" y="126.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.36%)</title><rect x="959.0" y="99.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="962.0" y="110.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.36%)</title><rect x="959.0" y="83.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="962.0" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="959.0" y="67.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="962.0" y="78.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="959.0" y="51.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="962.0" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.36%)</title><rect x="959.0" y="35.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="962.0" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.71%)</title><rect x="963.2" y="1139.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="966.2" y="1150.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.36%)</title><rect x="967.4" y="1123.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.4" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.36%)</title><rect x="967.4" y="1107.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="970.4" y="1118.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.36%)</title><rect x="967.4" y="1091.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="970.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (28 samples, 9.96%)</title><rect x="971.6" y="1139.0" width="117.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="974.6" y="1150.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.71%)</title><rect x="971.6" y="1123.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.42%)</title><rect x="980.0" y="1123.0" width="16.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="983.0" y="1134.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.36%)</title><rect x="988.4" y="1107.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="991.4" y="1118.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.36%)</title><rect x="988.4" y="1091.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="991.4" y="1102.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.36%)</title><rect x="992.6" y="1107.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 6.05%)</title><rect x="996.8" y="1123.0" width="71.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.8" y="1134.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 5.34%)</title><rect x="1005.2" y="1107.0" width="63.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1008.2" y="1118.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.71%)</title><rect x="1005.2" y="1091.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1008.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 4.63%)</title><rect x="1013.6" y="1091.0" width="54.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.6" y="1102.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.71%)</title><rect x="1059.8" y="1075.0" width="8.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.71%)</title><rect x="1068.2" y="1123.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1071.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.36%)</title><rect x="1072.4" y="1107.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.36%)</title><rect x="1076.6" y="1123.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.36%)</title><rect x="1076.6" y="1107.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.36%)</title><rect x="1076.6" y="1091.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.36%)</title><rect x="1080.8" y="1123.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1083.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.36%)</title><rect x="1080.8" y="1107.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.8" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.36%)</title><rect x="1080.8" y="1091.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1083.8" y="1102.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.36%)</title><rect x="1085.0" y="1123.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.36%)</title><rect x="1089.2" y="1139.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.36%)</title><rect x="1089.2" y="1123.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 2.85%)</title><rect x="1093.4" y="1139.0" width="33.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.4" y="1150.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 2.85%)</title><rect x="1093.4" y="1123.0" width="33.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.4" y="1134.0">Ph..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1093.4" y="1107.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.4" y="1118.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1093.4" y="1091.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.4" y="1102.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 1.07%)</title><rect x="1097.6" y="1107.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.6" y="1118.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (3 samples, 1.07%)</title><rect x="1097.6" y="1091.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.6" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (3 samples, 1.07%)</title><rect x="1097.6" y="1075.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.6" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 1.07%)</title><rect x="1097.6" y="1059.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.6" y="1070.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 1.42%)</title><rect x="1110.2" y="1107.0" width="16.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.2" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (4 samples, 1.42%)</title><rect x="1110.2" y="1091.0" width="16.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.2" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.42%)</title><rect x="1110.2" y="1075.0" width="16.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.2" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.42%)</title><rect x="1110.2" y="1059.0" width="16.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.2" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.42%)</title><rect x="1110.2" y="1043.0" width="16.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.2" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.42%)</title><rect x="1110.2" y="1027.0" width="16.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.2" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.42%)</title><rect x="1110.2" y="1011.0" width="16.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.2" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.42%)</title><rect x="1110.2" y="995.0" width="16.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.2" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.42%)</title><rect x="1110.2" y="979.0" width="16.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.2" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.42%)</title><rect x="1110.2" y="963.0" width="16.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.2" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.42%)</title><rect x="1110.2" y="947.0" width="16.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.2" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.42%)</title><rect x="1110.2" y="931.0" width="16.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.2" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.42%)</title><rect x="1110.2" y="915.0" width="16.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.2" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1114.4" y="899.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.4" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1114.4" y="883.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.4" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1114.4" y="867.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.4" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1114.4" y="851.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.4" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.36%)</title><rect x="1114.4" y="835.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.4" y="846.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.36%)</title><rect x="1114.4" y="819.0" width="4.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1117.4" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.71%)</title><rect x="1118.6" y="899.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.6" y="910.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.71%)</title><rect x="1118.6" y="883.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.6" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.36%)</title><rect x="1127.0" y="1139.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.36%)</title><rect x="1127.0" y="1123.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.36%)</title><rect x="1127.0" y="1107.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.0" y="1118.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1127.0" y="1091.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.36%)</title><rect x="1127.0" y="1075.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.36%)</title><rect x="1127.0" y="1059.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.0" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.49%)</title><rect x="1131.2" y="1155.0" width="29.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.2" y="1166.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.49%)</title><rect x="1131.2" y="1139.0" width="29.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.2" y="1150.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.49%)</title><rect x="1131.2" y="1123.0" width="29.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.2" y="1134.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.49%)</title><rect x="1131.2" y="1107.0" width="29.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.2" y="1118.0">Pa..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.36%)</title><rect x="1131.2" y="1091.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.2" y="1102.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.36%)</title><rect x="1131.2" y="1075.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.2" y="1086.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.36%)</title><rect x="1131.2" y="1059.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.2" y="1070.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.36%)</title><rect x="1131.2" y="1043.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.2" y="1054.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.36%)</title><rect x="1131.2" y="1027.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.2" y="1038.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.36%)</title><rect x="1131.2" y="1011.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.14%)</title><rect x="1135.4" y="1091.0" width="25.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.4" y="1102.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.78%)</title><rect x="1135.4" y="1075.0" width="21.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.4" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.42%)</title><rect x="1135.4" y="1059.0" width="16.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.4" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.42%)</title><rect x="1135.4" y="1043.0" width="16.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.42%)</title><rect x="1135.4" y="1027.0" width="16.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.42%)</title><rect x="1135.4" y="1011.0" width="16.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.42%)</title><rect x="1135.4" y="995.0" width="16.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.42%)</title><rect x="1135.4" y="979.0" width="16.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.4" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.42%)</title><rect x="1135.4" y="963.0" width="16.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.4" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.42%)</title><rect x="1135.4" y="947.0" width="16.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.42%)</title><rect x="1135.4" y="931.0" width="16.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.42%)</title><rect x="1135.4" y="915.0" width="16.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.42%)</title><rect x="1135.4" y="899.0" width="16.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.42%)</title><rect x="1135.4" y="883.0" width="16.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.4" y="894.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1135.4" y="867.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.4" y="878.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.36%)</title><rect x="1135.4" y="851.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.4" y="862.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.36%)</title><rect x="1135.4" y="835.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.07%)</title><rect x="1139.6" y="867.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.07%)</title><rect x="1139.6" y="851.0" width="12.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.07%)</title><rect x="1139.6" y="835.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.07%)</title><rect x="1139.6" y="819.0" width="12.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.07%)</title><rect x="1139.6" y="803.0" width="12.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.07%)</title><rect x="1139.6" y="787.0" width="12.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1139.6" y="771.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1139.6" y="755.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1139.6" y="739.0" width="8.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1139.6" y="723.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1139.6" y="707.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1139.6" y="691.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.6" y="702.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1139.6" y="675.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.6" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.36%)</title><rect x="1139.6" y="659.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.6" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.36%)</title><rect x="1139.6" y="643.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.6" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1139.6" y="627.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.6" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1139.6" y="611.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.6" y="622.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.36%)</title><rect x="1139.6" y="595.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.6" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.36%)</title><rect x="1139.6" y="579.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.6" y="590.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.36%)</title><rect x="1139.6" y="563.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1143.8" y="675.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1143.8" y="659.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1143.8" y="643.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1143.8" y="627.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1143.8" y="611.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1143.8" y="595.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1143.8" y="579.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1143.8" y="563.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1143.8" y="547.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1143.8" y="531.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1143.8" y="515.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1143.8" y="499.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.8" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1143.8" y="483.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.8" y="494.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.36%)</title><rect x="1143.8" y="467.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.8" y="478.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.36%)</title><rect x="1143.8" y="451.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.8" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.36%)</title><rect x="1143.8" y="435.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.8" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.36%)</title><rect x="1143.8" y="419.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.8" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1143.8" y="403.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.8" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::build_loop_tree(ciTypeFlow::Block*) (1 samples, 0.36%)</title><rect x="1143.8" y="387.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.8" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1148.0" y="771.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.0" y="782.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.36%)</title><rect x="1148.0" y="755.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.0" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1152.2" y="1059.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.2" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1152.2" y="1043.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.2" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1152.2" y="1027.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1152.2" y="1011.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1152.2" y="995.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1152.2" y="979.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1152.2" y="963.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.2" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1152.2" y="947.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.2" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1152.2" y="931.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1152.2" y="915.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1152.2" y="899.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1152.2" y="883.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1152.2" y="867.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1152.2" y="851.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1152.2" y="835.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1152.2" y="819.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1152.2" y="803.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1152.2" y="787.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1152.2" y="771.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1152.2" y="755.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1152.2" y="739.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1152.2" y="723.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1152.2" y="707.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1152.2" y="691.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1152.2" y="675.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1152.2" y="659.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1152.2" y="643.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1152.2" y="627.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1152.2" y="611.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1152.2" y="595.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.36%)</title><rect x="1152.2" y="579.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.36%)</title><rect x="1152.2" y="563.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.2" y="574.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.36%)</title><rect x="1152.2" y="547.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.2" y="558.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.36%)</title><rect x="1152.2" y="531.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.2" y="542.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.36%)</title><rect x="1152.2" y="515.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.2" y="526.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.36%)</title><rect x="1152.2" y="499.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.2" y="510.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.36%)</title><rect x="1152.2" y="483.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.36%)</title><rect x="1156.4" y="1075.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.4" y="1086.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.36%)</title><rect x="1156.4" y="1059.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.4" y="1070.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.36%)</title><rect x="1156.4" y="1043.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.4" y="1054.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.36%)</title><rect x="1156.4" y="1027.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.4" y="1038.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.36%)</title><rect x="1156.4" y="1011.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.4" y="1022.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.36%)</title><rect x="1156.4" y="995.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.4" y="1006.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.36%)</title><rect x="1156.4" y="979.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.4" y="990.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.71%)</title><rect x="1160.6" y="1155.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.6" y="1166.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.36%)</title><rect x="1160.6" y="1139.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="1150.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.36%)</title><rect x="1164.8" y="1139.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.8" y="1150.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.07%)</title><rect x="1169.0" y="1187.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.0" y="1198.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.07%)</title><rect x="1169.0" y="1171.0" width="12.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.0" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.07%)</title><rect x="1169.0" y="1155.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.0" y="1166.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.07%)</title><rect x="1169.0" y="1139.0" width="12.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.0" y="1150.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.36%)</title><rect x="1169.0" y="1123.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.0" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.36%)</title><rect x="1169.0" y="1107.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.0" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::return_op(LIR_OprDesc*) (1 samples, 0.36%)</title><rect x="1169.0" y="1091.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.0" y="1102.0"></text>
</g>
<g>
<title>C1_MacroAssembler::remove_frame(int) (1 samples, 0.36%)</title><rect x="1169.0" y="1075.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.0" y="1086.0"></text>
</g>
<g>
<title>Assembler::addq(RegisterImpl*, int) (1 samples, 0.36%)</title><rect x="1169.0" y="1059.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.0" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.36%)</title><rect x="1173.2" y="1123.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.2" y="1134.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.36%)</title><rect x="1173.2" y="1107.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.2" y="1118.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.36%)</title><rect x="1173.2" y="1091.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.2" y="1102.0"></text>
</g>
<g>
<title>LinearScan::add_register_hints(LIR_Op*) (1 samples, 0.36%)</title><rect x="1173.2" y="1075.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.2" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::init() (1 samples, 0.36%)</title><rect x="1177.4" y="1123.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="1134.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.36%)</title><rect x="1181.6" y="1187.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="1198.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.36%)</title><rect x="1181.6" y="1171.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="1182.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.36%)</title><rect x="1185.8" y="1251.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.8" y="1262.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.36%)</title><rect x="1185.8" y="1235.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.8" y="1246.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.36%)</title><rect x="1185.8" y="1219.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="1230.0"></text>
</g>
</g>
</svg>
