<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="693"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="693"> </text>
<g id="frames">
<g>
<title>all (1,050 samples, 100.00%)</title><rect x="10.0" y="659.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="670.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (260 samples, 24.76%)</title><rect x="10.0" y="643.0" width="292.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="654.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.19%)</title><rect x="11.1" y="627.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.19%)</title><rect x="11.1" y="611.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.19%)</title><rect x="11.1" y="595.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.19%)</title><rect x="11.1" y="579.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.19%)</title><rect x="11.1" y="563.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.19%)</title><rect x="11.1" y="547.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.19%)</title><rect x="11.1" y="531.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.19%)</title><rect x="11.1" y="515.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.19%)</title><rect x="11.1" y="499.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.19%)</title><rect x="11.1" y="483.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.10%)</title><rect x="11.1" y="467.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.10%)</title><rect x="11.1" y="451.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.10%)</title><rect x="11.1" y="435.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.10%)</title><rect x="11.1" y="419.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.10%)</title><rect x="11.1" y="403.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.10%)</title><rect x="11.1" y="387.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.10%)</title><rect x="11.1" y="371.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.1" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.10%)</title><rect x="11.1" y="355.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.10%)</title><rect x="11.1" y="339.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.10%)</title><rect x="11.1" y="323.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.10%)</title><rect x="11.1" y="307.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.1" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (1 samples, 0.10%)</title><rect x="11.1" y="291.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.1" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="12.2" y="467.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.10%)</title><rect x="12.2" y="451.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.10%)</title><rect x="12.2" y="435.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.10%)</title><rect x="12.2" y="419.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.2" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="12.2" y="403.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="12.2" y="387.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.10%)</title><rect x="12.2" y="371.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.10%)</title><rect x="12.2" y="355.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.10%)</title><rect x="12.2" y="339.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.10%)</title><rect x="12.2" y="323.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.2" y="334.0"></text>
</g>
<g>
<title>__read (1 samples, 0.10%)</title><rect x="12.2" y="307.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="15.2" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (257 samples, 24.48%)</title><rect x="13.4" y="627.0" width="288.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.4" y="638.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.19%)</title><rect x="13.4" y="611.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.19%)</title><rect x="13.4" y="595.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/113598580.accept (2 samples, 0.19%)</title><rect x="13.4" y="579.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.19%)</title><rect x="13.4" y="563.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.10%)</title><rect x="14.5" y="547.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.5" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.10%)</title><rect x="14.5" y="531.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.5" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.10%)</title><rect x="14.5" y="515.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.5" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (6 samples, 0.57%)</title><rect x="15.6" y="611.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (6 samples, 0.57%)</title><rect x="15.6" y="595.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (6 samples, 0.57%)</title><rect x="15.6" y="579.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (6 samples, 0.57%)</title><rect x="15.6" y="563.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (6 samples, 0.57%)</title><rect x="15.6" y="547.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (5 samples, 0.48%)</title><rect x="15.6" y="531.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.6" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.38%)</title><rect x="15.6" y="515.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.19%)</title><rect x="15.6" y="499.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="16.7" y="483.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.19%)</title><rect x="17.9" y="499.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="19.0" y="483.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="19.0" y="467.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="19.0" y="451.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.0" y="462.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="19.0" y="435.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="22.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.10%)</title><rect x="20.1" y="515.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.10%)</title><rect x="21.2" y="531.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.10%)</title><rect x="21.2" y="515.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="21.2" y="499.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.2" y="510.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (193 samples, 18.38%)</title><rect x="22.4" y="611.0" width="216.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.4" y="622.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2074020945.accept (186 samples, 17.71%)</title><rect x="22.4" y="595.0" width="209.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.4" y="606.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="22.4" y="579.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="25.4" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="22.4" y="563.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="25.4" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="22.4" y="547.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="25.4" y="558.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="22.4" y="531.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="25.4" y="542.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="22.4" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="25.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (185 samples, 17.62%)</title><rect x="23.5" y="579.0" width="207.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.5" y="590.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.19%)</title><rect x="23.5" y="563.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (154 samples, 14.67%)</title><rect x="25.7" y="563.0" width="173.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.7" y="574.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (154 samples, 14.67%)</title><rect x="25.7" y="547.0" width="173.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.7" y="558.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (154 samples, 14.67%)</title><rect x="25.7" y="531.0" width="173.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.7" y="542.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (154 samples, 14.67%)</title><rect x="25.7" y="515.0" width="173.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.7" y="526.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (154 samples, 14.67%)</title><rect x="25.7" y="499.0" width="173.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.7" y="510.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (154 samples, 14.67%)</title><rect x="25.7" y="483.0" width="173.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.7" y="494.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (103 samples, 9.81%)</title><rect x="66.2" y="467.0" width="115.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.2" y="478.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 1.33%)</title><rect x="66.2" y="451.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (14 samples, 1.33%)</title><rect x="66.2" y="435.0" width="15.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (14 samples, 1.33%)</title><rect x="66.2" y="419.0" width="15.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.76%)</title><rect x="81.9" y="451.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.76%)</title><rect x="81.9" y="435.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.48%)</title><rect x="83.0" y="419.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.0" y="430.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.38%)</title><rect x="84.2" y="403.0" width="4.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="87.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.19%)</title><rect x="88.7" y="419.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (81 samples, 7.71%)</title><rect x="90.9" y="451.0" width="91.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.9" y="462.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (81 samples, 7.71%)</title><rect x="90.9" y="435.0" width="91.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.9" y="446.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (80 samples, 7.62%)</title><rect x="90.9" y="419.0" width="89.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.9" y="430.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (80 samples, 7.62%)</title><rect x="90.9" y="403.0" width="89.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.9" y="414.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (79 samples, 7.52%)</title><rect x="92.0" y="387.0" width="88.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.0" y="398.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Unpark (70 samples, 6.67%)</title><rect x="95.4" y="371.0" width="78.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="98.4" y="382.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.48%)</title><rect x="96.5" y="355.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="99.5" y="366.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.29%)</title><rect x="102.2" y="355.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="105.2" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="105.5" y="355.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="108.5" y="366.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.81%)</title><rect x="106.6" y="355.0" width="45.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="109.6" y="366.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.38%)</title><rect x="151.6" y="355.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="154.6" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.52%)</title><rect x="156.1" y="355.0" width="18.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="159.1" y="366.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.19%)</title><rect x="174.1" y="371.0" width="2.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="177.1" y="382.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.29%)</title><rect x="176.3" y="371.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="179.3" y="382.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.10%)</title><rect x="179.7" y="371.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="182.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="180.8" y="419.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="181.9" y="467.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.10%)</title><rect x="181.9" y="451.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.10%)</title><rect x="181.9" y="435.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 1.24%)</title><rect x="183.1" y="467.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (13 samples, 1.24%)</title><rect x="183.1" y="451.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (13 samples, 1.24%)</title><rect x="183.1" y="435.0" width="14.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.1" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="194.3" y="419.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="197.3" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="194.3" y="403.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="197.3" y="414.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="194.3" y="387.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="197.3" y="398.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="194.3" y="371.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="197.3" y="382.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="194.3" y="355.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="197.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.19%)</title><rect x="195.4" y="419.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="198.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="197.7" y="467.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="197.7" y="451.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="197.7" y="435.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.10%)</title><rect x="197.7" y="419.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.7" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.19%)</title><rect x="198.8" y="563.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="201.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.19%)</title><rect x="198.8" y="547.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.29%)</title><rect x="201.0" y="563.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.29%)</title><rect x="201.0" y="547.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.29%)</title><rect x="201.0" y="531.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (24 samples, 2.29%)</title><rect x="204.4" y="563.0" width="27.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.4" y="574.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="204.4" y="547.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.4" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="204.4" y="531.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.4" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="204.4" y="515.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="207.4" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="204.4" y="499.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="207.4" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="204.4" y="483.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="207.4" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="204.4" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="207.4" y="478.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="204.4" y="451.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="207.4" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="204.4" y="435.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="207.4" y="446.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 2.10%)</title><rect x="205.5" y="547.0" width="24.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.5" y="558.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.57%)</title><rect x="220.2" y="531.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.2" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.19%)</title><rect x="220.2" y="515.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.2" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.19%)</title><rect x="220.2" y="499.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.2" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.19%)</title><rect x="220.2" y="483.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.2" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="221.3" y="467.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="224.3" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="221.3" y="451.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="224.3" y="462.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="221.3" y="435.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="224.3" y="446.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.10%)</title><rect x="222.4" y="515.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.4" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.29%)</title><rect x="223.5" y="515.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.5" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="226.9" y="531.0" width="3.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="229.9" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="230.3" y="547.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="233.3" y="558.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="231.4" y="595.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="234.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.57%)</title><rect x="232.5" y="595.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.57%)</title><rect x="232.5" y="579.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="235.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.57%)</title><rect x="232.5" y="563.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.57%)</title><rect x="232.5" y="547.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="235.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 5.33%)</title><rect x="239.3" y="611.0" width="62.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.3" y="622.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 5.33%)</title><rect x="239.3" y="595.0" width="62.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.3" y="606.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 3.43%)</title><rect x="239.3" y="579.0" width="40.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.3" y="590.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 3.43%)</title><rect x="239.3" y="563.0" width="40.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.3" y="574.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 3.43%)</title><rect x="239.3" y="547.0" width="40.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.3" y="558.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.86%)</title><rect x="239.3" y="531.0" width="33.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.3" y="542.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.86%)</title><rect x="239.3" y="515.0" width="33.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.3" y="526.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (22 samples, 2.10%)</title><rect x="239.3" y="499.0" width="24.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.3" y="510.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.57%)</title><rect x="257.2" y="483.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.57%)</title><rect x="257.2" y="467.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.57%)</title><rect x="257.2" y="451.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.57%)</title><rect x="257.2" y="435.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.57%)</title><rect x="257.2" y="419.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.2" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.57%)</title><rect x="257.2" y="403.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.2" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.57%)</title><rect x="257.2" y="387.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.2" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (8 samples, 0.76%)</title><rect x="264.0" y="499.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.76%)</title><rect x="264.0" y="483.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.29%)</title><rect x="264.0" y="467.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.0" y="478.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.29%)</title><rect x="264.0" y="451.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.38%)</title><rect x="267.4" y="467.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.4" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.38%)</title><rect x="267.4" y="451.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.10%)</title><rect x="271.8" y="467.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.10%)</title><rect x="271.8" y="451.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.8" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="271.8" y="435.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="274.8" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="271.8" y="419.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="274.8" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="271.8" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="274.8" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="271.8" y="387.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="274.8" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="271.8" y="371.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="274.8" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="271.8" y="355.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="274.8" y="366.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="271.8" y="339.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="274.8" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="271.8" y="323.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="274.8" y="334.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="271.8" y="307.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="274.8" y="318.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.10%)</title><rect x="271.8" y="291.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="274.8" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.19%)</title><rect x="273.0" y="531.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="276.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.19%)</title><rect x="273.0" y="515.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="273.0" y="499.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="273.0" y="483.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.0" y="494.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="273.0" y="467.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="276.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="274.1" y="499.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="277.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="274.1" y="483.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="274.1" y="467.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="277.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="274.1" y="451.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.10%)</title><rect x="275.2" y="531.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="275.2" y="515.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="275.2" y="499.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="275.2" y="483.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="275.2" y="467.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="278.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="275.2" y="451.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.10%)</title><rect x="275.2" y="435.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.10%)</title><rect x="276.3" y="531.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.10%)</title><rect x="277.5" y="531.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.10%)</title><rect x="277.5" y="515.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="277.5" y="499.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.5" y="510.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="277.5" y="483.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="277.5" y="467.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="278.6" y="531.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (11 samples, 1.05%)</title><rect x="279.7" y="579.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.95%)</title><rect x="279.7" y="563.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.76%)</title><rect x="279.7" y="547.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.7" y="558.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="279.7" y="531.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/131820941.accept (2 samples, 0.19%)</title><rect x="279.7" y="515.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.19%)</title><rect x="279.7" y="499.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="279.7" y="483.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.10%)</title><rect x="279.7" y="467.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="282.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="279.7" y="451.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="279.7" y="435.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.10%)</title><rect x="279.7" y="419.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="280.8" y="483.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.10%)</title><rect x="280.8" y="467.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="280.8" y="451.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.8" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="280.8" y="435.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.8" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="280.8" y="419.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.8" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="282.0" y="531.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="282.0" y="515.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="282.0" y="499.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.0" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="282.0" y="483.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="282.0" y="467.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.0" y="478.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="282.0" y="451.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.10%)</title><rect x="282.0" y="435.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (5 samples, 0.48%)</title><rect x="283.1" y="531.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (5 samples, 0.48%)</title><rect x="283.1" y="515.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.29%)</title><rect x="285.3" y="499.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.29%)</title><rect x="285.3" y="483.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.3" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.29%)</title><rect x="285.3" y="467.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.3" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.29%)</title><rect x="285.3" y="451.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.3" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.29%)</title><rect x="285.3" y="435.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.3" y="446.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (3 samples, 0.29%)</title><rect x="285.3" y="419.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.3" y="430.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.10%)</title><rect x="285.3" y="403.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="288.3" y="414.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (2 samples, 0.19%)</title><rect x="286.5" y="403.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.5" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.10%)</title><rect x="287.6" y="387.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.19%)</title><rect x="288.7" y="547.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.19%)</title><rect x="288.7" y="531.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="288.7" y="515.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.19%)</title><rect x="288.7" y="499.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.7" y="510.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.19%)</title><rect x="288.7" y="483.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="288.7" y="467.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.7" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="288.7" y="451.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.7" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.10%)</title><rect x="288.7" y="435.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.7" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.10%)</title><rect x="288.7" y="419.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.7" y="430.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.10%)</title><rect x="288.7" y="403.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.7" y="414.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/2131952342.get (1 samples, 0.10%)</title><rect x="289.8" y="467.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="292.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="291.0" y="563.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.10%)</title><rect x="291.0" y="547.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.10%)</title><rect x="291.0" y="531.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.19%)</title><rect x="292.1" y="579.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.10%)</title><rect x="292.1" y="563.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.10%)</title><rect x="292.1" y="547.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.10%)</title><rect x="292.1" y="531.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.10%)</title><rect x="292.1" y="515.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.10%)</title><rect x="292.1" y="499.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.10%)</title><rect x="292.1" y="483.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.10%)</title><rect x="292.1" y="467.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="292.1" y="451.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="292.1" y="435.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.10%)</title><rect x="293.2" y="563.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.10%)</title><rect x="293.2" y="547.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="293.2" y="531.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="293.2" y="515.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.10%)</title><rect x="293.2" y="499.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.10%)</title><rect x="293.2" y="483.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.10%)</title><rect x="293.2" y="467.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.10%)</title><rect x="293.2" y="451.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.10%)</title><rect x="293.2" y="435.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.validate (1 samples, 0.10%)</title><rect x="293.2" y="419.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.2" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.38%)</title><rect x="294.3" y="579.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.38%)</title><rect x="294.3" y="563.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="295.4" y="547.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1673382240.accept (1 samples, 0.10%)</title><rect x="295.4" y="531.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.10%)</title><rect x="295.4" y="515.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="295.4" y="499.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="296.6" y="547.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="296.6" y="531.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="296.6" y="515.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="297.7" y="547.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="300.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.10%)</title><rect x="297.7" y="531.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="297.7" y="515.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.7" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.10%)</title><rect x="297.7" y="499.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.7" y="510.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="297.7" y="483.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.19%)</title><rect x="298.8" y="579.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="301.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="298.8" y="563.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="298.8" y="547.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="298.8" y="531.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="299.9" y="515.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="299.9" y="499.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.10%)</title><rect x="301.1" y="579.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="304.1" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="301.1" y="563.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="304.1" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.run (695 samples, 66.19%)</title><rect x="302.2" y="643.0" width="781.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="305.2" y="654.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (695 samples, 66.19%)</title><rect x="302.2" y="627.0" width="781.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.2" y="638.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (695 samples, 66.19%)</title><rect x="302.2" y="611.0" width="781.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="305.2" y="622.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883020.run (486 samples, 46.29%)</title><rect x="306.7" y="595.0" width="546.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.7" y="606.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883020...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (486 samples, 46.29%)</title><rect x="306.7" y="579.0" width="546.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="309.7" y="590.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (486 samples, 46.29%)</title><rect x="306.7" y="563.0" width="546.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="309.7" y="574.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (483 samples, 46.00%)</title><rect x="306.7" y="547.0" width="542.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="309.7" y="558.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="315.7" y="531.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="318.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (153 samples, 14.57%)</title><rect x="316.8" y="531.0" width="171.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.8" y="542.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (153 samples, 14.57%)</title><rect x="316.8" y="515.0" width="171.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.8" y="526.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (153 samples, 14.57%)</title><rect x="316.8" y="499.0" width="171.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="319.8" y="510.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (153 samples, 14.57%)</title><rect x="316.8" y="483.0" width="171.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.8" y="494.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (153 samples, 14.57%)</title><rect x="316.8" y="467.0" width="171.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.8" y="478.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (153 samples, 14.57%)</title><rect x="316.8" y="451.0" width="171.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="319.8" y="462.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 4.95%)</title><rect x="316.8" y="435.0" width="58.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="319.8" y="446.0">com/fa..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="334.8" y="419.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="337.8" y="430.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="334.8" y="403.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="337.8" y="414.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="335.9" y="419.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="338.9" y="430.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 1.05%)</title><rect x="337.0" y="419.0" width="12.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="340.0" y="430.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.67%)</title><rect x="341.5" y="403.0" width="7.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="344.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (9 samples, 0.86%)</title><rect x="349.4" y="419.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="352.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.38%)</title><rect x="353.9" y="403.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.29%)</title><rect x="355.0" y="387.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="358.0" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.29%)</title><rect x="355.0" y="371.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.0" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.29%)</title><rect x="355.0" y="355.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="358.0" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.29%)</title><rect x="355.0" y="339.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="358.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.10%)</title><rect x="358.4" y="403.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="361.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 1.33%)</title><rect x="359.5" y="419.0" width="15.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.29%)</title><rect x="371.9" y="403.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.10%)</title><rect x="371.9" y="387.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="374.9" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.10%)</title><rect x="371.9" y="371.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.10%)</title><rect x="373.0" y="387.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.10%)</title><rect x="373.0" y="371.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="376.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.10%)</title><rect x="373.0" y="355.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="376.0" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="373.0" y="339.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="376.0" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="373.0" y="323.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="376.0" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="373.0" y="307.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="376.0" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="373.0" y="291.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="376.0" y="302.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="373.0" y="275.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="376.0" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.10%)</title><rect x="374.1" y="387.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.1" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="374.1" y="371.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="377.1" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="374.1" y="355.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="377.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (93 samples, 8.86%)</title><rect x="375.2" y="435.0" width="104.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.2" y="446.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.29%)</title><rect x="375.2" y="419.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.19%)</title><rect x="378.6" y="419.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="381.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.76%)</title><rect x="380.9" y="419.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="383.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.67%)</title><rect x="382.0" y="403.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.95%)</title><rect x="389.8" y="419.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="392.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.95%)</title><rect x="389.8" y="403.0" width="11.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.29%)</title><rect x="397.7" y="387.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="400.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.29%)</title><rect x="397.7" y="371.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.7" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.86%)</title><rect x="401.1" y="419.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="404.1" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="403.3" y="403.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="406.3" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="403.3" y="387.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="406.3" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="403.3" y="371.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="406.3" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="403.3" y="355.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="406.3" y="366.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="403.3" y="339.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="406.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.57%)</title><rect x="404.5" y="403.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="407.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (59 samples, 5.62%)</title><rect x="411.2" y="419.0" width="66.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="414.2" y="430.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.62%)</title><rect x="411.2" y="403.0" width="19.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="414.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.67%)</title><rect x="411.2" y="387.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="414.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.67%)</title><rect x="411.2" y="371.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.67%)</title><rect x="411.2" y="355.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.76%)</title><rect x="419.1" y="387.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="428.1" y="387.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="431.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="428.1" y="371.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="431.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="429.2" y="387.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="432.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (42 samples, 4.00%)</title><rect x="430.3" y="403.0" width="47.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.3" y="414.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (42 samples, 4.00%)</title><rect x="430.3" y="387.0" width="47.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="433.3" y="398.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (42 samples, 4.00%)</title><rect x="430.3" y="371.0" width="47.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.3" y="382.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.52%)</title><rect x="433.7" y="355.0" width="18.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.86%)</title><rect x="439.3" y="339.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="442.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.86%)</title><rect x="439.3" y="323.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="442.3" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.86%)</title><rect x="439.3" y="307.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="442.3" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.57%)</title><rect x="442.7" y="291.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="445.7" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.10%)</title><rect x="449.4" y="339.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="452.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="450.5" y="339.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="453.5" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="450.5" y="323.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="453.5" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="450.5" y="307.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="453.5" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.57%)</title><rect x="451.7" y="355.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="454.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.38%)</title><rect x="453.9" y="339.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.38%)</title><rect x="453.9" y="323.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.38%)</title><rect x="453.9" y="307.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.9" y="318.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.38%)</title><rect x="453.9" y="291.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="456.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.10%)</title><rect x="458.4" y="355.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="461.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.95%)</title><rect x="459.5" y="355.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="462.5" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.95%)</title><rect x="459.5" y="339.0" width="11.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="462.5" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.95%)</title><rect x="459.5" y="323.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="462.5" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.95%)</title><rect x="459.5" y="307.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="462.5" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.95%)</title><rect x="459.5" y="291.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="462.5" y="302.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.76%)</title><rect x="461.8" y="275.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.8" y="286.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (4 samples, 0.38%)</title><rect x="466.3" y="259.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="469.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.38%)</title><rect x="470.8" y="355.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="473.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.38%)</title><rect x="470.8" y="339.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="473.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.38%)</title><rect x="470.8" y="323.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="473.8" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="474.1" y="307.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="477.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.19%)</title><rect x="475.3" y="355.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="478.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 0.19%)</title><rect x="477.5" y="419.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.76%)</title><rect x="479.8" y="435.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="482.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.76%)</title><rect x="479.8" y="419.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.76%)</title><rect x="479.8" y="403.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="482.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.76%)</title><rect x="479.8" y="387.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="482.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.76%)</title><rect x="479.8" y="371.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="482.8" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (293 samples, 27.90%)</title><rect x="488.7" y="531.0" width="329.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="491.7" y="542.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (46 samples, 4.38%)</title><rect x="488.7" y="515.0" width="51.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="491.7" y="526.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 0.38%)</title><rect x="488.7" y="499.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="491.7" y="510.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (42 samples, 4.00%)</title><rect x="493.2" y="499.0" width="47.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="496.2" y="510.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (41 samples, 3.90%)</title><rect x="494.4" y="483.0" width="46.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.4" y="494.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.38%)</title><rect x="494.4" y="467.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.4" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.38%)</title><rect x="494.4" y="451.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="497.4" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.38%)</title><rect x="494.4" y="435.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.4" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.38%)</title><rect x="494.4" y="419.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="497.4" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.10%)</title><rect x="497.7" y="403.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="500.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.10%)</title><rect x="497.7" y="387.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.7" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (37 samples, 3.52%)</title><rect x="498.9" y="467.0" width="41.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.9" y="478.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (14 samples, 1.33%)</title><rect x="524.7" y="451.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="527.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (14 samples, 1.33%)</title><rect x="524.7" y="435.0" width="15.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="527.7" y="446.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.19%)</title><rect x="537.1" y="419.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="540.1" y="430.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="539.3" y="419.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="542.3" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.67%)</title><rect x="540.4" y="515.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="543.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.38%)</title><rect x="543.8" y="499.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="546.8" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.38%)</title><rect x="543.8" y="483.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="546.8" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (169 samples, 16.10%)</title><rect x="548.3" y="515.0" width="189.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="551.3" y="526.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (169 samples, 16.10%)</title><rect x="548.3" y="499.0" width="189.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="551.3" y="510.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.19%)</title><rect x="558.4" y="483.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="561.4" y="494.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="558.4" y="467.0" width="2.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="561.4" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (56 samples, 5.33%)</title><rect x="560.7" y="483.0" width="62.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="563.7" y="494.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (37 samples, 3.52%)</title><rect x="570.8" y="467.0" width="41.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="573.8" y="478.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (36 samples, 3.43%)</title><rect x="571.9" y="451.0" width="40.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="574.9" y="462.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (23 samples, 2.19%)</title><rect x="579.8" y="435.0" width="25.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="582.8" y="446.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (23 samples, 2.19%)</title><rect x="579.8" y="419.0" width="25.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.8" y="430.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 2.19%)</title><rect x="579.8" y="403.0" width="25.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.8" y="414.0">j..</text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.10%)</title><rect x="586.5" y="387.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="589.5" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.86%)</title><rect x="587.6" y="387.0" width="10.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="590.6" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.38%)</title><rect x="588.8" y="371.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="591.8" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="588.8" y="355.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="591.8" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="588.8" y="339.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="591.8" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.19%)</title><rect x="589.9" y="355.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="592.9" y="366.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="592.1" y="355.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="595.1" y="366.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="592.1" y="339.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="595.1" y="350.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.10%)</title><rect x="592.1" y="323.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="595.1" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.38%)</title><rect x="593.3" y="371.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="596.3" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.38%)</title><rect x="593.3" y="355.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="596.3" y="366.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="593.3" y="339.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="596.3" y="350.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="594.4" y="339.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="597.4" y="350.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="595.5" y="339.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="598.5" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="595.5" y="323.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="598.5" y="334.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="596.6" y="339.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="599.6" y="350.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.67%)</title><rect x="597.8" y="387.0" width="7.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="600.8" y="398.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.29%)</title><rect x="605.6" y="435.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="608.6" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="609.0" y="435.0" width="2.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="612.0" y="446.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="611.2" y="435.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="614.2" y="446.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.10%)</title><rect x="612.4" y="467.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="615.4" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="612.4" y="451.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="615.4" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="612.4" y="435.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="615.4" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="612.4" y="419.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="615.4" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="612.4" y="403.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="615.4" y="414.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.19%)</title><rect x="613.5" y="467.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="616.5" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.67%)</title><rect x="615.7" y="467.0" width="7.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="618.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.76%)</title><rect x="623.6" y="483.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="626.6" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.76%)</title><rect x="623.6" y="467.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="626.6" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="623.6" y="451.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="626.6" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="623.6" y="435.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="626.6" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="623.6" y="419.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="626.6" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="623.6" y="403.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="626.6" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="623.6" y="387.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="626.6" y="398.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="623.6" y="371.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="626.6" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="623.6" y="355.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="626.6" y="366.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="623.6" y="339.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="626.6" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="624.7" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="627.7" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.57%)</title><rect x="625.8" y="451.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="628.8" y="462.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (94 samples, 8.95%)</title><rect x="632.6" y="483.0" width="105.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="635.6" y="494.0">org/slf4j/MDC..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (91 samples, 8.67%)</title><rect x="636.0" y="467.0" width="102.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.0" y="478.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.57%)</title><rect x="636.0" y="451.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.0" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.57%)</title><rect x="636.0" y="435.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="639.0" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.57%)</title><rect x="636.0" y="419.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.0" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.57%)</title><rect x="636.0" y="403.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.0" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.10%)</title><rect x="641.6" y="387.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="644.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="641.6" y="371.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="644.6" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (85 samples, 8.10%)</title><rect x="642.7" y="451.0" width="95.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="645.7" y="462.0">java/util/C..</text>
</g>
<g>
<title>java/util/HashMap.put (79 samples, 7.52%)</title><rect x="649.4" y="435.0" width="88.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="652.4" y="446.0">java/util/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (43 samples, 4.10%)</title><rect x="689.9" y="419.0" width="48.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.9" y="430.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.29%)</title><rect x="715.8" y="403.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="718.8" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 1.14%)</title><rect x="719.1" y="403.0" width="13.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="722.1" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.29%)</title><rect x="729.2" y="387.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="732.2" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="730.4" y="371.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="733.4" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.19%)</title><rect x="730.4" y="355.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="733.4" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.19%)</title><rect x="730.4" y="339.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="733.4" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="730.4" y="323.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="733.4" y="334.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="731.5" y="323.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="734.5" y="334.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.48%)</title><rect x="732.6" y="403.0" width="5.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="735.6" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (48 samples, 4.57%)</title><rect x="738.2" y="515.0" width="54.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="741.2" y="526.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (46 samples, 4.38%)</title><rect x="739.4" y="499.0" width="51.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="742.4" y="510.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/588734280.process (19 samples, 1.81%)</title><rect x="740.5" y="483.0" width="21.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="743.5" y="494.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (18 samples, 1.71%)</title><rect x="740.5" y="467.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="743.5" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.52%)</title><rect x="740.5" y="451.0" width="18.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="743.5" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.76%)</title><rect x="747.2" y="435.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.2" y="446.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="747.2" y="419.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="750.2" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="747.2" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="750.2" y="414.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.67%)</title><rect x="748.3" y="419.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="751.3" y="430.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.57%)</title><rect x="749.5" y="403.0" width="6.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="752.5" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="756.2" y="435.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.2" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="756.2" y="419.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="759.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="756.2" y="403.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="759.2" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.10%)</title><rect x="757.3" y="435.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.3" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.10%)</title><rect x="757.3" y="419.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="760.3" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.10%)</title><rect x="757.3" y="403.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.3" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.10%)</title><rect x="757.3" y="387.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="760.3" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="757.3" y="371.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="760.3" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="757.3" y="355.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="760.3" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="757.3" y="339.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="760.3" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="757.3" y="323.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="760.3" y="334.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="757.3" y="307.0" width="1.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="760.3" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.19%)</title><rect x="758.5" y="451.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="761.5" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="758.5" y="435.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="761.5" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="758.5" y="419.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="761.5" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="758.5" y="403.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="761.5" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="760.7" y="467.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="763.7" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.38%)</title><rect x="761.8" y="483.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="764.8" y="494.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.38%)</title><rect x="761.8" y="467.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="764.8" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (8 samples, 0.76%)</title><rect x="766.3" y="483.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="769.3" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (8 samples, 0.76%)</title><rect x="766.3" y="467.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="769.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/385742244.get$Lambda (8 samples, 0.76%)</title><rect x="766.3" y="451.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="769.3" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/385742244.&lt;init&gt; (7 samples, 0.67%)</title><rect x="767.4" y="435.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="770.4" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.48%)</title><rect x="775.3" y="483.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="778.3" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.48%)</title><rect x="775.3" y="467.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="778.3" y="478.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.38%)</title><rect x="776.4" y="451.0" width="4.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="779.4" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="780.9" y="483.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="783.9" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="780.9" y="467.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="783.9" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.76%)</title><rect x="782.1" y="483.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="785.1" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="787.7" y="467.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="790.7" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.19%)</title><rect x="788.8" y="467.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.8" y="478.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.10%)</title><rect x="791.0" y="499.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.0" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/105226314.linkToTargetMethod (1 samples, 0.10%)</title><rect x="792.2" y="515.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="795.2" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.10%)</title><rect x="792.2" y="499.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.2" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1152953337.get$Lambda (1 samples, 0.10%)</title><rect x="792.2" y="483.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.2" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="792.2" y="467.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="795.2" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="792.2" y="451.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="795.2" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="792.2" y="435.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="795.2" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="792.2" y="419.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="795.2" y="430.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="792.2" y="403.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="795.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 2.10%)</title><rect x="793.3" y="515.0" width="24.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.3" y="526.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 2.10%)</title><rect x="793.3" y="499.0" width="24.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="796.3" y="510.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="797.8" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="800.8" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="797.8" y="467.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="800.8" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="797.8" y="451.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="800.8" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="797.8" y="435.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="800.8" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="797.8" y="419.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="800.8" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="797.8" y="403.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="800.8" y="414.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="797.8" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="800.8" y="398.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.10%)</title><rect x="797.8" y="371.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="800.8" y="382.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.86%)</title><rect x="798.9" y="483.0" width="10.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="801.9" y="494.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.86%)</title><rect x="798.9" y="467.0" width="10.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="801.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.76%)</title><rect x="809.0" y="483.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="812.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1152953337.accept (8 samples, 0.76%)</title><rect x="809.0" y="467.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="812.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.76%)</title><rect x="809.0" y="451.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="812.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.76%)</title><rect x="809.0" y="435.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="812.0" y="446.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.76%)</title><rect x="809.0" y="419.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="812.0" y="430.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.76%)</title><rect x="809.0" y="403.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="812.0" y="414.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.29%)</title><rect x="814.6" y="387.0" width="3.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="817.6" y="398.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="814.6" y="371.0" width="3.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="817.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.71%)</title><rect x="818.0" y="531.0" width="20.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="821.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.71%)</title><rect x="818.0" y="515.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="821.0" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="820.3" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="823.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.10%)</title><rect x="821.4" y="499.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.33%)</title><rect x="822.5" y="499.0" width="15.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="825.5" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1152953337.accept (14 samples, 1.33%)</title><rect x="822.5" y="483.0" width="15.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="825.5" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (14 samples, 1.33%)</title><rect x="822.5" y="467.0" width="15.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="825.5" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (14 samples, 1.33%)</title><rect x="822.5" y="451.0" width="15.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="825.5" y="462.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (14 samples, 1.33%)</title><rect x="822.5" y="435.0" width="15.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="825.5" y="446.0"></text>
</g>
<g>
<title>java/time/Duration.create (14 samples, 1.33%)</title><rect x="822.5" y="419.0" width="15.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="825.5" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.95%)</title><rect x="838.2" y="531.0" width="11.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="841.2" y="542.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.95%)</title><rect x="838.2" y="515.0" width="11.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="841.2" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.29%)</title><rect x="849.5" y="547.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.5" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="850.6" y="531.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="853.6" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="851.7" y="531.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="854.7" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="851.7" y="515.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="854.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.48%)</title><rect x="852.9" y="595.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="855.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.48%)</title><rect x="852.9" y="579.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.48%)</title><rect x="852.9" y="563.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="855.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.48%)</title><rect x="852.9" y="547.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="855.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883020.run (2 samples, 0.19%)</title><rect x="856.2" y="531.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="859.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (200 samples, 19.05%)</title><rect x="858.5" y="595.0" width="224.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="861.5" y="606.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (200 samples, 19.05%)</title><rect x="858.5" y="579.0" width="224.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="861.5" y="590.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (184 samples, 17.52%)</title><rect x="858.5" y="563.0" width="206.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="861.5" y="574.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (9 samples, 0.86%)</title><rect x="863.0" y="547.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="866.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (13 samples, 1.24%)</title><rect x="873.1" y="547.0" width="14.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="876.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.24%)</title><rect x="873.1" y="531.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="876.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.24%)</title><rect x="873.1" y="515.0" width="14.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="876.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.24%)</title><rect x="873.1" y="499.0" width="14.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="876.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.38%)</title><rect x="887.7" y="547.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="890.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.38%)</title><rect x="887.7" y="531.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="890.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (153 samples, 14.57%)</title><rect x="892.2" y="547.0" width="171.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="895.2" y="558.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (153 samples, 14.57%)</title><rect x="892.2" y="531.0" width="171.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="895.2" y="542.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="897.8" y="515.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="900.8" y="526.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.29%)</title><rect x="898.9" y="515.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="901.9" y="526.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="902.3" y="515.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="905.3" y="526.0"></text>
</g>
<g>
<title>Unsafe_Park (141 samples, 13.43%)</title><rect x="903.4" y="515.0" width="158.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="906.4" y="526.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.29%)</title><rect x="909.0" y="499.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="912.0" y="510.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.10%)</title><rect x="912.4" y="499.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="915.4" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.90%)</title><rect x="913.5" y="499.0" width="22.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.5" y="510.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.67%)</title><rect x="922.5" y="483.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="925.5" y="494.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.29%)</title><rect x="924.8" y="467.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="927.8" y="478.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="927.0" y="451.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="930.0" y="462.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="928.2" y="467.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.2" y="478.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="929.3" y="467.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="932.3" y="478.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.19%)</title><rect x="930.4" y="483.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="933.4" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.29%)</title><rect x="932.6" y="483.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="935.6" y="494.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.19%)</title><rect x="936.0" y="499.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="939.0" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.10%)</title><rect x="938.3" y="499.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="941.3" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="939.4" y="499.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="942.4" y="510.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.10%)</title><rect x="940.5" y="499.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="943.5" y="510.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.86%)</title><rect x="941.6" y="499.0" width="10.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="944.6" y="510.0"></text>
</g>
<g>
<title>__lll_unlock_wake (25 samples, 2.38%)</title><rect x="951.8" y="499.0" width="28.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="954.8" y="510.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 5.24%)</title><rect x="979.8" y="499.0" width="61.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="982.8" y="510.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (9 samples, 0.86%)</title><rect x="1041.7" y="499.0" width="10.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1044.7" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.29%)</title><rect x="1051.8" y="499.0" width="3.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1054.8" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="1055.1" y="499.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1058.1" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="1056.3" y="499.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1059.3" y="510.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1057.4" y="499.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1060.4" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.19%)</title><rect x="1058.5" y="499.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.5" y="510.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="1060.8" y="499.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1063.8" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.19%)</title><rect x="1061.9" y="515.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1064.9" y="526.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.10%)</title><rect x="1064.1" y="547.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1067.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.29%)</title><rect x="1065.3" y="563.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1068.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.10%)</title><rect x="1068.6" y="563.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1071.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.10%)</title><rect x="1068.6" y="547.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1071.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.10%)</title><rect x="1068.6" y="531.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1071.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 1.14%)</title><rect x="1069.8" y="563.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1072.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.14%)</title><rect x="1069.8" y="547.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1072.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.14%)</title><rect x="1069.8" y="531.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1072.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.14%)</title><rect x="1069.8" y="515.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1072.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1083.2" y="643.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1086.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1083.2" y="627.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1086.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1083.2" y="611.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1086.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.10%)</title><rect x="1083.2" y="595.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1086.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.10%)</title><rect x="1083.2" y="579.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1086.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="1083.2" y="563.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1086.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="1083.2" y="547.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1086.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.10%)</title><rect x="1083.2" y="531.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1086.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.10%)</title><rect x="1083.2" y="515.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1086.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.10%)</title><rect x="1083.2" y="499.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1086.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.10%)</title><rect x="1083.2" y="483.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1086.2" y="494.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.10%)</title><rect x="1083.2" y="467.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1086.2" y="478.0"></text>
</g>
<g>
<title>start_thread (94 samples, 8.95%)</title><rect x="1084.4" y="643.0" width="105.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1087.4" y="654.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (94 samples, 8.95%)</title><rect x="1084.4" y="627.0" width="105.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1087.4" y="638.0">java_start(Th..</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 2.38%)</title><rect x="1084.4" y="611.0" width="28.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.4" y="622.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.67%)</title><rect x="1084.4" y="595.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1087.4" y="606.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.67%)</title><rect x="1084.4" y="579.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.4" y="590.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.19%)</title><rect x="1084.4" y="563.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1087.4" y="574.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.38%)</title><rect x="1086.6" y="563.0" width="4.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1089.6" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="1091.1" y="563.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1094.1" y="574.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.71%)</title><rect x="1092.2" y="595.0" width="20.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.2" y="606.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.38%)</title><rect x="1092.2" y="579.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.2" y="590.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1092.2" y="563.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.2" y="574.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.29%)</title><rect x="1093.4" y="563.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1096.4" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (12 samples, 1.14%)</title><rect x="1096.7" y="579.0" width="13.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.7" y="590.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1096.7" y="563.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.7" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1097.8" y="563.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1100.8" y="574.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1097.8" y="547.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.8" y="558.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (10 samples, 0.95%)</title><rect x="1099.0" y="563.0" width="11.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.0" y="574.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (3 samples, 0.29%)</title><rect x="1099.0" y="547.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.0" y="558.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (6 samples, 0.57%)</title><rect x="1102.3" y="547.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.3" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.10%)</title><rect x="1109.1" y="547.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.1" y="558.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.10%)</title><rect x="1109.1" y="531.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.1" y="542.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.19%)</title><rect x="1110.2" y="579.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.2" y="590.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.19%)</title><rect x="1110.2" y="563.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.19%)</title><rect x="1110.2" y="547.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.2" y="558.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.19%)</title><rect x="1110.2" y="531.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.2" y="542.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.19%)</title><rect x="1110.2" y="515.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.2" y="526.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.19%)</title><rect x="1110.2" y="499.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.2" y="510.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.19%)</title><rect x="1110.2" y="483.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.2" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1110.2" y="467.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.2" y="478.0"></text>
</g>
<g>
<title>G1Mux2Closure::do_oop(unsigned int*) (1 samples, 0.10%)</title><rect x="1110.2" y="451.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.2" y="462.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.10%)</title><rect x="1111.3" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.3" y="478.0"></text>
</g>
<g>
<title>JavaThread::run() (67 samples, 6.38%)</title><rect x="1112.5" y="611.0" width="75.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.5" y="622.0">JavaThre..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (67 samples, 6.38%)</title><rect x="1112.5" y="595.0" width="75.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.5" y="606.0">JavaThre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (67 samples, 6.38%)</title><rect x="1112.5" y="579.0" width="75.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.5" y="590.0">CompileB..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (67 samples, 6.38%)</title><rect x="1112.5" y="563.0" width="75.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.5" y="574.0">CompileB..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (66 samples, 6.29%)</title><rect x="1112.5" y="547.0" width="74.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.5" y="558.0">C2Compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (66 samples, 6.29%)</title><rect x="1112.5" y="531.0" width="74.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.5" y="542.0">Compile:..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.10%)</title><rect x="1112.5" y="515.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.5" y="526.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.10%)</title><rect x="1112.5" y="499.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.5" y="510.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1112.5" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.5" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1112.5" y="467.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.5" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1112.5" y="451.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.5" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1112.5" y="435.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.5" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::build_loop_tree(ciTypeFlow::Block*) (1 samples, 0.10%)</title><rect x="1112.5" y="419.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1115.5" y="430.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 3.71%)</title><rect x="1113.6" y="515.0" width="43.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.6" y="526.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.19%)</title><rect x="1113.6" y="499.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.6" y="510.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.19%)</title><rect x="1113.6" y="483.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.6" y="494.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="1115.8" y="499.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.8" y="510.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.10%)</title><rect x="1115.8" y="483.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.8" y="494.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.48%)</title><rect x="1117.0" y="499.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.0" y="510.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1117.0" y="483.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.0" y="494.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="1118.1" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.1" y="494.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.29%)</title><rect x="1119.2" y="483.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.2" y="494.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.19%)</title><rect x="1120.3" y="467.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.3" y="478.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="1120.3" y="451.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.3" y="462.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.10%)</title><rect x="1120.3" y="435.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.3" y="446.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.10%)</title><rect x="1121.4" y="451.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.4" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.19%)</title><rect x="1122.6" y="499.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.6" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.19%)</title><rect x="1122.6" y="483.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.6" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1122.6" y="467.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.6" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.10%)</title><rect x="1122.6" y="451.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.6" y="462.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.10%)</title><rect x="1122.6" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.6" y="446.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.10%)</title><rect x="1123.7" y="467.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.7" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 2.67%)</title><rect x="1124.8" y="499.0" width="31.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.8" y="510.0">Ph..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1124.8" y="483.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.8" y="494.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.10%)</title><rect x="1125.9" y="483.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.9" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.19%)</title><rect x="1127.1" y="483.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.1" y="494.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1127.1" y="467.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.1" y="478.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.10%)</title><rect x="1128.2" y="467.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.2" y="478.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1128.2" y="451.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.2" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1129.3" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.3" y="494.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1129.3" y="467.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.3" y="478.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1129.3" y="451.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.3" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.29%)</title><rect x="1130.4" y="483.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.4" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.48%)</title><rect x="1133.8" y="483.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.8" y="494.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1136.1" y="467.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.1" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.19%)</title><rect x="1137.2" y="467.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.2" y="478.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1138.3" y="451.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1141.3" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.19%)</title><rect x="1139.4" y="483.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.4" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1140.6" y="467.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.6" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.19%)</title><rect x="1141.7" y="483.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.7" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1143.9" y="483.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.9" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.19%)</title><rect x="1145.0" y="483.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.0" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1146.2" y="467.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.2" y="478.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1147.3" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.3" y="494.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.38%)</title><rect x="1148.4" y="483.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.4" y="494.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.19%)</title><rect x="1150.7" y="467.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.7" y="478.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.10%)</title><rect x="1151.8" y="451.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="462.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1152.9" y="483.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.9" y="494.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.19%)</title><rect x="1154.0" y="483.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.0" y="494.0"></text>
</g>
<g>
<title>VectorSet::set(unsigned int) (1 samples, 0.10%)</title><rect x="1156.3" y="499.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.3" y="510.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 1.90%)</title><rect x="1157.4" y="515.0" width="22.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="526.0">C..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1157.4" y="499.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1157.4" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1157.4" y="467.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.10%)</title><rect x="1157.4" y="451.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="462.0"></text>
</g>
<g>
<title>PointsToNode::PointsToNode(ConnectionGraph*, Node*, PointsToNode::EscapeState, PointsToNode::NodeType) (1 samples, 0.10%)</title><rect x="1157.4" y="435.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.4" y="446.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.10%)</title><rect x="1158.5" y="499.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.5" y="510.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.10%)</title><rect x="1158.5" y="483.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.5" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 1.24%)</title><rect x="1159.7" y="499.0" width="14.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.7" y="510.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1159.7" y="483.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.7" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1160.8" y="483.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.8" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.86%)</title><rect x="1161.9" y="483.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.9" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 0.76%)</title><rect x="1163.0" y="467.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.0" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 0.76%)</title><rect x="1163.0" y="451.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.0" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1170.9" y="435.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.9" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.10%)</title><rect x="1172.0" y="483.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.0" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1173.1" y="483.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.1" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1173.1" y="467.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.1" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1173.1" y="451.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.1" y="462.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.10%)</title><rect x="1173.1" y="435.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.1" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.38%)</title><rect x="1174.3" y="499.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.3" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.38%)</title><rect x="1174.3" y="483.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.3" y="494.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1174.3" y="467.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.3" y="478.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1174.3" y="451.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.3" y="462.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1175.4" y="467.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="478.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.10%)</title><rect x="1175.4" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.4" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.10%)</title><rect x="1175.4" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1176.5" y="467.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.5" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1176.5" y="451.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.5" y="462.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1176.5" y="435.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.5" y="446.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1177.6" y="467.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="478.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1177.6" y="451.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="462.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.10%)</title><rect x="1178.8" y="499.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="510.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.10%)</title><rect x="1178.8" y="483.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1178.8" y="467.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1178.8" y="451.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.38%)</title><rect x="1179.9" y="515.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.38%)</title><rect x="1179.9" y="499.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>GraphKit::sync_jvms() const (1 samples, 0.10%)</title><rect x="1179.9" y="483.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1181.0" y="483.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1181.0" y="467.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1181.0" y="451.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1181.0" y="435.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1181.0" y="419.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1181.0" y="403.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1181.0" y="387.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1181.0" y="371.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1181.0" y="355.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1181.0" y="339.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.0" y="323.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.0" y="307.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1181.0" y="291.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1181.0" y="275.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1181.0" y="259.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.0" y="243.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.0" y="227.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1181.0" y="211.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1181.0" y="195.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1181.0" y="179.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.0" y="163.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.0" y="147.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="158.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.0" y="131.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="142.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.10%)</title><rect x="1181.0" y="115.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="126.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.10%)</title><rect x="1181.0" y="99.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="110.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::push(Metadata* const&amp;) (1 samples, 0.10%)</title><rect x="1181.0" y="83.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1182.1" y="323.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1182.1" y="307.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1182.1" y="291.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1182.1" y="275.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1182.1" y="259.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1182.1" y="243.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1182.1" y="227.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1182.1" y="211.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1182.1" y="195.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1182.1" y="179.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1182.1" y="163.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1182.1" y="147.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1182.1" y="131.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="142.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1182.1" y="115.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="126.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.10%)</title><rect x="1182.1" y="99.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.3" y="115.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.3" y="99.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="110.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.10%)</title><rect x="1183.3" y="83.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.3" y="94.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.10%)</title><rect x="1183.3" y="67.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.3" y="78.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.10%)</title><rect x="1183.3" y="51.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.3" y="62.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1183.3" y="35.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.3" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1184.4" y="515.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.4" y="526.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1184.4" y="499.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="510.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.10%)</title><rect x="1185.5" y="515.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.5" y="526.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.10%)</title><rect x="1185.5" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.5" y="510.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.10%)</title><rect x="1185.5" y="483.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.5" y="494.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="1185.5" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.5" y="478.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1186.6" y="547.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="558.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1186.6" y="531.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="542.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1186.6" y="515.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="526.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1186.6" y="499.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="510.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.10%)</title><rect x="1186.6" y="483.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="494.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1186.6" y="467.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.6" y="478.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.10%)</title><rect x="1186.6" y="451.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.10%)</title><rect x="1186.6" y="435.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1186.6" y="419.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.6" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1186.6" y="403.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.6" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1186.6" y="387.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1186.6" y="371.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1186.6" y="355.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1186.6" y="339.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1186.6" y="323.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1186.6" y="307.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1186.6" y="291.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1186.6" y="275.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.6" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1186.6" y="259.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="270.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1186.6" y="243.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1186.6" y="227.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="238.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1186.6" y="211.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="222.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.10%)</title><rect x="1186.6" y="195.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.6" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.10%)</title><rect x="1186.6" y="179.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="190.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1186.6" y="163.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="174.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1186.6" y="147.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.6" y="158.0"></text>
</g>
<g>
<title>FieldType::get_array_info(Symbol*, FieldArrayInfo&amp;, Thread*) (1 samples, 0.10%)</title><rect x="1186.6" y="131.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="142.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.10%)</title><rect x="1186.6" y="115.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="126.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.19%)</title><rect x="1187.8" y="611.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="622.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.19%)</title><rect x="1187.8" y="595.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.8" y="606.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.19%)</title><rect x="1187.8" y="579.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="590.0"></text>
</g>
</g>
</svg>
