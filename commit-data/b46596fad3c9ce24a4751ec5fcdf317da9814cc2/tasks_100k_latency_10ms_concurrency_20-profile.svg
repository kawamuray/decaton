<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1093"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1093"> </text>
<g id="frames">
<g>
<title>all (282 samples, 100.00%)</title><rect x="10.0" y="1059.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1070.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (19 samples, 6.74%)</title><rect x="10.0" y="1043.0" width="79.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.35%)</title><rect x="10.0" y="1027.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.35%)</title><rect x="10.0" y="1011.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.35%)</title><rect x="10.0" y="995.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.35%)</title><rect x="10.0" y="979.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.35%)</title><rect x="10.0" y="963.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (18 samples, 6.38%)</title><rect x="14.2" y="1027.0" width="75.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1038.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.71%)</title><rect x="18.4" y="1011.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.35%)</title><rect x="18.4" y="995.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="18.4" y="979.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="18.4" y="963.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="18.4" y="947.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="18.4" y="931.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="18.4" y="915.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.35%)</title><rect x="18.4" y="899.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.35%)</title><rect x="18.4" y="883.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.4" y="894.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.35%)</title><rect x="18.4" y="867.0" width="4.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="21.4" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.35%)</title><rect x="22.6" y="995.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.35%)</title><rect x="26.7" y="1011.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.35%)</title><rect x="26.7" y="995.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.42%)</title><rect x="30.9" y="1011.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1392786029.accept (4 samples, 1.42%)</title><rect x="30.9" y="995.0" width="16.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (4 samples, 1.42%)</title><rect x="30.9" y="979.0" width="16.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.06%)</title><rect x="30.9" y="963.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.06%)</title><rect x="30.9" y="947.0" width="12.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.06%)</title><rect x="30.9" y="931.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.06%)</title><rect x="30.9" y="915.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.06%)</title><rect x="30.9" y="899.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.06%)</title><rect x="30.9" y="883.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.71%)</title><rect x="30.9" y="867.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.71%)</title><rect x="30.9" y="851.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.71%)</title><rect x="30.9" y="835.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.35%)</title><rect x="39.3" y="867.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.35%)</title><rect x="39.3" y="851.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.35%)</title><rect x="39.3" y="835.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.35%)</title><rect x="43.5" y="963.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.5" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.35%)</title><rect x="43.5" y="947.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.5" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.35%)</title><rect x="43.5" y="931.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.5" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.35%)</title><rect x="43.5" y="915.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.5" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.35%)</title><rect x="43.5" y="899.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.5" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.35%)</title><rect x="43.5" y="883.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="43.5" y="867.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="46.5" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="43.5" y="851.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="46.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.55%)</title><rect x="47.7" y="1011.0" width="41.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.7" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.55%)</title><rect x="47.7" y="995.0" width="41.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.7" y="1006.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.48%)</title><rect x="47.7" y="979.0" width="29.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.7" y="990.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.06%)</title><rect x="47.7" y="963.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.06%)</title><rect x="47.7" y="947.0" width="12.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.71%)</title><rect x="47.7" y="931.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.71%)</title><rect x="47.7" y="915.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.35%)</title><rect x="47.7" y="899.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.35%)</title><rect x="47.7" y="883.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.35%)</title><rect x="47.7" y="867.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.35%)</title><rect x="47.7" y="851.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.35%)</title><rect x="47.7" y="835.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.35%)</title><rect x="47.7" y="819.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.7" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.35%)</title><rect x="47.7" y="803.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.7" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="47.7" y="787.0" width="4.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="50.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.35%)</title><rect x="51.8" y="899.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.8" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.35%)</title><rect x="51.8" y="883.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.8" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.35%)</title><rect x="51.8" y="867.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.8" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.35%)</title><rect x="51.8" y="851.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.8" y="862.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.35%)</title><rect x="51.8" y="835.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.8" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.35%)</title><rect x="51.8" y="819.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.8" y="830.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.35%)</title><rect x="51.8" y="803.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="54.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.35%)</title><rect x="51.8" y="787.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.35%)</title><rect x="56.0" y="931.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.35%)</title><rect x="56.0" y="915.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.35%)</title><rect x="56.0" y="899.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.0" y="910.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.35%)</title><rect x="56.0" y="883.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="59.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.42%)</title><rect x="60.2" y="963.0" width="16.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1300 (1 samples, 0.35%)</title><rect x="60.2" y="947.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.notInitialized (1 samples, 0.35%)</title><rect x="60.2" y="931.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.06%)</title><rect x="64.4" y="947.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.06%)</title><rect x="64.4" y="931.0" width="12.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.06%)</title><rect x="64.4" y="915.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.71%)</title><rect x="64.4" y="899.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.35%)</title><rect x="64.4" y="883.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.35%)</title><rect x="64.4" y="867.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.35%)</title><rect x="64.4" y="851.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.35%)</title><rect x="64.4" y="835.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.35%)</title><rect x="64.4" y="819.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.35%)</title><rect x="64.4" y="803.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.35%)</title><rect x="64.4" y="787.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.35%)</title><rect x="68.6" y="883.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="71.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.35%)</title><rect x="68.6" y="867.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.35%)</title><rect x="68.6" y="851.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.35%)</title><rect x="72.8" y="899.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.71%)</title><rect x="77.0" y="979.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.35%)</title><rect x="77.0" y="963.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.35%)</title><rect x="77.0" y="947.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.0" y="958.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.35%)</title><rect x="77.0" y="931.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/185467770.accept (1 samples, 0.35%)</title><rect x="77.0" y="915.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.35%)</title><rect x="77.0" y="899.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.35%)</title><rect x="77.0" y="883.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.35%)</title><rect x="77.0" y="867.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="77.0" y="851.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="77.0" y="835.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.35%)</title><rect x="81.1" y="963.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.35%)</title><rect x="81.1" y="947.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.35%)</title><rect x="81.1" y="931.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.35%)</title><rect x="85.3" y="979.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="85.3" y="963.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="85.3" y="947.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.35%)</title><rect x="85.3" y="931.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.remove (1 samples, 0.35%)</title><rect x="85.3" y="915.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.35%)</title><rect x="85.3" y="899.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.3" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (151 samples, 53.55%)</title><rect x="89.5" y="1043.0" width="631.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.5" y="1054.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (151 samples, 53.55%)</title><rect x="89.5" y="1027.0" width="631.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.5" y="1038.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (151 samples, 53.55%)</title><rect x="89.5" y="1011.0" width="631.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.5" y="1022.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1051835364.run (148 samples, 52.48%)</title><rect x="89.5" y="995.0" width="619.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.5" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1051835364.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (148 samples, 52.48%)</title><rect x="89.5" y="979.0" width="619.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.5" y="990.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (148 samples, 52.48%)</title><rect x="89.5" y="963.0" width="619.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.5" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (147 samples, 52.13%)</title><rect x="89.5" y="947.0" width="615.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.5" y="958.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (33 samples, 11.70%)</title><rect x="106.2" y="931.0" width="138.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="109.2" y="942.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (33 samples, 11.70%)</title><rect x="106.2" y="915.0" width="138.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="109.2" y="926.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (33 samples, 11.70%)</title><rect x="106.2" y="899.0" width="138.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="109.2" y="910.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 11.70%)</title><rect x="106.2" y="883.0" width="138.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="109.2" y="894.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 11.70%)</title><rect x="106.2" y="867.0" width="138.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.2" y="878.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (33 samples, 11.70%)</title><rect x="106.2" y="851.0" width="138.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.2" y="862.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.13%)</title><rect x="106.2" y="835.0" width="25.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.2" y="846.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.35%)</title><rect x="110.4" y="819.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.35%)</title><rect x="110.4" y="803.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.35%)</title><rect x="110.4" y="787.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.4" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="110.4" y="771.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.4" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="110.4" y="755.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="110.4" y="739.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.42%)</title><rect x="114.6" y="819.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.42%)</title><rect x="114.6" y="803.0" width="16.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.71%)</title><rect x="123.0" y="787.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="126.0" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.71%)</title><rect x="123.0" y="771.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="126.0" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.71%)</title><rect x="123.0" y="755.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="126.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.71%)</title><rect x="123.0" y="739.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="126.0" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.35%)</title><rect x="123.0" y="723.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="126.0" y="734.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.35%)</title><rect x="127.2" y="723.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="130.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (25 samples, 8.87%)</title><rect x="131.3" y="835.0" width="104.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.3" y="846.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.35%)</title><rect x="131.3" y="819.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.35%)</title><rect x="135.5" y="819.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.35%)</title><rect x="139.7" y="819.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="142.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="139.7" y="803.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="142.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.35%)</title><rect x="139.7" y="787.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.35%)</title><rect x="139.7" y="771.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.7" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="139.7" y="755.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="142.7" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="139.7" y="739.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="142.7" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="139.7" y="723.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="142.7" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.35%)</title><rect x="139.7" y="707.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="142.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (21 samples, 7.45%)</title><rect x="143.9" y="819.0" width="87.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.9" y="830.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.77%)</title><rect x="143.9" y="803.0" width="20.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.71%)</title><rect x="143.9" y="787.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.71%)</title><rect x="143.9" y="771.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.71%)</title><rect x="143.9" y="755.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.71%)</title><rect x="143.9" y="739.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.35%)</title><rect x="148.1" y="723.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.06%)</title><rect x="152.3" y="787.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.35%)</title><rect x="152.3" y="771.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.71%)</title><rect x="156.5" y="771.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.71%)</title><rect x="156.5" y="755.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.35%)</title><rect x="160.6" y="739.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.35%)</title><rect x="160.6" y="723.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (16 samples, 5.67%)</title><rect x="164.8" y="803.0" width="67.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.8" y="814.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (16 samples, 5.67%)</title><rect x="164.8" y="787.0" width="67.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.8" y="798.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (16 samples, 5.67%)</title><rect x="164.8" y="771.0" width="67.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.8" y="782.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.77%)</title><rect x="169.0" y="755.0" width="20.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.06%)</title><rect x="173.2" y="739.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.06%)</title><rect x="173.2" y="723.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.06%)</title><rect x="173.2" y="707.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 1.06%)</title><rect x="173.2" y="691.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="176.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.35%)</title><rect x="185.7" y="739.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.06%)</title><rect x="189.9" y="755.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 1.06%)</title><rect x="189.9" y="739.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.06%)</title><rect x="189.9" y="723.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.06%)</title><rect x="189.9" y="707.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="192.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 1.06%)</title><rect x="189.9" y="691.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 1.42%)</title><rect x="202.5" y="755.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 1.42%)</title><rect x="202.5" y="739.0" width="16.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 1.42%)</title><rect x="202.5" y="723.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 1.42%)</title><rect x="202.5" y="707.0" width="16.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.5" y="718.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 1.42%)</title><rect x="202.5" y="691.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.5" y="702.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 1.06%)</title><rect x="206.7" y="675.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.7" y="686.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor12.newInstance (1 samples, 0.35%)</title><rect x="215.0" y="659.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 1.06%)</title><rect x="219.2" y="755.0" width="12.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.06%)</title><rect x="219.2" y="739.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.06%)</title><rect x="219.2" y="723.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.2" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="227.6" y="707.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="230.6" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.35%)</title><rect x="227.6" y="691.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="230.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.35%)</title><rect x="231.8" y="819.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.71%)</title><rect x="236.0" y="835.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.35%)</title><rect x="240.1" y="819.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.35%)</title><rect x="240.1" y="803.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.35%)</title><rect x="240.1" y="787.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.35%)</title><rect x="240.1" y="771.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (106 samples, 37.59%)</title><rect x="244.3" y="931.0" width="443.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.3" y="942.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (8 samples, 2.84%)</title><rect x="244.3" y="915.0" width="33.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.3" y="926.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (8 samples, 2.84%)</title><rect x="244.3" y="899.0" width="33.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.3" y="910.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (7 samples, 2.48%)</title><rect x="248.5" y="883.0" width="29.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.5" y="894.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.71%)</title><rect x="252.7" y="867.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.7" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.71%)</title><rect x="252.7" y="851.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.7" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.71%)</title><rect x="252.7" y="835.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.7" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.71%)</title><rect x="252.7" y="819.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.7" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 1.42%)</title><rect x="261.1" y="867.0" width="16.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.06%)</title><rect x="265.2" y="851.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.06%)</title><rect x="265.2" y="835.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (24 samples, 8.51%)</title><rect x="277.8" y="915.0" width="100.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.8" y="926.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (24 samples, 8.51%)</title><rect x="277.8" y="899.0" width="100.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.8" y="910.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.84%)</title><rect x="277.8" y="883.0" width="33.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.8" y="894.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.48%)</title><rect x="277.8" y="867.0" width="29.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.8" y="878.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 2.48%)</title><rect x="277.8" y="851.0" width="29.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.8" y="862.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 1.77%)</title><rect x="282.0" y="835.0" width="20.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.0" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 1.77%)</title><rect x="282.0" y="819.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.0" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 1.77%)</title><rect x="282.0" y="803.0" width="20.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.0" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.06%)</title><rect x="286.2" y="787.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="289.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.71%)</title><rect x="286.2" y="771.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="289.2" y="782.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.35%)</title><rect x="286.2" y="755.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="289.2" y="766.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.35%)</title><rect x="290.4" y="755.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="293.4" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="294.5" y="771.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="297.5" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="294.5" y="755.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="297.5" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="298.7" y="787.0" width="4.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="301.7" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="302.9" y="835.0" width="4.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="305.9" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="307.1" y="867.0" width="4.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="310.1" y="878.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.71%)</title><rect x="311.3" y="883.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.3" y="894.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.71%)</title><rect x="311.3" y="867.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.3" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="311.3" y="851.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="314.3" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="315.5" y="851.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="318.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="315.5" y="835.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="318.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="315.5" y="819.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="318.5" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="315.5" y="803.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="318.5" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.35%)</title><rect x="315.5" y="787.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="318.5" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (14 samples, 4.96%)</title><rect x="319.6" y="883.0" width="58.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.6" y="894.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 4.61%)</title><rect x="323.8" y="867.0" width="54.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.8" y="878.0">ch/qo..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="323.8" y="851.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="326.8" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="323.8" y="835.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.8" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="323.8" y="819.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="326.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.35%)</title><rect x="323.8" y="803.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="326.8" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 4.26%)</title><rect x="328.0" y="851.0" width="50.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.0" y="862.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.90%)</title><rect x="332.2" y="835.0" width="46.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="335.2" y="846.0">java..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.35%)</title><rect x="332.2" y="819.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="335.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.35%)</title><rect x="336.4" y="819.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="339.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.35%)</title><rect x="336.4" y="803.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 3.19%)</title><rect x="340.6" y="819.0" width="37.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="343.6" y="830.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 1.06%)</title><rect x="361.5" y="803.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.5" y="814.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.35%)</title><rect x="374.0" y="803.0" width="4.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="377.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (66 samples, 23.40%)</title><rect x="378.2" y="915.0" width="276.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.2" y="926.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (66 samples, 23.40%)</title><rect x="378.2" y="899.0" width="276.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.2" y="910.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1898213318.process (57 samples, 20.21%)</title><rect x="386.6" y="883.0" width="238.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="389.6" y="894.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (57 samples, 20.21%)</title><rect x="386.6" y="867.0" width="238.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.6" y="878.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (56 samples, 19.86%)</title><rect x="386.6" y="851.0" width="234.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.6" y="862.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.71%)</title><rect x="386.6" y="835.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="389.6" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.71%)</title><rect x="386.6" y="819.0" width="8.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="389.6" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.71%)</title><rect x="386.6" y="803.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.6" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.71%)</title><rect x="386.6" y="787.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.35%)</title><rect x="390.8" y="771.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (51 samples, 18.09%)</title><rect x="395.0" y="835.0" width="213.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="398.0" y="846.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (49 samples, 17.38%)</title><rect x="395.0" y="819.0" width="205.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="398.0" y="830.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (45 samples, 15.96%)</title><rect x="403.3" y="803.0" width="188.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="406.3" y="814.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.42%)</title><rect x="415.9" y="787.0" width="16.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="418.9" y="798.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.35%)</title><rect x="432.6" y="787.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="435.6" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="436.8" y="787.0" width="4.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="439.8" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="441.0" y="787.0" width="4.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="444.0" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 1.06%)</title><rect x="445.2" y="787.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="448.2" y="798.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (32 samples, 11.35%)</title><rect x="457.7" y="787.0" width="133.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="460.7" y="798.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.35%)</title><rect x="482.8" y="771.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="485.8" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="487.0" y="771.0" width="4.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="490.0" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="487.0" y="755.0" width="4.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="490.0" y="766.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.42%)</title><rect x="491.2" y="771.0" width="16.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="494.2" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (18 samples, 6.38%)</title><rect x="507.9" y="771.0" width="75.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="510.9" y="782.0">__pthrea..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.35%)</title><rect x="583.3" y="771.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="586.3" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.35%)</title><rect x="587.4" y="771.0" width="4.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="590.4" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.35%)</title><rect x="591.6" y="803.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="594.6" y="814.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.35%)</title><rect x="595.8" y="803.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="598.8" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.71%)</title><rect x="600.0" y="819.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="603.0" y="830.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.71%)</title><rect x="600.0" y="803.0" width="8.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="603.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.35%)</title><rect x="608.4" y="835.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="611.4" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.71%)</title><rect x="612.6" y="835.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="615.6" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="616.7" y="819.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="619.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="616.7" y="803.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="619.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.35%)</title><rect x="620.9" y="851.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.9" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="620.9" y="835.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="623.9" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="620.9" y="819.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="620.9" y="803.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.06%)</title><rect x="625.1" y="883.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="628.1" y="894.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 1.06%)</title><rect x="625.1" y="867.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="628.1" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.71%)</title><rect x="637.7" y="883.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.7" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.71%)</title><rect x="637.7" y="867.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$269/2081861640.get$Lambda (2 samples, 0.71%)</title><rect x="637.7" y="851.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.7" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.71%)</title><rect x="646.0" y="883.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.0" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.71%)</title><rect x="646.0" y="867.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="649.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.84%)</title><rect x="654.4" y="915.0" width="33.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.4" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 2.84%)</title><rect x="654.4" y="899.0" width="33.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="657.4" y="910.0">ja..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="679.5" y="883.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="682.5" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="679.5" y="867.0" width="4.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="682.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.35%)</title><rect x="683.7" y="883.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="686.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/995501552.accept (1 samples, 0.35%)</title><rect x="683.7" y="867.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="686.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.35%)</title><rect x="683.7" y="851.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="686.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.35%)</title><rect x="683.7" y="835.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="686.7" y="846.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.35%)</title><rect x="683.7" y="819.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="686.7" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.35%)</title><rect x="683.7" y="803.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="686.7" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="683.7" y="787.0" width="4.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="686.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.42%)</title><rect x="687.9" y="931.0" width="16.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="690.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.42%)</title><rect x="687.9" y="915.0" width="16.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="690.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.42%)</title><rect x="687.9" y="899.0" width="16.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="690.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/995501552.accept (4 samples, 1.42%)</title><rect x="687.9" y="883.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="690.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (4 samples, 1.42%)</title><rect x="687.9" y="867.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="690.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 1.42%)</title><rect x="687.9" y="851.0" width="16.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="690.9" y="862.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 1.42%)</title><rect x="687.9" y="835.0" width="16.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="690.9" y="846.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 1.42%)</title><rect x="687.9" y="819.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.35%)</title><rect x="704.6" y="947.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="707.6" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="704.6" y="931.0" width="4.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="707.6" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="704.6" y="915.0" width="4.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="707.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.06%)</title><rect x="708.8" y="995.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="711.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.71%)</title><rect x="713.0" y="979.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="716.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.71%)</title><rect x="713.0" y="963.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="716.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.71%)</title><rect x="713.0" y="947.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="716.0" y="958.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.35%)</title><rect x="721.3" y="1043.0" width="4.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="724.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.35%)</title><rect x="725.5" y="1043.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="728.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.35%)</title><rect x="725.5" y="1027.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="728.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="725.5" y="1011.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="728.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="725.5" y="995.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="728.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="725.5" y="979.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="728.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.35%)</title><rect x="725.5" y="963.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="728.5" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.35%)</title><rect x="725.5" y="947.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="728.5" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.35%)</title><rect x="725.5" y="931.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="728.5" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.35%)</title><rect x="725.5" y="915.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="728.5" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.35%)</title><rect x="725.5" y="899.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="728.5" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.35%)</title><rect x="725.5" y="883.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="728.5" y="894.0"></text>
</g>
<g>
<title>start_thread (110 samples, 39.01%)</title><rect x="729.7" y="1043.0" width="460.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="732.7" y="1054.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (110 samples, 39.01%)</title><rect x="729.7" y="1027.0" width="460.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="732.7" y="1038.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 3.90%)</title><rect x="729.7" y="1011.0" width="46.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="732.7" y="1022.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 3.90%)</title><rect x="729.7" y="995.0" width="46.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="732.7" y="1006.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 3.90%)</title><rect x="729.7" y="979.0" width="46.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="732.7" y="990.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 3.55%)</title><rect x="733.9" y="963.0" width="41.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="736.9" y="974.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.06%)</title><rect x="754.8" y="947.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="757.8" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.35%)</title><rect x="763.2" y="931.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="766.2" y="942.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.35%)</title><rect x="763.2" y="915.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="766.2" y="926.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.35%)</title><rect x="767.4" y="947.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="770.4" y="958.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="771.6" y="947.0" width="4.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="774.6" y="958.0"></text>
</g>
<g>
<title>JavaThread::run() (99 samples, 35.11%)</title><rect x="775.7" y="1011.0" width="414.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="778.7" y="1022.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (99 samples, 35.11%)</title><rect x="775.7" y="995.0" width="414.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="778.7" y="1006.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (99 samples, 35.11%)</title><rect x="775.7" y="979.0" width="414.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="778.7" y="990.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (98 samples, 34.75%)</title><rect x="775.7" y="963.0" width="410.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="778.7" y="974.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (96 samples, 34.04%)</title><rect x="775.7" y="947.0" width="401.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="778.7" y="958.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (96 samples, 34.04%)</title><rect x="775.7" y="931.0" width="401.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="778.7" y="942.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, b..</text>
</g>
<g>
<title>Compile::Code_Gen() (40 samples, 14.18%)</title><rect x="775.7" y="915.0" width="167.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="778.7" y="926.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.35%)</title><rect x="775.7" y="899.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="778.7" y="910.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.35%)</title><rect x="775.7" y="883.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="778.7" y="894.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.35%)</title><rect x="775.7" y="867.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="778.7" y="878.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.35%)</title><rect x="775.7" y="851.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.7" y="862.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.35%)</title><rect x="775.7" y="835.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="778.7" y="846.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, RegisterImpl*) (1 samples, 0.35%)</title><rect x="775.7" y="819.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="778.7" y="830.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.71%)</title><rect x="779.9" y="899.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="782.9" y="910.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.35%)</title><rect x="779.9" y="883.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.9" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.35%)</title><rect x="784.1" y="883.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="787.1" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.35%)</title><rect x="784.1" y="867.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="787.1" y="878.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.35%)</title><rect x="788.3" y="899.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="791.3" y="910.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.13%)</title><rect x="792.5" y="899.0" width="25.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="795.5" y="910.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.77%)</title><rect x="792.5" y="883.0" width="20.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="795.5" y="894.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.06%)</title><rect x="796.7" y="867.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="799.7" y="878.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.35%)</title><rect x="809.2" y="867.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="812.2" y="878.0"></text>
</g>
<g>
<title>Ticks::stamp() (1 samples, 0.35%)</title><rect x="813.4" y="883.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="816.4" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="813.4" y="867.0" width="4.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="816.4" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="813.4" y="851.0" width="4.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="816.4" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.71%)</title><rect x="817.6" y="899.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="820.6" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.71%)</title><rect x="817.6" y="883.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="820.6" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="817.6" y="867.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="820.6" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="821.8" y="867.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="824.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 9.93%)</title><rect x="826.0" y="899.0" width="117.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="829.0" y="910.0">PhaseChaitin::..</text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.35%)</title><rect x="826.0" y="883.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="829.0" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.35%)</title><rect x="830.1" y="883.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.1" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.71%)</title><rect x="834.3" y="883.0" width="8.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="837.3" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.71%)</title><rect x="834.3" y="867.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="837.3" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="838.5" y="851.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="841.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.77%)</title><rect x="842.7" y="883.0" width="20.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="845.7" y="894.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.35%)</title><rect x="859.4" y="867.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="862.4" y="878.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="859.4" y="851.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="862.4" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.48%)</title><rect x="863.6" y="883.0" width="29.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="866.6" y="894.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="880.4" y="867.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="883.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.35%)</title><rect x="884.5" y="867.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="887.5" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="884.5" y="851.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="887.5" y="862.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.35%)</title><rect x="888.7" y="867.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.7" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.42%)</title><rect x="892.9" y="883.0" width="16.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="895.9" y="894.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.35%)</title><rect x="901.3" y="867.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="904.3" y="878.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.35%)</title><rect x="905.5" y="867.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="908.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.35%)</title><rect x="909.6" y="883.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="912.6" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.35%)</title><rect x="913.8" y="883.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="916.8" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.35%)</title><rect x="913.8" y="867.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="916.8" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 1.06%)</title><rect x="918.0" y="883.0" width="12.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="921.0" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.35%)</title><rect x="922.2" y="867.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="925.2" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="926.4" y="867.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="929.4" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.35%)</title><rect x="930.6" y="883.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="933.6" y="894.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.71%)</title><rect x="934.8" y="883.0" width="8.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="937.8" y="894.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.35%)</title><rect x="938.9" y="867.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="941.9" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="938.9" y="851.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.9" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 17.02%)</title><rect x="943.1" y="915.0" width="200.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="946.1" y="926.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.35%)</title><rect x="943.1" y="899.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="946.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.35%)</title><rect x="943.1" y="883.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="946.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.35%)</title><rect x="943.1" y="867.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="946.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="943.1" y="851.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="946.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="943.1" y="835.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="946.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="943.1" y="819.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="946.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="943.1" y="803.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="946.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="943.1" y="787.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="946.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="943.1" y="771.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="946.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="943.1" y="755.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="946.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="943.1" y="739.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="946.1" y="750.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.35%)</title><rect x="943.1" y="723.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="946.1" y="734.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.35%)</title><rect x="943.1" y="707.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="946.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (40 samples, 14.18%)</title><rect x="947.3" y="899.0" width="167.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="950.3" y="910.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="947.3" y="883.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="950.3" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="947.3" y="867.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="950.3" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="947.3" y="851.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="950.3" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="947.3" y="835.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="950.3" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="947.3" y="819.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="950.3" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="947.3" y="803.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="950.3" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="947.3" y="787.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="950.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="947.3" y="771.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="950.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.35%)</title><rect x="947.3" y="755.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="950.3" y="766.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="947.3" y="739.0" width="4.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="950.3" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.35%)</title><rect x="951.5" y="883.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="954.5" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.35%)</title><rect x="951.5" y="867.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="954.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.35%)</title><rect x="951.5" y="851.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="954.5" y="862.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.35%)</title><rect x="951.5" y="835.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="954.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.35%)</title><rect x="951.5" y="819.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="954.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.71%)</title><rect x="955.7" y="883.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.7" y="894.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.35%)</title><rect x="959.9" y="867.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="962.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.06%)</title><rect x="964.0" y="883.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="967.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.71%)</title><rect x="968.2" y="867.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.71%)</title><rect x="968.2" y="851.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="971.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (27 samples, 9.57%)</title><rect x="976.6" y="883.0" width="113.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.6" y="894.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (27 samples, 9.57%)</title><rect x="976.6" y="867.0" width="113.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.6" y="878.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.71%)</title><rect x="980.8" y="851.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="983.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (24 samples, 8.51%)</title><rect x="989.1" y="851.0" width="100.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.1" y="862.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.35%)</title><rect x="1072.8" y="835.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.35%)</title><rect x="1072.8" y="819.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.06%)</title><rect x="1077.0" y="835.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.35%)</title><rect x="1089.6" y="883.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.35%)</title><rect x="1089.6" y="867.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.06%)</title><rect x="1093.8" y="883.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.35%)</title><rect x="1093.8" y="867.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.8" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.35%)</title><rect x="1093.8" y="851.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.8" y="862.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.35%)</title><rect x="1093.8" y="835.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.8" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.35%)</title><rect x="1093.8" y="819.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.71%)</title><rect x="1097.9" y="867.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1100.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.35%)</title><rect x="1102.1" y="851.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.1" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.71%)</title><rect x="1106.3" y="883.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.3" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.71%)</title><rect x="1106.3" y="867.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.3" y="878.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1106.3" y="851.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.3" y="862.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1106.3" y="835.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.3" y="846.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1110.5" y="851.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.5" y="862.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.35%)</title><rect x="1110.5" y="835.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.5" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="819.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.5" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="803.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.5" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="787.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.5" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="771.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.5" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="755.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.5" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="739.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.5" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="723.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.5" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="707.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.5" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="691.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.5" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="675.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.5" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="659.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.5" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="643.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.5" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="627.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.5" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="611.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.5" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="595.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.5" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="579.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.5" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="563.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.5" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="547.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.5" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="531.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.5" y="542.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.35%)</title><rect x="1110.5" y="515.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.5" y="526.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="1110.5" y="499.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.5" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 2.13%)</title><rect x="1114.7" y="899.0" width="25.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.7" y="910.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 2.13%)</title><rect x="1114.7" y="883.0" width="25.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.7" y="894.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1114.7" y="867.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.7" y="878.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.35%)</title><rect x="1114.7" y="851.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.7" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.35%)</title><rect x="1114.7" y="835.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.7" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="1114.7" y="819.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.7" y="830.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.35%)</title><rect x="1118.9" y="867.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.9" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.35%)</title><rect x="1123.0" y="867.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.0" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1127.2" y="867.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.2" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.35%)</title><rect x="1127.2" y="851.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="862.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.35%)</title><rect x="1127.2" y="835.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.2" y="846.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.35%)</title><rect x="1127.2" y="819.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="830.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.35%)</title><rect x="1131.4" y="867.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.4" y="878.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1135.6" y="867.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="878.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.35%)</title><rect x="1135.6" y="851.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.6" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="835.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.6" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="819.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.6" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="803.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.6" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="787.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.6" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="771.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.6" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="755.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.6" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="739.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.6" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="723.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.6" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="707.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.6" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="691.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.6" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="675.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.6" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="659.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.6" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="643.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.6" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="627.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.6" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="611.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.6" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="595.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.6" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.35%)</title><rect x="1135.6" y="579.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.6" y="590.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="1135.6" y="563.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.6" y="574.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.35%)</title><rect x="1139.8" y="899.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="1139.8" y="883.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.8" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="1139.8" y="867.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.8" y="878.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1139.8" y="851.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.8" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="1139.8" y="835.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.8" y="846.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1139.8" y="819.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.48%)</title><rect x="1144.0" y="915.0" width="29.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.0" y="926.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.48%)</title><rect x="1144.0" y="899.0" width="29.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.0" y="910.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.13%)</title><rect x="1144.0" y="883.0" width="25.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.0" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.13%)</title><rect x="1144.0" y="867.0" width="25.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.0" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.13%)</title><rect x="1144.0" y="851.0" width="25.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.0" y="862.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.13%)</title><rect x="1144.0" y="835.0" width="25.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.0" y="846.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.42%)</title><rect x="1144.0" y="819.0" width="16.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.42%)</title><rect x="1144.0" y="803.0" width="16.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.42%)</title><rect x="1144.0" y="787.0" width="16.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.42%)</title><rect x="1144.0" y="771.0" width="16.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.42%)</title><rect x="1144.0" y="755.0" width="16.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.42%)</title><rect x="1144.0" y="739.0" width="16.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.0" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1144.0" y="723.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.0" y="734.0"></text>
</g>
<g>
<title>ProfileData::is_ReceiverTypeData() const (1 samples, 0.35%)</title><rect x="1144.0" y="707.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.06%)</title><rect x="1148.2" y="723.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.06%)</title><rect x="1148.2" y="707.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.06%)</title><rect x="1148.2" y="691.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.06%)</title><rect x="1148.2" y="675.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.06%)</title><rect x="1148.2" y="659.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.06%)</title><rect x="1148.2" y="643.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.06%)</title><rect x="1148.2" y="627.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.06%)</title><rect x="1148.2" y="611.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.06%)</title><rect x="1148.2" y="595.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.06%)</title><rect x="1148.2" y="579.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.06%)</title><rect x="1148.2" y="563.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1148.2" y="547.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1148.2" y="531.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1148.2" y="515.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1148.2" y="499.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1148.2" y="483.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1148.2" y="467.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1148.2" y="451.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1148.2" y="435.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1148.2" y="419.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1148.2" y="403.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1148.2" y="387.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1148.2" y="371.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1148.2" y="355.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1148.2" y="339.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1148.2" y="323.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1148.2" y="307.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1148.2" y="291.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1148.2" y="275.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1148.2" y="259.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.2" y="270.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1148.2" y="243.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.2" y="254.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.35%)</title><rect x="1148.2" y="227.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.2" y="238.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.35%)</title><rect x="1148.2" y="211.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.2" y="222.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.35%)</title><rect x="1148.2" y="195.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.2" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.3" y="435.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.3" y="419.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.3" y="403.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.3" y="387.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.3" y="371.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.3" y="355.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.3" y="339.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.3" y="323.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.3" y="307.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.3" y="291.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.3" y="275.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.3" y="259.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.3" y="243.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.3" y="227.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.3" y="211.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.3" y="195.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.3" y="179.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.3" y="163.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.3" y="147.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.3" y="158.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.35%)</title><rect x="1152.3" y="131.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.3" y="142.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.35%)</title><rect x="1152.3" y="115.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.3" y="126.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.35%)</title><rect x="1152.3" y="99.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.3" y="110.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.35%)</title><rect x="1152.3" y="83.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="94.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="1152.3" y="67.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="78.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.35%)</title><rect x="1152.3" y="51.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.3" y="62.0"></text>
</g>
<g>
<title>CallInfo::set_interface(KlassHandle, KlassHandle, methodHandle, methodHandle, int, Thread*) (1 samples, 0.35%)</title><rect x="1152.3" y="35.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1156.5" y="547.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1156.5" y="531.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.5" y="542.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.35%)</title><rect x="1156.5" y="515.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.5" y="526.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1156.5" y="499.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.5" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1156.5" y="483.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.35%)</title><rect x="1156.5" y="467.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1160.7" y="819.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.7" y="830.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.35%)</title><rect x="1160.7" y="803.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.7" y="814.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.35%)</title><rect x="1160.7" y="787.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.7" y="798.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.35%)</title><rect x="1160.7" y="771.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.7" y="782.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.35%)</title><rect x="1160.7" y="755.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.7" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1164.9" y="803.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1164.9" y="787.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1164.9" y="771.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1164.9" y="755.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1164.9" y="739.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1164.9" y="723.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1164.9" y="707.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1164.9" y="691.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1164.9" y="675.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1164.9" y="659.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1164.9" y="643.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1164.9" y="627.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1164.9" y="611.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1164.9" y="595.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1164.9" y="579.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1164.9" y="563.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1164.9" y="547.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1164.9" y="531.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1164.9" y="515.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1164.9" y="499.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1164.9" y="483.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.9" y="494.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.35%)</title><rect x="1164.9" y="467.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="478.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.35%)</title><rect x="1164.9" y="451.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.9" y="462.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.35%)</title><rect x="1164.9" y="435.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.35%)</title><rect x="1164.9" y="419.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="430.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1164.9" y="403.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="414.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1164.9" y="387.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.9" y="398.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.35%)</title><rect x="1164.9" y="371.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="382.0"></text>
</g>
<g>
<title>Parse::load_interpreter_state(Node*) (1 samples, 0.35%)</title><rect x="1169.1" y="883.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.1" y="894.0"></text>
</g>
<g>
<title>Parse::check_interpreter_type(Node*, Type const*, SafePointNode*&amp;) (1 samples, 0.35%)</title><rect x="1169.1" y="867.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.1" y="878.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.35%)</title><rect x="1169.1" y="851.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.1" y="862.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.35%)</title><rect x="1169.1" y="835.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.1" y="846.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1169.1" y="819.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.1" y="830.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1169.1" y="803.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.1" y="814.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1169.1" y="787.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.1" y="798.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.35%)</title><rect x="1169.1" y="771.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.1" y="782.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.35%)</title><rect x="1169.1" y="755.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.1" y="766.0"></text>
</g>
<g>
<title>TypeKlassPtr::xmeet(Type const*) const (1 samples, 0.35%)</title><rect x="1169.1" y="739.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.1" y="750.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.35%)</title><rect x="1173.3" y="915.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="926.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.35%)</title><rect x="1173.3" y="899.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="910.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.71%)</title><rect x="1177.4" y="947.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="958.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.71%)</title><rect x="1177.4" y="931.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.71%)</title><rect x="1177.4" y="915.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.35%)</title><rect x="1177.4" y="899.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="910.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.35%)</title><rect x="1177.4" y="883.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="894.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.35%)</title><rect x="1177.4" y="867.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="878.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.35%)</title><rect x="1177.4" y="851.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="862.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.35%)</title><rect x="1177.4" y="835.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="846.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.35%)</title><rect x="1181.6" y="899.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="910.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.35%)</title><rect x="1181.6" y="883.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.6" y="894.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.35%)</title><rect x="1181.6" y="867.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.35%)</title><rect x="1181.6" y="851.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="862.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.35%)</title><rect x="1185.8" y="963.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.8" y="974.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.35%)</title><rect x="1185.8" y="947.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.35%)</title><rect x="1185.8" y="931.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.8" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.35%)</title><rect x="1185.8" y="915.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.8" y="926.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.35%)</title><rect x="1185.8" y="899.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="910.0"></text>
</g>
<g>
<title>InlineCacheBuffer::create_transition_stub(CompiledIC*, void*, unsigned char*) (1 samples, 0.35%)</title><rect x="1185.8" y="883.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.8" y="894.0"></text>
</g>
<g>
<title>InlineCacheBuffer::new_ic_stub() (1 samples, 0.35%)</title><rect x="1185.8" y="867.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.8" y="878.0"></text>
</g>
<g>
<title>StubQueue::request_committed(int) (1 samples, 0.35%)</title><rect x="1185.8" y="851.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="862.0"></text>
</g>
<g>
<title>StubQueue::request(int) (1 samples, 0.35%)</title><rect x="1185.8" y="835.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.8" y="846.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.35%)</title><rect x="1185.8" y="819.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="830.0"></text>
</g>
</g>
</svg>
