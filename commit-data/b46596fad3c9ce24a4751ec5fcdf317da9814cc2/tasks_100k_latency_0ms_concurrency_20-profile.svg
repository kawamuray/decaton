<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1093"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1093"> </text>
<g id="frames">
<g>
<title>all (165 samples, 100.00%)</title><rect x="10.0" y="1059.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1070.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (29 samples, 17.58%)</title><rect x="10.0" y="1043.0" width="207.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (29 samples, 17.58%)</title><rect x="10.0" y="1027.0" width="207.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1038.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (21 samples, 12.73%)</title><rect x="10.0" y="1011.0" width="150.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1022.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1925918303.accept (20 samples, 12.12%)</title><rect x="10.0" y="995.0" width="143.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (20 samples, 12.12%)</title><rect x="10.0" y="979.0" width="143.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (17 samples, 10.30%)</title><rect x="10.0" y="963.0" width="121.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (17 samples, 10.30%)</title><rect x="10.0" y="947.0" width="121.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (17 samples, 10.30%)</title><rect x="10.0" y="931.0" width="121.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (17 samples, 10.30%)</title><rect x="10.0" y="915.0" width="121.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="926.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (17 samples, 10.30%)</title><rect x="10.0" y="899.0" width="121.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="910.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (14 samples, 8.48%)</title><rect x="24.3" y="883.0" width="100.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.3" y="894.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 6.67%)</title><rect x="24.3" y="867.0" width="78.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.3" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.61%)</title><rect x="24.3" y="851.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.61%)</title><rect x="31.5" y="851.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.61%)</title><rect x="31.5" y="835.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.61%)</title><rect x="31.5" y="819.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 5.45%)</title><rect x="38.6" y="851.0" width="64.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="41.6" y="862.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 5.45%)</title><rect x="38.6" y="835.0" width="64.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.6" y="846.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 4.85%)</title><rect x="38.6" y="819.0" width="57.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.6" y="830.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 4.85%)</title><rect x="38.6" y="803.0" width="57.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.6" y="814.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (8 samples, 4.85%)</title><rect x="38.6" y="787.0" width="57.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.6" y="798.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 4.85%)</title><rect x="38.6" y="771.0" width="57.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="41.6" y="782.0">Unsafe..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.61%)</title><rect x="38.6" y="755.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="41.6" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 3.64%)</title><rect x="45.8" y="755.0" width="42.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="48.8" y="766.0">__pt..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.61%)</title><rect x="88.7" y="755.0" width="7.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="91.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.61%)</title><rect x="95.8" y="819.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 1.82%)</title><rect x="103.0" y="867.0" width="21.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.0" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.61%)</title><rect x="117.3" y="851.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="120.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.61%)</title><rect x="117.3" y="835.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.61%)</title><rect x="117.3" y="819.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.3" y="830.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.61%)</title><rect x="124.4" y="883.0" width="7.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="127.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.82%)</title><rect x="131.6" y="963.0" width="21.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="134.6" y="974.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.21%)</title><rect x="131.6" y="947.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.6" y="958.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.61%)</title><rect x="138.7" y="931.0" width="7.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="141.7" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.61%)</title><rect x="145.9" y="947.0" width="7.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="148.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.61%)</title><rect x="153.0" y="995.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.61%)</title><rect x="153.0" y="979.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.85%)</title><rect x="160.2" y="1011.0" width="57.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="163.2" y="1022.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.85%)</title><rect x="160.2" y="995.0" width="57.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="163.2" y="1006.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 3.64%)</title><rect x="160.2" y="979.0" width="42.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="163.2" y="990.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 3.64%)</title><rect x="160.2" y="963.0" width="42.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="163.2" y="974.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 3.64%)</title><rect x="160.2" y="947.0" width="42.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="163.2" y="958.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 3.64%)</title><rect x="160.2" y="931.0" width="42.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.2" y="942.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 3.03%)</title><rect x="160.2" y="915.0" width="35.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="163.2" y="926.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.61%)</title><rect x="160.2" y="899.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="163.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (4 samples, 2.42%)</title><rect x="167.3" y="899.0" width="28.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="170.3" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 2.42%)</title><rect x="167.3" y="883.0" width="28.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.3" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 1.21%)</title><rect x="167.3" y="867.0" width="14.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.3" y="878.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 1.21%)</title><rect x="167.3" y="851.0" width="14.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 1.21%)</title><rect x="181.6" y="867.0" width="14.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.6" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 1.21%)</title><rect x="181.6" y="851.0" width="14.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.61%)</title><rect x="195.9" y="915.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.21%)</title><rect x="203.1" y="979.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.21%)</title><rect x="203.1" y="963.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.21%)</title><rect x="203.1" y="947.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 1.21%)</title><rect x="203.1" y="931.0" width="14.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 1.21%)</title><rect x="203.1" y="915.0" width="14.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="206.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 1.21%)</title><rect x="203.1" y="899.0" width="14.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.61%)</title><rect x="210.2" y="883.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.61%)</title><rect x="210.2" y="867.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.61%)</title><rect x="210.2" y="851.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.2" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.61%)</title><rect x="210.2" y="835.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.2" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.61%)</title><rect x="210.2" y="819.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="213.2" y="830.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.61%)</title><rect x="210.2" y="803.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="213.2" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.61%)</title><rect x="210.2" y="787.0" width="7.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="213.2" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (58 samples, 35.15%)</title><rect x="217.4" y="1043.0" width="414.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.4" y="1054.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (58 samples, 35.15%)</title><rect x="217.4" y="1027.0" width="414.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.4" y="1038.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (58 samples, 35.15%)</title><rect x="217.4" y="1011.0" width="414.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.4" y="1022.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1967437444.run (36 samples, 21.82%)</title><rect x="238.8" y="995.0" width="257.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.8" y="1006.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (36 samples, 21.82%)</title><rect x="238.8" y="979.0" width="257.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.8" y="990.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (36 samples, 21.82%)</title><rect x="238.8" y="963.0" width="257.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.8" y="974.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (36 samples, 21.82%)</title><rect x="238.8" y="947.0" width="257.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.8" y="958.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (15 samples, 9.09%)</title><rect x="238.8" y="931.0" width="107.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.8" y="942.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (15 samples, 9.09%)</title><rect x="238.8" y="915.0" width="107.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.8" y="926.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (15 samples, 9.09%)</title><rect x="238.8" y="899.0" width="107.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.8" y="910.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (15 samples, 9.09%)</title><rect x="238.8" y="883.0" width="107.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.8" y="894.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (15 samples, 9.09%)</title><rect x="238.8" y="867.0" width="107.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.8" y="878.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (15 samples, 9.09%)</title><rect x="238.8" y="851.0" width="107.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.8" y="862.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 3.03%)</title><rect x="238.8" y="835.0" width="35.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.8" y="846.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.82%)</title><rect x="246.0" y="819.0" width="21.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.0" y="830.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.82%)</title><rect x="246.0" y="803.0" width="21.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="814.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.21%)</title><rect x="253.2" y="787.0" width="14.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 1.21%)</title><rect x="253.2" y="771.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 1.21%)</title><rect x="253.2" y="755.0" width="14.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.2" y="766.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.61%)</title><rect x="267.5" y="819.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="270.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 5.45%)</title><rect x="274.6" y="835.0" width="64.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.6" y="846.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 1.21%)</title><rect x="274.6" y="819.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.61%)</title><rect x="288.9" y="819.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 3.64%)</title><rect x="296.1" y="819.0" width="42.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.1" y="830.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 3.64%)</title><rect x="296.1" y="803.0" width="42.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="299.1" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 3.64%)</title><rect x="296.1" y="787.0" width="42.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.1" y="798.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 3.64%)</title><rect x="296.1" y="771.0" width="42.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="299.1" y="782.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.21%)</title><rect x="303.2" y="755.0" width="14.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="306.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 1.21%)</title><rect x="303.2" y="739.0" width="14.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 1.21%)</title><rect x="303.2" y="723.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 1.21%)</title><rect x="303.2" y="707.0" width="14.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="306.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 1.21%)</title><rect x="303.2" y="691.0" width="14.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.61%)</title><rect x="317.5" y="755.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="320.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.61%)</title><rect x="317.5" y="739.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="320.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.61%)</title><rect x="317.5" y="723.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.61%)</title><rect x="317.5" y="707.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.61%)</title><rect x="317.5" y="691.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="320.5" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.61%)</title><rect x="317.5" y="675.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="320.5" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.61%)</title><rect x="317.5" y="659.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="320.5" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.61%)</title><rect x="317.5" y="643.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="320.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 1.21%)</title><rect x="324.7" y="755.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 1.21%)</title><rect x="324.7" y="739.0" width="14.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="327.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 1.21%)</title><rect x="324.7" y="723.0" width="14.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 1.21%)</title><rect x="324.7" y="707.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="327.7" y="718.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 1.21%)</title><rect x="324.7" y="691.0" width="14.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="327.7" y="702.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.61%)</title><rect x="331.8" y="675.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.8" y="686.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.61%)</title><rect x="331.8" y="659.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.61%)</title><rect x="339.0" y="835.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="342.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.61%)</title><rect x="339.0" y="819.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="342.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.61%)</title><rect x="339.0" y="803.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="342.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.61%)</title><rect x="339.0" y="787.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="342.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.61%)</title><rect x="339.0" y="771.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="342.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (19 samples, 11.52%)</title><rect x="346.1" y="931.0" width="135.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.1" y="942.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 3.03%)</title><rect x="346.1" y="915.0" width="35.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.1" y="926.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (5 samples, 3.03%)</title><rect x="346.1" y="899.0" width="35.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.1" y="910.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 3.03%)</title><rect x="346.1" y="883.0" width="35.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.1" y="894.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.21%)</title><rect x="346.1" y="867.0" width="14.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.1" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.21%)</title><rect x="346.1" y="851.0" width="14.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.21%)</title><rect x="346.1" y="835.0" width="14.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="349.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.21%)</title><rect x="346.1" y="819.0" width="14.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="349.1" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.82%)</title><rect x="360.4" y="867.0" width="21.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.4" y="878.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (11 samples, 6.67%)</title><rect x="381.9" y="915.0" width="78.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="384.9" y="926.0">com/linec..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.61%)</title><rect x="381.9" y="899.0" width="7.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="384.9" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.61%)</title><rect x="381.9" y="883.0" width="7.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="384.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (10 samples, 6.06%)</title><rect x="389.0" y="899.0" width="71.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="392.0" y="910.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 1.21%)</title><rect x="410.5" y="883.0" width="14.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="413.5" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.21%)</title><rect x="410.5" y="867.0" width="14.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="413.5" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.21%)</title><rect x="410.5" y="851.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="413.5" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.61%)</title><rect x="417.6" y="835.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.6" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.61%)</title><rect x="417.6" y="819.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.61%)</title><rect x="424.8" y="883.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="427.8" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.61%)</title><rect x="431.9" y="883.0" width="7.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="434.9" y="894.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.82%)</title><rect x="439.1" y="883.0" width="21.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="442.1" y="894.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.82%)</title><rect x="439.1" y="867.0" width="21.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="442.1" y="878.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.61%)</title><rect x="439.1" y="851.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="442.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.61%)</title><rect x="439.1" y="835.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="442.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.61%)</title><rect x="439.1" y="819.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="442.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.61%)</title><rect x="439.1" y="803.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="442.1" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.21%)</title><rect x="446.2" y="851.0" width="14.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="449.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.61%)</title><rect x="453.4" y="835.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="456.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.61%)</title><rect x="453.4" y="819.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.61%)</title><rect x="453.4" y="803.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="456.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 1.82%)</title><rect x="460.5" y="915.0" width="21.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.5" y="926.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 1.82%)</title><rect x="460.5" y="899.0" width="21.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="463.5" y="910.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/90565621.process (3 samples, 1.82%)</title><rect x="460.5" y="883.0" width="21.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.5" y="894.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.82%)</title><rect x="460.5" y="867.0" width="21.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="463.5" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (3 samples, 1.82%)</title><rect x="460.5" y="851.0" width="21.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="463.5" y="862.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.82%)</title><rect x="460.5" y="835.0" width="21.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.5" y="846.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 1.82%)</title><rect x="460.5" y="819.0" width="21.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="463.5" y="830.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.82%)</title><rect x="460.5" y="803.0" width="21.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="463.5" y="814.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.82%)</title><rect x="460.5" y="787.0" width="21.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="463.5" y="798.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.61%)</title><rect x="460.5" y="771.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.61%)</title><rect x="460.5" y="755.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="463.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.61%)</title><rect x="460.5" y="739.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.61%)</title><rect x="460.5" y="723.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 1.21%)</title><rect x="467.7" y="771.0" width="14.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="470.7" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.61%)</title><rect x="474.8" y="755.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="477.8" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.61%)</title><rect x="474.8" y="739.0" width="7.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="477.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.21%)</title><rect x="482.0" y="931.0" width="14.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.61%)</title><rect x="482.0" y="915.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.61%)</title><rect x="489.2" y="915.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="492.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.61%)</title><rect x="489.2" y="899.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="492.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$278/477394357.accept (1 samples, 0.61%)</title><rect x="489.2" y="883.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="492.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.61%)</title><rect x="489.2" y="867.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="492.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/899497486.complete (1 samples, 0.61%)</title><rect x="489.2" y="851.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="492.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.61%)</title><rect x="489.2" y="835.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="492.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.61%)</title><rect x="489.2" y="819.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="492.2" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.61%)</title><rect x="489.2" y="803.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.2" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.61%)</title><rect x="489.2" y="787.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.2" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.61%)</title><rect x="489.2" y="771.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.2" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.61%)</title><rect x="489.2" y="755.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="492.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (4 samples, 2.42%)</title><rect x="496.3" y="995.0" width="28.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="499.3" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 1.82%)</title><rect x="503.5" y="979.0" width="21.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="506.5" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 1.21%)</title><rect x="510.6" y="963.0" width="14.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="513.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 9.09%)</title><rect x="524.9" y="995.0" width="107.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="527.9" y="1006.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 9.09%)</title><rect x="524.9" y="979.0" width="107.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="527.9" y="990.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 7.88%)</title><rect x="524.9" y="963.0" width="93.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="527.9" y="974.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.61%)</title><rect x="524.9" y="947.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="527.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.61%)</title><rect x="524.9" y="931.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="527.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 1.21%)</title><rect x="532.1" y="947.0" width="14.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="535.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.21%)</title><rect x="532.1" y="931.0" width="14.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="535.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 6.06%)</title><rect x="546.4" y="947.0" width="71.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="549.4" y="958.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (10 samples, 6.06%)</title><rect x="546.4" y="931.0" width="71.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="549.4" y="942.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Park (9 samples, 5.45%)</title><rect x="553.5" y="915.0" width="64.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="556.5" y="926.0">Unsafe_..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.61%)</title><rect x="560.7" y="899.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="563.7" y="910.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.61%)</title><rect x="567.8" y="899.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="570.8" y="910.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.61%)</title><rect x="567.8" y="883.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="570.8" y="894.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.61%)</title><rect x="567.8" y="867.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="570.8" y="878.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.61%)</title><rect x="575.0" y="899.0" width="7.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="578.0" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.21%)</title><rect x="582.1" y="899.0" width="14.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="585.1" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.61%)</title><rect x="596.4" y="899.0" width="7.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="599.4" y="910.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 1.21%)</title><rect x="603.6" y="899.0" width="14.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="606.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 1.21%)</title><rect x="617.9" y="963.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="620.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 1.21%)</title><rect x="617.9" y="947.0" width="14.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="620.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 1.21%)</title><rect x="617.9" y="931.0" width="14.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="620.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 1.21%)</title><rect x="617.9" y="915.0" width="14.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="620.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.61%)</title><rect x="625.0" y="899.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="628.0" y="910.0"></text>
</g>
<g>
<title>start_thread (78 samples, 47.27%)</title><rect x="632.2" y="1043.0" width="557.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="635.2" y="1054.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (78 samples, 47.27%)</title><rect x="632.2" y="1027.0" width="557.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="635.2" y="1038.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 6.06%)</title><rect x="632.2" y="1011.0" width="71.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="635.2" y="1022.0">GangWork..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 1.21%)</title><rect x="632.2" y="995.0" width="14.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="635.2" y="1006.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 1.21%)</title><rect x="632.2" y="979.0" width="14.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="635.2" y="990.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.61%)</title><rect x="632.2" y="963.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="635.2" y="974.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.61%)</title><rect x="639.3" y="963.0" width="7.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="642.3" y="974.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 4.85%)</title><rect x="646.5" y="995.0" width="57.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="649.5" y="1006.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 4.85%)</title><rect x="646.5" y="979.0" width="57.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="649.5" y="990.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.82%)</title><rect x="646.5" y="963.0" width="21.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="649.5" y="974.0">G..</text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (5 samples, 3.03%)</title><rect x="667.9" y="963.0" width="35.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="670.9" y="974.0">Gen..</text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.61%)</title><rect x="696.5" y="947.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="699.5" y="958.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (68 samples, 41.21%)</title><rect x="703.7" y="1011.0" width="486.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="706.7" y="1022.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (68 samples, 41.21%)</title><rect x="703.7" y="995.0" width="486.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="706.7" y="1006.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (68 samples, 41.21%)</title><rect x="703.7" y="979.0" width="486.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="706.7" y="990.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (65 samples, 39.39%)</title><rect x="703.7" y="963.0" width="464.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="706.7" y="974.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (65 samples, 39.39%)</title><rect x="703.7" y="947.0" width="464.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="706.7" y="958.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 24.85%)</title><rect x="703.7" y="931.0" width="293.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="706.7" y="942.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.21%)</title><rect x="703.7" y="915.0" width="14.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="706.7" y="926.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 1.21%)</title><rect x="703.7" y="899.0" width="14.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="706.7" y="910.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 1.21%)</title><rect x="703.7" y="883.0" width="14.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="706.7" y="894.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.21%)</title><rect x="718.0" y="915.0" width="14.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="721.0" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.61%)</title><rect x="718.0" y="899.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="721.0" y="910.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (1 samples, 0.61%)</title><rect x="718.0" y="883.0" width="7.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="721.0" y="894.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.61%)</title><rect x="725.2" y="899.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="728.2" y="910.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.21%)</title><rect x="732.3" y="915.0" width="14.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="735.3" y="926.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.21%)</title><rect x="732.3" y="899.0" width="14.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="735.3" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.21%)</title><rect x="732.3" y="883.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="735.3" y="894.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.61%)</title><rect x="732.3" y="867.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="735.3" y="878.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.61%)</title><rect x="732.3" y="851.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="735.3" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.61%)</title><rect x="732.3" y="835.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="735.3" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.61%)</title><rect x="732.3" y="819.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="735.3" y="830.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.61%)</title><rect x="732.3" y="803.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="735.3" y="814.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.61%)</title><rect x="732.3" y="787.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="735.3" y="798.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.61%)</title><rect x="739.5" y="867.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="742.5" y="878.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.61%)</title><rect x="739.5" y="851.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="742.5" y="862.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.61%)</title><rect x="739.5" y="835.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="742.5" y="846.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.61%)</title><rect x="739.5" y="819.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="742.5" y="830.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.61%)</title><rect x="739.5" y="803.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 21.21%)</title><rect x="746.6" y="915.0" width="250.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="749.6" y="926.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.61%)</title><rect x="746.6" y="899.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="749.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.61%)</title><rect x="753.8" y="899.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="756.8" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.61%)</title><rect x="753.8" y="883.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="756.8" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 2.42%)</title><rect x="760.9" y="899.0" width="28.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="763.9" y="910.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.61%)</title><rect x="760.9" y="883.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="763.9" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.21%)</title><rect x="768.1" y="883.0" width="14.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="771.1" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.61%)</title><rect x="782.4" y="883.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="785.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 4.24%)</title><rect x="789.5" y="899.0" width="50.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="792.5" y="910.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.61%)</title><rect x="825.3" y="883.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="828.3" y="894.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.61%)</title><rect x="825.3" y="867.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="828.3" y="878.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.61%)</title><rect x="832.4" y="883.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="835.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 6.06%)</title><rect x="839.6" y="899.0" width="71.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="842.6" y="910.0">PhaseCha..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.61%)</title><rect x="861.0" y="883.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="864.0" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 3.03%)</title><rect x="868.2" y="883.0" width="35.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="871.2" y="894.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.61%)</title><rect x="896.8" y="867.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="899.8" y="878.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.61%)</title><rect x="903.9" y="883.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="906.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.61%)</title><rect x="911.1" y="899.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="914.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.61%)</title><rect x="911.1" y="883.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="914.1" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.61%)</title><rect x="918.2" y="899.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="921.2" y="910.0"></text>
</g>
<g>
<title>MachNode::operand_index(unsigned int) const (1 samples, 0.61%)</title><rect x="918.2" y="883.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="921.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.82%)</title><rect x="925.4" y="899.0" width="21.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="928.4" y="910.0">P..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.61%)</title><rect x="939.7" y="883.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.61%)</title><rect x="946.8" y="899.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="949.8" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.61%)</title><rect x="954.0" y="899.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.0" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.61%)</title><rect x="954.0" y="883.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="957.0" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.61%)</title><rect x="961.2" y="899.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="964.2" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.61%)</title><rect x="961.2" y="883.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.2" y="894.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.21%)</title><rect x="968.3" y="899.0" width="14.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="971.3" y="910.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.21%)</title><rect x="968.3" y="883.0" width="14.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="971.3" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.61%)</title><rect x="975.5" y="867.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.5" y="878.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.61%)</title><rect x="982.6" y="899.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.6" y="910.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.61%)</title><rect x="989.8" y="899.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.8" y="910.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 12.12%)</title><rect x="996.9" y="931.0" width="143.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.9" y="942.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.61%)</title><rect x="996.9" y="915.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.9" y="926.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.61%)</title><rect x="996.9" y="899.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.9" y="910.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.61%)</title><rect x="996.9" y="883.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="999.9" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.61%)</title><rect x="1004.1" y="915.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.1" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.61%)</title><rect x="1004.1" y="899.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1007.1" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.61%)</title><rect x="1004.1" y="883.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1007.1" y="894.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.61%)</title><rect x="1004.1" y="867.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (14 samples, 8.48%)</title><rect x="1011.2" y="915.0" width="100.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1014.2" y="926.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.82%)</title><rect x="1011.2" y="899.0" width="21.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1014.2" y="910.0">P..</text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.61%)</title><rect x="1025.5" y="883.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1028.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.42%)</title><rect x="1032.7" y="899.0" width="28.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1035.7" y="910.0">Ph..</text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.61%)</title><rect x="1032.7" y="883.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.82%)</title><rect x="1039.8" y="883.0" width="21.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1042.8" y="894.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.21%)</title><rect x="1047.0" y="867.0" width="14.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1050.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.61%)</title><rect x="1054.1" y="851.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1057.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.61%)</title><rect x="1054.1" y="835.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.61%)</title><rect x="1061.3" y="899.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1064.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.21%)</title><rect x="1068.4" y="899.0" width="14.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.61%)</title><rect x="1075.6" y="883.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1078.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.61%)</title><rect x="1075.6" y="867.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.61%)</title><rect x="1075.6" y="851.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.6" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.21%)</title><rect x="1082.7" y="899.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.7" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.21%)</title><rect x="1082.7" y="883.0" width="14.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1085.7" y="894.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.61%)</title><rect x="1082.7" y="867.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.7" y="878.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.61%)</title><rect x="1082.7" y="851.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.7" y="862.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.61%)</title><rect x="1089.9" y="867.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.9" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.61%)</title><rect x="1089.9" y="851.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.61%)</title><rect x="1089.9" y="835.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.9" y="846.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.61%)</title><rect x="1089.9" y="819.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.9" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.61%)</title><rect x="1097.0" y="899.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1100.0" y="910.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.61%)</title><rect x="1104.2" y="899.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.2" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.21%)</title><rect x="1111.3" y="915.0" width="14.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.3" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.21%)</title><rect x="1111.3" y="899.0" width="14.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.3" y="910.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.61%)</title><rect x="1111.3" y="883.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.3" y="894.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.61%)</title><rect x="1118.5" y="883.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.5" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.61%)</title><rect x="1125.6" y="915.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.6" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.61%)</title><rect x="1125.6" y="899.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.6" y="910.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.61%)</title><rect x="1132.8" y="915.0" width="7.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1135.8" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.82%)</title><rect x="1139.9" y="931.0" width="21.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.9" y="942.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.82%)</title><rect x="1139.9" y="915.0" width="21.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.9" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.82%)</title><rect x="1139.9" y="899.0" width="21.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.9" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.82%)</title><rect x="1139.9" y="883.0" width="21.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.9" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.82%)</title><rect x="1139.9" y="867.0" width="21.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.9" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.82%)</title><rect x="1139.9" y="851.0" width="21.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.9" y="862.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.21%)</title><rect x="1139.9" y="835.0" width="14.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.21%)</title><rect x="1139.9" y="819.0" width="14.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.21%)</title><rect x="1139.9" y="803.0" width="14.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.21%)</title><rect x="1139.9" y="787.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.21%)</title><rect x="1139.9" y="771.0" width="14.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.21%)</title><rect x="1139.9" y="755.0" width="14.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1139.9" y="739.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1139.9" y="723.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1139.9" y="707.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1139.9" y="691.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1139.9" y="675.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.61%)</title><rect x="1139.9" y="659.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.61%)</title><rect x="1139.9" y="643.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.9" y="654.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.61%)</title><rect x="1139.9" y="627.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.9" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.61%)</title><rect x="1139.9" y="611.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.9" y="622.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.61%)</title><rect x="1139.9" y="595.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.9" y="606.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.61%)</title><rect x="1139.9" y="579.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.9" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.61%)</title><rect x="1139.9" y="563.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.9" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.61%)</title><rect x="1139.9" y="547.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.9" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1147.1" y="739.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1147.1" y="723.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.1" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1147.1" y="707.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1147.1" y="691.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1147.1" y="675.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1147.1" y="659.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1147.1" y="643.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1147.1" y="627.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1147.1" y="611.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1147.1" y="595.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1147.1" y="579.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1147.1" y="563.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1147.1" y="547.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1147.1" y="531.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1147.1" y="515.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1147.1" y="499.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1147.1" y="483.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1147.1" y="467.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1147.1" y="451.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1147.1" y="435.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1147.1" y="419.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1147.1" y="403.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1147.1" y="387.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1147.1" y="371.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1147.1" y="355.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1147.1" y="339.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1147.1" y="323.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1147.1" y="307.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1147.1" y="291.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1147.1" y="275.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1147.1" y="259.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1147.1" y="243.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1147.1" y="227.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1147.1" y="211.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1147.1" y="195.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1147.1" y="179.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1147.1" y="163.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.1" y="174.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1147.1" y="147.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.1" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.61%)</title><rect x="1147.1" y="131.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.1" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, bool, BasicType, bool, bool) (1 samples, 0.61%)</title><rect x="1147.1" y="115.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.1" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd, bool) (1 samples, 0.61%)</title><rect x="1147.1" y="99.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.1" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.61%)</title><rect x="1147.1" y="83.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.1" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.61%)</title><rect x="1147.1" y="67.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.1" y="78.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.61%)</title><rect x="1147.1" y="51.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.1" y="62.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.61%)</title><rect x="1147.1" y="35.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1154.2" y="835.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1154.2" y="819.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1154.2" y="803.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1154.2" y="787.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1154.2" y="771.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1154.2" y="755.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1154.2" y="739.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.2" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1154.2" y="723.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1154.2" y="707.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1154.2" y="691.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1154.2" y="675.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1154.2" y="659.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1154.2" y="643.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1154.2" y="627.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1154.2" y="611.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1154.2" y="595.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1154.2" y="579.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1154.2" y="563.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1154.2" y="547.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.61%)</title><rect x="1154.2" y="531.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.2" y="542.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.61%)</title><rect x="1154.2" y="515.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="526.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.61%)</title><rect x="1154.2" y="499.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.2" y="510.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.61%)</title><rect x="1154.2" y="483.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.2" y="494.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.61%)</title><rect x="1161.4" y="931.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.4" y="942.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.61%)</title><rect x="1161.4" y="915.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.4" y="926.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.61%)</title><rect x="1161.4" y="899.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.4" y="910.0"></text>
</g>
<g>
<title>nmethod::copy_values(GrowableArray&lt;Metadata*&gt;*) (1 samples, 0.61%)</title><rect x="1161.4" y="883.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.4" y="894.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.82%)</title><rect x="1168.5" y="963.0" width="21.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.5" y="974.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.82%)</title><rect x="1168.5" y="947.0" width="21.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="958.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.82%)</title><rect x="1168.5" y="931.0" width="21.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.5" y="942.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.82%)</title><rect x="1168.5" y="915.0" width="21.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.5" y="926.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.61%)</title><rect x="1168.5" y="899.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.5" y="910.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.61%)</title><rect x="1168.5" y="883.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.5" y="894.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.61%)</title><rect x="1168.5" y="867.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.5" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.61%)</title><rect x="1168.5" y="851.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.61%)</title><rect x="1168.5" y="835.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.5" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.61%)</title><rect x="1168.5" y="819.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.61%)</title><rect x="1168.5" y="803.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.5" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.61%)</title><rect x="1168.5" y="787.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.5" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.61%)</title><rect x="1168.5" y="771.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.5" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.61%)</title><rect x="1168.5" y="755.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.5" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.61%)</title><rect x="1168.5" y="739.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.5" y="750.0"></text>
</g>
<g>
<title>Metadata::is_klass() const volatile (1 samples, 0.61%)</title><rect x="1168.5" y="723.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.5" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 1.21%)</title><rect x="1175.7" y="899.0" width="14.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="910.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 1.21%)</title><rect x="1175.7" y="883.0" width="14.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.7" y="894.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.61%)</title><rect x="1175.7" y="867.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.7" y="878.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.61%)</title><rect x="1175.7" y="851.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="862.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.61%)</title><rect x="1175.7" y="835.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="846.0"></text>
</g>
<g>
<title>LinearScanWalker::split_and_spill_interval(Interval*) (1 samples, 0.61%)</title><rect x="1175.7" y="819.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.7" y="830.0"></text>
</g>
<g>
<title>IntervalWalker::append_to_unhandled(Interval**, Interval*) (1 samples, 0.61%)</title><rect x="1175.7" y="803.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="814.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.61%)</title><rect x="1182.8" y="867.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="878.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.61%)</title><rect x="1182.8" y="851.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>LinearScan::color_lir_opr(LIR_OprDesc*, int, LIR_OpVisitState::OprMode) (1 samples, 0.61%)</title><rect x="1182.8" y="835.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
</g>
</svg>
