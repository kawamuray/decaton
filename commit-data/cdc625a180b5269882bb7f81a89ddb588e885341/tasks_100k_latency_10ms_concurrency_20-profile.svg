<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (268 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.37%)</title><rect x="10.0" y="1155.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int) (1 samples, 0.37%)</title><rect x="10.0" y="1139.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap_inner(JavaThread*, int) (1 samples, 0.37%)</title><rect x="10.0" y="1123.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>Deoptimization::revoke_biases_of_monitors(JavaThread*, frame, RegisterMap*) (1 samples, 0.37%)</title><rect x="10.0" y="1107.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) (1 samples, 0.37%)</title><rect x="10.0" y="1091.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.37%)</title><rect x="10.0" y="1075.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (17 samples, 6.34%)</title><rect x="14.4" y="1155.0" width="74.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.4" y="1166.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (17 samples, 6.34%)</title><rect x="14.4" y="1139.0" width="74.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.4" y="1150.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.37%)</title><rect x="18.8" y="1123.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.37%)</title><rect x="18.8" y="1107.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.75%)</title><rect x="23.2" y="1123.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.37%)</title><rect x="23.2" y="1107.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.2" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.37%)</title><rect x="23.2" y="1091.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.2" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.37%)</title><rect x="23.2" y="1075.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.37%)</title><rect x="27.6" y="1107.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.resume (1 samples, 0.37%)</title><rect x="27.6" y="1091.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.37%)</title><rect x="27.6" y="1075.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 2.24%)</title><rect x="32.0" y="1123.0" width="26.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.0" y="1134.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2134329347.accept (6 samples, 2.24%)</title><rect x="32.0" y="1107.0" width="26.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.0" y="1118.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (6 samples, 2.24%)</title><rect x="32.0" y="1091.0" width="26.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.0" y="1102.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.49%)</title><rect x="36.4" y="1075.0" width="17.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.49%)</title><rect x="36.4" y="1059.0" width="17.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.49%)</title><rect x="36.4" y="1043.0" width="17.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.49%)</title><rect x="36.4" y="1027.0" width="17.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.49%)</title><rect x="36.4" y="1011.0" width="17.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.49%)</title><rect x="36.4" y="995.0" width="17.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.12%)</title><rect x="36.4" y="979.0" width="13.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.12%)</title><rect x="36.4" y="963.0" width="13.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.12%)</title><rect x="36.4" y="947.0" width="13.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.4" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="45.2" y="931.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="48.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.37%)</title><rect x="49.6" y="979.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.37%)</title><rect x="49.6" y="963.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="52.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.37%)</title><rect x="49.6" y="947.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.37%)</title><rect x="54.0" y="1075.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.37%)</title><rect x="54.0" y="1059.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.37%)</title><rect x="54.0" y="1043.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="57.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.37%)</title><rect x="54.0" y="1027.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 2.61%)</title><rect x="58.4" y="1123.0" width="30.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.4" y="1134.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 2.61%)</title><rect x="58.4" y="1107.0" width="30.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.4" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 1.87%)</title><rect x="58.4" y="1091.0" width="22.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.4" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.37%)</title><rect x="58.4" y="1075.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.12%)</title><rect x="62.8" y="1075.0" width="13.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.12%)</title><rect x="62.8" y="1059.0" width="13.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.12%)</title><rect x="62.8" y="1043.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.12%)</title><rect x="62.8" y="1027.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.37%)</title><rect x="67.2" y="1011.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.37%)</title><rect x="71.6" y="1011.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.37%)</title><rect x="71.6" y="995.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.37%)</title><rect x="71.6" y="979.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="74.6" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.37%)</title><rect x="71.6" y="963.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.6" y="974.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.37%)</title><rect x="71.6" y="947.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.37%)</title><rect x="71.6" y="931.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.37%)</title><rect x="71.6" y="915.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.37%)</title><rect x="71.6" y="899.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.37%)</title><rect x="76.0" y="1075.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.37%)</title><rect x="76.0" y="1059.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.37%)</title><rect x="76.0" y="1043.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/42461578.accept (1 samples, 0.37%)</title><rect x="76.0" y="1027.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.37%)</title><rect x="80.4" y="1091.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.37%)</title><rect x="80.4" y="1075.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.37%)</title><rect x="80.4" y="1059.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.37%)</title><rect x="80.4" y="1043.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.37%)</title><rect x="80.4" y="1027.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.4" y="1038.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.37%)</title><rect x="80.4" y="1011.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.37%)</title><rect x="80.4" y="995.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.37%)</title><rect x="80.4" y="979.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.37%)</title><rect x="80.4" y="963.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.37%)</title><rect x="80.4" y="947.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.37%)</title><rect x="84.9" y="1091.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="84.9" y="1075.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (142 samples, 52.99%)</title><rect x="89.3" y="1155.0" width="625.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.3" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (142 samples, 52.99%)</title><rect x="89.3" y="1139.0" width="625.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.3" y="1150.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (142 samples, 52.99%)</title><rect x="89.3" y="1123.0" width="625.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.3" y="1134.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/346794680.run (136 samples, 50.75%)</title><rect x="93.7" y="1107.0" width="598.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.7" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/346794680.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (136 samples, 50.75%)</title><rect x="93.7" y="1091.0" width="598.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.7" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (136 samples, 50.75%)</title><rect x="93.7" y="1075.0" width="598.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.7" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (129 samples, 48.13%)</title><rect x="93.7" y="1059.0" width="567.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.7" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (26 samples, 9.70%)</title><rect x="93.7" y="1043.0" width="114.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.7" y="1054.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (24 samples, 8.96%)</title><rect x="102.5" y="1027.0" width="105.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.5" y="1038.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (24 samples, 8.96%)</title><rect x="102.5" y="1011.0" width="105.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.5" y="1022.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (24 samples, 8.96%)</title><rect x="102.5" y="995.0" width="105.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.5" y="1006.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (24 samples, 8.96%)</title><rect x="102.5" y="979.0" width="105.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.5" y="990.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (24 samples, 8.96%)</title><rect x="102.5" y="963.0" width="105.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.5" y="974.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.24%)</title><rect x="102.5" y="947.0" width="26.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.5" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.24%)</title><rect x="102.5" y="931.0" width="26.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="105.5" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 2.24%)</title><rect x="102.5" y="915.0" width="26.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.5" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 1.87%)</title><rect x="102.5" y="899.0" width="22.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.5" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 1.87%)</title><rect x="102.5" y="883.0" width="22.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.5" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.37%)</title><rect x="124.5" y="899.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="127.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.37%)</title><rect x="124.5" y="883.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="127.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.37%)</title><rect x="124.5" y="867.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="127.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="124.5" y="851.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="127.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="124.5" y="835.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="127.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="124.5" y="819.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="127.5" y="830.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.37%)</title><rect x="124.5" y="803.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="127.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 6.72%)</title><rect x="128.9" y="947.0" width="79.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="131.9" y="958.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 1.12%)</title><rect x="128.9" y="931.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="131.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 1.12%)</title><rect x="128.9" y="915.0" width="13.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="131.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 1.12%)</title><rect x="128.9" y="899.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="131.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 1.12%)</title><rect x="128.9" y="883.0" width="13.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (3 samples, 1.12%)</title><rect x="128.9" y="867.0" width="13.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.37%)</title><rect x="137.7" y="851.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="140.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.37%)</title><rect x="137.7" y="835.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.37%)</title><rect x="142.1" y="931.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="145.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.37%)</title><rect x="142.1" y="915.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="145.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.37%)</title><rect x="146.5" y="931.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="149.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.37%)</title><rect x="146.5" y="915.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="149.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.37%)</title><rect x="146.5" y="899.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="149.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.37%)</title><rect x="146.5" y="883.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="149.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.37%)</title><rect x="146.5" y="867.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="149.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 4.85%)</title><rect x="150.9" y="931.0" width="57.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="153.9" y="942.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.49%)</title><rect x="150.9" y="915.0" width="17.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 3.36%)</title><rect x="168.5" y="915.0" width="39.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.5" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 3.36%)</title><rect x="168.5" y="899.0" width="39.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="171.5" y="910.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 3.36%)</title><rect x="168.5" y="883.0" width="39.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.5" y="894.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.75%)</title><rect x="168.5" y="867.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="171.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.12%)</title><rect x="177.3" y="867.0" width="13.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="180.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 1.12%)</title><rect x="177.3" y="851.0" width="13.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="180.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.37%)</title><rect x="177.3" y="835.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.37%)</title><rect x="177.3" y="819.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="180.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.37%)</title><rect x="177.3" y="803.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="180.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="177.3" y="787.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="180.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.75%)</title><rect x="181.7" y="835.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.75%)</title><rect x="181.7" y="819.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.75%)</title><rect x="181.7" y="803.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.75%)</title><rect x="190.5" y="867.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.75%)</title><rect x="190.5" y="851.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.75%)</title><rect x="190.5" y="835.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.75%)</title><rect x="190.5" y="819.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.5" y="830.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.75%)</title><rect x="190.5" y="803.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="193.5" y="814.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.75%)</title><rect x="190.5" y="787.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.5" y="798.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.37%)</title><rect x="194.9" y="771.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.37%)</title><rect x="199.3" y="867.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.37%)</title><rect x="199.3" y="851.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="199.3" y="835.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.37%)</title><rect x="203.7" y="867.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (103 samples, 38.43%)</title><rect x="208.1" y="1043.0" width="453.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="211.1" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (13 samples, 4.85%)</title><rect x="208.1" y="1027.0" width="57.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.1" y="1038.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.37%)</title><rect x="208.1" y="1011.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.1" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (12 samples, 4.48%)</title><rect x="212.5" y="1011.0" width="52.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.5" y="1022.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (8 samples, 2.99%)</title><rect x="230.1" y="995.0" width="35.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.1" y="1006.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.61%)</title><rect x="234.6" y="979.0" width="30.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.6" y="990.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 1.87%)</title><rect x="243.4" y="963.0" width="22.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.4" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.87%)</title><rect x="243.4" y="947.0" width="22.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.4" y="958.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (10 samples, 3.73%)</title><rect x="265.4" y="1027.0" width="44.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.4" y="1038.0">com/..</text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 1.49%)</title><rect x="291.8" y="1011.0" width="17.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="294.8" y="1022.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 1.49%)</title><rect x="291.8" y="995.0" width="17.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="294.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (31 samples, 11.57%)</title><rect x="309.4" y="1027.0" width="136.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.4" y="1038.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (31 samples, 11.57%)</title><rect x="309.4" y="1011.0" width="136.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.4" y="1022.0">com/linecorp/deca..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.75%)</title><rect x="309.4" y="995.0" width="8.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="312.4" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.75%)</title><rect x="309.4" y="979.0" width="8.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="312.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 4.10%)</title><rect x="318.2" y="995.0" width="48.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.2" y="1006.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 3.73%)</title><rect x="318.2" y="979.0" width="44.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.2" y="990.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 3.36%)</title><rect x="318.2" y="963.0" width="39.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="321.2" y="974.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 2.61%)</title><rect x="322.6" y="947.0" width="30.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.6" y="958.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 2.61%)</title><rect x="322.6" y="931.0" width="30.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.6" y="942.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 2.61%)</title><rect x="322.6" y="915.0" width="30.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.6" y="926.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 2.24%)</title><rect x="322.6" y="899.0" width="26.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="325.6" y="910.0">O..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 1.49%)</title><rect x="322.6" y="883.0" width="17.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="325.6" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.37%)</title><rect x="322.6" y="867.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="325.6" y="878.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.37%)</title><rect x="322.6" y="851.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="325.6" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 1.12%)</title><rect x="327.0" y="867.0" width="13.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="330.0" y="878.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 1.12%)</title><rect x="327.0" y="851.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="330.0" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.37%)</title><rect x="327.0" y="835.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="330.0" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.37%)</title><rect x="327.0" y="819.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="330.0" y="830.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.37%)</title><rect x="331.4" y="835.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="334.4" y="846.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.37%)</title><rect x="335.8" y="835.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="338.8" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.75%)</title><rect x="340.2" y="883.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="343.2" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.75%)</title><rect x="340.2" y="867.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="343.2" y="878.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (2 samples, 0.75%)</title><rect x="340.2" y="851.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="343.2" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.37%)</title><rect x="349.0" y="899.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="352.0" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.37%)</title><rect x="353.4" y="947.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="356.4" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="357.8" y="963.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="360.8" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="362.2" y="979.0" width="4.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="365.2" y="990.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 2.61%)</title><rect x="366.6" y="995.0" width="30.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.6" y="1006.0">ja..</text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.37%)</title><rect x="366.6" y="979.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.6" y="990.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.37%)</title><rect x="366.6" y="963.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.6" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 2.24%)</title><rect x="371.0" y="979.0" width="26.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.0" y="990.0">j..</text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 2.24%)</title><rect x="371.0" y="963.0" width="26.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.0" y="974.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="393.1" y="947.0" width="4.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="396.1" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="393.1" y="931.0" width="4.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="396.1" y="942.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 4.10%)</title><rect x="397.5" y="995.0" width="48.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.5" y="1006.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 3.73%)</title><rect x="401.9" y="979.0" width="44.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="404.9" y="990.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.12%)</title><rect x="401.9" y="963.0" width="13.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="404.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.12%)</title><rect x="401.9" y="947.0" width="13.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="404.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.12%)</title><rect x="401.9" y="931.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="404.9" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.12%)</title><rect x="401.9" y="915.0" width="13.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.75%)</title><rect x="406.3" y="899.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.75%)</title><rect x="406.3" y="883.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.3" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.61%)</title><rect x="415.1" y="963.0" width="30.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.1" y="974.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.61%)</title><rect x="415.1" y="947.0" width="30.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.1" y="958.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.12%)</title><rect x="432.7" y="931.0" width="13.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.75%)</title><rect x="437.1" y="915.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.1" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.75%)</title><rect x="437.1" y="899.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="440.1" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.75%)</title><rect x="437.1" y="883.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="440.1" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.75%)</title><rect x="437.1" y="867.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="440.1" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.75%)</title><rect x="437.1" y="851.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="440.1" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.37%)</title><rect x="437.1" y="835.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="440.1" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.37%)</title><rect x="437.1" y="819.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="440.1" y="830.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.37%)</title><rect x="437.1" y="803.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="440.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.37%)</title><rect x="441.5" y="835.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="444.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 16.79%)</title><rect x="445.9" y="1027.0" width="198.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.9" y="1038.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 16.79%)</title><rect x="445.9" y="1011.0" width="198.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.9" y="1022.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1062034147.process (41 samples, 15.30%)</title><rect x="459.1" y="995.0" width="180.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.1" y="1006.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (41 samples, 15.30%)</title><rect x="459.1" y="979.0" width="180.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="462.1" y="990.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (41 samples, 15.30%)</title><rect x="459.1" y="963.0" width="180.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="462.1" y="974.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (40 samples, 14.93%)</title><rect x="459.1" y="947.0" width="176.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="462.1" y="958.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>java/lang/Thread.sleep (40 samples, 14.93%)</title><rect x="459.1" y="931.0" width="176.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.1" y="942.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (37 samples, 13.81%)</title><rect x="467.9" y="915.0" width="162.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="470.9" y="926.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.87%)</title><rect x="485.5" y="899.0" width="22.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="488.5" y="910.0">H..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.37%)</title><rect x="507.5" y="899.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="510.5" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="511.9" y="899.0" width="4.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="514.9" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="516.3" y="899.0" width="4.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="519.3" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="516.3" y="883.0" width="4.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="519.3" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.37%)</title><rect x="520.7" y="899.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="523.7" y="910.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (24 samples, 8.96%)</title><rect x="525.1" y="899.0" width="105.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="528.1" y="910.0">os::sleep(Thr..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="551.6" y="883.0" width="4.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="554.6" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="551.6" y="867.0" width="4.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="554.6" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.49%)</title><rect x="556.0" y="883.0" width="17.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="559.0" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 3.36%)</title><rect x="573.6" y="883.0" width="39.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="576.6" y="894.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.75%)</title><rect x="613.2" y="883.0" width="8.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="616.2" y="894.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.37%)</title><rect x="622.0" y="883.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="625.0" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.37%)</title><rect x="626.4" y="883.0" width="4.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="629.4" y="894.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.37%)</title><rect x="630.8" y="915.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="633.8" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.37%)</title><rect x="635.2" y="947.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.2" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.37%)</title><rect x="635.2" y="931.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.2" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.37%)</title><rect x="635.2" y="915.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.2" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.37%)</title><rect x="639.6" y="995.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="642.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.37%)</title><rect x="639.6" y="979.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.49%)</title><rect x="644.0" y="1027.0" width="17.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.0" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="652.8" y="1011.0" width="4.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="655.8" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="652.8" y="995.0" width="4.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="655.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.37%)</title><rect x="657.2" y="1011.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="660.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.61%)</title><rect x="661.6" y="1059.0" width="30.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="664.6" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.24%)</title><rect x="666.0" y="1043.0" width="26.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="669.0" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.49%)</title><rect x="674.9" y="1027.0" width="17.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="677.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$269/1147813633.accept (4 samples, 1.49%)</title><rect x="674.9" y="1011.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="677.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (4 samples, 1.49%)</title><rect x="674.9" y="995.0" width="17.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="677.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/733535618.complete (4 samples, 1.49%)</title><rect x="674.9" y="979.0" width="17.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (4 samples, 1.49%)</title><rect x="674.9" y="963.0" width="17.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 1.49%)</title><rect x="674.9" y="947.0" width="17.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="677.9" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.49%)</title><rect x="674.9" y="931.0" width="17.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="677.9" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.49%)</title><rect x="674.9" y="915.0" width="17.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="677.9" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.49%)</title><rect x="674.9" y="899.0" width="17.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="677.9" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.49%)</title><rect x="674.9" y="883.0" width="17.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="677.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.37%)</title><rect x="692.5" y="1107.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="695.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.37%)</title><rect x="692.5" y="1091.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="695.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.37%)</title><rect x="692.5" y="1075.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="695.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.37%)</title><rect x="692.5" y="1059.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="695.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.49%)</title><rect x="696.9" y="1107.0" width="17.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="699.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.12%)</title><rect x="701.3" y="1091.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="704.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.12%)</title><rect x="701.3" y="1075.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="704.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.12%)</title><rect x="701.3" y="1059.0" width="13.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="704.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.12%)</title><rect x="701.3" y="1043.0" width="13.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.12%)</title><rect x="701.3" y="1027.0" width="13.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.37%)</title><rect x="714.5" y="1155.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="717.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.37%)</title><rect x="714.5" y="1139.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="714.5" y="1123.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="717.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.37%)</title><rect x="714.5" y="1107.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="717.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.37%)</title><rect x="714.5" y="1091.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="717.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.37%)</title><rect x="714.5" y="1075.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="717.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.37%)</title><rect x="714.5" y="1059.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="717.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.37%)</title><rect x="714.5" y="1043.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.37%)</title><rect x="714.5" y="1027.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="717.5" y="1038.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.37%)</title><rect x="714.5" y="1011.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="717.5" y="1022.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.37%)</title><rect x="714.5" y="995.0" width="4.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="717.5" y="1006.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.37%)</title><rect x="714.5" y="979.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="717.5" y="990.0"></text>
</g>
<g>
<title>start_thread (106 samples, 39.55%)</title><rect x="718.9" y="1155.0" width="466.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="721.9" y="1166.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (106 samples, 39.55%)</title><rect x="718.9" y="1139.0" width="466.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="721.9" y="1150.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (5 samples, 1.87%)</title><rect x="718.9" y="1123.0" width="22.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="721.9" y="1134.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 1.87%)</title><rect x="718.9" y="1107.0" width="22.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="721.9" y="1118.0">G..</text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 1.87%)</title><rect x="718.9" y="1091.0" width="22.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="721.9" y="1102.0">G..</text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 1.87%)</title><rect x="718.9" y="1075.0" width="22.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="721.9" y="1086.0">G..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.75%)</title><rect x="718.9" y="1059.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="721.9" y="1070.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.75%)</title><rect x="718.9" y="1043.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="721.9" y="1054.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.75%)</title><rect x="718.9" y="1027.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="721.9" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.75%)</title><rect x="718.9" y="1011.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="721.9" y="1022.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.37%)</title><rect x="723.3" y="995.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="726.3" y="1006.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.37%)</title><rect x="723.3" y="979.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="726.3" y="990.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 1.12%)</title><rect x="727.7" y="1059.0" width="13.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="730.7" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.75%)</title><rect x="727.7" y="1043.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="730.7" y="1054.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.37%)</title><rect x="732.1" y="1027.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="735.1" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_cset_region_for_worker(unsigned int) (1 samples, 0.37%)</title><rect x="736.5" y="1043.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="739.5" y="1054.0"></text>
</g>
<g>
<title>JavaThread::run() (101 samples, 37.69%)</title><rect x="740.9" y="1123.0" width="444.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="743.9" y="1134.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (101 samples, 37.69%)</title><rect x="740.9" y="1107.0" width="444.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="743.9" y="1118.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (101 samples, 37.69%)</title><rect x="740.9" y="1091.0" width="444.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="743.9" y="1102.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (101 samples, 37.69%)</title><rect x="740.9" y="1075.0" width="444.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="743.9" y="1086.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (98 samples, 36.57%)</title><rect x="740.9" y="1059.0" width="431.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="743.9" y="1070.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (98 samples, 36.57%)</title><rect x="740.9" y="1043.0" width="431.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="743.9" y="1054.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 15.30%)</title><rect x="740.9" y="1027.0" width="180.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="743.9" y="1038.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.75%)</title><rect x="740.9" y="1011.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="743.9" y="1022.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.37%)</title><rect x="740.9" y="995.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="743.9" y="1006.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.37%)</title><rect x="740.9" y="979.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="743.9" y="990.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.37%)</title><rect x="745.3" y="995.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="748.3" y="1006.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.37%)</title><rect x="745.3" y="979.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="748.3" y="990.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.37%)</title><rect x="745.3" y="963.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="748.3" y="974.0"></text>
</g>
<g>
<title>MacroAssembler::fast_lock(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, BiasedLockingCounters*, RTMLockingCounters*, RTMLockingCounters*, Metadata*, bool, bool) (1 samples, 0.37%)</title><rect x="745.3" y="947.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="748.3" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.75%)</title><rect x="749.7" y="1011.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="752.7" y="1022.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.37%)</title><rect x="749.7" y="995.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="752.7" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.37%)</title><rect x="749.7" y="979.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="752.7" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.37%)</title><rect x="749.7" y="963.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="752.7" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.37%)</title><rect x="754.1" y="995.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="757.1" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.37%)</title><rect x="754.1" y="979.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="757.1" y="990.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.12%)</title><rect x="758.5" y="1011.0" width="13.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="761.5" y="1022.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.12%)</title><rect x="758.5" y="995.0" width="13.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="761.5" y="1006.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.12%)</title><rect x="758.5" y="979.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="761.5" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.37%)</title><rect x="771.7" y="1011.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.37%)</title><rect x="771.7" y="995.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="774.7" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.37%)</title><rect x="776.1" y="1011.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.1" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.37%)</title><rect x="776.1" y="995.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="779.1" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.37%)</title><rect x="776.1" y="979.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="779.1" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.37%)</title><rect x="776.1" y="963.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 11.94%)</title><rect x="780.5" y="1011.0" width="140.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="783.5" y="1022.0">PhaseChaitin::Regi..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.37%)</title><rect x="780.5" y="995.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="783.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.12%)</title><rect x="784.9" y="995.0" width="13.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="787.9" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="784.9" y="979.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="787.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.37%)</title><rect x="789.3" y="979.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="792.3" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.37%)</title><rect x="793.7" y="979.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="796.7" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="793.7" y="963.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="796.7" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.37%)</title><rect x="798.1" y="995.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="801.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.37%)</title><rect x="798.1" y="979.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="801.1" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="798.1" y="963.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="801.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.12%)</title><rect x="802.5" y="995.0" width="13.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="805.5" y="1006.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.37%)</title><rect x="811.3" y="979.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="814.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.24%)</title><rect x="815.7" y="995.0" width="26.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="818.7" y="1006.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.75%)</title><rect x="815.7" y="979.0" width="8.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="818.7" y="990.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.37%)</title><rect x="824.6" y="979.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="827.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.12%)</title><rect x="829.0" y="979.0" width="13.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="832.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="837.8" y="963.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="840.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.37%)</title><rect x="842.2" y="995.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="845.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.12%)</title><rect x="846.6" y="995.0" width="13.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="849.6" y="1006.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.37%)</title><rect x="855.4" y="979.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="858.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.75%)</title><rect x="859.8" y="995.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="862.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.37%)</title><rect x="864.2" y="979.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.2" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 2.99%)</title><rect x="868.6" y="995.0" width="35.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="871.6" y="1006.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 2.99%)</title><rect x="868.6" y="979.0" width="35.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="871.6" y="990.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.37%)</title><rect x="868.6" y="963.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="871.6" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 2.61%)</title><rect x="873.0" y="963.0" width="30.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="876.0" y="974.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (7 samples, 2.61%)</title><rect x="873.0" y="947.0" width="30.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="876.0" y="958.0">Ph..</text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.37%)</title><rect x="903.8" y="995.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="906.8" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="903.8" y="979.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="906.8" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.12%)</title><rect x="908.2" y="995.0" width="13.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="911.2" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.75%)</title><rect x="912.6" y="979.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.6" y="990.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.37%)</title><rect x="917.0" y="963.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="920.0" y="974.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.37%)</title><rect x="917.0" y="947.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="920.0" y="958.0"></text>
</g>
<g>
<title>Compile::Optimize() (53 samples, 19.78%)</title><rect x="921.4" y="1027.0" width="233.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="924.4" y="1038.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.37%)</title><rect x="921.4" y="1011.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="924.4" y="1022.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.37%)</title><rect x="921.4" y="995.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="924.4" y="1006.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.37%)</title><rect x="925.8" y="1011.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="928.8" y="1022.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.37%)</title><rect x="925.8" y="995.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="928.8" y="1006.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.37%)</title><rect x="925.8" y="979.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="928.8" y="990.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.37%)</title><rect x="925.8" y="963.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.37%)</title><rect x="930.2" y="1011.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="933.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.37%)</title><rect x="930.2" y="995.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="933.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.37%)</title><rect x="930.2" y="979.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_AddP(Node*, Node*) (1 samples, 0.37%)</title><rect x="930.2" y="963.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.2" y="974.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.37%)</title><rect x="930.2" y="947.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (44 samples, 16.42%)</title><rect x="934.6" y="1011.0" width="193.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="937.6" y="1022.0">PhaseIdealLoop::build_and..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.75%)</title><rect x="934.6" y="995.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="937.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.37%)</title><rect x="943.4" y="995.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="946.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (38 samples, 14.18%)</title><rect x="947.8" y="995.0" width="167.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="950.8" y="1006.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (37 samples, 13.81%)</title><rect x="952.2" y="979.0" width="162.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="955.2" y="990.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.12%)</title><rect x="952.2" y="963.0" width="13.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="955.2" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (34 samples, 12.69%)</title><rect x="965.4" y="963.0" width="149.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="968.4" y="974.0">PhaseIdealLoop::get..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.37%)</title><rect x="1093.1" y="947.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.37%)</title><rect x="1093.1" y="931.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 1.49%)</title><rect x="1097.5" y="947.0" width="17.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.37%)</title><rect x="1115.1" y="995.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.37%)</title><rect x="1119.6" y="995.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.37%)</title><rect x="1119.6" y="979.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.37%)</title><rect x="1119.6" y="963.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.6" y="974.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.37%)</title><rect x="1124.0" y="995.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 2.24%)</title><rect x="1128.4" y="1011.0" width="26.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.4" y="1022.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 2.24%)</title><rect x="1128.4" y="995.0" width="26.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.4" y="1006.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1128.4" y="979.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.4" y="990.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.37%)</title><rect x="1128.4" y="963.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.4" y="974.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.37%)</title><rect x="1128.4" y="947.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.4" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.37%)</title><rect x="1128.4" y="931.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.4" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.75%)</title><rect x="1132.8" y="979.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.8" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.75%)</title><rect x="1141.6" y="979.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.6" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.75%)</title><rect x="1141.6" y="963.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.6" y="974.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.37%)</title><rect x="1141.6" y="947.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.6" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.37%)</title><rect x="1146.0" y="947.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.0" y="958.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.37%)</title><rect x="1146.0" y="931.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.0" y="942.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1150.4" y="979.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.4" y="990.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.37%)</title><rect x="1150.4" y="963.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.4" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.37%)</title><rect x="1150.4" y="947.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.4" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.37%)</title><rect x="1150.4" y="931.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.4" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.37%)</title><rect x="1150.4" y="915.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.4" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.37%)</title><rect x="1150.4" y="899.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.4" y="910.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.37%)</title><rect x="1150.4" y="883.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="894.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.37%)</title><rect x="1150.4" y="867.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.49%)</title><rect x="1154.8" y="1027.0" width="17.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.8" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.49%)</title><rect x="1154.8" y="1011.0" width="17.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.49%)</title><rect x="1154.8" y="995.0" width="17.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.49%)</title><rect x="1154.8" y="979.0" width="17.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.49%)</title><rect x="1154.8" y="963.0" width="17.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.49%)</title><rect x="1154.8" y="947.0" width="17.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.8" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.49%)</title><rect x="1154.8" y="931.0" width="17.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.8" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.49%)</title><rect x="1154.8" y="915.0" width="17.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.49%)</title><rect x="1154.8" y="899.0" width="17.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.49%)</title><rect x="1154.8" y="883.0" width="17.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.49%)</title><rect x="1154.8" y="867.0" width="17.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.49%)</title><rect x="1154.8" y="851.0" width="17.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.8" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1154.8" y="835.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.8" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1154.8" y="819.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1154.8" y="803.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1154.8" y="787.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1154.8" y="771.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1154.8" y="755.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1154.8" y="739.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1154.8" y="723.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1154.8" y="707.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1154.8" y="691.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1154.8" y="675.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1154.8" y="659.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.8" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1154.8" y="643.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1154.8" y="627.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1154.8" y="611.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1154.8" y="595.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1154.8" y="579.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.37%)</title><rect x="1154.8" y="563.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.37%)</title><rect x="1154.8" y="547.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.8" y="558.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.37%)</title><rect x="1154.8" y="531.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.8" y="542.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.37%)</title><rect x="1154.8" y="515.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.8" y="526.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.37%)</title><rect x="1154.8" y="499.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.8" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.37%)</title><rect x="1154.8" y="483.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.8" y="494.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.37%)</title><rect x="1154.8" y="467.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.8" y="478.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.37%)</title><rect x="1154.8" y="451.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.8" y="462.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.37%)</title><rect x="1154.8" y="435.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.8" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1159.2" y="643.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1159.2" y="627.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1159.2" y="611.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1159.2" y="595.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1159.2" y="579.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1159.2" y="563.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.37%)</title><rect x="1159.2" y="547.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.37%)</title><rect x="1159.2" y="531.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.2" y="542.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.37%)</title><rect x="1159.2" y="515.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.2" y="526.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.37%)</title><rect x="1159.2" y="499.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.2" y="510.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.37%)</title><rect x="1159.2" y="483.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.2" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1163.6" y="835.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1163.6" y="819.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1163.6" y="803.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1163.6" y="787.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1163.6" y="771.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1163.6" y="755.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1163.6" y="739.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1163.6" y="723.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1163.6" y="707.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1163.6" y="691.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1163.6" y="675.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1163.6" y="659.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1163.6" y="643.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1163.6" y="627.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1163.6" y="611.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1163.6" y="595.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1163.6" y="579.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1163.6" y="563.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1163.6" y="547.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1163.6" y="531.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1163.6" y="515.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1163.6" y="499.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1163.6" y="483.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1163.6" y="467.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1163.6" y="451.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1163.6" y="435.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1163.6" y="419.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1163.6" y="403.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1163.6" y="387.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1163.6" y="371.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1163.6" y="355.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.6" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.37%)</title><rect x="1163.6" y="339.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.6" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.37%)</title><rect x="1163.6" y="323.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.6" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.37%)</title><rect x="1163.6" y="307.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.37%)</title><rect x="1163.6" y="291.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.6" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.37%)</title><rect x="1163.6" y="275.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.6" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1163.6" y="259.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.6" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1163.6" y="243.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.37%)</title><rect x="1163.6" y="227.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.6" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.37%)</title><rect x="1163.6" y="211.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.6" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.37%)</title><rect x="1163.6" y="195.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.6" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1163.6" y="179.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.6" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1163.6" y="163.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.6" y="174.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.37%)</title><rect x="1163.6" y="147.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.6" y="158.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.37%)</title><rect x="1163.6" y="131.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.6" y="142.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1163.6" y="115.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.6" y="126.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.37%)</title><rect x="1163.6" y="99.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.6" y="110.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.37%)</title><rect x="1163.6" y="83.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.6" y="94.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.37%)</title><rect x="1163.6" y="67.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.6" y="78.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.0" y="339.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.0" y="323.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.0" y="307.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.0" y="291.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.0" y="275.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.0" y="259.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.0" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.0" y="243.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.0" y="227.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.0" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.0" y="211.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.0" y="195.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.0" y="179.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.0" y="163.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.0" y="147.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.37%)</title><rect x="1168.0" y="131.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.0" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.37%)</title><rect x="1168.0" y="115.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.0" y="126.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.37%)</title><rect x="1168.0" y="99.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.0" y="110.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.37%)</title><rect x="1168.0" y="83.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.0" y="94.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.37%)</title><rect x="1168.0" y="67.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.0" y="78.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.37%)</title><rect x="1168.0" y="51.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="62.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.37%)</title><rect x="1168.0" y="35.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.12%)</title><rect x="1172.4" y="1059.0" width="13.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.4" y="1070.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.12%)</title><rect x="1172.4" y="1043.0" width="13.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.4" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.12%)</title><rect x="1172.4" y="1027.0" width="13.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.4" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.37%)</title><rect x="1172.4" y="1011.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.4" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.37%)</title><rect x="1172.4" y="995.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.4" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.37%)</title><rect x="1172.4" y="979.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.4" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.37%)</title><rect x="1172.4" y="963.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.4" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::mem2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool) (1 samples, 0.37%)</title><rect x="1172.4" y="947.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.4" y="958.0"></text>
</g>
<g>
<title>MacroAssembler::decode_heap_oop(RegisterImpl*) (1 samples, 0.37%)</title><rect x="1172.4" y="931.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.4" y="942.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (2 samples, 0.75%)</title><rect x="1176.8" y="1011.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="1022.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 0.75%)</title><rect x="1176.8" y="995.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.8" y="1006.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.75%)</title><rect x="1176.8" y="979.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="990.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.37%)</title><rect x="1176.8" y="963.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="974.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.37%)</title><rect x="1176.8" y="947.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="958.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.37%)</title><rect x="1181.2" y="963.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="974.0"></text>
</g>
<g>
<title>nmethod::is_not_entrant() const (1 samples, 0.37%)</title><rect x="1181.2" y="947.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="958.0"></text>
</g>
<g>
<title>sysmalloc (1 samples, 0.37%)</title><rect x="1185.6" y="1155.0" width="4.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1188.6" y="1166.0"></text>
</g>
</g>
</svg>
