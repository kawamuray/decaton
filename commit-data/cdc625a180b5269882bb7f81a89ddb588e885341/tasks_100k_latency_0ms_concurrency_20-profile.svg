<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (171 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.58%)</title><rect x="10.0" y="947.0" width="6.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>_IO_str_init_static_internal (1 samples, 0.58%)</title><rect x="10.0" y="931.0" width="6.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 15.79%)</title><rect x="16.9" y="947.0" width="186.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="958.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 15.79%)</title><rect x="16.9" y="931.0" width="186.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="942.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 1.17%)</title><rect x="16.9" y="915.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 1.17%)</title><rect x="16.9" y="899.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.58%)</title><rect x="16.9" y="883.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/2080841530.accept (1 samples, 0.58%)</title><rect x="23.8" y="883.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.58%)</title><rect x="23.8" y="867.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.58%)</title><rect x="23.8" y="851.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.8" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.58%)</title><rect x="23.8" y="835.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 1.75%)</title><rect x="30.7" y="915.0" width="20.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 1.75%)</title><rect x="30.7" y="899.0" width="20.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.pausingAllProcessing (1 samples, 0.58%)</title><rect x="30.7" y="883.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/StaticProperty.value (1 samples, 0.58%)</title><rect x="30.7" y="867.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.58%)</title><rect x="37.6" y="883.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.58%)</title><rect x="37.6" y="867.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.58%)</title><rect x="37.6" y="851.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.6" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.58%)</title><rect x="37.6" y="835.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.58%)</title><rect x="37.6" y="819.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.58%)</title><rect x="37.6" y="803.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.58%)</title><rect x="37.6" y="787.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.58%)</title><rect x="44.5" y="883.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.5" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.58%)</title><rect x="44.5" y="867.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.5" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (12 samples, 7.02%)</title><rect x="51.4" y="915.0" width="82.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.4" y="926.0">java/lang..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1677023118.accept (12 samples, 7.02%)</title><rect x="51.4" y="899.0" width="82.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.4" y="910.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (12 samples, 7.02%)</title><rect x="51.4" y="883.0" width="82.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.4" y="894.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (11 samples, 6.43%)</title><rect x="51.4" y="867.0" width="75.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.4" y="878.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (11 samples, 6.43%)</title><rect x="51.4" y="851.0" width="75.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="54.4" y="862.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (11 samples, 6.43%)</title><rect x="51.4" y="835.0" width="75.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.4" y="846.0">com/line..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (11 samples, 6.43%)</title><rect x="51.4" y="819.0" width="75.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.4" y="830.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 6.43%)</title><rect x="51.4" y="803.0" width="75.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="54.4" y="814.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (11 samples, 6.43%)</title><rect x="51.4" y="787.0" width="75.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.4" y="798.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (10 samples, 5.85%)</title><rect x="51.4" y="771.0" width="69.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.4" y="782.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 2.34%)</title><rect x="51.4" y="755.0" width="27.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.4" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 2.34%)</title><rect x="51.4" y="739.0" width="27.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.4" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.17%)</title><rect x="65.2" y="723.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 1.17%)</title><rect x="65.2" y="707.0" width="13.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 3.51%)</title><rect x="79.0" y="755.0" width="41.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.0" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 3.51%)</title><rect x="79.0" y="739.0" width="41.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.0" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 3.51%)</title><rect x="79.0" y="723.0" width="41.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.0" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 3.51%)</title><rect x="79.0" y="707.0" width="41.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.0" y="718.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 3.51%)</title><rect x="79.0" y="691.0" width="41.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.0" y="702.0">sun..</text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 1.75%)</title><rect x="85.9" y="675.0" width="20.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="88.9" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 1.17%)</title><rect x="85.9" y="659.0" width="13.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="88.9" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.58%)</title><rect x="99.7" y="659.0" width="6.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="102.7" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.58%)</title><rect x="106.6" y="675.0" width="6.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="109.6" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.58%)</title><rect x="113.5" y="675.0" width="6.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="116.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.58%)</title><rect x="120.4" y="771.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="123.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.58%)</title><rect x="120.4" y="755.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="123.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.58%)</title><rect x="120.4" y="739.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.58%)</title><rect x="127.3" y="867.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="130.3" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.58%)</title><rect x="127.3" y="851.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="130.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.85%)</title><rect x="134.2" y="915.0" width="69.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.2" y="926.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.85%)</title><rect x="134.2" y="899.0" width="69.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.2" y="910.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 3.51%)</title><rect x="134.2" y="883.0" width="41.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.2" y="894.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 3.51%)</title><rect x="134.2" y="867.0" width="41.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="137.2" y="878.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 3.51%)</title><rect x="134.2" y="851.0" width="41.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="137.2" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 3.51%)</title><rect x="134.2" y="835.0" width="41.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.2" y="846.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 3.51%)</title><rect x="134.2" y="819.0" width="41.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.2" y="830.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.17%)</title><rect x="134.2" y="803.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="137.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (4 samples, 2.34%)</title><rect x="148.0" y="803.0" width="27.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.0" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 2.34%)</title><rect x="148.0" y="787.0" width="27.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="151.0" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 2.34%)</title><rect x="148.0" y="771.0" width="27.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.0" y="782.0">o..</text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 2.34%)</title><rect x="148.0" y="755.0" width="27.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="151.0" y="766.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.17%)</title><rect x="175.6" y="883.0" width="13.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="178.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.58%)</title><rect x="175.6" y="867.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.58%)</title><rect x="175.6" y="851.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.58%)</title><rect x="175.6" y="835.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.58%)</title><rect x="175.6" y="819.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.58%)</title><rect x="175.6" y="803.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.58%)</title><rect x="175.6" y="787.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.6" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.spliterator (1 samples, 0.58%)</title><rect x="175.6" y="771.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.6" y="782.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (1 samples, 0.58%)</title><rect x="175.6" y="755.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.58%)</title><rect x="182.5" y="867.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.58%)</title><rect x="182.5" y="851.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.access$100 (1 samples, 0.58%)</title><rect x="182.5" y="835.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.5" y="846.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.58%)</title><rect x="182.5" y="819.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="185.5" y="830.0"></text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.58%)</title><rect x="182.5" y="803.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="185.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.17%)</title><rect x="189.4" y="883.0" width="13.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.17%)</title><rect x="189.4" y="867.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.58%)</title><rect x="189.4" y="851.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$InFlightRequest.completed (1 samples, 0.58%)</title><rect x="189.4" y="835.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientResponse.&lt;init&gt; (1 samples, 0.58%)</title><rect x="189.4" y="819.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="192.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.58%)</title><rect x="196.3" y="851.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="199.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.58%)</title><rect x="196.3" y="835.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.58%)</title><rect x="196.3" y="819.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.58%)</title><rect x="196.3" y="803.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.58%)</title><rect x="196.3" y="787.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.58%)</title><rect x="196.3" y="771.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.58%)</title><rect x="196.3" y="755.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.3" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.58%)</title><rect x="196.3" y="739.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.58%)</title><rect x="196.3" y="723.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="199.3" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.58%)</title><rect x="196.3" y="707.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.3" y="718.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.58%)</title><rect x="196.3" y="691.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.3" y="702.0"></text>
</g>
<g>
<title>java/nio/Bits.copyToArray (1 samples, 0.58%)</title><rect x="196.3" y="675.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.3" y="686.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.58%)</title><rect x="196.3" y="659.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.3" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.58%)</title><rect x="196.3" y="643.0" width="6.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="199.3" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (49 samples, 28.65%)</title><rect x="203.2" y="947.0" width="338.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.2" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (49 samples, 28.65%)</title><rect x="203.2" y="931.0" width="338.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="206.2" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (49 samples, 28.65%)</title><rect x="203.2" y="915.0" width="338.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.2" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWor..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.58%)</title><rect x="223.9" y="899.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1076915420.run (32 samples, 18.71%)</title><rect x="230.8" y="899.0" width="220.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.8" y="910.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (32 samples, 18.71%)</title><rect x="230.8" y="883.0" width="220.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.8" y="894.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (32 samples, 18.71%)</title><rect x="230.8" y="867.0" width="220.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.8" y="878.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (29 samples, 16.96%)</title><rect x="230.8" y="851.0" width="200.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.8" y="862.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.58%)</title><rect x="230.8" y="835.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="233.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.58%)</title><rect x="230.8" y="819.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/360014524.get (1 samples, 0.58%)</title><rect x="230.8" y="803.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.58%)</title><rect x="230.8" y="787.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.8" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.58%)</title><rect x="230.8" y="771.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="233.8" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.58%)</title><rect x="230.8" y="755.0" width="6.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="233.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (11 samples, 6.43%)</title><rect x="237.7" y="835.0" width="75.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.7" y="846.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (11 samples, 6.43%)</title><rect x="237.7" y="819.0" width="75.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.7" y="830.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (11 samples, 6.43%)</title><rect x="237.7" y="803.0" width="75.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.7" y="814.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 5.85%)</title><rect x="244.6" y="787.0" width="69.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.6" y="798.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 5.85%)</title><rect x="244.6" y="771.0" width="69.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.6" y="782.0">com/lin..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 5.85%)</title><rect x="244.6" y="755.0" width="69.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.6" y="766.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 2.34%)</title><rect x="244.6" y="739.0" width="27.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.6" y="750.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 2.34%)</title><rect x="244.6" y="723.0" width="27.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.6" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 2.34%)</title><rect x="244.6" y="707.0" width="27.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.6" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 1.17%)</title><rect x="244.6" y="691.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 1.17%)</title><rect x="244.6" y="675.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.17%)</title><rect x="258.4" y="691.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 1.17%)</title><rect x="258.4" y="675.0" width="13.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="261.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 1.17%)</title><rect x="258.4" y="659.0" width="13.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 1.17%)</title><rect x="258.4" y="643.0" width="13.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (2 samples, 1.17%)</title><rect x="258.4" y="627.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.92%)</title><rect x="272.2" y="739.0" width="34.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.2" y="750.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.92%)</title><rect x="272.2" y="723.0" width="34.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.2" y="734.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.58%)</title><rect x="272.2" y="707.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.58%)</title><rect x="272.2" y="691.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.58%)</title><rect x="272.2" y="675.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.58%)</title><rect x="272.2" y="659.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.34%)</title><rect x="279.1" y="707.0" width="27.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.1" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.34%)</title><rect x="279.1" y="691.0" width="27.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.1" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.34%)</title><rect x="279.1" y="675.0" width="27.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.1" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.58%)</title><rect x="279.1" y="659.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.58%)</title><rect x="279.1" y="643.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.58%)</title><rect x="279.1" y="627.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.58%)</title><rect x="279.1" y="611.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.1" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.58%)</title><rect x="279.1" y="595.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.58%)</title><rect x="286.0" y="659.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.58%)</title><rect x="286.0" y="643.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.58%)</title><rect x="286.0" y="627.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.58%)</title><rect x="286.0" y="611.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="289.0" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.58%)</title><rect x="286.0" y="595.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.0" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.58%)</title><rect x="286.0" y="579.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 1.17%)</title><rect x="292.9" y="659.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.9" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.17%)</title><rect x="292.9" y="643.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.17%)</title><rect x="292.9" y="627.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.58%)</title><rect x="306.7" y="739.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.58%)</title><rect x="306.7" y="723.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="309.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.58%)</title><rect x="306.7" y="707.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="309.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.58%)</title><rect x="306.7" y="691.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.58%)</title><rect x="306.7" y="675.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (17 samples, 9.94%)</title><rect x="313.6" y="835.0" width="117.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.6" y="846.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 2.92%)</title><rect x="313.6" y="819.0" width="34.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.6" y="830.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (5 samples, 2.92%)</title><rect x="313.6" y="803.0" width="34.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.6" y="814.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 2.92%)</title><rect x="313.6" y="787.0" width="34.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.6" y="798.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 2.92%)</title><rect x="313.6" y="771.0" width="34.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.6" y="782.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 2.34%)</title><rect x="320.5" y="755.0" width="27.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.5" y="766.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.58%)</title><rect x="341.2" y="739.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (9 samples, 5.26%)</title><rect x="348.1" y="819.0" width="62.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="351.1" y="830.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (9 samples, 5.26%)</title><rect x="348.1" y="803.0" width="62.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.1" y="814.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.75%)</title><rect x="361.9" y="787.0" width="20.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.9" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.17%)</title><rect x="368.8" y="771.0" width="13.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.8" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.58%)</title><rect x="375.7" y="755.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.7" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.58%)</title><rect x="375.7" y="739.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="378.7" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.58%)</title><rect x="375.7" y="723.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.58%)</title><rect x="382.6" y="787.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.58%)</title><rect x="382.6" y="771.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="385.6" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.75%)</title><rect x="389.5" y="787.0" width="20.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.5" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.75%)</title><rect x="389.5" y="771.0" width="20.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="392.5" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.58%)</title><rect x="389.5" y="755.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="392.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.58%)</title><rect x="389.5" y="739.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="392.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.58%)</title><rect x="389.5" y="723.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="392.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.58%)</title><rect x="389.5" y="707.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.5" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.17%)</title><rect x="396.4" y="755.0" width="13.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.17%)</title><rect x="396.4" y="739.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="399.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.17%)</title><rect x="396.4" y="723.0" width="13.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="399.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.58%)</title><rect x="396.4" y="707.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="399.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.58%)</title><rect x="403.3" y="707.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="406.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (1 samples, 0.58%)</title><rect x="410.2" y="819.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.58%)</title><rect x="410.2" y="803.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.2" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.58%)</title><rect x="410.2" y="787.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="413.2" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.58%)</title><rect x="410.2" y="771.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="413.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/1913766526.get$Lambda (1 samples, 0.58%)</title><rect x="410.2" y="755.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="413.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/1913766526.&lt;init&gt; (1 samples, 0.58%)</title><rect x="410.2" y="739.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="413.2" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.58%)</title><rect x="410.2" y="723.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="413.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.17%)</title><rect x="417.1" y="819.0" width="13.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="420.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.17%)</title><rect x="417.1" y="803.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="420.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.58%)</title><rect x="424.0" y="787.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/1649946075.accept (1 samples, 0.58%)</title><rect x="424.0" y="771.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="427.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$0 (1 samples, 0.58%)</title><rect x="424.0" y="755.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="427.0" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.58%)</title><rect x="424.0" y="739.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="427.0" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.58%)</title><rect x="424.0" y="723.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.0" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.58%)</title><rect x="424.0" y="707.0" width="6.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="427.0" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.58%)</title><rect x="424.0" y="691.0" width="6.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="427.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.58%)</title><rect x="430.9" y="851.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="433.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.58%)</title><rect x="430.9" y="835.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.9" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.58%)</title><rect x="430.9" y="819.0" width="6.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="433.9" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.58%)</title><rect x="430.9" y="803.0" width="6.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="433.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.17%)</title><rect x="437.8" y="851.0" width="13.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="440.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.17%)</title><rect x="437.8" y="835.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.17%)</title><rect x="437.8" y="819.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="440.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1865410632.accept (2 samples, 1.17%)</title><rect x="437.8" y="803.0" width="13.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$1 (2 samples, 1.17%)</title><rect x="437.8" y="787.0" width="13.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="440.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/830323812.complete (2 samples, 1.17%)</title><rect x="437.8" y="771.0" width="13.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (2 samples, 1.17%)</title><rect x="437.8" y="755.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 1.17%)</title><rect x="437.8" y="739.0" width="13.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.8" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 1.17%)</title><rect x="437.8" y="723.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.8" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 1.17%)</title><rect x="437.8" y="707.0" width="13.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.8" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 1.17%)</title><rect x="437.8" y="691.0" width="13.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="440.8" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 1.17%)</title><rect x="437.8" y="675.0" width="13.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="440.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.58%)</title><rect x="451.6" y="899.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="454.6" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.58%)</title><rect x="451.6" y="883.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.6" y="894.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.58%)</title><rect x="451.6" y="867.0" width="6.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="454.6" y="878.0"></text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.58%)</title><rect x="451.6" y="851.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="454.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.58%)</title><rect x="458.5" y="899.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="461.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.58%)</title><rect x="458.5" y="883.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="461.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.58%)</title><rect x="465.4" y="899.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="468.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.58%)</title><rect x="465.4" y="883.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="468.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.58%)</title><rect x="465.4" y="867.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="468.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 5.85%)</title><rect x="472.3" y="899.0" width="69.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="475.3" y="910.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (10 samples, 5.85%)</title><rect x="472.3" y="883.0" width="69.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="475.3" y="894.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (9 samples, 5.26%)</title><rect x="472.3" y="867.0" width="62.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="475.3" y="878.0">java/u..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.17%)</title><rect x="472.3" y="851.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="475.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 4.09%)</title><rect x="486.1" y="851.0" width="48.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="489.1" y="862.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (7 samples, 4.09%)</title><rect x="486.1" y="835.0" width="48.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="489.1" y="846.0">sun/..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.58%)</title><rect x="493.0" y="819.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="496.0" y="830.0"></text>
</g>
<g>
<title>Unsafe_Park (5 samples, 2.92%)</title><rect x="499.9" y="819.0" width="34.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="502.9" y="830.0">Un..</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.58%)</title><rect x="499.9" y="803.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="502.9" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.17%)</title><rect x="506.8" y="803.0" width="13.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="509.8" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 1.17%)</title><rect x="520.6" y="803.0" width="13.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="523.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.58%)</title><rect x="534.4" y="867.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.58%)</title><rect x="534.4" y="851.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="537.4" y="862.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.58%)</title><rect x="541.3" y="947.0" width="6.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="544.3" y="958.0"></text>
</g>
<g>
<title>start_thread (93 samples, 54.39%)</title><rect x="548.2" y="947.0" width="641.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="551.2" y="958.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (93 samples, 54.39%)</title><rect x="548.2" y="931.0" width="641.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="551.2" y="942.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 7.02%)</title><rect x="548.2" y="915.0" width="82.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="551.2" y="926.0">GangWorke..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 1.17%)</title><rect x="548.2" y="899.0" width="13.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="551.2" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 1.17%)</title><rect x="548.2" y="883.0" width="13.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="551.2" y="894.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.17%)</title><rect x="548.2" y="867.0" width="13.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="551.2" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 5.85%)</title><rect x="562.0" y="899.0" width="69.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="565.0" y="910.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 5.85%)</title><rect x="562.0" y="883.0" width="69.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="565.0" y="894.0">G1ParEv..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 3.51%)</title><rect x="562.0" y="867.0" width="41.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="565.0" y="878.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.17%)</title><rect x="582.7" y="851.0" width="13.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="585.7" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.58%)</title><rect x="589.6" y="835.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="592.6" y="846.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.58%)</title><rect x="596.5" y="851.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="599.5" y="862.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.75%)</title><rect x="603.5" y="867.0" width="20.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="606.5" y="878.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.58%)</title><rect x="624.2" y="867.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="627.2" y="878.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (81 samples, 47.37%)</title><rect x="631.1" y="915.0" width="558.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="634.1" y="926.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (81 samples, 47.37%)</title><rect x="631.1" y="899.0" width="558.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="634.1" y="910.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (81 samples, 47.37%)</title><rect x="631.1" y="883.0" width="558.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="634.1" y="894.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (77 samples, 45.03%)</title><rect x="631.1" y="867.0" width="531.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="634.1" y="878.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (77 samples, 45.03%)</title><rect x="631.1" y="851.0" width="531.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="634.1" y="862.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.58%)</title><rect x="631.1" y="835.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="634.1" y="846.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.58%)</title><rect x="631.1" y="819.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="634.1" y="830.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.58%)</title><rect x="631.1" y="803.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="634.1" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.58%)</title><rect x="631.1" y="787.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="634.1" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.58%)</title><rect x="631.1" y="771.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="634.1" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="631.1" y="755.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="634.1" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="631.1" y="739.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="634.1" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.58%)</title><rect x="631.1" y="723.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="634.1" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.58%)</title><rect x="631.1" y="707.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="634.1" y="718.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (43 samples, 25.15%)</title><rect x="638.0" y="835.0" width="296.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="641.0" y="846.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.75%)</title><rect x="638.0" y="819.0" width="20.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="641.0" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.17%)</title><rect x="638.0" y="803.0" width="13.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="641.0" y="814.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.58%)</title><rect x="644.9" y="787.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="647.9" y="798.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.58%)</title><rect x="651.8" y="803.0" width="6.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="654.8" y="814.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.58%)</title><rect x="658.7" y="819.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="661.7" y="830.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.58%)</title><rect x="658.7" y="803.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="661.7" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.58%)</title><rect x="658.7" y="787.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="661.7" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.58%)</title><rect x="658.7" y="771.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="661.7" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 3.51%)</title><rect x="665.6" y="819.0" width="41.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="668.6" y="830.0">Mat..</text>
</g>
<g>
<title>CmpINode::Opcode() const (1 samples, 0.58%)</title><rect x="665.6" y="803.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="668.6" y="814.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.34%)</title><rect x="672.5" y="803.0" width="27.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="675.5" y="814.0">M..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.17%)</title><rect x="686.3" y="787.0" width="13.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="689.3" y="798.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.58%)</title><rect x="693.2" y="771.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="696.2" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.58%)</title><rect x="700.1" y="803.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="703.1" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.58%)</title><rect x="707.0" y="819.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="710.0" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.58%)</title><rect x="707.0" y="803.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="710.0" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.58%)</title><rect x="707.0" y="787.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="710.0" y="798.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.58%)</title><rect x="707.0" y="771.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="710.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 18.13%)</title><rect x="713.9" y="819.0" width="213.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="716.9" y="830.0">PhaseChaitin::Register_Alloc..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.58%)</title><rect x="720.8" y="803.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="723.8" y="814.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.58%)</title><rect x="727.7" y="803.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="730.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.17%)</title><rect x="734.6" y="803.0" width="13.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="737.6" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="734.6" y="787.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="737.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.58%)</title><rect x="741.5" y="787.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="744.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.58%)</title><rect x="748.4" y="803.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="751.4" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.58%)</title><rect x="748.4" y="787.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="751.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.34%)</title><rect x="755.3" y="803.0" width="27.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="758.3" y="814.0">P..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.58%)</title><rect x="776.0" y="787.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="779.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.58%)</title><rect x="776.0" y="771.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="779.0" y="782.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.58%)</title><rect x="776.0" y="755.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="779.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 4.09%)</title><rect x="782.9" y="803.0" width="48.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="785.9" y="814.0">Phas..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.58%)</title><rect x="803.6" y="787.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="806.6" y="798.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.58%)</title><rect x="810.5" y="787.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="813.5" y="798.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.58%)</title><rect x="810.5" y="771.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="813.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.58%)</title><rect x="817.4" y="787.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="820.4" y="798.0"></text>
</g>
<g>
<title>testN_regNode::rule() const (1 samples, 0.58%)</title><rect x="824.3" y="787.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="827.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 1.17%)</title><rect x="831.2" y="803.0" width="13.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="834.2" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.58%)</title><rect x="838.1" y="787.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="841.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.75%)</title><rect x="845.0" y="803.0" width="20.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="848.0" y="814.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 1.17%)</title><rect x="851.9" y="787.0" width="13.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.58%)</title><rect x="865.7" y="803.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="868.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.75%)</title><rect x="872.6" y="803.0" width="20.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="875.6" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.58%)</title><rect x="886.4" y="787.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.4" y="798.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.58%)</title><rect x="893.3" y="803.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="896.3" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.58%)</title><rect x="893.3" y="787.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="896.3" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.58%)</title><rect x="893.3" y="771.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="896.3" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.58%)</title><rect x="900.2" y="803.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.2" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="900.2" y="787.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="903.2" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.17%)</title><rect x="907.1" y="803.0" width="13.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="910.1" y="814.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.58%)</title><rect x="914.0" y="787.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.0" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.58%)</title><rect x="920.9" y="803.0" width="6.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="923.9" y="814.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.58%)</title><rect x="927.8" y="819.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="930.8" y="830.0"></text>
</g>
<g>
<title>Compile::Optimize() (23 samples, 13.45%)</title><rect x="934.7" y="835.0" width="158.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="937.7" y="846.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.58%)</title><rect x="934.7" y="819.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="937.7" y="830.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.58%)</title><rect x="934.7" y="803.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="937.7" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.58%)</title><rect x="934.7" y="787.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="937.7" y="798.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.58%)</title><rect x="934.7" y="771.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="937.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.17%)</title><rect x="941.6" y="819.0" width="13.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.17%)</title><rect x="941.6" y="803.0" width="13.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="944.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.58%)</title><rect x="941.6" y="787.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="948.5" y="787.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="951.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.58%)</title><rect x="948.5" y="771.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="951.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::add_base(FieldNode*, PointsToNode*) [clone .isra.296] (1 samples, 0.58%)</title><rect x="948.5" y="755.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="951.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 7.60%)</title><rect x="955.4" y="819.0" width="89.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="958.4" y="830.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.58%)</title><rect x="955.4" y="803.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="958.4" y="814.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.58%)</title><rect x="955.4" y="787.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 4.09%)</title><rect x="962.3" y="803.0" width="48.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.3" y="814.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 2.92%)</title><rect x="976.1" y="787.0" width="34.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.1" y="798.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.58%)</title><rect x="983.0" y="771.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.0" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.17%)</title><rect x="989.9" y="771.0" width="13.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.58%)</title><rect x="996.8" y="755.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="999.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.58%)</title><rect x="1003.7" y="771.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1006.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.58%)</title><rect x="1010.6" y="803.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.6" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.17%)</title><rect x="1017.5" y="803.0" width="13.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1020.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.58%)</title><rect x="1024.4" y="787.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1027.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.58%)</title><rect x="1024.4" y="771.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1027.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.58%)</title><rect x="1031.3" y="803.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.3" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.58%)</title><rect x="1031.3" y="787.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.3" y="798.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1031.3" y="771.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1034.3" y="782.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.58%)</title><rect x="1031.3" y="755.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.3" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1031.3" y="739.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1034.3" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1031.3" y="723.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.3" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.58%)</title><rect x="1031.3" y="707.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.3" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="1031.3" y="691.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1034.3" y="702.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.58%)</title><rect x="1038.2" y="803.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.2" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 3.51%)</title><rect x="1045.1" y="819.0" width="41.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.1" y="830.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 3.51%)</title><rect x="1045.1" y="803.0" width="41.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1048.1" y="814.0">Pha..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 1.17%)</title><rect x="1045.1" y="787.0" width="13.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1048.1" y="798.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.58%)</title><rect x="1052.0" y="771.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.0" y="782.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 1.17%)</title><rect x="1058.9" y="787.0" width="13.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.9" y="798.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1072.7" y="787.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1075.7" y="798.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.58%)</title><rect x="1072.7" y="771.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1075.7" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1079.6" y="787.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1082.6" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.58%)</title><rect x="1086.5" y="819.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1089.5" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.58%)</title><rect x="1086.5" y="803.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.5" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.58%)</title><rect x="1086.5" y="787.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.5" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.58%)</title><rect x="1086.5" y="771.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.5" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.58%)</title><rect x="1086.5" y="755.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1089.5" y="766.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.58%)</title><rect x="1086.5" y="739.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1089.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 5.26%)</title><rect x="1093.4" y="835.0" width="62.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.4" y="846.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 5.26%)</title><rect x="1093.4" y="819.0" width="62.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.4" y="830.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 5.26%)</title><rect x="1093.4" y="803.0" width="62.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.4" y="814.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 5.26%)</title><rect x="1093.4" y="787.0" width="62.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.4" y="798.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 5.26%)</title><rect x="1093.4" y="771.0" width="62.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.4" y="782.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 5.26%)</title><rect x="1093.4" y="755.0" width="62.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1096.4" y="766.0">Parse:..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1093.4" y="739.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.4" y="750.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.58%)</title><rect x="1093.4" y="723.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.4" y="734.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.58%)</title><rect x="1093.4" y="707.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.4" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 4.09%)</title><rect x="1100.3" y="739.0" width="48.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.3" y="750.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 4.09%)</title><rect x="1100.3" y="723.0" width="48.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.3" y="734.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.51%)</title><rect x="1100.3" y="707.0" width="41.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.3" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.51%)</title><rect x="1100.3" y="691.0" width="41.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.3" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.51%)</title><rect x="1100.3" y="675.0" width="41.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.3" y="686.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.51%)</title><rect x="1100.3" y="659.0" width="41.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.3" y="670.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.92%)</title><rect x="1100.3" y="643.0" width="34.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.3" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.92%)</title><rect x="1100.3" y="627.0" width="34.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.3" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.92%)</title><rect x="1100.3" y="611.0" width="34.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.3" y="622.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.92%)</title><rect x="1100.3" y="595.0" width="34.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.3" y="606.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.92%)</title><rect x="1100.3" y="579.0" width="34.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.3" y="590.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.34%)</title><rect x="1100.3" y="563.0" width="27.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.3" y="574.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.34%)</title><rect x="1100.3" y="547.0" width="27.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.3" y="558.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.34%)</title><rect x="1100.3" y="531.0" width="27.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.3" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.34%)</title><rect x="1100.3" y="515.0" width="27.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.3" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.34%)</title><rect x="1100.3" y="499.0" width="27.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.3" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.34%)</title><rect x="1100.3" y="483.0" width="27.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.3" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.34%)</title><rect x="1100.3" y="467.0" width="27.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.3" y="478.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.75%)</title><rect x="1100.3" y="451.0" width="20.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.75%)</title><rect x="1100.3" y="435.0" width="20.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.75%)</title><rect x="1100.3" y="419.0" width="20.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.17%)</title><rect x="1100.3" y="403.0" width="13.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.17%)</title><rect x="1100.3" y="387.0" width="13.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.17%)</title><rect x="1100.3" y="371.0" width="13.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.3" y="382.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.58%)</title><rect x="1100.3" y="355.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.3" y="366.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.58%)</title><rect x="1100.3" y="339.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.3" y="350.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.58%)</title><rect x="1100.3" y="323.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.3" y="334.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.58%)</title><rect x="1100.3" y="307.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.3" y="318.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.58%)</title><rect x="1100.3" y="291.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.3" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1107.2" y="355.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.2" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1107.2" y="339.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1107.2" y="323.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1107.2" y="307.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1107.2" y="291.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.2" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.58%)</title><rect x="1107.2" y="275.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.2" y="286.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.58%)</title><rect x="1107.2" y="259.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.2" y="270.0"></text>
</g>
<g>
<title>URShiftINode::Opcode() const (1 samples, 0.58%)</title><rect x="1107.2" y="243.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.2" y="254.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.58%)</title><rect x="1114.1" y="403.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.1" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1121.0" y="451.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1121.0" y="435.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1121.0" y="419.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.0" y="430.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.58%)</title><rect x="1121.0" y="403.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.0" y="414.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="1121.0" y="387.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.0" y="398.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="1121.0" y="371.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.0" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1121.0" y="355.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.0" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1121.0" y="339.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.0" y="350.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1121.0" y="323.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.0" y="334.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.58%)</title><rect x="1121.0" y="307.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.0" y="318.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.58%)</title><rect x="1121.0" y="291.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.0" y="302.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.58%)</title><rect x="1121.0" y="275.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.0" y="286.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.58%)</title><rect x="1121.0" y="259.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.0" y="270.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.58%)</title><rect x="1121.0" y="243.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.58%)</title><rect x="1127.9" y="563.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.58%)</title><rect x="1127.9" y="547.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.9" y="558.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.58%)</title><rect x="1127.9" y="531.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.9" y="542.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.58%)</title><rect x="1127.9" y="515.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.9" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1134.8" y="643.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1134.8" y="627.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1134.8" y="611.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1134.8" y="595.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1134.8" y="579.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1134.8" y="563.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1134.8" y="547.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.8" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1134.8" y="531.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1134.8" y="515.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1134.8" y="499.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1134.8" y="483.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1134.8" y="467.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1134.8" y="451.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1134.8" y="435.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1134.8" y="419.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1134.8" y="403.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1134.8" y="387.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1134.8" y="371.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1134.8" y="355.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1134.8" y="339.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1134.8" y="323.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1134.8" y="307.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1134.8" y="291.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1134.8" y="275.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1134.8" y="259.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1134.8" y="243.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1134.8" y="227.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1134.8" y="211.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1134.8" y="195.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1134.8" y="179.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1134.8" y="163.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.58%)</title><rect x="1134.8" y="147.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.58%)</title><rect x="1134.8" y="131.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.8" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.58%)</title><rect x="1134.8" y="115.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.8" y="126.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.58%)</title><rect x="1134.8" y="99.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.8" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.58%)</title><rect x="1134.8" y="83.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.8" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.58%)</title><rect x="1134.8" y="67.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.8" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.58%)</title><rect x="1134.8" y="51.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.8" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.58%)</title><rect x="1134.8" y="35.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.58%)</title><rect x="1141.7" y="707.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.7" y="718.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.58%)</title><rect x="1141.7" y="691.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.7" y="702.0"></text>
</g>
<g>
<title>Type::xmeet(Type const*) const (1 samples, 0.58%)</title><rect x="1141.7" y="675.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.7" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1148.6" y="739.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1148.6" y="723.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1148.6" y="707.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1148.6" y="691.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1148.6" y="675.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1148.6" y="659.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1148.6" y="643.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1148.6" y="627.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1148.6" y="611.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1148.6" y="595.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1148.6" y="579.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1148.6" y="563.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1148.6" y="547.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1148.6" y="531.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1148.6" y="515.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1148.6" y="499.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1148.6" y="483.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1148.6" y="467.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.58%)</title><rect x="1148.6" y="451.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.58%)</title><rect x="1148.6" y="435.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.6" y="446.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.58%)</title><rect x="1148.6" y="419.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.6" y="430.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.58%)</title><rect x="1148.6" y="403.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.6" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.58%)</title><rect x="1148.6" y="387.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.6" y="398.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1148.6" y="371.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.6" y="382.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.58%)</title><rect x="1148.6" y="355.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.6" y="366.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.58%)</title><rect x="1148.6" y="339.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.6" y="350.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.58%)</title><rect x="1148.6" y="323.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.6" y="334.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.58%)</title><rect x="1148.6" y="307.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.6" y="318.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.58%)</title><rect x="1148.6" y="291.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.6" y="302.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.58%)</title><rect x="1148.6" y="275.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.6" y="286.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.58%)</title><rect x="1155.5" y="835.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.5" y="846.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.58%)</title><rect x="1155.5" y="819.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.5" y="830.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.75%)</title><rect x="1162.4" y="867.0" width="20.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.4" y="878.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.75%)</title><rect x="1162.4" y="851.0" width="20.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.4" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.75%)</title><rect x="1162.4" y="835.0" width="20.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.4" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.75%)</title><rect x="1162.4" y="819.0" width="20.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.4" y="830.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.17%)</title><rect x="1162.4" y="803.0" width="13.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.4" y="814.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.58%)</title><rect x="1162.4" y="787.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.4" y="798.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.58%)</title><rect x="1162.4" y="771.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.4" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.58%)</title><rect x="1162.4" y="755.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.4" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.58%)</title><rect x="1162.4" y="739.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.4" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.58%)</title><rect x="1162.4" y="723.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.4" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1162.4" y="707.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.4" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.4" y="691.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.4" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.4" y="675.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.4" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.58%)</title><rect x="1162.4" y="659.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.4" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.58%)</title><rect x="1162.4" y="643.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.4" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1162.4" y="627.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.4" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.58%)</title><rect x="1162.4" y="611.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.4" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1162.4" y="595.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.4" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1162.4" y="579.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.4" y="590.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.58%)</title><rect x="1169.3" y="787.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.3" y="798.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.58%)</title><rect x="1169.3" y="771.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.3" y="782.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (1 samples, 0.58%)</title><rect x="1169.3" y="755.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.3" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.58%)</title><rect x="1176.2" y="803.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.2" y="814.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.58%)</title><rect x="1176.2" y="787.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.2" y="798.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.58%)</title><rect x="1176.2" y="771.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.2" y="782.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.58%)</title><rect x="1183.1" y="867.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="878.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.58%)</title><rect x="1183.1" y="851.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.1" y="862.0"></text>
</g>
</g>
</svg>
