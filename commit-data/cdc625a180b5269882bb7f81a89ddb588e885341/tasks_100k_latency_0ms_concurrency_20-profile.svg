<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (153 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 16.34%)</title><rect x="10.0" y="899.0" width="192.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="910.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (25 samples, 16.34%)</title><rect x="10.0" y="883.0" width="192.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="894.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 1.31%)</title><rect x="10.0" y="867.0" width="15.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 1.31%)</title><rect x="10.0" y="851.0" width="15.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/991009718.accept (2 samples, 1.31%)</title><rect x="10.0" y="835.0" width="15.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 1.31%)</title><rect x="10.0" y="819.0" width="15.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 1.31%)</title><rect x="10.0" y="803.0" width="15.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 1.31%)</title><rect x="10.0" y="787.0" width="15.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 11.11%)</title><rect x="25.4" y="867.0" width="131.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.4" y="878.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1887569456.accept (16 samples, 10.46%)</title><rect x="25.4" y="851.0" width="123.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.4" y="862.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (16 samples, 10.46%)</title><rect x="25.4" y="835.0" width="123.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.4" y="846.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 8.50%)</title><rect x="25.4" y="819.0" width="100.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.4" y="830.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 8.50%)</title><rect x="25.4" y="803.0" width="100.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.4" y="814.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 8.50%)</title><rect x="25.4" y="787.0" width="100.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.4" y="798.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 8.50%)</title><rect x="25.4" y="771.0" width="100.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.4" y="782.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 8.50%)</title><rect x="25.4" y="755.0" width="100.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.4" y="766.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 8.50%)</title><rect x="25.4" y="739.0" width="100.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.4" y="750.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 5.88%)</title><rect x="48.6" y="723.0" width="69.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.6" y="734.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.31%)</title><rect x="48.6" y="707.0" width="15.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.31%)</title><rect x="48.6" y="691.0" width="15.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.31%)</title><rect x="48.6" y="675.0" width="15.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.31%)</title><rect x="64.0" y="707.0" width="15.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 1.31%)</title><rect x="64.0" y="691.0" width="15.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.65%)</title><rect x="71.7" y="675.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 3.27%)</title><rect x="79.4" y="707.0" width="38.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.4" y="718.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 3.27%)</title><rect x="79.4" y="691.0" width="38.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.4" y="702.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 3.27%)</title><rect x="79.4" y="675.0" width="38.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.4" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 3.27%)</title><rect x="79.4" y="659.0" width="38.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.4" y="670.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 3.27%)</title><rect x="79.4" y="643.0" width="38.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.4" y="654.0">sun..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.65%)</title><rect x="79.4" y="627.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="82.4" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 2.61%)</title><rect x="87.1" y="627.0" width="30.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="90.1" y="638.0">Un..</text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 1.96%)</title><rect x="87.1" y="611.0" width="23.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="90.1" y="622.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.65%)</title><rect x="110.3" y="611.0" width="7.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="113.3" y="622.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.65%)</title><rect x="118.0" y="723.0" width="7.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="121.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.65%)</title><rect x="125.7" y="819.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="128.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.65%)</title><rect x="125.7" y="803.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="128.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 1.31%)</title><rect x="133.4" y="819.0" width="15.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.4" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.31%)</title><rect x="133.4" y="803.0" width="15.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="136.4" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.65%)</title><rect x="141.1" y="787.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.1" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.65%)</title><rect x="141.1" y="771.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.1" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.65%)</title><rect x="141.1" y="755.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.1" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.65%)</title><rect x="141.1" y="739.0" width="7.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="144.1" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.65%)</title><rect x="148.8" y="851.0" width="7.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="151.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 3.92%)</title><rect x="156.5" y="867.0" width="46.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="159.5" y="878.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 3.92%)</title><rect x="156.5" y="851.0" width="46.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.5" y="862.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.61%)</title><rect x="156.5" y="835.0" width="30.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.5" y="846.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.61%)</title><rect x="156.5" y="819.0" width="30.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.5" y="830.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.61%)</title><rect x="156.5" y="803.0" width="30.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.5" y="814.0">or..</text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.65%)</title><rect x="156.5" y="787.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="159.5" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.65%)</title><rect x="156.5" y="771.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="159.5" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.65%)</title><rect x="156.5" y="755.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="159.5" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.65%)</title><rect x="156.5" y="739.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="159.5" y="750.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.65%)</title><rect x="156.5" y="723.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="159.5" y="734.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.65%)</title><rect x="156.5" y="707.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="159.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.96%)</title><rect x="164.2" y="787.0" width="23.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="167.2" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.96%)</title><rect x="164.2" y="771.0" width="23.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.2" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.65%)</title><rect x="164.2" y="755.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 1.31%)</title><rect x="172.0" y="755.0" width="15.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 1.31%)</title><rect x="172.0" y="739.0" width="15.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.65%)</title><rect x="172.0" y="723.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="175.0" y="734.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.65%)</title><rect x="172.0" y="707.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.65%)</title><rect x="179.7" y="723.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.7" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.65%)</title><rect x="179.7" y="707.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="182.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.31%)</title><rect x="187.4" y="835.0" width="15.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.31%)</title><rect x="187.4" y="819.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="190.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.31%)</title><rect x="187.4" y="803.0" width="15.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.65%)</title><rect x="187.4" y="787.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.65%)</title><rect x="195.1" y="787.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="198.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.65%)</title><rect x="195.1" y="771.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.65%)</title><rect x="195.1" y="755.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="198.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.65%)</title><rect x="195.1" y="739.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="198.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (62 samples, 40.52%)</title><rect x="202.8" y="899.0" width="478.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.8" y="910.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (62 samples, 40.52%)</title><rect x="202.8" y="883.0" width="478.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.8" y="894.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (62 samples, 40.52%)</title><rect x="202.8" y="867.0" width="478.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.8" y="878.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/771225357.run (40 samples, 26.14%)</title><rect x="210.5" y="851.0" width="308.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.5" y="862.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (40 samples, 26.14%)</title><rect x="210.5" y="835.0" width="308.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.5" y="846.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (40 samples, 26.14%)</title><rect x="210.5" y="819.0" width="308.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.5" y="830.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (36 samples, 23.53%)</title><rect x="210.5" y="803.0" width="277.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.5" y="814.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.65%)</title><rect x="210.5" y="787.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="213.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/RateLimiter.acquire (1 samples, 0.65%)</title><rect x="210.5" y="771.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DynamicRateLimiter.acquire (1 samples, 0.65%)</title><rect x="210.5" y="755.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (10 samples, 6.54%)</title><rect x="218.2" y="787.0" width="77.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.2" y="798.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 6.54%)</title><rect x="218.2" y="771.0" width="77.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.2" y="782.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 6.54%)</title><rect x="218.2" y="755.0" width="77.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.2" y="766.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.54%)</title><rect x="218.2" y="739.0" width="77.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="221.2" y="750.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.54%)</title><rect x="218.2" y="723.0" width="77.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.2" y="734.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 6.54%)</title><rect x="218.2" y="707.0" width="77.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.2" y="718.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.31%)</title><rect x="218.2" y="691.0" width="15.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.31%)</title><rect x="218.2" y="675.0" width="15.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.31%)</title><rect x="218.2" y="659.0" width="15.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.65%)</title><rect x="225.9" y="643.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.65%)</title><rect x="225.9" y="627.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.65%)</title><rect x="225.9" y="611.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 5.23%)</title><rect x="233.7" y="691.0" width="61.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.7" y="702.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.65%)</title><rect x="233.7" y="675.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.65%)</title><rect x="233.7" y="659.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.65%)</title><rect x="233.7" y="643.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.65%)</title><rect x="233.7" y="627.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.65%)</title><rect x="233.7" y="611.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 4.58%)</title><rect x="241.4" y="675.0" width="54.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.4" y="686.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.31%)</title><rect x="241.4" y="659.0" width="15.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.65%)</title><rect x="241.4" y="643.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.65%)</title><rect x="241.4" y="627.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.65%)</title><rect x="241.4" y="611.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.65%)</title><rect x="249.1" y="643.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 3.27%)</title><rect x="256.8" y="659.0" width="38.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.8" y="670.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 3.27%)</title><rect x="256.8" y="643.0" width="38.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="259.8" y="654.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 3.27%)</title><rect x="256.8" y="627.0" width="38.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="259.8" y="638.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.31%)</title><rect x="264.5" y="611.0" width="15.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.65%)</title><rect x="264.5" y="595.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.65%)</title><rect x="272.2" y="595.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.65%)</title><rect x="272.2" y="579.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.65%)</title><rect x="272.2" y="563.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.65%)</title><rect x="279.9" y="611.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.65%)</title><rect x="279.9" y="595.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.65%)</title><rect x="279.9" y="579.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.65%)</title><rect x="279.9" y="563.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="282.9" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.65%)</title><rect x="279.9" y="547.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.65%)</title><rect x="287.6" y="611.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (25 samples, 16.34%)</title><rect x="295.4" y="787.0" width="192.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.4" y="798.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 3.27%)</title><rect x="295.4" y="771.0" width="38.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.4" y="782.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.61%)</title><rect x="303.1" y="755.0" width="30.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.1" y="766.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.61%)</title><rect x="303.1" y="739.0" width="30.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.1" y="750.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.65%)</title><rect x="310.8" y="723.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.65%)</title><rect x="310.8" y="707.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.65%)</title><rect x="310.8" y="691.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.65%)</title><rect x="310.8" y="675.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.8" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.31%)</title><rect x="318.5" y="723.0" width="15.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.65%)</title><rect x="326.2" y="707.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="329.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.65%)</title><rect x="326.2" y="691.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="329.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 9.15%)</title><rect x="333.9" y="771.0" width="108.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.9" y="782.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 9.15%)</title><rect x="333.9" y="755.0" width="108.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.9" y="766.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.65%)</title><rect x="349.3" y="739.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="352.3" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.65%)</title><rect x="349.3" y="723.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="352.3" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.65%)</title><rect x="349.3" y="707.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="352.3" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.65%)</title><rect x="349.3" y="691.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.3" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.65%)</title><rect x="349.3" y="675.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="352.3" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.65%)</title><rect x="349.3" y="659.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="352.3" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.65%)</title><rect x="349.3" y="643.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="352.3" y="654.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.65%)</title><rect x="349.3" y="627.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="352.3" y="638.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.65%)</title><rect x="357.1" y="739.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="360.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.65%)</title><rect x="357.1" y="723.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="360.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.65%)</title><rect x="357.1" y="707.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.1" y="718.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 6.54%)</title><rect x="364.8" y="739.0" width="77.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.8" y="750.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 6.54%)</title><rect x="364.8" y="723.0" width="77.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="367.8" y="734.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.65%)</title><rect x="364.8" y="707.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="367.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.65%)</title><rect x="364.8" y="691.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="367.8" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.65%)</title><rect x="364.8" y="675.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.8" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.65%)</title><rect x="364.8" y="659.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="367.8" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 5.88%)</title><rect x="372.5" y="707.0" width="69.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="375.5" y="718.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 4.58%)</title><rect x="387.9" y="691.0" width="54.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.9" y="702.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 3.27%)</title><rect x="403.3" y="675.0" width="38.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.3" y="686.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 3.27%)</title><rect x="441.9" y="771.0" width="38.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="444.9" y="782.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.61%)</title><rect x="449.6" y="755.0" width="30.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.6" y="766.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/593819147.process (2 samples, 1.31%)</title><rect x="449.6" y="739.0" width="15.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.31%)</title><rect x="449.6" y="723.0" width="15.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.31%)</title><rect x="449.6" y="707.0" width="15.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.31%)</title><rect x="449.6" y="691.0" width="15.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="452.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 1.31%)</title><rect x="449.6" y="675.0" width="15.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="452.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 1.31%)</title><rect x="449.6" y="659.0" width="15.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="452.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.65%)</title><rect x="449.6" y="643.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="452.6" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.65%)</title><rect x="457.3" y="643.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="460.3" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.65%)</title><rect x="457.3" y="627.0" width="7.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="460.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.65%)</title><rect x="465.0" y="739.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="468.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.65%)</title><rect x="465.0" y="723.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="468.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.65%)</title><rect x="472.7" y="739.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.65%)</title><rect x="480.5" y="771.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.65%)</title><rect x="480.5" y="755.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="483.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 2.61%)</title><rect x="488.2" y="803.0" width="30.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="491.2" y="814.0">co..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.65%)</title><rect x="488.2" y="787.0" width="7.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="491.2" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.65%)</title><rect x="488.2" y="771.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="491.2" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.65%)</title><rect x="495.9" y="787.0" width="7.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="498.9" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.31%)</title><rect x="503.6" y="787.0" width="15.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="506.6" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.65%)</title><rect x="511.3" y="771.0" width="7.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="514.3" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.65%)</title><rect x="519.0" y="851.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="522.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.65%)</title><rect x="526.7" y="851.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.65%)</title><rect x="526.7" y="835.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="529.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.65%)</title><rect x="534.4" y="851.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="537.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.65%)</title><rect x="534.4" y="835.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.65%)</title><rect x="534.4" y="819.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (17 samples, 11.11%)</title><rect x="542.2" y="851.0" width="131.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="545.2" y="862.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 10.46%)</title><rect x="549.9" y="835.0" width="123.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="552.9" y="846.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 9.15%)</title><rect x="549.9" y="819.0" width="107.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="552.9" y="830.0">java/util/con..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 1.96%)</title><rect x="557.6" y="803.0" width="23.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="560.6" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 6.54%)</title><rect x="580.7" y="803.0" width="77.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="583.7" y="814.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (10 samples, 6.54%)</title><rect x="580.7" y="787.0" width="77.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="583.7" y="798.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 6.54%)</title><rect x="580.7" y="771.0" width="77.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="583.7" y="782.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 1.31%)</title><rect x="588.4" y="755.0" width="15.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="591.4" y="766.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 3.27%)</title><rect x="603.9" y="755.0" width="38.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="606.9" y="766.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.65%)</title><rect x="642.4" y="755.0" width="7.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="645.4" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.65%)</title><rect x="650.1" y="755.0" width="7.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="653.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.31%)</title><rect x="657.8" y="819.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.31%)</title><rect x="657.8" y="803.0" width="15.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="660.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.31%)</title><rect x="657.8" y="787.0" width="15.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.31%)</title><rect x="657.8" y="771.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.8" y="782.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.65%)</title><rect x="673.3" y="851.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="676.3" y="862.0"></text>
</g>
<g>
<title>start_thread (66 samples, 43.14%)</title><rect x="681.0" y="899.0" width="509.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="684.0" y="910.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (66 samples, 43.14%)</title><rect x="681.0" y="883.0" width="509.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="684.0" y="894.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 5.23%)</title><rect x="681.0" y="867.0" width="61.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="684.0" y="878.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 5.23%)</title><rect x="681.0" y="851.0" width="61.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="684.0" y="862.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 3.92%)</title><rect x="681.0" y="835.0" width="46.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="684.0" y="846.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.31%)</title><rect x="681.0" y="819.0" width="15.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="684.0" y="830.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.65%)</title><rect x="688.7" y="803.0" width="7.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="691.7" y="814.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 2.61%)</title><rect x="696.4" y="819.0" width="30.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="699.4" y="830.0">Ge..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.31%)</title><rect x="727.3" y="835.0" width="15.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="730.3" y="846.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.65%)</title><rect x="727.3" y="819.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="730.3" y="830.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.65%)</title><rect x="727.3" y="803.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="730.3" y="814.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.65%)</title><rect x="727.3" y="787.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="730.3" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.65%)</title><rect x="735.0" y="819.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="738.0" y="830.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.65%)</title><rect x="735.0" y="803.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="738.0" y="814.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.65%)</title><rect x="735.0" y="787.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="738.0" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.65%)</title><rect x="735.0" y="771.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="738.0" y="782.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (58 samples, 37.91%)</title><rect x="742.7" y="867.0" width="447.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="745.7" y="878.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (58 samples, 37.91%)</title><rect x="742.7" y="851.0" width="447.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="745.7" y="862.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (56 samples, 36.60%)</title><rect x="742.7" y="835.0" width="431.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.7" y="846.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (53 samples, 34.64%)</title><rect x="742.7" y="819.0" width="408.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.7" y="830.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (53 samples, 34.64%)</title><rect x="742.7" y="803.0" width="408.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="745.7" y="814.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bo..</text>
</g>
<g>
<title>Compile::Code_Gen() (28 samples, 18.30%)</title><rect x="742.7" y="787.0" width="215.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="745.7" y="798.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.65%)</title><rect x="742.7" y="771.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="745.7" y="782.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.65%)</title><rect x="750.4" y="771.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="753.4" y="782.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.65%)</title><rect x="750.4" y="755.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="753.4" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.65%)</title><rect x="758.1" y="771.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="761.1" y="782.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.65%)</title><rect x="758.1" y="755.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="761.1" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.65%)</title><rect x="758.1" y="739.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="761.1" y="750.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.65%)</title><rect x="758.1" y="723.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="761.1" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.96%)</title><rect x="765.8" y="771.0" width="23.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="768.8" y="782.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.65%)</title><rect x="765.8" y="755.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="768.8" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.31%)</title><rect x="773.5" y="755.0" width="15.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="776.5" y="766.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.65%)</title><rect x="781.2" y="739.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="784.2" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.65%)</title><rect x="781.2" y="723.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="784.2" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.65%)</title><rect x="781.2" y="707.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="784.2" y="718.0"></text>
</g>
<g>
<title>decodeHeapOopNode::rule() const (1 samples, 0.65%)</title><rect x="781.2" y="691.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="784.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 13.73%)</title><rect x="789.0" y="771.0" width="161.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="792.0" y="782.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.31%)</title><rect x="789.0" y="755.0" width="15.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="792.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.65%)</title><rect x="804.4" y="755.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="807.4" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.65%)</title><rect x="804.4" y="739.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="807.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.96%)</title><rect x="812.1" y="755.0" width="23.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="815.1" y="766.0">P..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.65%)</title><rect x="827.5" y="739.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="830.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.65%)</title><rect x="827.5" y="723.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="830.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.96%)</title><rect x="835.2" y="755.0" width="23.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="838.2" y="766.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.65%)</title><rect x="842.9" y="739.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="845.9" y="750.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.65%)</title><rect x="850.7" y="739.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="853.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.65%)</title><rect x="858.4" y="755.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="861.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.31%)</title><rect x="866.1" y="755.0" width="15.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="869.1" y="766.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.65%)</title><rect x="873.8" y="739.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="876.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.31%)</title><rect x="881.5" y="755.0" width="15.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="884.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.65%)</title><rect x="889.2" y="739.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="892.2" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.65%)</title><rect x="896.9" y="755.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="899.9" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.65%)</title><rect x="896.9" y="739.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="899.9" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.65%)</title><rect x="896.9" y="723.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="899.9" y="734.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.65%)</title><rect x="896.9" y="707.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.9" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.65%)</title><rect x="896.9" y="691.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="899.9" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.65%)</title><rect x="904.6" y="755.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="907.6" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.61%)</title><rect x="912.4" y="755.0" width="30.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="915.4" y="766.0">Ph..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.31%)</title><rect x="927.8" y="739.0" width="15.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="930.8" y="750.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 1.31%)</title><rect x="927.8" y="723.0" width="15.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="930.8" y="734.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.65%)</title><rect x="943.2" y="755.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.2" y="766.0"></text>
</g>
<g>
<title>membar_acquireNode::ideal_Opcode() const (1 samples, 0.65%)</title><rect x="950.9" y="771.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="953.9" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 11.11%)</title><rect x="958.6" y="787.0" width="131.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="961.6" y="798.0">Compile::Optimiz..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.65%)</title><rect x="958.6" y="771.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.6" y="782.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.65%)</title><rect x="958.6" y="755.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="961.6" y="766.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.65%)</title><rect x="958.6" y="739.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.6" y="750.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.65%)</title><rect x="958.6" y="723.0" width="7.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="961.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.65%)</title><rect x="966.3" y="771.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="969.3" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.65%)</title><rect x="966.3" y="755.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="969.3" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.65%)</title><rect x="966.3" y="739.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="969.3" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.65%)</title><rect x="966.3" y="723.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="969.3" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.65%)</title><rect x="966.3" y="707.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="969.3" y="718.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.65%)</title><rect x="966.3" y="691.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="969.3" y="702.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.65%)</title><rect x="966.3" y="675.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.3" y="686.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.65%)</title><rect x="966.3" y="659.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="969.3" y="670.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.65%)</title><rect x="966.3" y="643.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="969.3" y="654.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.65%)</title><rect x="966.3" y="627.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="969.3" y="638.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.65%)</title><rect x="966.3" y="611.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="969.3" y="622.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.65%)</title><rect x="966.3" y="595.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="969.3" y="606.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.65%)</title><rect x="966.3" y="579.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="969.3" y="590.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.65%)</title><rect x="966.3" y="563.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="969.3" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.65%)</title><rect x="966.3" y="547.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="969.3" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.65%)</title><rect x="966.3" y="531.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="969.3" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.65%)</title><rect x="966.3" y="515.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="969.3" y="526.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.65%)</title><rect x="966.3" y="499.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="969.3" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="966.3" y="483.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="969.3" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="966.3" y="467.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="969.3" y="478.0"></text>
</g>
<g>
<title>constantPoolHandle::remove() (1 samples, 0.65%)</title><rect x="966.3" y="451.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="969.3" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 8.50%)</title><rect x="974.1" y="771.0" width="100.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="977.1" y="782.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.31%)</title><rect x="974.1" y="755.0" width="15.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="977.1" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.96%)</title><rect x="989.5" y="755.0" width="23.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.5" y="766.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.65%)</title><rect x="997.2" y="739.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.2" y="750.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.65%)</title><rect x="1004.9" y="739.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.61%)</title><rect x="1012.6" y="755.0" width="30.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.6" y="766.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.31%)</title><rect x="1028.0" y="739.0" width="15.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.31%)</title><rect x="1028.0" y="723.0" width="15.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1031.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.65%)</title><rect x="1035.8" y="707.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1038.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.65%)</title><rect x="1043.5" y="755.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.31%)</title><rect x="1051.2" y="755.0" width="15.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1054.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.65%)</title><rect x="1051.2" y="739.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.2" y="750.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.65%)</title><rect x="1051.2" y="723.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1054.2" y="734.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.65%)</title><rect x="1058.9" y="739.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.9" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.65%)</title><rect x="1066.6" y="755.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1069.6" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.65%)</title><rect x="1066.6" y="739.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1069.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.65%)</title><rect x="1074.3" y="771.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.3" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.65%)</title><rect x="1074.3" y="755.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.3" y="766.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.65%)</title><rect x="1074.3" y="739.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1077.3" y="750.0"></text>
</g>
<g>
<title>RegionNode::try_clean_mem_phi(PhaseGVN*) (1 samples, 0.65%)</title><rect x="1074.3" y="723.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.3" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.65%)</title><rect x="1082.0" y="771.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.0" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.65%)</title><rect x="1082.0" y="755.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.0" y="766.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.65%)</title><rect x="1082.0" y="739.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.0" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.65%)</title><rect x="1082.0" y="723.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.0" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.65%)</title><rect x="1082.0" y="707.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.0" y="718.0"></text>
</g>
<g>
<title>Compile::inline_boxing_calls(PhaseIterGVN&amp;) (1 samples, 0.65%)</title><rect x="1089.7" y="787.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 4.58%)</title><rect x="1097.5" y="787.0" width="53.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.5" y="798.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 4.58%)</title><rect x="1097.5" y="771.0" width="53.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.5" y="782.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 4.58%)</title><rect x="1097.5" y="755.0" width="53.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1100.5" y="766.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 4.58%)</title><rect x="1097.5" y="739.0" width="53.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.5" y="750.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 4.58%)</title><rect x="1097.5" y="723.0" width="53.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1100.5" y="734.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 4.58%)</title><rect x="1097.5" y="707.0" width="53.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1100.5" y="718.0">Parse..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (3 samples, 1.96%)</title><rect x="1097.5" y="691.0" width="23.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.5" y="702.0">C..</text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (3 samples, 1.96%)</title><rect x="1097.5" y="675.0" width="23.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.5" y="686.0">I..</text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.65%)</title><rect x="1097.5" y="659.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.5" y="670.0"></text>
</g>
<g>
<title>ciMethod::interpreter_call_site_count(int) (1 samples, 0.65%)</title><rect x="1097.5" y="643.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.5" y="654.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.65%)</title><rect x="1097.5" y="627.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1100.5" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 1.31%)</title><rect x="1105.2" y="659.0" width="15.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.2" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 1.31%)</title><rect x="1105.2" y="643.0" width="15.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.2" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 1.31%)</title><rect x="1105.2" y="627.0" width="15.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.2" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.31%)</title><rect x="1105.2" y="611.0" width="15.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.2" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.31%)</title><rect x="1105.2" y="595.0" width="15.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.2" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 1.31%)</title><rect x="1105.2" y="579.0" width="15.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.2" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 1.31%)</title><rect x="1105.2" y="563.0" width="15.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.2" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 1.31%)</title><rect x="1105.2" y="547.0" width="15.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.2" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 1.31%)</title><rect x="1105.2" y="531.0" width="15.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.2" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 1.31%)</title><rect x="1105.2" y="515.0" width="15.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.2" y="526.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.65%)</title><rect x="1105.2" y="499.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.2" y="510.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.65%)</title><rect x="1112.9" y="499.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.9" y="510.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.65%)</title><rect x="1112.9" y="483.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.9" y="494.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="1112.9" y="467.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.9" y="478.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.65%)</title><rect x="1112.9" y="451.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.9" y="462.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.65%)</title><rect x="1112.9" y="435.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.61%)</title><rect x="1120.6" y="691.0" width="30.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.6" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.61%)</title><rect x="1120.6" y="675.0" width="30.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.6" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.61%)</title><rect x="1120.6" y="659.0" width="30.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.6" y="670.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.61%)</title><rect x="1120.6" y="643.0" width="30.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.6" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.61%)</title><rect x="1120.6" y="627.0" width="30.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.6" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.96%)</title><rect x="1120.6" y="611.0" width="23.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.6" y="622.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.65%)</title><rect x="1120.6" y="595.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.31%)</title><rect x="1128.3" y="595.0" width="15.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.31%)</title><rect x="1128.3" y="579.0" width="15.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.31%)</title><rect x="1128.3" y="563.0" width="15.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.31%)</title><rect x="1128.3" y="547.0" width="15.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.31%)</title><rect x="1128.3" y="531.0" width="15.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.31%)</title><rect x="1128.3" y="515.0" width="15.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.3" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.31%)</title><rect x="1128.3" y="499.0" width="15.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.3" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.31%)</title><rect x="1128.3" y="483.0" width="15.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.31%)</title><rect x="1128.3" y="467.0" width="15.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.31%)</title><rect x="1128.3" y="451.0" width="15.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.31%)</title><rect x="1128.3" y="435.0" width="15.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.31%)</title><rect x="1128.3" y="419.0" width="15.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.3" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.31%)</title><rect x="1128.3" y="403.0" width="15.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.3" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.31%)</title><rect x="1128.3" y="387.0" width="15.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.31%)</title><rect x="1128.3" y="371.0" width="15.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.31%)</title><rect x="1128.3" y="355.0" width="15.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.31%)</title><rect x="1128.3" y="339.0" width="15.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.31%)</title><rect x="1128.3" y="323.0" width="15.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.31%)</title><rect x="1128.3" y="307.0" width="15.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.3" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.31%)</title><rect x="1128.3" y="291.0" width="15.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.31%)</title><rect x="1128.3" y="275.0" width="15.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.31%)</title><rect x="1128.3" y="259.0" width="15.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.31%)</title><rect x="1128.3" y="243.0" width="15.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.3" y="254.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.65%)</title><rect x="1128.3" y="227.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.3" y="238.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.65%)</title><rect x="1128.3" y="211.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.65%)</title><rect x="1136.0" y="227.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.0" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.65%)</title><rect x="1136.0" y="211.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.0" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.65%)</title><rect x="1136.0" y="195.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.65%)</title><rect x="1136.0" y="179.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.65%)</title><rect x="1136.0" y="163.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.65%)</title><rect x="1136.0" y="147.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.65%)</title><rect x="1136.0" y="131.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.0" y="142.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.65%)</title><rect x="1136.0" y="115.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.0" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.65%)</title><rect x="1136.0" y="99.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.0" y="110.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.65%)</title><rect x="1136.0" y="83.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.65%)</title><rect x="1136.0" y="67.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.0" y="78.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.65%)</title><rect x="1136.0" y="51.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.0" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.65%)</title><rect x="1136.0" y="35.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.0" y="46.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.65%)</title><rect x="1143.7" y="611.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.7" y="622.0"></text>
</g>
<g>
<title>ReplacedNodes::transfer_from(ReplacedNodes const&amp;, unsigned int) (1 samples, 0.65%)</title><rect x="1143.7" y="595.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.7" y="606.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.31%)</title><rect x="1151.4" y="819.0" width="15.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.4" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.31%)</title><rect x="1151.4" y="803.0" width="15.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.4" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.31%)</title><rect x="1151.4" y="787.0" width="15.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.4" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.31%)</title><rect x="1151.4" y="771.0" width="15.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.4" y="782.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.65%)</title><rect x="1151.4" y="755.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.4" y="766.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.65%)</title><rect x="1151.4" y="739.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.4" y="750.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.65%)</title><rect x="1151.4" y="723.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.4" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.65%)</title><rect x="1151.4" y="707.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.4" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.65%)</title><rect x="1151.4" y="691.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.4" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.65%)</title><rect x="1151.4" y="675.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.65%)</title><rect x="1151.4" y="659.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.65%)</title><rect x="1151.4" y="643.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.4" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.65%)</title><rect x="1151.4" y="627.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.4" y="638.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.65%)</title><rect x="1151.4" y="611.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.4" y="622.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.65%)</title><rect x="1151.4" y="595.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.4" y="606.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.65%)</title><rect x="1151.4" y="579.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.4" y="590.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_receiver_data_from(ProfileData const*) (1 samples, 0.65%)</title><rect x="1151.4" y="563.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.4" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.65%)</title><rect x="1151.4" y="547.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.4" y="558.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (1 samples, 0.65%)</title><rect x="1151.4" y="531.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.4" y="542.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.65%)</title><rect x="1159.2" y="755.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.2" y="766.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.65%)</title><rect x="1159.2" y="739.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.2" y="750.0"></text>
</g>
<g>
<title>Method::is_accessor() const (1 samples, 0.65%)</title><rect x="1159.2" y="723.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.2" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.65%)</title><rect x="1166.9" y="819.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.9" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.65%)</title><rect x="1166.9" y="803.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.9" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.65%)</title><rect x="1166.9" y="787.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.9" y="798.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="1166.9" y="771.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="782.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.65%)</title><rect x="1166.9" y="755.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.9" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.65%)</title><rect x="1166.9" y="739.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="750.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 1.31%)</title><rect x="1174.6" y="835.0" width="15.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.6" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.65%)</title><rect x="1174.6" y="819.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.6" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.65%)</title><rect x="1182.3" y="819.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.65%)</title><rect x="1182.3" y="803.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="814.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.65%)</title><rect x="1182.3" y="787.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="798.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.65%)</title><rect x="1182.3" y="771.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="782.0"></text>
</g>
</g>
</svg>
