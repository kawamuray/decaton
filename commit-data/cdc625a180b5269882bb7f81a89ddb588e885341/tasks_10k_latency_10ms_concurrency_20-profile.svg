<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (86 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (4 samples, 4.65%)</title><rect x="10.0" y="1251.0" width="54.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (4 samples, 4.65%)</title><rect x="10.0" y="1235.0" width="54.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/l..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (4 samples, 4.65%)</title><rect x="10.0" y="1219.0" width="54.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (4 samples, 4.65%)</title><rect x="10.0" y="1203.0" width="54.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 4.65%)</title><rect x="10.0" y="1187.0" width="54.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1198.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.16%)</title><rect x="10.0" y="1171.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.16%)</title><rect x="10.0" y="1155.0" width="13.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 1.16%)</title><rect x="10.0" y="1139.0" width="13.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 1.16%)</title><rect x="10.0" y="1123.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 1.16%)</title><rect x="10.0" y="1107.0" width="13.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 1.16%)</title><rect x="10.0" y="1091.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 1.16%)</title><rect x="10.0" y="1075.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 3.49%)</title><rect x="23.7" y="1171.0" width="41.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.7" y="1182.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 3.49%)</title><rect x="23.7" y="1155.0" width="41.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.7" y="1166.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 2.33%)</title><rect x="23.7" y="1139.0" width="27.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.7" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 2.33%)</title><rect x="23.7" y="1123.0" width="27.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.7" y="1134.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 1.16%)</title><rect x="23.7" y="1107.0" width="13.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 1.16%)</title><rect x="23.7" y="1091.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 1.16%)</title><rect x="23.7" y="1075.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 1.16%)</title><rect x="23.7" y="1059.0" width="13.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 1.16%)</title><rect x="23.7" y="1043.0" width="13.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 1.16%)</title><rect x="23.7" y="1027.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 1.16%)</title><rect x="23.7" y="1011.0" width="13.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 1.16%)</title><rect x="23.7" y="995.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 1.16%)</title><rect x="37.4" y="1107.0" width="13.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 1.16%)</title><rect x="37.4" y="1091.0" width="13.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 1.16%)</title><rect x="37.4" y="1075.0" width="13.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.4" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 1.16%)</title><rect x="37.4" y="1059.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 1.16%)</title><rect x="51.2" y="1139.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="54.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 1.16%)</title><rect x="51.2" y="1123.0" width="13.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 1.16%)</title><rect x="51.2" y="1107.0" width="13.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 1.16%)</title><rect x="51.2" y="1091.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="54.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 1.16%)</title><rect x="51.2" y="1075.0" width="13.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 1.16%)</title><rect x="51.2" y="1059.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 1.16%)</title><rect x="51.2" y="1043.0" width="13.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.2" y="1054.0"></text>
</g>
<g>
<title>start_thread (82 samples, 95.35%)</title><rect x="64.9" y="1251.0" width="1125.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="67.9" y="1262.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (82 samples, 95.35%)</title><rect x="64.9" y="1235.0" width="1125.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="67.9" y="1246.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 1.16%)</title><rect x="64.9" y="1219.0" width="13.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="67.9" y="1230.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (1 samples, 1.16%)</title><rect x="64.9" y="1203.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="67.9" y="1214.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 1.16%)</title><rect x="64.9" y="1187.0" width="13.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="67.9" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 1.16%)</title><rect x="64.9" y="1171.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="67.9" y="1182.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (81 samples, 94.19%)</title><rect x="78.6" y="1219.0" width="1111.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="81.6" y="1230.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (81 samples, 94.19%)</title><rect x="78.6" y="1203.0" width="1111.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="81.6" y="1214.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (80 samples, 93.02%)</title><rect x="78.6" y="1187.0" width="1097.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="81.6" y="1198.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (77 samples, 89.53%)</title><rect x="78.6" y="1171.0" width="1056.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="81.6" y="1182.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (77 samples, 89.53%)</title><rect x="78.6" y="1155.0" width="1056.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="81.6" y="1166.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (47 samples, 54.65%)</title><rect x="78.6" y="1139.0" width="644.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="81.6" y="1150.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 3.49%)</title><rect x="78.6" y="1123.0" width="41.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="81.6" y="1134.0">Com..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 1.16%)</title><rect x="78.6" y="1107.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="81.6" y="1118.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 2.33%)</title><rect x="92.3" y="1107.0" width="27.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="95.3" y="1118.0">C..</text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 2.33%)</title><rect x="92.3" y="1091.0" width="27.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="95.3" y="1102.0">C..</text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 2.33%)</title><rect x="92.3" y="1075.0" width="27.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="95.3" y="1086.0">C..</text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 1.16%)</title><rect x="106.0" y="1059.0" width="13.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="109.0" y="1070.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, RegisterImpl*) (1 samples, 1.16%)</title><rect x="106.0" y="1043.0" width="13.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="109.0" y="1054.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 1.16%)</title><rect x="119.8" y="1123.0" width="13.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="122.8" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 1.16%)</title><rect x="119.8" y="1107.0" width="13.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="122.8" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 1.16%)</title><rect x="119.8" y="1091.0" width="13.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="122.8" y="1102.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 6.98%)</title><rect x="133.5" y="1123.0" width="82.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="136.5" y="1134.0">Matcher::..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 1.16%)</title><rect x="133.5" y="1107.0" width="13.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="136.5" y="1118.0"></text>
</g>
<g>
<title>ReturnNode::ideal_reg() const (1 samples, 1.16%)</title><rect x="133.5" y="1091.0" width="13.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="136.5" y="1102.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 4.65%)</title><rect x="147.2" y="1107.0" width="54.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="150.2" y="1118.0">Match..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 1.16%)</title><rect x="147.2" y="1091.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="150.2" y="1102.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 3.49%)</title><rect x="160.9" y="1091.0" width="41.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="163.9" y="1102.0">Mat..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.16%)</title><rect x="174.7" y="1075.0" width="13.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="177.7" y="1086.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 1.16%)</title><rect x="188.4" y="1075.0" width="13.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="191.4" y="1086.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 1.16%)</title><rect x="188.4" y="1059.0" width="13.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="191.4" y="1070.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 1.16%)</title><rect x="188.4" y="1043.0" width="13.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="191.4" y="1054.0"></text>
</g>
<g>
<title>free (1 samples, 1.16%)</title><rect x="202.1" y="1107.0" width="13.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="205.1" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 2.33%)</title><rect x="215.8" y="1123.0" width="27.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="218.8" y="1134.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 2.33%)</title><rect x="215.8" y="1107.0" width="27.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="218.8" y="1118.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 1.16%)</title><rect x="215.8" y="1091.0" width="13.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="218.8" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 1.16%)</title><rect x="215.8" y="1075.0" width="13.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="218.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 1.16%)</title><rect x="229.5" y="1091.0" width="13.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="232.5" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 1.16%)</title><rect x="229.5" y="1075.0" width="13.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="232.5" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 1.16%)</title><rect x="243.3" y="1123.0" width="13.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="246.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (34 samples, 39.53%)</title><rect x="257.0" y="1123.0" width="466.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="260.0" y="1134.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 1.16%)</title><rect x="257.0" y="1107.0" width="13.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="260.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 3.49%)</title><rect x="270.7" y="1107.0" width="41.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="273.7" y="1118.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 1.16%)</title><rect x="270.7" y="1091.0" width="13.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="273.7" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.16%)</title><rect x="284.4" y="1091.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="287.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 1.16%)</title><rect x="298.1" y="1091.0" width="13.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="301.1" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 4.65%)</title><rect x="311.9" y="1107.0" width="54.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="314.9" y="1118.0">Phase..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 1.16%)</title><rect x="339.3" y="1091.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="342.3" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 1.16%)</title><rect x="353.0" y="1091.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="356.0" y="1102.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 1.16%)</title><rect x="353.0" y="1075.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="356.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 8.14%)</title><rect x="366.7" y="1107.0" width="96.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="369.7" y="1118.0">PhaseChaiti..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 1.16%)</title><rect x="407.9" y="1091.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="410.9" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.16%)</title><rect x="421.6" y="1091.0" width="13.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="424.6" y="1102.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 1.16%)</title><rect x="435.3" y="1091.0" width="13.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="438.3" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 1.16%)</title><rect x="449.1" y="1091.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="452.1" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 1.16%)</title><rect x="462.8" y="1107.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="465.8" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (2 samples, 2.33%)</title><rect x="476.5" y="1107.0" width="27.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="479.5" y="1118.0">P..</text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 1.16%)</title><rect x="490.2" y="1091.0" width="13.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="493.2" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 3.49%)</title><rect x="504.0" y="1107.0" width="41.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="507.0" y="1118.0">Pha..</text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 2.33%)</title><rect x="517.7" y="1091.0" width="27.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="520.7" y="1102.0">R..</text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 3.49%)</title><rect x="545.1" y="1107.0" width="41.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="548.1" y="1118.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 1.16%)</title><rect x="572.6" y="1091.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="575.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 3.49%)</title><rect x="586.3" y="1107.0" width="41.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.3" y="1118.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 2.33%)</title><rect x="600.0" y="1091.0" width="27.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="603.0" y="1102.0">I..</text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 6.98%)</title><rect x="627.4" y="1107.0" width="82.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="630.4" y="1118.0">PhaseLive..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 3.49%)</title><rect x="668.6" y="1091.0" width="41.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="671.6" y="1102.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.16%)</title><rect x="696.0" y="1075.0" width="13.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="699.0" y="1086.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 1.16%)</title><rect x="709.8" y="1107.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="712.8" y="1118.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 23.26%)</title><rect x="723.5" y="1139.0" width="274.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="726.5" y="1150.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 1.16%)</title><rect x="723.5" y="1123.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="726.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 1.16%)</title><rect x="723.5" y="1107.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="726.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 18.60%)</title><rect x="737.2" y="1123.0" width="219.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="740.2" y="1134.0">PhaseIdealLoop::build_and_opt..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 1.16%)</title><rect x="737.2" y="1107.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="740.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (14 samples, 16.28%)</title><rect x="750.9" y="1107.0" width="192.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="753.9" y="1118.0">PhaseIdealLoop::build_loo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 12.79%)</title><rect x="792.1" y="1091.0" width="150.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="795.1" y="1102.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (10 samples, 11.63%)</title><rect x="805.8" y="1075.0" width="137.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="808.8" y="1086.0">PhaseIdealLoop::g..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (10 samples, 11.63%)</title><rect x="805.8" y="1059.0" width="137.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="808.8" y="1070.0">PhaseIdealLoop::i..</text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 1.16%)</title><rect x="943.0" y="1107.0" width="13.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="946.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 1.16%)</title><rect x="956.7" y="1123.0" width="13.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="959.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.238] (1 samples, 1.16%)</title><rect x="956.7" y="1107.0" width="13.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="959.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 1.16%)</title><rect x="970.5" y="1123.0" width="13.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="973.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 1.16%)</title><rect x="970.5" y="1107.0" width="13.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="973.5" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 1.16%)</title><rect x="970.5" y="1091.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.5" y="1102.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 1.16%)</title><rect x="970.5" y="1075.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.5" y="1086.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 1.16%)</title><rect x="984.2" y="1123.0" width="13.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.2" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 9.30%)</title><rect x="997.9" y="1139.0" width="109.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.9" y="1150.0">ParseGenerato..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 9.30%)</title><rect x="997.9" y="1123.0" width="109.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1000.9" y="1134.0">Parse::Parse(..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 9.30%)</title><rect x="997.9" y="1107.0" width="109.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.9" y="1118.0">Parse::do_all..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 9.30%)</title><rect x="997.9" y="1091.0" width="109.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.9" y="1102.0">Parse::do_one..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 9.30%)</title><rect x="997.9" y="1075.0" width="109.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1000.9" y="1086.0">Parse::do_one..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 9.30%)</title><rect x="997.9" y="1059.0" width="109.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1000.9" y="1070.0">Parse::do_cal..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 5.81%)</title><rect x="997.9" y="1043.0" width="68.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1000.9" y="1054.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 5.81%)</title><rect x="997.9" y="1027.0" width="68.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.9" y="1038.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 5.81%)</title><rect x="997.9" y="1011.0" width="68.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1000.9" y="1022.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 5.81%)</title><rect x="997.9" y="995.0" width="68.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1000.9" y="1006.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 5.81%)</title><rect x="997.9" y="979.0" width="68.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1000.9" y="990.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 5.81%)</title><rect x="997.9" y="963.0" width="68.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1000.9" y="974.0">Parse::..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 5.81%)</title><rect x="997.9" y="947.0" width="68.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1000.9" y="958.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 5.81%)</title><rect x="997.9" y="931.0" width="68.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1000.9" y="942.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 5.81%)</title><rect x="997.9" y="915.0" width="68.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1000.9" y="926.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 5.81%)</title><rect x="997.9" y="899.0" width="68.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.9" y="910.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 5.81%)</title><rect x="997.9" y="883.0" width="68.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.9" y="894.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 5.81%)</title><rect x="997.9" y="867.0" width="68.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1000.9" y="878.0">Parse::..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 4.65%)</title><rect x="997.9" y="851.0" width="54.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.9" y="862.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 4.65%)</title><rect x="997.9" y="835.0" width="54.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.9" y="846.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 4.65%)</title><rect x="997.9" y="819.0" width="54.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1000.9" y="830.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 4.65%)</title><rect x="997.9" y="803.0" width="54.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1000.9" y="814.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 4.65%)</title><rect x="997.9" y="787.0" width="54.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.9" y="798.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 4.65%)</title><rect x="997.9" y="771.0" width="54.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.9" y="782.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 4.65%)</title><rect x="997.9" y="755.0" width="54.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1000.9" y="766.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 4.65%)</title><rect x="997.9" y="739.0" width="54.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.9" y="750.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 4.65%)</title><rect x="997.9" y="723.0" width="54.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1000.9" y="734.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 4.65%)</title><rect x="997.9" y="707.0" width="54.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.9" y="718.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 4.65%)</title><rect x="997.9" y="691.0" width="54.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.9" y="702.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 4.65%)</title><rect x="997.9" y="675.0" width="54.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.9" y="686.0">Parse..</text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 1.16%)</title><rect x="997.9" y="659.0" width="13.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.9" y="670.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 1.16%)</title><rect x="997.9" y="643.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.9" y="654.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 1.16%)</title><rect x="997.9" y="627.0" width="13.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1000.9" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.16%)</title><rect x="997.9" y="611.0" width="13.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.9" y="622.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 1.16%)</title><rect x="997.9" y="595.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.49%)</title><rect x="1011.6" y="659.0" width="41.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.6" y="670.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.49%)</title><rect x="1011.6" y="643.0" width="41.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.6" y="654.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.49%)</title><rect x="1011.6" y="627.0" width="41.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1014.6" y="638.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.49%)</title><rect x="1011.6" y="611.0" width="41.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1014.6" y="622.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.49%)</title><rect x="1011.6" y="595.0" width="41.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.6" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.49%)</title><rect x="1011.6" y="579.0" width="41.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1014.6" y="590.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.33%)</title><rect x="1011.6" y="563.0" width="27.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.6" y="574.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.33%)</title><rect x="1011.6" y="547.0" width="27.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.6" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.33%)</title><rect x="1011.6" y="531.0" width="27.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1014.6" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.33%)</title><rect x="1011.6" y="515.0" width="27.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.6" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.33%)</title><rect x="1011.6" y="499.0" width="27.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.6" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.33%)</title><rect x="1011.6" y="483.0" width="27.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1014.6" y="494.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.16%)</title><rect x="1011.6" y="467.0" width="13.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1014.6" y="478.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.16%)</title><rect x="1011.6" y="451.0" width="13.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.6" y="462.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.16%)</title><rect x="1011.6" y="435.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.6" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 1.16%)</title><rect x="1011.6" y="419.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.6" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 1.16%)</title><rect x="1011.6" y="403.0" width="13.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1014.6" y="414.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 1.16%)</title><rect x="1011.6" y="387.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1014.6" y="398.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 1.16%)</title><rect x="1011.6" y="371.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.6" y="382.0"></text>
</g>
<g>
<title>ciMethodBlocks::make_block_at(int) (1 samples, 1.16%)</title><rect x="1011.6" y="355.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1014.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1025.3" y="467.0" width="13.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1028.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.16%)</title><rect x="1025.3" y="451.0" width="13.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1028.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.16%)</title><rect x="1025.3" y="435.0" width="13.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1028.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.16%)</title><rect x="1025.3" y="419.0" width="13.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.16%)</title><rect x="1025.3" y="403.0" width="13.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1028.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.16%)</title><rect x="1025.3" y="387.0" width="13.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1028.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1025.3" y="371.0" width="13.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.16%)</title><rect x="1025.3" y="355.0" width="13.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1028.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.16%)</title><rect x="1025.3" y="339.0" width="13.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1028.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.16%)</title><rect x="1025.3" y="323.0" width="13.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.16%)</title><rect x="1025.3" y="307.0" width="13.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.16%)</title><rect x="1025.3" y="291.0" width="13.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.3" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1025.3" y="275.0" width="13.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.3" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.16%)</title><rect x="1025.3" y="259.0" width="13.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1028.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.16%)</title><rect x="1025.3" y="243.0" width="13.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.16%)</title><rect x="1025.3" y="227.0" width="13.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.16%)</title><rect x="1025.3" y="211.0" width="13.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.16%)</title><rect x="1025.3" y="195.0" width="13.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.3" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1025.3" y="179.0" width="13.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1028.3" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.16%)</title><rect x="1025.3" y="163.0" width="13.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.16%)</title><rect x="1025.3" y="147.0" width="13.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.16%)</title><rect x="1025.3" y="131.0" width="13.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1028.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.16%)</title><rect x="1025.3" y="115.0" width="13.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.3" y="126.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 1.16%)</title><rect x="1025.3" y="99.0" width="13.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.3" y="110.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*, Node*) (1 samples, 1.16%)</title><rect x="1025.3" y="83.0" width="13.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1028.3" y="94.0"></text>
</g>
<g>
<title>Compile::constrained_convI2L(PhaseGVN*, Node*, TypeInt const*, Node*) (1 samples, 1.16%)</title><rect x="1025.3" y="67.0" width="13.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.3" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.16%)</title><rect x="1025.3" y="51.0" width="13.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1028.3" y="62.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 1.16%)</title><rect x="1025.3" y="35.0" width="13.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1028.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1039.1" y="563.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1039.1" y="547.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1042.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.16%)</title><rect x="1039.1" y="531.0" width="13.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1042.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.16%)</title><rect x="1039.1" y="515.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.16%)</title><rect x="1039.1" y="499.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1042.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.16%)</title><rect x="1039.1" y="483.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1042.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.16%)</title><rect x="1039.1" y="467.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1039.1" y="451.0" width="13.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1042.1" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.16%)</title><rect x="1039.1" y="435.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1042.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.16%)</title><rect x="1039.1" y="419.0" width="13.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1042.1" y="430.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.16%)</title><rect x="1039.1" y="403.0" width="13.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1042.1" y="414.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 1.16%)</title><rect x="1039.1" y="387.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.1" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1052.8" y="851.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1055.8" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1052.8" y="835.0" width="13.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.8" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.16%)</title><rect x="1052.8" y="819.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1055.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.16%)</title><rect x="1052.8" y="803.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.16%)</title><rect x="1052.8" y="787.0" width="13.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.16%)</title><rect x="1052.8" y="771.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.16%)</title><rect x="1052.8" y="755.0" width="13.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1052.8" y="739.0" width="13.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1055.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.16%)</title><rect x="1052.8" y="723.0" width="13.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.16%)</title><rect x="1052.8" y="707.0" width="13.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1055.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.16%)</title><rect x="1052.8" y="691.0" width="13.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1055.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.16%)</title><rect x="1052.8" y="675.0" width="13.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1055.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.16%)</title><rect x="1052.8" y="659.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1055.8" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1052.8" y="643.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.16%)</title><rect x="1052.8" y="627.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1055.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.16%)</title><rect x="1052.8" y="611.0" width="13.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1055.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.16%)</title><rect x="1052.8" y="595.0" width="13.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.16%)</title><rect x="1052.8" y="579.0" width="13.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.16%)</title><rect x="1052.8" y="563.0" width="13.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1055.8" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 1.16%)</title><rect x="1052.8" y="547.0" width="13.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.8" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.16%)</title><rect x="1052.8" y="531.0" width="13.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.8" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.16%)</title><rect x="1052.8" y="515.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.8" y="526.0"></text>
</g>
<g>
<title>ConstantPool::method_at_if_loaded(constantPoolHandle, int) (1 samples, 1.16%)</title><rect x="1052.8" y="499.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.8" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 3.49%)</title><rect x="1066.5" y="1043.0" width="41.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.5" y="1054.0">Pre..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.49%)</title><rect x="1066.5" y="1027.0" width="41.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.5" y="1038.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.49%)</title><rect x="1066.5" y="1011.0" width="41.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.5" y="1022.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.49%)</title><rect x="1066.5" y="995.0" width="41.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.5" y="1006.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.49%)</title><rect x="1066.5" y="979.0" width="41.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1069.5" y="990.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.49%)</title><rect x="1066.5" y="963.0" width="41.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.5" y="974.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.49%)</title><rect x="1066.5" y="947.0" width="41.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.5" y="958.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.49%)</title><rect x="1066.5" y="931.0" width="41.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.5" y="942.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.49%)</title><rect x="1066.5" y="915.0" width="41.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.5" y="926.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.49%)</title><rect x="1066.5" y="899.0" width="41.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.5" y="910.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.49%)</title><rect x="1066.5" y="883.0" width="41.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.5" y="894.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.49%)</title><rect x="1066.5" y="867.0" width="41.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.5" y="878.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.49%)</title><rect x="1066.5" y="851.0" width="41.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.5" y="862.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.49%)</title><rect x="1066.5" y="835.0" width="41.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.5" y="846.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.49%)</title><rect x="1066.5" y="819.0" width="41.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.5" y="830.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.49%)</title><rect x="1066.5" y="803.0" width="41.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.5" y="814.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.49%)</title><rect x="1066.5" y="787.0" width="41.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.5" y="798.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.49%)</title><rect x="1066.5" y="771.0" width="41.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.5" y="782.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.49%)</title><rect x="1066.5" y="755.0" width="41.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1069.5" y="766.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.49%)</title><rect x="1066.5" y="739.0" width="41.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1069.5" y="750.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.49%)</title><rect x="1066.5" y="723.0" width="41.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.5" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.49%)</title><rect x="1066.5" y="707.0" width="41.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1069.5" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.49%)</title><rect x="1066.5" y="691.0" width="41.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.5" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.49%)</title><rect x="1066.5" y="675.0" width="41.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.5" y="686.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.49%)</title><rect x="1066.5" y="659.0" width="41.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.5" y="670.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.16%)</title><rect x="1066.5" y="643.0" width="13.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.5" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.16%)</title><rect x="1066.5" y="627.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.5" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.16%)</title><rect x="1066.5" y="611.0" width="13.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.5" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 1.16%)</title><rect x="1066.5" y="595.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.5" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 1.16%)</title><rect x="1066.5" y="579.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.5" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.16%)</title><rect x="1066.5" y="563.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.5" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.16%)</title><rect x="1066.5" y="547.0" width="13.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.5" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 1.16%)</title><rect x="1066.5" y="531.0" width="13.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.5" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 1.16%)</title><rect x="1066.5" y="515.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.5" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 1.16%)</title><rect x="1066.5" y="499.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.5" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.16%)</title><rect x="1066.5" y="483.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.5" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.16%)</title><rect x="1066.5" y="467.0" width="13.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1069.5" y="478.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 1.16%)</title><rect x="1066.5" y="451.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1069.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.33%)</title><rect x="1080.2" y="643.0" width="27.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1083.2" y="654.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.33%)</title><rect x="1080.2" y="627.0" width="27.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1083.2" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.33%)</title><rect x="1080.2" y="611.0" width="27.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1083.2" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.33%)</title><rect x="1080.2" y="595.0" width="27.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1083.2" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.33%)</title><rect x="1080.2" y="579.0" width="27.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.2" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.33%)</title><rect x="1080.2" y="563.0" width="27.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.2" y="574.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.16%)</title><rect x="1080.2" y="547.0" width="13.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1083.2" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.16%)</title><rect x="1080.2" y="531.0" width="13.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1083.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 1.16%)</title><rect x="1080.2" y="515.0" width="13.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1083.2" y="526.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.16%)</title><rect x="1080.2" y="499.0" width="13.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1083.2" y="510.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 1.16%)</title><rect x="1080.2" y="483.0" width="13.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1083.2" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 1.16%)</title><rect x="1094.0" y="547.0" width="13.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.0" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.16%)</title><rect x="1094.0" y="531.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.0" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.16%)</title><rect x="1094.0" y="515.0" width="13.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.0" y="526.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 1.16%)</title><rect x="1094.0" y="499.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.0" y="510.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 1.16%)</title><rect x="1094.0" y="483.0" width="13.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.0" y="494.0"></text>
</g>
<g>
<title>methodHandle::remove() (1 samples, 1.16%)</title><rect x="1094.0" y="467.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.0" y="478.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 1.16%)</title><rect x="1107.7" y="1139.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.7" y="1150.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 1.16%)</title><rect x="1107.7" y="1123.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.7" y="1134.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 1.16%)</title><rect x="1121.4" y="1139.0" width="13.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.4" y="1150.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 1.16%)</title><rect x="1121.4" y="1123.0" width="13.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.4" y="1134.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 1.16%)</title><rect x="1121.4" y="1107.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.4" y="1118.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 1.16%)</title><rect x="1121.4" y="1091.0" width="13.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1124.4" y="1102.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 3.49%)</title><rect x="1135.1" y="1171.0" width="41.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.1" y="1182.0">Com..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 3.49%)</title><rect x="1135.1" y="1155.0" width="41.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.1" y="1166.0">Com..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 3.49%)</title><rect x="1135.1" y="1139.0" width="41.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.1" y="1150.0">Com..</text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 2.33%)</title><rect x="1135.1" y="1123.0" width="27.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.1" y="1134.0">C..</text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 2.33%)</title><rect x="1135.1" y="1107.0" width="27.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.1" y="1118.0">C..</text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 2.33%)</title><rect x="1135.1" y="1091.0" width="27.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.1" y="1102.0">L..</text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 2.33%)</title><rect x="1135.1" y="1075.0" width="27.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.1" y="1086.0">L..</text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (2 samples, 2.33%)</title><rect x="1135.1" y="1059.0" width="27.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.1" y="1070.0">I..</text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 1.16%)</title><rect x="1148.8" y="1043.0" width="13.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.8" y="1054.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 1.16%)</title><rect x="1148.8" y="1027.0" width="13.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.8" y="1038.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (1 samples, 1.16%)</title><rect x="1148.8" y="1011.0" width="13.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.8" y="1022.0"></text>
</g>
<g>
<title>LinearScanWalker::find_optimal_split_pos(Interval*, int, int, bool) (1 samples, 1.16%)</title><rect x="1148.8" y="995.0" width="13.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.8" y="1006.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 1.16%)</title><rect x="1162.6" y="1123.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="1134.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 1.16%)</title><rect x="1162.6" y="1107.0" width="13.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="1118.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 1.16%)</title><rect x="1162.6" y="1091.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="1102.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 1.16%)</title><rect x="1162.6" y="1075.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.6" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 1.16%)</title><rect x="1162.6" y="1059.0" width="13.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="1070.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 1.16%)</title><rect x="1176.3" y="1187.0" width="13.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1198.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::select_task(CompileQueue*) (1 samples, 1.16%)</title><rect x="1176.3" y="1171.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="1182.0"></text>
</g>
</g>
</svg>
