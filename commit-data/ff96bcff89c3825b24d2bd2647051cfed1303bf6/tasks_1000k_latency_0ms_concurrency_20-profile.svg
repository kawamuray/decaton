<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (1,095 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (246 samples, 22.47%)</title><rect x="10.0" y="915.0" width="265.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="11.1" y="899.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.1" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="11.1" y="883.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (244 samples, 22.28%)</title><rect x="12.2" y="899.0" width="262.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.2" y="910.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.55%)</title><rect x="15.4" y="883.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.37%)</title><rect x="17.5" y="867.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2074174356.accept (4 samples, 0.37%)</title><rect x="17.5" y="851.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.37%)</title><rect x="17.5" y="835.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.37%)</title><rect x="17.5" y="819.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.5" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.37%)</title><rect x="17.5" y="803.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.37%)</title><rect x="21.9" y="883.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.37%)</title><rect x="21.9" y="867.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.9" y="878.0"></text>
</g>
<g>
<title>java/util/Collection.stream (3 samples, 0.27%)</title><rect x="22.9" y="851.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (3 samples, 0.27%)</title><rect x="22.9" y="835.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (3 samples, 0.27%)</title><rect x="22.9" y="819.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.09%)</title><rect x="26.2" y="883.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="26.2" y="867.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="27.2" y="883.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.2" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.09%)</title><rect x="28.3" y="883.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.3" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (173 samples, 15.80%)</title><rect x="29.4" y="883.0" width="186.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.4" y="894.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1016149642.accept (167 samples, 15.25%)</title><rect x="30.5" y="867.0" width="179.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.5" y="878.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (166 samples, 15.16%)</title><rect x="31.6" y="851.0" width="178.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.6" y="862.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (121 samples, 11.05%)</title><rect x="33.7" y="835.0" width="130.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.7" y="846.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (121 samples, 11.05%)</title><rect x="33.7" y="819.0" width="130.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.7" y="830.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (121 samples, 11.05%)</title><rect x="33.7" y="803.0" width="130.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.7" y="814.0">com/linecorp/dec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (121 samples, 11.05%)</title><rect x="33.7" y="787.0" width="130.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.7" y="798.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (121 samples, 11.05%)</title><rect x="33.7" y="771.0" width="130.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.7" y="782.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (121 samples, 11.05%)</title><rect x="33.7" y="755.0" width="130.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.7" y="766.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (84 samples, 7.67%)</title><rect x="33.7" y="739.0" width="90.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.7" y="750.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (12 samples, 1.10%)</title><rect x="33.7" y="723.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (12 samples, 1.10%)</title><rect x="33.7" y="707.0" width="12.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (12 samples, 1.10%)</title><rect x="33.7" y="691.0" width="12.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (12 samples, 1.10%)</title><rect x="33.7" y="675.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (2 samples, 0.18%)</title><rect x="44.5" y="659.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.5" y="670.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="45.6" y="643.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="48.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (72 samples, 6.58%)</title><rect x="46.6" y="723.0" width="77.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.6" y="734.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (72 samples, 6.58%)</title><rect x="46.6" y="707.0" width="77.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.6" y="718.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (72 samples, 6.58%)</title><rect x="46.6" y="691.0" width="77.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.6" y="702.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (72 samples, 6.58%)</title><rect x="46.6" y="675.0" width="77.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="49.6" y="686.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (70 samples, 6.39%)</title><rect x="48.8" y="659.0" width="75.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.8" y="670.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="49.9" y="643.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="52.9" y="654.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="50.9" y="643.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="53.9" y="654.0"></text>
</g>
<g>
<title>Unsafe_Unpark (60 samples, 5.48%)</title><rect x="52.0" y="643.0" width="64.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="55.0" y="654.0">Unsafe_..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.18%)</title><rect x="52.0" y="627.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="55.0" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="54.2" y="627.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="57.2" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.65%)</title><rect x="55.3" y="627.0" width="43.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="58.3" y="638.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.27%)</title><rect x="98.4" y="627.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="101.4" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.28%)</title><rect x="101.6" y="627.0" width="15.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="104.6" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.37%)</title><rect x="116.7" y="643.0" width="4.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="119.7" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="121.0" y="643.0" width="2.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="124.0" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="123.2" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="126.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.18%)</title><rect x="124.2" y="739.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.18%)</title><rect x="124.2" y="723.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.18%)</title><rect x="124.2" y="707.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (35 samples, 3.20%)</title><rect x="126.4" y="739.0" width="37.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="129.4" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (35 samples, 3.20%)</title><rect x="126.4" y="723.0" width="37.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="129.4" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (35 samples, 3.20%)</title><rect x="126.4" y="707.0" width="37.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="129.4" y="718.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (35 samples, 3.20%)</title><rect x="126.4" y="691.0" width="37.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="129.4" y="702.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.09%)</title><rect x="164.1" y="835.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.09%)</title><rect x="164.1" y="819.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.46%)</title><rect x="165.2" y="835.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.2" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.46%)</title><rect x="165.2" y="819.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.46%)</title><rect x="165.2" y="803.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="168.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (34 samples, 3.11%)</title><rect x="170.6" y="835.0" width="36.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.6" y="846.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (34 samples, 3.11%)</title><rect x="170.6" y="819.0" width="36.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.6" y="830.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (18 samples, 1.64%)</title><rect x="185.7" y="803.0" width="19.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="188.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.09%)</title><rect x="193.2" y="787.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.2" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.73%)</title><rect x="194.3" y="787.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.3" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.73%)</title><rect x="194.3" y="771.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.3" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.73%)</title><rect x="194.3" y="755.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.3" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="200.7" y="739.0" width="2.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="203.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.18%)</title><rect x="202.9" y="787.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.9" y="798.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.18%)</title><rect x="205.1" y="803.0" width="2.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="208.1" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="207.2" y="835.0" width="3.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="210.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.46%)</title><rect x="210.4" y="867.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.46%)</title><rect x="210.4" y="851.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.46%)</title><rect x="210.4" y="835.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.46%)</title><rect x="210.4" y="819.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.09%)</title><rect x="214.7" y="803.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="214.7" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 5.02%)</title><rect x="215.8" y="883.0" width="59.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.8" y="894.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 5.02%)</title><rect x="215.8" y="867.0" width="59.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.8" y="878.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.09%)</title><rect x="215.8" y="851.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (35 samples, 3.20%)</title><rect x="216.9" y="851.0" width="37.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.9" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 3.20%)</title><rect x="216.9" y="835.0" width="37.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.9" y="846.0">org..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="216.9" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="216.9" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.09%)</title><rect x="216.9" y="787.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 3.11%)</title><rect x="218.0" y="819.0" width="36.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.0" y="830.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 2.83%)</title><rect x="218.0" y="803.0" width="33.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.0" y="814.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (31 samples, 2.83%)</title><rect x="218.0" y="787.0" width="33.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.0" y="798.0">or..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="221.2" y="771.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="224.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.10%)</title><rect x="222.3" y="771.0" width="12.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.46%)</title><rect x="222.3" y="755.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.46%)</title><rect x="222.3" y="739.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.46%)</title><rect x="222.3" y="723.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.46%)</title><rect x="222.3" y="707.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.46%)</title><rect x="222.3" y="691.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.46%)</title><rect x="222.3" y="675.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.46%)</title><rect x="222.3" y="659.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.64%)</title><rect x="227.7" y="755.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.64%)</title><rect x="227.7" y="739.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (7 samples, 0.64%)</title><rect x="227.7" y="723.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.37%)</title><rect x="235.2" y="771.0" width="16.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.37%)</title><rect x="235.2" y="755.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.73%)</title><rect x="235.2" y="739.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.2" y="750.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.73%)</title><rect x="235.2" y="723.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (7 samples, 0.64%)</title><rect x="243.8" y="739.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.8" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.64%)</title><rect x="243.8" y="723.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.8" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="250.3" y="707.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="253.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.18%)</title><rect x="251.4" y="803.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.18%)</title><rect x="251.4" y="787.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="251.4" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="251.4" y="755.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="252.5" y="771.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="252.5" y="755.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="252.5" y="739.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="253.5" y="803.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="253.5" y="787.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="253.5" y="771.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="256.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="253.5" y="755.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="256.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="253.5" y="739.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="253.5" y="723.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.5" y="734.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="253.5" y="707.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="256.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.82%)</title><rect x="254.6" y="851.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.73%)</title><rect x="254.6" y="835.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.64%)</title><rect x="254.6" y="819.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.09%)</title><rect x="255.7" y="803.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="256.8" y="803.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="256.8" y="787.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="256.8" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="256.8" y="755.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="256.8" y="739.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.8" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="256.8" y="723.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="259.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="257.9" y="803.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="257.9" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="257.9" y="771.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="257.9" y="755.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="257.9" y="739.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="258.9" y="803.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="258.9" y="787.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="261.9" y="798.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="258.9" y="771.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.9" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.09%)</title><rect x="258.9" y="755.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.18%)</title><rect x="260.0" y="803.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.18%)</title><rect x="260.0" y="787.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.0" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.09%)</title><rect x="260.0" y="771.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="261.1" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="261.1" y="755.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="261.1" y="739.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="261.1" y="723.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="261.1" y="707.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="261.1" y="691.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="262.2" y="819.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="262.2" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="262.2" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="262.2" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="262.2" y="755.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="262.2" y="739.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="262.2" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="262.2" y="707.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="262.2" y="691.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="263.2" y="835.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="263.2" y="819.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="263.2" y="803.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="263.2" y="787.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.09%)</title><rect x="263.2" y="771.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.09%)</title><rect x="263.2" y="755.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="263.2" y="739.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="263.2" y="723.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.55%)</title><rect x="264.3" y="851.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.37%)</title><rect x="264.3" y="835.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.37%)</title><rect x="264.3" y="819.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="264.3" y="803.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="264.3" y="787.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.27%)</title><rect x="265.4" y="803.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.18%)</title><rect x="265.4" y="787.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.18%)</title><rect x="265.4" y="771.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.18%)</title><rect x="265.4" y="755.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.18%)</title><rect x="265.4" y="739.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.18%)</title><rect x="265.4" y="723.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.4" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.18%)</title><rect x="265.4" y="707.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.4" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="265.4" y="691.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="268.4" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="266.5" y="691.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="269.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.09%)</title><rect x="267.6" y="787.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.6" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="267.6" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="270.6" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="267.6" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="270.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.18%)</title><rect x="268.6" y="835.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.18%)</title><rect x="268.6" y="819.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.18%)</title><rect x="268.6" y="803.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="268.6" y="787.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.add (1 samples, 0.09%)</title><rect x="268.6" y="771.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.6" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addFirst (1 samples, 0.09%)</title><rect x="268.6" y="755.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.6" y="766.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="268.6" y="739.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="271.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.09%)</title><rect x="269.7" y="787.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.7" y="798.0"></text>
</g>
<g>
<title>java/util/EnumMap.get (1 samples, 0.09%)</title><rect x="269.7" y="771.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.7" y="782.0"></text>
</g>
<g>
<title>java/util/EnumMap.isValidKey (1 samples, 0.09%)</title><rect x="269.7" y="755.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.27%)</title><rect x="270.8" y="851.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.27%)</title><rect x="270.8" y="835.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="271.9" y="819.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/447788635.accept (1 samples, 0.09%)</title><rect x="271.9" y="803.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="271.9" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="271.9" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="271.9" y="755.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="271.9" y="739.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="272.9" y="819.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="272.9" y="803.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="272.9" y="787.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="272.9" y="771.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="272.9" y="755.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="272.9" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="272.9" y="723.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.9" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="272.9" y="707.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.9" y="718.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="272.9" y="691.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="272.9" y="675.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="272.9" y="659.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="272.9" y="643.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.09%)</title><rect x="272.9" y="627.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.9" y="638.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$182/1296111778.accept (1 samples, 0.09%)</title><rect x="272.9" y="611.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.9" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="272.9" y="595.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.9" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="272.9" y="579.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.9" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="272.9" y="563.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.9" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="272.9" y="547.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.9" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="272.9" y="531.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="274.0" y="851.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.0" y="835.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.0" y="819.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.0" y="803.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="274.0" y="787.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.0" y="798.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.09%)</title><rect x="275.1" y="915.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="278.1" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.run (676 samples, 61.74%)</title><rect x="276.2" y="915.0" width="728.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.2" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (676 samples, 61.74%)</title><rect x="276.2" y="899.0" width="728.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.2" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (676 samples, 61.74%)</title><rect x="276.2" y="883.0" width="728.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.2" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1106823921.run (450 samples, 41.10%)</title><rect x="276.2" y="867.0" width="484.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.2" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/11..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (450 samples, 41.10%)</title><rect x="276.2" y="851.0" width="484.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.2" y="862.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (450 samples, 41.10%)</title><rect x="276.2" y="835.0" width="484.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.2" y="846.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="279.4" y="819.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="282.4" y="830.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="279.4" y="803.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="282.4" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="280.5" y="819.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="283.5" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (12 samples, 1.10%)</title><rect x="281.6" y="819.0" width="12.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="284.6" y="830.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.82%)</title><rect x="284.8" y="803.0" width="9.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="287.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (430 samples, 39.27%)</title><rect x="294.5" y="819.0" width="463.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.5" y="830.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="306.3" y="803.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="309.3" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="306.3" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="309.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (3 samples, 0.27%)</title><rect x="307.4" y="803.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (122 samples, 11.14%)</title><rect x="310.7" y="803.0" width="131.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.7" y="814.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (122 samples, 11.14%)</title><rect x="310.7" y="787.0" width="131.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="313.7" y="798.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (122 samples, 11.14%)</title><rect x="310.7" y="771.0" width="131.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="313.7" y="782.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (122 samples, 11.14%)</title><rect x="310.7" y="755.0" width="131.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="313.7" y="766.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (122 samples, 11.14%)</title><rect x="310.7" y="739.0" width="131.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.7" y="750.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (122 samples, 11.14%)</title><rect x="310.7" y="723.0" width="131.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.7" y="734.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (37 samples, 3.38%)</title><rect x="310.7" y="707.0" width="39.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.7" y="718.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (16 samples, 1.46%)</title><rect x="310.7" y="691.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (16 samples, 1.46%)</title><rect x="310.7" y="675.0" width="17.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (13 samples, 1.19%)</title><rect x="310.7" y="659.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="313.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.27%)</title><rect x="324.7" y="659.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="325.7" y="643.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="328.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="325.7" y="627.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="328.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="325.7" y="611.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 1.92%)</title><rect x="327.9" y="691.0" width="22.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="330.9" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (21 samples, 1.92%)</title><rect x="327.9" y="675.0" width="22.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.9" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="327.9" y="659.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.09%)</title><rect x="327.9" y="643.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (7 samples, 0.64%)</title><rect x="329.0" y="659.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.09%)</title><rect x="331.1" y="643.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.1" y="654.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="331.1" y="627.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="334.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (1 samples, 0.09%)</title><rect x="332.2" y="643.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="335.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.09%)</title><rect x="333.3" y="643.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="336.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (1 samples, 0.09%)</title><rect x="334.4" y="643.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.09%)</title><rect x="335.4" y="643.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="338.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.64%)</title><rect x="336.5" y="659.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.5" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="340.8" y="643.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="343.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.18%)</title><rect x="341.9" y="643.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.09%)</title><rect x="341.9" y="627.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.9" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="341.9" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="344.9" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="341.9" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="344.9" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="341.9" y="579.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="344.9" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="341.9" y="563.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="344.9" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="341.9" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="344.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="343.0" y="627.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="346.0" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="343.0" y="611.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="346.0" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="343.0" y="595.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="346.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="343.0" y="579.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="346.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.55%)</title><rect x="344.1" y="659.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="348.4" y="643.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="351.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="349.5" y="643.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="352.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (75 samples, 6.85%)</title><rect x="350.5" y="707.0" width="80.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.5" y="718.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.46%)</title><rect x="350.5" y="691.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.46%)</title><rect x="350.5" y="675.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.46%)</title><rect x="350.5" y="659.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.27%)</title><rect x="351.6" y="643.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="354.8" y="643.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.18%)</title><rect x="355.9" y="691.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="358.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.18%)</title><rect x="355.9" y="675.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="358.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="357.0" y="659.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="360.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 0.46%)</title><rect x="358.1" y="691.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.37%)</title><rect x="359.2" y="675.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="362.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.18%)</title><rect x="359.2" y="659.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="362.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="361.3" y="659.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="364.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.09%)</title><rect x="361.3" y="643.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="364.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="362.4" y="659.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.82%)</title><rect x="363.5" y="691.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (9 samples, 0.82%)</title><rect x="363.5" y="675.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (9 samples, 0.82%)</title><rect x="363.5" y="659.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.18%)</title><rect x="367.8" y="643.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.27%)</title><rect x="369.9" y="643.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.27%)</title><rect x="369.9" y="627.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="372.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (54 samples, 4.93%)</title><rect x="373.2" y="691.0" width="58.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="376.2" y="702.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.28%)</title><rect x="373.2" y="675.0" width="15.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="374.2" y="659.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.27%)</title><rect x="375.3" y="659.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="378.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.27%)</title><rect x="375.3" y="643.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.27%)</title><rect x="375.3" y="627.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="378.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.27%)</title><rect x="375.3" y="611.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="378.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.18%)</title><rect x="376.4" y="595.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.64%)</title><rect x="378.5" y="659.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (4 samples, 0.37%)</title><rect x="378.5" y="643.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.27%)</title><rect x="382.9" y="643.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.27%)</title><rect x="382.9" y="627.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="385.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.27%)</title><rect x="382.9" y="611.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.27%)</title><rect x="382.9" y="595.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="386.1" y="659.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="389.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="386.1" y="643.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (40 samples, 3.65%)</title><rect x="388.2" y="675.0" width="43.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="391.2" y="686.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (40 samples, 3.65%)</title><rect x="388.2" y="659.0" width="43.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.2" y="670.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (39 samples, 3.56%)</title><rect x="389.3" y="643.0" width="42.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.3" y="654.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.37%)</title><rect x="397.9" y="627.0" width="16.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.09%)</title><rect x="397.9" y="611.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.73%)</title><rect x="399.0" y="611.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="402.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.73%)</title><rect x="399.0" y="595.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.73%)</title><rect x="399.0" y="579.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.37%)</title><rect x="399.0" y="563.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.37%)</title><rect x="403.3" y="563.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="406.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.37%)</title><rect x="407.6" y="611.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.37%)</title><rect x="407.6" y="595.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.37%)</title><rect x="407.6" y="579.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="412.0" y="611.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="415.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="412.0" y="595.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="413.0" y="579.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="416.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.46%)</title><rect x="414.1" y="627.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.46%)</title><rect x="414.1" y="611.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.46%)</title><rect x="414.1" y="595.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="417.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.46%)</title><rect x="414.1" y="579.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="417.1" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.46%)</title><rect x="414.1" y="563.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.46%)</title><rect x="419.5" y="627.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.46%)</title><rect x="419.5" y="611.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="422.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.46%)</title><rect x="419.5" y="595.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="422.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="423.8" y="579.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="426.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.55%)</title><rect x="424.9" y="627.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="427.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 0.91%)</title><rect x="431.4" y="707.0" width="10.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="434.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.91%)</title><rect x="431.4" y="691.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.91%)</title><rect x="431.4" y="675.0" width="10.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="434.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.91%)</title><rect x="431.4" y="659.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="434.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.18%)</title><rect x="434.6" y="643.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="437.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.46%)</title><rect x="436.7" y="643.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="439.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (271 samples, 24.75%)</title><rect x="442.1" y="803.0" width="292.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.1" y="814.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (54 samples, 4.93%)</title><rect x="444.3" y="787.0" width="58.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="447.3" y="798.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="444.3" y="771.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="447.3" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (53 samples, 4.84%)</title><rect x="445.4" y="771.0" width="57.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="448.4" y="782.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (53 samples, 4.84%)</title><rect x="445.4" y="755.0" width="57.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="448.4" y="766.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.46%)</title><rect x="448.6" y="739.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="451.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.73%)</title><rect x="457.2" y="723.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="460.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.73%)</title><rect x="457.2" y="707.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="460.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.73%)</title><rect x="457.2" y="691.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="460.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (8 samples, 0.73%)</title><rect x="457.2" y="675.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="460.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="465.8" y="739.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="468.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="465.8" y="723.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="468.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="465.8" y="707.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="468.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.18%)</title><rect x="465.8" y="691.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="468.8" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (32 samples, 2.92%)</title><rect x="468.0" y="739.0" width="34.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="471.0" y="750.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (28 samples, 2.56%)</title><rect x="472.3" y="723.0" width="30.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.3" y="734.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.18%)</title><rect x="475.5" y="707.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="478.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (11 samples, 1.00%)</title><rect x="477.7" y="707.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="480.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (11 samples, 1.00%)</title><rect x="477.7" y="691.0" width="11.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="480.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 1.10%)</title><rect x="489.5" y="707.0" width="13.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="492.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.55%)</title><rect x="502.5" y="787.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="505.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.55%)</title><rect x="502.5" y="771.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="505.5" y="782.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.55%)</title><rect x="502.5" y="755.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="505.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (141 samples, 12.88%)</title><rect x="508.9" y="787.0" width="152.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="511.9" y="798.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (141 samples, 12.88%)</title><rect x="508.9" y="771.0" width="152.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="511.9" y="782.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="516.5" y="755.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="519.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (53 samples, 4.84%)</title><rect x="517.6" y="755.0" width="57.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="520.6" y="766.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (52 samples, 4.75%)</title><rect x="518.6" y="739.0" width="56.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="521.6" y="750.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 3.65%)</title><rect x="522.9" y="723.0" width="43.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="525.9" y="734.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (21 samples, 1.92%)</title><rect x="534.8" y="707.0" width="22.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="537.8" y="718.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (21 samples, 1.92%)</title><rect x="534.8" y="691.0" width="22.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="537.8" y="702.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 1.92%)</title><rect x="534.8" y="675.0" width="22.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="537.8" y="686.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (13 samples, 1.19%)</title><rect x="539.1" y="659.0" width="14.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="542.1" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="541.3" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="544.3" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="541.3" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="544.3" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.46%)</title><rect x="542.3" y="643.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="545.3" y="654.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.46%)</title><rect x="542.3" y="627.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="545.3" y="638.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.37%)</title><rect x="543.4" y="611.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="546.4" y="622.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.18%)</title><rect x="543.4" y="595.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="546.4" y="606.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (2 samples, 0.18%)</title><rect x="545.6" y="595.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="548.6" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.46%)</title><rect x="547.7" y="643.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="550.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.37%)</title><rect x="547.7" y="627.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="550.7" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (3 samples, 0.27%)</title><rect x="547.7" y="611.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="550.7" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (3 samples, 0.27%)</title><rect x="547.7" y="595.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="550.7" y="606.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="547.7" y="579.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="550.7" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="547.7" y="563.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="550.7" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="547.7" y="547.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="550.7" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (2 samples, 0.18%)</title><rect x="548.8" y="579.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="551.8" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.18%)</title><rect x="548.8" y="563.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="551.8" y="574.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (2 samples, 0.18%)</title><rect x="548.8" y="547.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="551.8" y="558.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="551.0" y="611.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="554.0" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="552.0" y="627.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="555.0" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.37%)</title><rect x="553.1" y="659.0" width="4.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="556.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.46%)</title><rect x="557.4" y="707.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.4" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="562.8" y="707.0" width="3.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="565.8" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.73%)</title><rect x="566.1" y="723.0" width="8.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="569.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="574.7" y="755.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="577.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.46%)</title><rect x="575.8" y="755.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="578.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.46%)</title><rect x="575.8" y="739.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="578.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.46%)</title><rect x="575.8" y="723.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="578.8" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (74 samples, 6.76%)</title><rect x="581.1" y="755.0" width="79.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="584.1" y="766.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (73 samples, 6.67%)</title><rect x="582.2" y="739.0" width="78.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="585.2" y="750.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (24 samples, 2.19%)</title><rect x="582.2" y="723.0" width="25.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="585.2" y="734.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (14 samples, 1.28%)</title><rect x="593.0" y="707.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="596.0" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (14 samples, 1.28%)</title><rect x="593.0" y="691.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="596.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (14 samples, 1.28%)</title><rect x="593.0" y="675.0" width="15.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="596.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (14 samples, 1.28%)</title><rect x="593.0" y="659.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="596.0" y="670.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (2 samples, 0.18%)</title><rect x="605.9" y="643.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="608.9" y="654.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="605.9" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="608.9" y="638.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.09%)</title><rect x="607.0" y="627.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="610.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="608.1" y="723.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.1" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="608.1" y="707.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="611.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="608.1" y="691.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="611.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="609.2" y="675.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="612.2" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (47 samples, 4.29%)</title><rect x="610.2" y="723.0" width="50.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="613.2" y="734.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (38 samples, 3.47%)</title><rect x="619.9" y="707.0" width="41.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="622.9" y="718.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.18%)</title><rect x="621.0" y="691.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="624.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.18%)</title><rect x="623.2" y="691.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="626.2" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.18%)</title><rect x="623.2" y="675.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="626.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 3.01%)</title><rect x="625.3" y="691.0" width="35.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="628.3" y="702.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.27%)</title><rect x="648.0" y="675.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="651.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.64%)</title><rect x="651.2" y="675.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.2" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="657.7" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="660.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="657.7" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="660.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="657.7" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="660.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="657.7" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="660.7" y="622.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="657.7" y="595.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="660.7" y="606.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.18%)</title><rect x="658.7" y="675.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="661.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (49 samples, 4.47%)</title><rect x="660.9" y="787.0" width="52.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="663.9" y="798.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (48 samples, 4.38%)</title><rect x="660.9" y="771.0" width="51.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.9" y="782.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/173717178.process (28 samples, 2.56%)</title><rect x="662.0" y="755.0" width="30.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="665.0" y="766.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (28 samples, 2.56%)</title><rect x="662.0" y="739.0" width="30.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="665.0" y="750.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (26 samples, 2.37%)</title><rect x="662.0" y="723.0" width="28.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="665.0" y="734.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.27%)</title><rect x="662.0" y="707.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="665.0" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.27%)</title><rect x="662.0" y="691.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="665.0" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.27%)</title><rect x="662.0" y="675.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="665.0" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.27%)</title><rect x="662.0" y="659.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="665.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.27%)</title><rect x="662.0" y="643.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="665.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.18%)</title><rect x="663.0" y="627.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.64%)</title><rect x="665.2" y="707.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.2" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="665.2" y="691.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="668.2" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.55%)</title><rect x="666.3" y="691.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="669.3" y="702.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.55%)</title><rect x="666.3" y="675.0" width="6.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="669.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="672.7" y="707.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="675.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (14 samples, 1.28%)</title><rect x="674.9" y="707.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="677.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="688.9" y="691.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="691.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="688.9" y="675.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="691.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="690.0" y="723.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="693.0" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="691.1" y="707.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="694.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="691.1" y="691.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="691.1" y="675.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="694.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.55%)</title><rect x="692.1" y="755.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="695.1" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="692.1" y="739.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="695.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="692.1" y="723.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="695.1" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="692.1" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="695.1" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.46%)</title><rect x="693.2" y="739.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="696.2" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.18%)</title><rect x="698.6" y="755.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="701.6" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.18%)</title><rect x="698.6" y="739.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="701.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/242566820.get$Lambda (2 samples, 0.18%)</title><rect x="698.6" y="723.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="701.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/242566820.&lt;init&gt; (1 samples, 0.09%)</title><rect x="699.7" y="707.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.7" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="700.8" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="703.8" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="700.8" y="739.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="703.8" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.09%)</title><rect x="700.8" y="723.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="703.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.55%)</title><rect x="701.8" y="755.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="704.8" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.46%)</title><rect x="702.9" y="739.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="705.9" y="750.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.27%)</title><rect x="702.9" y="723.0" width="3.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="705.9" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.18%)</title><rect x="706.1" y="723.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="709.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.37%)</title><rect x="708.3" y="755.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="711.3" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="709.4" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="709.4" y="723.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="712.4" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="709.4" y="707.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="712.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="709.4" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="712.4" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="709.4" y="675.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="712.4" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="709.4" y="659.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="712.4" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.18%)</title><rect x="710.5" y="739.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="713.5" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="712.6" y="771.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="715.6" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/52724764.linkToTargetMethod (1 samples, 0.09%)</title><rect x="713.7" y="787.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="716.7" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="713.7" y="771.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/414127668.get$Lambda (1 samples, 0.09%)</title><rect x="713.7" y="755.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="716.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="713.7" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="716.7" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="713.7" y="723.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="716.7" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="713.7" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="716.7" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="713.7" y="691.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="716.7" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="713.7" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="716.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.64%)</title><rect x="714.8" y="787.0" width="19.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="717.8" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="721.2" y="771.0" width="2.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="724.2" y="782.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="721.2" y="755.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="724.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.91%)</title><rect x="723.4" y="771.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="726.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.73%)</title><rect x="725.5" y="755.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="728.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/414127668.accept (8 samples, 0.73%)</title><rect x="725.5" y="739.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="728.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (8 samples, 0.73%)</title><rect x="725.5" y="723.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="728.5" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (8 samples, 0.73%)</title><rect x="725.5" y="707.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="728.5" y="718.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (8 samples, 0.73%)</title><rect x="725.5" y="691.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="728.5" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.37%)</title><rect x="729.9" y="675.0" width="4.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="732.9" y="686.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="729.9" y="659.0" width="4.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="732.9" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.09%)</title><rect x="734.2" y="803.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="737.2" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="734.2" y="787.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="737.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/479232505.get$Lambda (1 samples, 0.09%)</title><rect x="734.2" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="737.2" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="734.2" y="755.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="737.2" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="734.2" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="737.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.64%)</title><rect x="735.2" y="803.0" width="19.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="738.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.55%)</title><rect x="736.3" y="787.0" width="18.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="739.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.28%)</title><rect x="739.6" y="771.0" width="15.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="742.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/414127668.accept (1 samples, 0.09%)</title><rect x="739.6" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="742.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.09%)</title><rect x="739.6" y="739.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="742.6" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.09%)</title><rect x="739.6" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="742.6" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.09%)</title><rect x="739.6" y="707.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="742.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/479232505.accept (13 samples, 1.19%)</title><rect x="740.6" y="755.0" width="14.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="743.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (13 samples, 1.19%)</title><rect x="740.6" y="739.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="743.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/92221083.complete (13 samples, 1.19%)</title><rect x="740.6" y="723.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="743.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (13 samples, 1.19%)</title><rect x="740.6" y="707.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="743.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (13 samples, 1.19%)</title><rect x="740.6" y="691.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="743.6" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.19%)</title><rect x="740.6" y="675.0" width="14.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="743.6" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.19%)</title><rect x="740.6" y="659.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="743.6" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (13 samples, 1.19%)</title><rect x="740.6" y="643.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="743.6" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (13 samples, 1.19%)</title><rect x="740.6" y="627.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="743.6" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="754.6" y="803.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="757.6" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.09%)</title><rect x="754.6" y="787.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="757.6" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="754.6" y="771.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="757.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="754.6" y="755.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="754.6" y="739.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="757.6" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="755.7" y="803.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="758.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="755.7" y="787.0" width="2.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="758.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.27%)</title><rect x="757.9" y="819.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="760.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (14 samples, 1.28%)</title><rect x="761.1" y="867.0" width="15.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="764.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.28%)</title><rect x="761.1" y="851.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="764.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.28%)</title><rect x="761.1" y="835.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="764.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.28%)</title><rect x="761.1" y="819.0" width="15.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="764.1" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.27%)</title><rect x="769.7" y="803.0" width="3.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="772.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="769.7" y="787.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="772.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (2 samples, 0.18%)</title><rect x="773.0" y="803.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="776.0" y="814.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="775.1" y="803.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="778.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (212 samples, 19.36%)</title><rect x="776.2" y="867.0" width="228.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="779.2" y="878.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (212 samples, 19.36%)</title><rect x="776.2" y="851.0" width="228.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.2" y="862.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (1 samples, 0.09%)</title><rect x="782.7" y="835.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="785.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (191 samples, 17.44%)</title><rect x="783.7" y="835.0" width="205.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="786.7" y="846.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (30 samples, 2.74%)</title><rect x="790.2" y="819.0" width="32.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="793.2" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (17 samples, 1.55%)</title><rect x="796.7" y="803.0" width="18.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="799.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="813.9" y="787.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="816.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.64%)</title><rect x="815.0" y="803.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="818.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.64%)</title><rect x="815.0" y="787.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="818.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (7 samples, 0.64%)</title><rect x="815.0" y="771.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="818.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.09%)</title><rect x="822.5" y="819.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="825.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="822.5" y="803.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.64%)</title><rect x="823.6" y="819.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="826.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (6 samples, 0.55%)</title><rect x="824.7" y="803.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="827.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (147 samples, 13.42%)</title><rect x="831.2" y="819.0" width="158.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.2" y="830.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (147 samples, 13.42%)</title><rect x="831.2" y="803.0" width="158.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="834.2" y="814.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.46%)</title><rect x="837.6" y="787.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="840.6" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="843.0" y="787.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="846.0" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park (135 samples, 12.33%)</title><rect x="844.1" y="787.0" width="145.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="847.1" y="798.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.27%)</title><rect x="848.4" y="771.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="851.4" y="782.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="851.6" y="771.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="854.6" y="782.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (26 samples, 2.37%)</title><rect x="852.7" y="771.0" width="28.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="855.7" y="782.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.91%)</title><rect x="858.1" y="755.0" width="10.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="861.1" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.46%)</title><rect x="862.4" y="739.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="865.4" y="750.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.37%)</title><rect x="863.5" y="723.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="866.5" y="734.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="867.8" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="870.8" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="868.9" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="871.9" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.27%)</title><rect x="869.9" y="755.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="872.9" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.64%)</title><rect x="873.2" y="755.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="876.2" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="880.7" y="771.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="883.7" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="881.8" y="771.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="884.8" y="782.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.09%)</title><rect x="884.0" y="771.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="887.0" y="782.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.82%)</title><rect x="885.0" y="771.0" width="9.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="888.0" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 2.83%)</title><rect x="894.7" y="771.0" width="33.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="897.7" y="782.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (41 samples, 3.74%)</title><rect x="928.1" y="771.0" width="44.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="931.1" y="782.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.27%)</title><rect x="972.3" y="771.0" width="3.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="975.3" y="782.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="975.6" y="771.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="978.6" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.18%)</title><rect x="976.6" y="771.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="979.6" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.18%)</title><rect x="978.8" y="771.0" width="2.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="981.8" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="980.9" y="771.0" width="2.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="983.9" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="983.1" y="771.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="986.1" y="782.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="984.2" y="771.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="987.2" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="985.3" y="771.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.3" y="782.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.18%)</title><rect x="987.4" y="771.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="990.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (12 samples, 1.10%)</title><rect x="989.6" y="835.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="992.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 1.10%)</title><rect x="989.6" y="819.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="992.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (11 samples, 1.00%)</title><rect x="989.6" y="803.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="992.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.09%)</title><rect x="1001.4" y="803.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1004.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.09%)</title><rect x="1001.4" y="787.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1004.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="1001.4" y="771.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1004.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.18%)</title><rect x="1002.5" y="835.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1005.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="1002.5" y="819.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1005.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1004.6" y="915.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1007.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1004.6" y="899.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1007.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1004.6" y="883.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1007.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1004.6" y="867.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1007.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1004.6" y="851.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1007.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1004.6" y="835.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1007.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1004.6" y="819.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1007.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1004.6" y="803.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1007.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1004.6" y="787.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1007.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.09%)</title><rect x="1004.6" y="771.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1007.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.09%)</title><rect x="1004.6" y="755.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1007.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="1004.6" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1007.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (1 samples, 0.09%)</title><rect x="1004.6" y="723.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1007.6" y="734.0"></text>
</g>
<g>
<title>start_thread (171 samples, 15.62%)</title><rect x="1005.7" y="915.0" width="184.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1008.7" y="926.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (171 samples, 15.62%)</title><rect x="1005.7" y="899.0" width="184.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1008.7" y="910.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 2.01%)</title><rect x="1005.7" y="883.0" width="23.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1008.7" y="894.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.18%)</title><rect x="1005.7" y="867.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1008.7" y="878.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.18%)</title><rect x="1005.7" y="851.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1008.7" y="862.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="1005.7" y="835.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1008.7" y="846.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.09%)</title><rect x="1005.7" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.7" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1006.8" y="835.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1009.8" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 1.83%)</title><rect x="1007.9" y="867.0" width="21.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1010.9" y="878.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.09%)</title><rect x="1007.9" y="851.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1010.9" y="862.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1007.9" y="835.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1010.9" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.55%)</title><rect x="1009.0" y="851.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1012.0" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.27%)</title><rect x="1009.0" y="835.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1012.0" y="846.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.18%)</title><rect x="1009.0" y="819.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1012.0" y="830.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.18%)</title><rect x="1009.0" y="803.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1012.0" y="814.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1010.0" y="787.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1013.0" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1011.1" y="819.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1014.1" y="830.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1011.1" y="803.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1014.1" y="814.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1011.1" y="787.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.1" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="1011.1" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1014.1" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="1011.1" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.1" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.27%)</title><rect x="1012.2" y="835.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1015.2" y="846.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.27%)</title><rect x="1012.2" y="819.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1015.2" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (13 samples, 1.19%)</title><rect x="1015.4" y="851.0" width="14.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1018.4" y="862.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (13 samples, 1.19%)</title><rect x="1015.4" y="835.0" width="14.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1018.4" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (12 samples, 1.10%)</title><rect x="1015.4" y="819.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1018.4" y="830.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (12 samples, 1.10%)</title><rect x="1015.4" y="803.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.4" y="814.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (11 samples, 1.00%)</title><rect x="1016.5" y="787.0" width="11.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1019.5" y="798.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (11 samples, 1.00%)</title><rect x="1016.5" y="771.0" width="11.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1019.5" y="782.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1019.7" y="755.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1022.7" y="766.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (7 samples, 0.64%)</title><rect x="1020.8" y="755.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1023.8" y="766.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.09%)</title><rect x="1025.1" y="739.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1028.1" y="750.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1026.2" y="739.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.2" y="750.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1027.3" y="739.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.3" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1027.3" y="723.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.3" y="734.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="1027.3" y="707.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.3" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1028.4" y="819.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1031.4" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_cset_region_for_worker(unsigned int) (1 samples, 0.09%)</title><rect x="1028.4" y="803.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1031.4" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (148 samples, 13.52%)</title><rect x="1029.4" y="883.0" width="159.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1032.4" y="894.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (148 samples, 13.52%)</title><rect x="1029.4" y="867.0" width="159.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.4" y="878.0">JavaThread::thread_m..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (148 samples, 13.52%)</title><rect x="1029.4" y="851.0" width="159.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1032.4" y="862.0">CompileBroker::compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (147 samples, 13.42%)</title><rect x="1029.4" y="835.0" width="158.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.4" y="846.0">CompileBroker::invok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (147 samples, 13.42%)</title><rect x="1029.4" y="819.0" width="158.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.4" y="830.0">C2Compiler::compile_..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (147 samples, 13.42%)</title><rect x="1029.4" y="803.0" width="158.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1032.4" y="814.0">Compile::Compile(ciE..</text>
</g>
<g>
<title>Compile::Code_Gen() (64 samples, 5.84%)</title><rect x="1029.4" y="787.0" width="69.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.4" y="798.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.27%)</title><rect x="1029.4" y="771.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1032.4" y="782.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.27%)</title><rect x="1029.4" y="755.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.4" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.27%)</title><rect x="1032.7" y="771.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.7" y="782.0"></text>
</g>
<g>
<title>Compile::ConstantTable::emit(CodeBuffer&amp;) (1 samples, 0.09%)</title><rect x="1033.7" y="755.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.7" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1034.8" y="755.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.8" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1034.8" y="739.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1037.8" y="750.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.55%)</title><rect x="1035.9" y="771.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.9" y="782.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1035.9" y="755.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1038.9" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.37%)</title><rect x="1037.0" y="755.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1040.0" y="766.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1038.1" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1041.1" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.18%)</title><rect x="1039.1" y="739.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.1" y="750.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1039.1" y="723.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.1" y="734.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1039.1" y="707.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1042.1" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1039.1" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1042.1" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1039.1" y="675.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1042.1" y="686.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1039.1" y="659.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1042.1" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1040.2" y="723.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1043.2" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1040.2" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1043.2" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1040.2" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1043.2" y="702.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1040.2" y="675.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.2" y="686.0"></text>
</g>
<g>
<title>Node::ideal_reg() const (1 samples, 0.09%)</title><rect x="1041.3" y="755.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1044.3" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.27%)</title><rect x="1042.4" y="771.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.4" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.27%)</title><rect x="1042.4" y="755.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.4" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1042.4" y="739.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1045.4" y="750.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.09%)</title><rect x="1042.4" y="723.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1045.4" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1043.4" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.4" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1044.5" y="739.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1047.5" y="750.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1044.5" y="723.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (49 samples, 4.47%)</title><rect x="1045.6" y="771.0" width="52.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1048.6" y="782.0">Phase..</text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1045.6" y="755.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1048.6" y="766.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.09%)</title><rect x="1046.7" y="755.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1049.7" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="1047.8" y="755.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1050.8" y="766.0"></text>
</g>
<g>
<title>LiveRangeMap::compress_uf_map_for_nodes() (1 samples, 0.09%)</title><rect x="1049.9" y="755.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.9" y="766.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1051.0" y="755.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.0" y="766.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.09%)</title><rect x="1052.1" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1055.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.27%)</title><rect x="1053.1" y="755.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1056.1" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1053.1" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1056.1" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.18%)</title><rect x="1054.2" y="739.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.2" y="750.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1054.2" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.2" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1055.3" y="723.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1058.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1056.4" y="755.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1059.4" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1056.4" y="739.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.55%)</title><rect x="1057.5" y="755.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.5" y="766.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.09%)</title><rect x="1062.8" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.91%)</title><rect x="1063.9" y="755.0" width="10.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.37%)</title><rect x="1069.3" y="739.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.3" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.27%)</title><rect x="1070.4" y="723.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.4" y="734.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1073.6" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1074.7" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1077.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.64%)</title><rect x="1075.8" y="755.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.8" y="766.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (2 samples, 0.18%)</title><rect x="1077.9" y="739.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.9" y="750.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1080.1" y="739.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.1" y="750.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.09%)</title><rect x="1081.2" y="739.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.2" y="750.0"></text>
</g>
<g>
<title>indOffset32Oper::in_RegMask(int) const (1 samples, 0.09%)</title><rect x="1082.2" y="739.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.37%)</title><rect x="1083.3" y="755.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1086.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.18%)</title><rect x="1085.5" y="739.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1086.5" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.5" y="734.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1086.5" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.5" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.18%)</title><rect x="1087.6" y="755.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.6" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.18%)</title><rect x="1087.6" y="739.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.6" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.18%)</title><rect x="1087.6" y="723.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.6" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.09%)</title><rect x="1087.6" y="707.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.6" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1087.6" y="691.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.6" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.09%)</title><rect x="1088.7" y="707.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.7" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.18%)</title><rect x="1089.8" y="755.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.8" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="1089.8" y="739.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.8" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1091.9" y="755.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.9" y="766.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1091.9" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1094.9" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.46%)</title><rect x="1093.0" y="755.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.0" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1097.3" y="739.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.3" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (71 samples, 6.48%)</title><rect x="1098.4" y="787.0" width="76.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.4" y="798.0">Compile:..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1098.4" y="771.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1101.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.37%)</title><rect x="1099.5" y="771.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.37%)</title><rect x="1099.5" y="755.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1100.6" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.09%)</title><rect x="1100.6" y="723.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1101.6" y="739.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1101.6" y="723.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1101.6" y="707.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1101.6" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.6" y="702.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1101.6" y="675.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1102.7" y="691.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1102.7" y="675.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1102.7" y="659.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1102.7" y="643.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1102.7" y="627.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1102.7" y="611.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1102.7" y="595.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1102.7" y="579.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.7" y="590.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.09%)</title><rect x="1102.7" y="563.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.7" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1103.8" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (50 samples, 4.57%)</title><rect x="1104.9" y="771.0" width="53.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.9" y="782.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="1104.9" y="755.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.27%)</title><rect x="1107.0" y="755.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.0" y="766.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1109.2" y="739.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (36 samples, 3.29%)</title><rect x="1110.3" y="755.0" width="38.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.3" y="766.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (33 samples, 3.01%)</title><rect x="1113.5" y="739.0" width="35.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.5" y="750.0">Pha..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.09%)</title><rect x="1113.5" y="723.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.27%)</title><rect x="1114.6" y="723.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (29 samples, 2.65%)</title><rect x="1117.8" y="723.0" width="31.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.8" y="734.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.37%)</title><rect x="1144.7" y="707.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.27%)</title><rect x="1149.1" y="755.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.1" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.18%)</title><rect x="1150.1" y="739.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.1" y="750.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1150.1" y="723.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.1" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1151.2" y="723.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1154.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (6 samples, 0.55%)</title><rect x="1152.3" y="755.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.09%)</title><rect x="1156.6" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1157.7" y="739.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1157.7" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.7" y="734.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1157.7" y="707.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.7" y="718.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1157.7" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.7" y="702.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1157.7" y="675.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.7" y="686.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1157.7" y="659.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.7" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1157.7" y="643.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.7" y="654.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1157.7" y="627.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.7" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1158.7" y="771.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 1.00%)</title><rect x="1159.8" y="771.0" width="11.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.8" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 1.00%)</title><rect x="1159.8" y="755.0" width="11.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.8" y="766.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1159.8" y="739.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.8" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1159.8" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.8" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1159.8" y="707.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.8" y="718.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1160.9" y="739.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.9" y="750.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.18%)</title><rect x="1160.9" y="723.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.9" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.18%)</title><rect x="1160.9" y="707.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1160.9" y="691.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.9" y="702.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1163.1" y="739.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.1" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.27%)</title><rect x="1164.1" y="739.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.1" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1166.3" y="723.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.3" y="734.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1166.3" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.3" y="718.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.37%)</title><rect x="1167.4" y="739.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.4" y="750.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (4 samples, 0.37%)</title><rect x="1167.4" y="723.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.4" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.37%)</title><rect x="1167.4" y="707.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.4" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.37%)</title><rect x="1167.4" y="691.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.4" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.27%)</title><rect x="1167.4" y="675.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.4" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.27%)</title><rect x="1167.4" y="659.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.4" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.27%)</title><rect x="1167.4" y="643.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.4" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.27%)</title><rect x="1167.4" y="627.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.4" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.27%)</title><rect x="1167.4" y="611.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.4" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.27%)</title><rect x="1167.4" y="595.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.4" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.27%)</title><rect x="1167.4" y="579.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.4" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.27%)</title><rect x="1167.4" y="563.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.4" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1167.4" y="547.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.4" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.4" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.4" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.4" y="515.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.4" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.4" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.4" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.4" y="483.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.4" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.4" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.4" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.4" y="451.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.4" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.4" y="435.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.4" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.4" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.4" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.4" y="403.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.4" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.4" y="387.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.4" y="398.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1167.4" y="371.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.4" y="382.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1167.4" y="355.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.4" y="366.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1168.4" y="531.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.4" y="542.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1168.4" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.4" y="526.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1169.5" y="547.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.5" y="558.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1169.5" y="531.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.5" y="542.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1170.6" y="675.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.6" y="686.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1170.6" y="659.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.6" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.18%)</title><rect x="1171.7" y="771.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.7" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1171.7" y="755.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.7" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1171.7" y="739.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.7" y="750.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1172.8" y="723.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.8" y="734.0"></text>
</g>
<g>
<title>Ticks::stamp() (1 samples, 0.09%)</title><rect x="1173.8" y="771.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.73%)</title><rect x="1174.9" y="787.0" width="8.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.73%)</title><rect x="1174.9" y="771.0" width="8.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.73%)</title><rect x="1174.9" y="755.0" width="8.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.73%)</title><rect x="1174.9" y="739.0" width="8.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.73%)</title><rect x="1174.9" y="723.0" width="8.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.64%)</title><rect x="1174.9" y="707.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.46%)</title><rect x="1174.9" y="691.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.46%)</title><rect x="1174.9" y="675.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.46%)</title><rect x="1174.9" y="659.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.46%)</title><rect x="1174.9" y="643.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.46%)</title><rect x="1174.9" y="627.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.46%)</title><rect x="1174.9" y="611.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.37%)</title><rect x="1174.9" y="595.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.37%)</title><rect x="1174.9" y="579.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.37%)</title><rect x="1174.9" y="563.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.37%)</title><rect x="1174.9" y="547.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.37%)</title><rect x="1174.9" y="531.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.37%)</title><rect x="1174.9" y="515.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1174.9" y="499.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1174.9" y="483.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1174.9" y="467.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1174.9" y="451.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1174.9" y="435.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1174.9" y="419.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1174.9" y="403.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1174.9" y="387.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1174.9" y="371.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1174.9" y="355.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1174.9" y="339.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.9" y="323.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.9" y="307.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.9" y="291.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.9" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.9" y="259.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.9" y="243.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1174.9" y="227.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1174.9" y="211.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="222.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.09%)</title><rect x="1174.9" y="195.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="179.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="190.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.9" y="163.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="174.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1174.9" y="147.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="131.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="115.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="99.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="83.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="67.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.9" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="51.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.9" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="35.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1176.0" y="323.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1176.0" y="307.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="318.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.09%)</title><rect x="1176.0" y="291.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1176.0" y="275.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="286.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1176.0" y="259.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="270.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1176.0" y="243.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="227.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="211.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="195.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="163.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.0" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="147.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="131.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.0" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="115.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="99.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="110.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1176.0" y="83.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="94.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="67.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1177.1" y="499.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.1" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.1" y="467.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.1" y="451.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.1" y="435.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.1" y="419.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.1" y="403.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.1" y="387.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.1" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.1" y="355.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.1" y="339.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.1" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.1" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.1" y="291.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.1" y="275.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.1" y="259.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.1" y="243.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.1" y="227.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.1" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="222.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.1" y="195.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="206.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1177.1" y="179.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="190.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1177.1" y="163.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="174.0"></text>
</g>
<g>
<title>Method::is_accessor() const (1 samples, 0.09%)</title><rect x="1177.1" y="147.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1178.1" y="483.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.1" y="494.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.1" y="467.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.2" y="595.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.2" y="579.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.2" y="563.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.2" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.2" y="531.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.2" y="515.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.2" y="499.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.2" y="483.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.2" y="467.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.2" y="451.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.2" y="435.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.2" y="419.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.2" y="403.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.2" y="414.0"></text>
</g>
<g>
<title>TypeInstPtr::with_inline_depth(int) const (1 samples, 0.09%)</title><rect x="1179.2" y="387.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.2" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.3" y="691.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.3" y="675.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1180.3" y="659.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1180.3" y="643.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1180.3" y="627.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1180.3" y="611.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1180.3" y="595.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.3" y="579.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.3" y="563.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.3" y="547.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.3" y="531.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.3" y="515.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.3" y="499.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="510.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1180.3" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="494.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1180.3" y="467.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="478.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.09%)</title><rect x="1180.3" y="451.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1180.3" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.4" y="579.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.4" y="563.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.4" y="547.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.4" y="531.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.4" y="515.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.4" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.4" y="483.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.4" y="467.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.4" y="451.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.4" y="435.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.4" y="419.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.4" y="403.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.4" y="387.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.4" y="371.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.4" y="355.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.4" y="339.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.4" y="323.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.4" y="307.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.4" y="291.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.4" y="275.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.4" y="259.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.4" y="243.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.4" y="227.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.4" y="211.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.4" y="195.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.09%)</title><rect x="1181.4" y="179.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.4" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.4" y="163.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.4" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.4" y="147.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="158.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1181.4" y="131.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="142.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.09%)</title><rect x="1181.4" y="115.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1182.5" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="718.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1182.5" y="691.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="702.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.5" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="686.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.09%)</title><rect x="1182.5" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="670.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1182.5" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="654.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.09%)</title><rect x="1182.5" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="638.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.09%)</title><rect x="1182.5" y="611.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="622.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.27%)</title><rect x="1183.5" y="787.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.5" y="798.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1183.5" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.5" y="782.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.18%)</title><rect x="1184.6" y="771.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="782.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1186.8" y="787.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.8" y="798.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1186.8" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.8" y="782.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1186.8" y="755.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.8" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.8" y="739.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.8" y="750.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.09%)</title><rect x="1186.8" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.8" y="734.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.09%)</title><rect x="1186.8" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.8" y="718.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1187.8" y="835.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="846.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1187.8" y="819.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.8" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1187.8" y="803.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.8" y="814.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.09%)</title><rect x="1187.8" y="787.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.8" y="798.0"></text>
</g>
<g>
<title>CodeHeap::block_start(void*) const (1 samples, 0.09%)</title><rect x="1187.8" y="771.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.8" y="782.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1188.9" y="883.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.9" y="894.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1188.9" y="867.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.9" y="878.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="851.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="862.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="835.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.9" y="846.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="819.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="803.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="787.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="798.0"></text>
</g>
<g>
<title>SurvRateGroup::record_surviving_words(int, unsigned long) (1 samples, 0.09%)</title><rect x="1188.9" y="771.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.9" y="782.0"></text>
</g>
<g>
<title>TruncatedSeq::add(double) (1 samples, 0.09%)</title><rect x="1188.9" y="755.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.9" y="766.0"></text>
</g>
</g>
</svg>
