<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1125"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1125"> </text>
<g id="frames">
<g>
<title>all (181 samples, 100.00%)</title><rect x="10.0" y="1091.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.55%)</title><rect x="10.0" y="1075.0" width="6.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.55%)</title><rect x="10.0" y="1059.0" width="6.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 15.47%)</title><rect x="16.5" y="1075.0" width="182.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.5" y="1086.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 14.92%)</title><rect x="23.0" y="1059.0" width="176.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.0" y="1070.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.55%)</title><rect x="23.0" y="1043.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.55%)</title><rect x="23.0" y="1027.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 9.39%)</title><rect x="29.6" y="1043.0" width="110.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.6" y="1054.0">java/lang/Ite..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1612081961.accept (16 samples, 8.84%)</title><rect x="29.6" y="1027.0" width="104.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.6" y="1038.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (16 samples, 8.84%)</title><rect x="29.6" y="1011.0" width="104.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="32.6" y="1022.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (11 samples, 6.08%)</title><rect x="29.6" y="995.0" width="71.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.6" y="1006.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (11 samples, 6.08%)</title><rect x="29.6" y="979.0" width="71.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.6" y="990.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (11 samples, 6.08%)</title><rect x="29.6" y="963.0" width="71.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.6" y="974.0">com/line..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (11 samples, 6.08%)</title><rect x="29.6" y="947.0" width="71.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.6" y="958.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 6.08%)</title><rect x="29.6" y="931.0" width="71.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.6" y="942.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (11 samples, 6.08%)</title><rect x="29.6" y="915.0" width="71.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.6" y="926.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 4.42%)</title><rect x="29.6" y="899.0" width="52.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.6" y="910.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.10%)</title><rect x="29.6" y="883.0" width="13.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.10%)</title><rect x="29.6" y="867.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.10%)</title><rect x="29.6" y="851.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 1.10%)</title><rect x="29.6" y="835.0" width="13.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 3.31%)</title><rect x="42.6" y="883.0" width="39.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.6" y="894.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 3.31%)</title><rect x="42.6" y="867.0" width="39.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="45.6" y="878.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 3.31%)</title><rect x="42.6" y="851.0" width="39.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.6" y="862.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.76%)</title><rect x="49.1" y="835.0" width="32.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="52.1" y="846.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 2.76%)</title><rect x="49.1" y="819.0" width="32.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.1" y="830.0">su..</text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 2.21%)</title><rect x="49.1" y="803.0" width="26.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="52.1" y="814.0">U..</text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 1.66%)</title><rect x="49.1" y="787.0" width="19.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="52.1" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.55%)</title><rect x="68.7" y="787.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="71.7" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.55%)</title><rect x="75.2" y="803.0" width="6.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="78.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.55%)</title><rect x="81.7" y="899.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.55%)</title><rect x="81.7" y="883.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.55%)</title><rect x="81.7" y="867.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.10%)</title><rect x="88.2" y="899.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.10%)</title><rect x="88.2" y="883.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 1.10%)</title><rect x="88.2" y="867.0" width="13.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="91.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.55%)</title><rect x="101.3" y="995.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.55%)</title><rect x="101.3" y="979.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="104.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.55%)</title><rect x="107.8" y="995.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.55%)</title><rect x="107.8" y="979.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="110.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.55%)</title><rect x="107.8" y="963.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="110.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.66%)</title><rect x="114.3" y="995.0" width="19.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.66%)</title><rect x="114.3" y="979.0" width="19.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="117.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.55%)</title><rect x="133.9" y="1027.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="136.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.55%)</title><rect x="133.9" y="1011.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="136.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.55%)</title><rect x="133.9" y="995.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.55%)</title><rect x="133.9" y="979.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="136.9" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.55%)</title><rect x="133.9" y="963.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.55%)</title><rect x="133.9" y="947.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.97%)</title><rect x="140.4" y="1043.0" width="58.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.4" y="1054.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.97%)</title><rect x="140.4" y="1027.0" width="58.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.4" y="1038.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 0.55%)</title><rect x="140.4" y="1011.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.55%)</title><rect x="140.4" y="995.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.55%)</title><rect x="140.4" y="979.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.55%)</title><rect x="140.4" y="963.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.trace (1 samples, 0.55%)</title><rect x="140.4" y="947.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="143.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 2.21%)</title><rect x="146.9" y="1011.0" width="26.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.9" y="1022.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.55%)</title><rect x="146.9" y="995.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="149.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.55%)</title><rect x="146.9" y="979.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="149.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.55%)</title><rect x="146.9" y="963.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.55%)</title><rect x="146.9" y="947.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.55%)</title><rect x="146.9" y="931.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.9" y="942.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.55%)</title><rect x="146.9" y="915.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.9" y="926.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.55%)</title><rect x="146.9" y="899.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.9" y="910.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.55%)</title><rect x="146.9" y="883.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (3 samples, 1.66%)</title><rect x="153.4" y="995.0" width="19.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="156.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (2 samples, 1.10%)</title><rect x="153.4" y="979.0" width="13.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="156.4" y="990.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.55%)</title><rect x="159.9" y="963.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="162.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.55%)</title><rect x="166.5" y="979.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.55%)</title><rect x="173.0" y="1011.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.55%)</title><rect x="173.0" y="995.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.55%)</title><rect x="173.0" y="979.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="176.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.55%)</title><rect x="173.0" y="963.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.55%)</title><rect x="173.0" y="947.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.55%)</title><rect x="173.0" y="931.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.55%)</title><rect x="173.0" y="915.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.55%)</title><rect x="173.0" y="899.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.55%)</title><rect x="173.0" y="883.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.0" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.55%)</title><rect x="173.0" y="867.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.0" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.55%)</title><rect x="173.0" y="851.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.55%)</title><rect x="179.5" y="1011.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.55%)</title><rect x="179.5" y="995.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.55%)</title><rect x="179.5" y="979.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (1 samples, 0.55%)</title><rect x="179.5" y="963.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="182.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.55%)</title><rect x="179.5" y="947.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="182.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.hashCode (1 samples, 0.55%)</title><rect x="179.5" y="931.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="182.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 1.10%)</title><rect x="186.0" y="1011.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 1.10%)</title><rect x="186.0" y="995.0" width="13.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.55%)</title><rect x="192.5" y="979.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.5" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.run (56 samples, 30.94%)</title><rect x="199.1" y="1075.0" width="365.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.1" y="1086.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (56 samples, 30.94%)</title><rect x="199.1" y="1059.0" width="365.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.1" y="1070.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (56 samples, 30.94%)</title><rect x="199.1" y="1043.0" width="365.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.1" y="1054.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2038354488.run (39 samples, 21.55%)</title><rect x="205.6" y="1027.0" width="254.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.6" y="1038.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (39 samples, 21.55%)</title><rect x="205.6" y="1011.0" width="254.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.6" y="1022.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (39 samples, 21.55%)</title><rect x="205.6" y="995.0" width="254.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.6" y="1006.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (38 samples, 20.99%)</title><rect x="205.6" y="979.0" width="247.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="990.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.10%)</title><rect x="212.1" y="963.0" width="13.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="215.1" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.55%)</title><rect x="218.6" y="947.0" width="6.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="221.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (14 samples, 7.73%)</title><rect x="225.1" y="963.0" width="91.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.1" y="974.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (14 samples, 7.73%)</title><rect x="225.1" y="947.0" width="91.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.1" y="958.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (14 samples, 7.73%)</title><rect x="225.1" y="931.0" width="91.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.1" y="942.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 7.73%)</title><rect x="225.1" y="915.0" width="91.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.1" y="926.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 7.73%)</title><rect x="225.1" y="899.0" width="91.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.1" y="910.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (14 samples, 7.73%)</title><rect x="225.1" y="883.0" width="91.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.1" y="894.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.66%)</title><rect x="225.1" y="867.0" width="19.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.55%)</title><rect x="225.1" y="851.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.55%)</title><rect x="225.1" y="835.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.55%)</title><rect x="225.1" y="819.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.55%)</title><rect x="225.1" y="803.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.10%)</title><rect x="231.7" y="851.0" width="13.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.10%)</title><rect x="231.7" y="835.0" width="13.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.55%)</title><rect x="231.7" y="819.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.55%)</title><rect x="231.7" y="803.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.55%)</title><rect x="231.7" y="787.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.55%)</title><rect x="238.2" y="819.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.55%)</title><rect x="238.2" y="803.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 6.08%)</title><rect x="244.7" y="867.0" width="71.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.7" y="878.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 6.08%)</title><rect x="244.7" y="851.0" width="71.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.7" y="862.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.10%)</title><rect x="244.7" y="835.0" width="13.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.55%)</title><rect x="251.2" y="819.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.55%)</title><rect x="251.2" y="803.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.55%)</title><rect x="251.2" y="787.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 4.97%)</title><rect x="257.7" y="835.0" width="58.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.7" y="846.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 4.97%)</title><rect x="257.7" y="819.0" width="58.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.7" y="830.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 4.97%)</title><rect x="257.7" y="803.0" width="58.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.7" y="814.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.66%)</title><rect x="277.3" y="787.0" width="19.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 1.10%)</title><rect x="283.8" y="771.0" width="13.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.10%)</title><rect x="283.8" y="755.0" width="13.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.10%)</title><rect x="283.8" y="739.0" width="13.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 1.10%)</title><rect x="283.8" y="723.0" width="13.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.55%)</title><rect x="296.9" y="787.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="299.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.55%)</title><rect x="303.4" y="787.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.55%)</title><rect x="303.4" y="771.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.55%)</title><rect x="303.4" y="755.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.55%)</title><rect x="309.9" y="787.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.9" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.55%)</title><rect x="309.9" y="771.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="312.9" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.55%)</title><rect x="309.9" y="755.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="312.9" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.55%)</title><rect x="309.9" y="739.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="312.9" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.55%)</title><rect x="309.9" y="723.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="312.9" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.55%)</title><rect x="309.9" y="707.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="312.9" y="718.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.55%)</title><rect x="309.9" y="691.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="312.9" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.55%)</title><rect x="309.9" y="675.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="312.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (20 samples, 11.05%)</title><rect x="316.4" y="963.0" width="130.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.4" y="974.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 2.21%)</title><rect x="316.4" y="947.0" width="26.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="319.4" y="958.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.21%)</title><rect x="316.4" y="931.0" width="26.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.4" y="942.0">o..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.55%)</title><rect x="316.4" y="915.0" width="6.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="319.4" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.55%)</title><rect x="316.4" y="899.0" width="6.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="319.4" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.66%)</title><rect x="322.9" y="915.0" width="19.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.9" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.55%)</title><rect x="322.9" y="899.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.55%)</title><rect x="322.9" y="883.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="325.9" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.55%)</title><rect x="322.9" y="867.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.55%)</title><rect x="322.9" y="851.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.9" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.10%)</title><rect x="329.4" y="899.0" width="13.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="332.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.10%)</title><rect x="329.4" y="883.0" width="13.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.10%)</title><rect x="329.4" y="867.0" width="13.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="332.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (10 samples, 5.52%)</title><rect x="342.5" y="947.0" width="65.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="345.5" y="958.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (10 samples, 5.52%)</title><rect x="342.5" y="931.0" width="65.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="345.5" y="942.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 3.87%)</title><rect x="349.0" y="915.0" width="45.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="352.0" y="926.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.76%)</title><rect x="349.0" y="899.0" width="32.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="352.0" y="910.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 2.21%)</title><rect x="355.5" y="883.0" width="26.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.5" y="894.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.10%)</title><rect x="362.0" y="867.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.0" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.10%)</title><rect x="362.0" y="851.0" width="13.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.55%)</title><rect x="362.0" y="835.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="365.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.55%)</title><rect x="362.0" y="819.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="365.0" y="830.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.55%)</title><rect x="362.0" y="803.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="365.0" y="814.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.55%)</title><rect x="362.0" y="787.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="365.0" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.55%)</title><rect x="368.6" y="835.0" width="6.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="371.6" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.55%)</title><rect x="375.1" y="867.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="378.1" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.55%)</title><rect x="381.6" y="899.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="384.6" y="910.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.55%)</title><rect x="381.6" y="883.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.6" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.55%)</title><rect x="381.6" y="867.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.6" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.55%)</title><rect x="381.6" y="851.0" width="6.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="384.6" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.55%)</title><rect x="388.1" y="899.0" width="6.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="391.1" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (2 samples, 1.10%)</title><rect x="394.6" y="915.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="397.6" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (2 samples, 1.10%)</title><rect x="394.6" y="899.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="397.6" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.10%)</title><rect x="394.6" y="883.0" width="13.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.55%)</title><rect x="401.2" y="867.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.55%)</title><rect x="401.2" y="851.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="404.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.55%)</title><rect x="401.2" y="835.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 2.76%)</title><rect x="407.7" y="947.0" width="32.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.7" y="958.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 2.76%)</title><rect x="407.7" y="931.0" width="32.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.7" y="942.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/117397272.process (1 samples, 0.55%)</title><rect x="414.2" y="915.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="417.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.55%)</title><rect x="414.2" y="899.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.55%)</title><rect x="414.2" y="883.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="417.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.55%)</title><rect x="420.7" y="915.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="423.7" y="926.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.55%)</title><rect x="420.7" y="899.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.7" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.55%)</title><rect x="427.2" y="915.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="430.2" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.55%)</title><rect x="427.2" y="899.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.2" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.55%)</title><rect x="427.2" y="883.0" width="6.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="430.2" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.55%)</title><rect x="433.8" y="915.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="436.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.55%)</title><rect x="440.3" y="947.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.55%)</title><rect x="440.3" y="931.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="443.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.55%)</title><rect x="440.3" y="915.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="443.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1855276777.accept (1 samples, 0.55%)</title><rect x="440.3" y="899.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="443.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.55%)</title><rect x="440.3" y="883.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="443.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.55%)</title><rect x="440.3" y="867.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="443.3" y="878.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.55%)</title><rect x="440.3" y="851.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="443.3" y="862.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.55%)</title><rect x="440.3" y="835.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="443.3" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.55%)</title><rect x="440.3" y="819.0" width="6.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="443.3" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.55%)</title><rect x="440.3" y="803.0" width="6.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="443.3" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.55%)</title><rect x="446.8" y="963.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="449.8" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.55%)</title><rect x="446.8" y="947.0" width="6.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="449.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.55%)</title><rect x="453.3" y="979.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.3" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.55%)</title><rect x="453.3" y="963.0" width="6.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="456.3" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.55%)</title><rect x="453.3" y="947.0" width="6.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="456.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 1.66%)</title><rect x="459.8" y="1027.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="462.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.10%)</title><rect x="466.4" y="1011.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="469.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.55%)</title><rect x="472.9" y="995.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="475.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.55%)</title><rect x="479.4" y="1027.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 6.63%)</title><rect x="485.9" y="1027.0" width="78.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.9" y="1038.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (12 samples, 6.63%)</title><rect x="485.9" y="1011.0" width="78.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="488.9" y="1022.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 6.08%)</title><rect x="485.9" y="995.0" width="71.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="488.9" y="1006.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 5.52%)</title><rect x="492.4" y="979.0" width="65.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="495.4" y="990.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (10 samples, 5.52%)</title><rect x="492.4" y="963.0" width="65.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="495.4" y="974.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 4.42%)</title><rect x="505.5" y="947.0" width="52.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="508.5" y="958.0">Unsaf..</text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 1.10%)</title><rect x="505.5" y="931.0" width="13.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="508.5" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.10%)</title><rect x="518.5" y="931.0" width="13.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="521.5" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 1.10%)</title><rect x="531.5" y="931.0" width="13.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="534.5" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.55%)</title><rect x="544.6" y="931.0" width="6.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="547.6" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.55%)</title><rect x="551.1" y="931.0" width="6.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="554.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.55%)</title><rect x="557.6" y="995.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="560.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.55%)</title><rect x="557.6" y="979.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="560.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.55%)</title><rect x="557.6" y="963.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.55%)</title><rect x="557.6" y="947.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="560.6" y="958.0"></text>
</g>
<g>
<title>start_thread (96 samples, 53.04%)</title><rect x="564.1" y="1075.0" width="625.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="567.1" y="1086.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (96 samples, 53.04%)</title><rect x="564.1" y="1059.0" width="625.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="567.1" y="1070.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 4.97%)</title><rect x="564.1" y="1043.0" width="58.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="567.1" y="1054.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (9 samples, 4.97%)</title><rect x="564.1" y="1027.0" width="58.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="567.1" y="1038.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 4.42%)</title><rect x="564.1" y="1011.0" width="52.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="567.1" y="1022.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.10%)</title><rect x="564.1" y="995.0" width="13.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="567.1" y="1006.0"></text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.55%)</title><rect x="570.7" y="979.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="573.7" y="990.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 1.66%)</title><rect x="577.2" y="995.0" width="19.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="580.2" y="1006.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.66%)</title><rect x="596.7" y="995.0" width="19.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="599.7" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.55%)</title><rect x="616.3" y="1011.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="619.3" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.55%)</title><rect x="616.3" y="995.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="619.3" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.55%)</title><rect x="616.3" y="979.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="619.3" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.55%)</title><rect x="616.3" y="963.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="619.3" y="974.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.55%)</title><rect x="616.3" y="947.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="619.3" y="958.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.55%)</title><rect x="616.3" y="931.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="619.3" y="942.0"></text>
</g>
<g>
<title>metadata_Relocation::fix_metadata_relocation() (1 samples, 0.55%)</title><rect x="616.3" y="915.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="619.3" y="926.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (87 samples, 48.07%)</title><rect x="622.8" y="1043.0" width="567.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="625.8" y="1054.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (87 samples, 48.07%)</title><rect x="622.8" y="1027.0" width="567.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="625.8" y="1038.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (86 samples, 47.51%)</title><rect x="622.8" y="1011.0" width="560.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="625.8" y="1022.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (84 samples, 46.41%)</title><rect x="622.8" y="995.0" width="547.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="625.8" y="1006.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (84 samples, 46.41%)</title><rect x="622.8" y="979.0" width="547.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="625.8" y="990.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 20.99%)</title><rect x="622.8" y="963.0" width="247.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="625.8" y="974.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.55%)</title><rect x="622.8" y="947.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="625.8" y="958.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.55%)</title><rect x="622.8" y="931.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="625.8" y="942.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.55%)</title><rect x="629.3" y="947.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="632.3" y="958.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.55%)</title><rect x="629.3" y="931.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="632.3" y="942.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.55%)</title><rect x="629.3" y="915.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="632.3" y="926.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.55%)</title><rect x="629.3" y="899.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="632.3" y="910.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 2.76%)</title><rect x="635.9" y="947.0" width="32.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="638.9" y="958.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 1.10%)</title><rect x="635.9" y="931.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="638.9" y="942.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.66%)</title><rect x="648.9" y="931.0" width="19.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="651.9" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.10%)</title><rect x="668.5" y="947.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="671.5" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.10%)</title><rect x="668.5" y="931.0" width="13.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="671.5" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.10%)</title><rect x="668.5" y="915.0" width="13.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="671.5" y="926.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.55%)</title><rect x="668.5" y="899.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="671.5" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.55%)</title><rect x="675.0" y="899.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="678.0" y="910.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.55%)</title><rect x="675.0" y="883.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="678.0" y="894.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.55%)</title><rect x="675.0" y="867.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="678.0" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (29 samples, 16.02%)</title><rect x="681.5" y="947.0" width="189.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="684.5" y="958.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.55%)</title><rect x="681.5" y="931.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="684.5" y="942.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.55%)</title><rect x="688.0" y="931.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="691.0" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.10%)</title><rect x="694.5" y="931.0" width="13.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="697.5" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.10%)</title><rect x="694.5" y="915.0" width="13.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="697.5" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.76%)</title><rect x="707.6" y="931.0" width="32.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="710.6" y="942.0">Ph..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.55%)</title><rect x="733.6" y="915.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="736.6" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 3.31%)</title><rect x="740.2" y="931.0" width="39.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="743.2" y="942.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.21%)</title><rect x="753.2" y="915.0" width="26.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="756.2" y="926.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.55%)</title><rect x="772.8" y="899.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="775.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.55%)</title><rect x="779.3" y="931.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.10%)</title><rect x="785.8" y="931.0" width="13.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="788.8" y="942.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (2 samples, 1.10%)</title><rect x="785.8" y="915.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="788.8" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.10%)</title><rect x="798.8" y="931.0" width="13.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="801.8" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.55%)</title><rect x="805.4" y="915.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="808.4" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.55%)</title><rect x="811.9" y="931.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="814.9" y="942.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.55%)</title><rect x="818.4" y="931.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="821.4" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.55%)</title><rect x="818.4" y="915.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="821.4" y="926.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.55%)</title><rect x="818.4" y="899.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="821.4" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.55%)</title><rect x="818.4" y="883.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="821.4" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.55%)</title><rect x="824.9" y="931.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="827.9" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.66%)</title><rect x="831.4" y="931.0" width="19.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="834.4" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.10%)</title><rect x="838.0" y="915.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="841.0" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.55%)</title><rect x="851.0" y="931.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="854.0" y="942.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.55%)</title><rect x="851.0" y="915.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="854.0" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.10%)</title><rect x="857.5" y="931.0" width="13.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="860.5" y="942.0"></text>
</g>
<g>
<title>Compile::Optimize() (41 samples, 22.65%)</title><rect x="870.6" y="963.0" width="267.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="873.6" y="974.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.55%)</title><rect x="870.6" y="947.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="873.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.10%)</title><rect x="877.1" y="947.0" width="13.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.10%)</title><rect x="877.1" y="931.0" width="13.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="880.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 1.10%)</title><rect x="877.1" y="915.0" width="13.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="880.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.10%)</title><rect x="877.1" y="899.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="880.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.10%)</title><rect x="877.1" y="883.0" width="13.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="880.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.10%)</title><rect x="877.1" y="867.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="880.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.10%)</title><rect x="877.1" y="851.0" width="13.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.10%)</title><rect x="877.1" y="835.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="880.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.10%)</title><rect x="877.1" y="819.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="880.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.10%)</title><rect x="877.1" y="803.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="880.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="787.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="771.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="880.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="755.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="880.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="739.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="880.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="723.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="707.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="880.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="691.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="675.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="659.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="643.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="627.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="880.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="611.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="595.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="579.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="563.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="547.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="880.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="531.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="880.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="515.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="499.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="880.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="483.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="467.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="451.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="880.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="435.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="419.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="880.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="403.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="387.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="371.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="355.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="880.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="339.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="880.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="323.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="880.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="307.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="880.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="291.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="880.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="275.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.1" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="259.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.1" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="243.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.1" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="227.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="880.1" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="211.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="880.1" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="195.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="880.1" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="179.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="880.1" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="163.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="880.1" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="147.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.1" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="131.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="880.1" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="115.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.1" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="99.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="880.1" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="83.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="880.1" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="67.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.1" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="877.1" y="51.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="880.1" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.55%)</title><rect x="877.1" y="35.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="880.1" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="883.6" y="787.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="886.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.55%)</title><rect x="883.6" y="771.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="886.6" y="782.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.55%)</title><rect x="883.6" y="755.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="886.6" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (32 samples, 17.68%)</title><rect x="890.1" y="947.0" width="208.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="893.1" y="958.0">PhaseIdealLoop::build_and_o..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.55%)</title><rect x="890.1" y="931.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="893.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.10%)</title><rect x="896.6" y="931.0" width="13.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="899.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.66%)</title><rect x="909.7" y="931.0" width="19.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="912.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.55%)</title><rect x="916.2" y="915.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="919.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.55%)</title><rect x="916.2" y="899.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="919.2" y="910.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.55%)</title><rect x="922.7" y="915.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="925.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 10.50%)</title><rect x="929.2" y="931.0" width="123.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="932.2" y="942.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 8.29%)</title><rect x="955.3" y="915.0" width="97.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="958.3" y="926.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 7.18%)</title><rect x="961.8" y="899.0" width="84.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="964.8" y="910.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (12 samples, 6.63%)</title><rect x="968.3" y="883.0" width="78.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="971.3" y="894.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.55%)</title><rect x="1046.6" y="899.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.10%)</title><rect x="1053.1" y="931.0" width="13.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1056.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.55%)</title><rect x="1053.1" y="915.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1056.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.55%)</title><rect x="1059.6" y="915.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1062.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.55%)</title><rect x="1059.6" y="899.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.6" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.55%)</title><rect x="1059.6" y="883.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.6" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.21%)</title><rect x="1066.1" y="931.0" width="26.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1069.1" y="942.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 2.21%)</title><rect x="1066.1" y="915.0" width="26.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.1" y="926.0">P..</text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.55%)</title><rect x="1066.1" y="899.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.1" y="910.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.55%)</title><rect x="1066.1" y="883.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1069.1" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.55%)</title><rect x="1066.1" y="867.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.1" y="878.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.55%)</title><rect x="1066.1" y="851.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1069.1" y="862.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1072.7" y="899.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.7" y="910.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1072.7" y="883.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.7" y="894.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1079.2" y="899.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1082.2" y="910.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1085.7" y="899.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.7" y="910.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.55%)</title><rect x="1085.7" y="883.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.7" y="894.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.55%)</title><rect x="1092.2" y="931.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.2" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 3.31%)</title><rect x="1098.7" y="947.0" width="39.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.7" y="958.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 3.31%)</title><rect x="1098.7" y="931.0" width="39.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.7" y="942.0">Pha..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1105.2" y="915.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.2" y="926.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1105.2" y="899.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.2" y="910.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.55%)</title><rect x="1111.8" y="915.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.8" y="926.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.55%)</title><rect x="1111.8" y="899.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 1.66%)</title><rect x="1118.3" y="915.0" width="19.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.3" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.55%)</title><rect x="1131.3" y="899.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.3" y="910.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.55%)</title><rect x="1131.3" y="883.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.3" y="894.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 1.10%)</title><rect x="1137.8" y="963.0" width="13.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.8" y="974.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (2 samples, 1.10%)</title><rect x="1137.8" y="947.0" width="13.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.8" y="958.0"></text>
</g>
<g>
<title>GraphKit::replace_call(CallNode*, Node*, bool) (1 samples, 0.55%)</title><rect x="1137.8" y="931.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.8" y="942.0"></text>
</g>
<g>
<title>Compile::gvn_replace_by(Node*, Node*) (1 samples, 0.55%)</title><rect x="1137.8" y="915.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.8" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1144.4" y="931.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.4" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1144.4" y="915.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1144.4" y="899.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1144.4" y="883.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1144.4" y="867.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1144.4" y="851.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.4" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1144.4" y="835.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.4" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1144.4" y="819.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1144.4" y="803.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1144.4" y="787.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1144.4" y="771.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1144.4" y="755.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.4" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1144.4" y="739.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.4" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1144.4" y="723.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1144.4" y="707.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1144.4" y="691.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1144.4" y="675.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.55%)</title><rect x="1144.4" y="659.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.55%)</title><rect x="1144.4" y="643.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.4" y="654.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.55%)</title><rect x="1144.4" y="627.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.4" y="638.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.55%)</title><rect x="1144.4" y="611.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.4" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.55%)</title><rect x="1144.4" y="595.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.4" y="606.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.55%)</title><rect x="1144.4" y="579.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.10%)</title><rect x="1150.9" y="963.0" width="13.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.9" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.10%)</title><rect x="1150.9" y="947.0" width="13.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.10%)</title><rect x="1150.9" y="931.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.10%)</title><rect x="1150.9" y="915.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.10%)</title><rect x="1150.9" y="899.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.10%)</title><rect x="1150.9" y="883.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.9" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.10%)</title><rect x="1150.9" y="867.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.9" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.10%)</title><rect x="1150.9" y="851.0" width="13.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.10%)</title><rect x="1150.9" y="835.0" width="13.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.10%)</title><rect x="1150.9" y="819.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.10%)</title><rect x="1150.9" y="803.0" width="13.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.10%)</title><rect x="1150.9" y="787.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.10%)</title><rect x="1150.9" y="771.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.10%)</title><rect x="1150.9" y="755.0" width="13.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.10%)</title><rect x="1150.9" y="739.0" width="13.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.10%)</title><rect x="1150.9" y="723.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.10%)</title><rect x="1150.9" y="707.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.10%)</title><rect x="1150.9" y="691.0" width="13.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.9" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.55%)</title><rect x="1150.9" y="675.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.9" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.55%)</title><rect x="1150.9" y="659.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.9" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.55%)</title><rect x="1150.9" y="643.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.9" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.55%)</title><rect x="1150.9" y="627.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.9" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.55%)</title><rect x="1150.9" y="611.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.9" y="622.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.55%)</title><rect x="1150.9" y="595.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.9" y="606.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.55%)</title><rect x="1150.9" y="579.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1157.4" y="675.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1157.4" y="659.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1157.4" y="643.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1157.4" y="627.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1157.4" y="611.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1157.4" y="595.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1157.4" y="579.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1157.4" y="563.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1157.4" y="547.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1157.4" y="531.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1157.4" y="515.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1157.4" y="499.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1157.4" y="483.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1157.4" y="467.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1157.4" y="451.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1157.4" y="435.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1157.4" y="419.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1157.4" y="403.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1157.4" y="387.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1157.4" y="371.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1157.4" y="355.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1157.4" y="339.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="350.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.55%)</title><rect x="1163.9" y="963.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.9" y="974.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.55%)</title><rect x="1163.9" y="947.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.55%)</title><rect x="1163.9" y="931.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.9" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.55%)</title><rect x="1163.9" y="915.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.9" y="926.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.10%)</title><rect x="1170.4" y="995.0" width="13.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.4" y="1006.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.10%)</title><rect x="1170.4" y="979.0" width="13.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.4" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.10%)</title><rect x="1170.4" y="963.0" width="13.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.55%)</title><rect x="1170.4" y="947.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.4" y="958.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.55%)</title><rect x="1170.4" y="931.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.4" y="942.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.55%)</title><rect x="1170.4" y="915.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.4" y="926.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.55%)</title><rect x="1170.4" y="899.0" width="6.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1173.4" y="910.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.55%)</title><rect x="1177.0" y="947.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="958.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.55%)</title><rect x="1177.0" y="931.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="942.0"></text>
</g>
<g>
<title>Dependencies::sort_all_deps() (1 samples, 0.55%)</title><rect x="1177.0" y="915.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="926.0"></text>
</g>
<g>
<title>__GI___qsort_r (1 samples, 0.55%)</title><rect x="1177.0" y="899.0" width="6.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1180.0" y="910.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.55%)</title><rect x="1183.5" y="1011.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="1022.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.55%)</title><rect x="1183.5" y="995.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.5" y="1006.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.55%)</title><rect x="1183.5" y="979.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.5" y="990.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.55%)</title><rect x="1183.5" y="963.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.5" y="974.0"></text>
</g>
<g>
<title>CodeHeap::block_start(void*) const (1 samples, 0.55%)</title><rect x="1183.5" y="947.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.5" y="958.0"></text>
</g>
</g>
</svg>
