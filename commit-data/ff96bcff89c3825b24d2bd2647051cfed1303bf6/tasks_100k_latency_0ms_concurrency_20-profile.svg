<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="741"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="741"> </text>
<g id="frames">
<g>
<title>all (147 samples, 100.00%)</title><rect x="10.0" y="707.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="718.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.68%)</title><rect x="10.0" y="691.0" width="8.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>malloc_consolidate (1 samples, 0.68%)</title><rect x="10.0" y="675.0" width="8.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (32 samples, 21.77%)</title><rect x="18.0" y="691.0" width="256.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.0" y="702.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (32 samples, 21.77%)</title><rect x="18.0" y="675.0" width="256.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.0" y="686.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.68%)</title><rect x="18.0" y="659.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.0" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.68%)</title><rect x="18.0" y="643.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.0" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.68%)</title><rect x="18.0" y="627.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="21.0" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.68%)</title><rect x="18.0" y="611.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.0" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.68%)</title><rect x="18.0" y="595.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="21.0" y="606.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.68%)</title><rect x="18.0" y="579.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="21.0" y="590.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.68%)</title><rect x="18.0" y="563.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.0" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.68%)</title><rect x="18.0" y="547.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.0" y="558.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.68%)</title><rect x="18.0" y="531.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.0" y="542.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.68%)</title><rect x="18.0" y="515.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="21.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.68%)</title><rect x="26.1" y="659.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.68%)</title><rect x="26.1" y="643.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.pausingAllProcessing (1 samples, 0.68%)</title><rect x="26.1" y="627.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.68%)</title><rect x="34.1" y="659.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.68%)</title><rect x="34.1" y="643.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.68%)</title><rect x="34.1" y="627.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.68%)</title><rect x="34.1" y="611.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.68%)</title><rect x="34.1" y="595.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.68%)</title><rect x="34.1" y="579.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.68%)</title><rect x="34.1" y="563.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.68%)</title><rect x="34.1" y="547.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.1" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.68%)</title><rect x="34.1" y="531.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$268/534659104.test (1 samples, 0.68%)</title><rect x="34.1" y="515.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.1" y="526.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (14 samples, 9.52%)</title><rect x="42.1" y="659.0" width="112.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.1" y="670.0">java/lang/Iter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1690238339.accept (14 samples, 9.52%)</title><rect x="42.1" y="643.0" width="112.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.1" y="654.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (14 samples, 9.52%)</title><rect x="42.1" y="627.0" width="112.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.1" y="638.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (11 samples, 7.48%)</title><rect x="42.1" y="611.0" width="88.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.1" y="622.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (11 samples, 7.48%)</title><rect x="42.1" y="595.0" width="88.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.1" y="606.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (11 samples, 7.48%)</title><rect x="42.1" y="579.0" width="88.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.1" y="590.0">com/lineco..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (11 samples, 7.48%)</title><rect x="42.1" y="563.0" width="88.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.1" y="574.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 7.48%)</title><rect x="42.1" y="547.0" width="88.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.1" y="558.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (11 samples, 7.48%)</title><rect x="42.1" y="531.0" width="88.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.1" y="542.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 4.76%)</title><rect x="50.1" y="515.0" width="56.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.1" y="526.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.68%)</title><rect x="50.1" y="499.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.68%)</title><rect x="50.1" y="483.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.68%)</title><rect x="50.1" y="467.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 4.08%)</title><rect x="58.2" y="499.0" width="48.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.2" y="510.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 4.08%)</title><rect x="58.2" y="483.0" width="48.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.2" y="494.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 4.08%)</title><rect x="58.2" y="467.0" width="48.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.2" y="478.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 4.08%)</title><rect x="58.2" y="451.0" width="48.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.2" y="462.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 4.08%)</title><rect x="58.2" y="435.0" width="48.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.2" y="446.0">sun/..</text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 4.08%)</title><rect x="58.2" y="419.0" width="48.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="61.2" y="430.0">Unsa..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.72%)</title><rect x="58.2" y="403.0" width="32.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="61.2" y="414.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.68%)</title><rect x="90.3" y="403.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="93.3" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.68%)</title><rect x="98.3" y="403.0" width="8.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="101.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.36%)</title><rect x="106.3" y="515.0" width="16.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="109.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.36%)</title><rect x="106.3" y="499.0" width="16.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.36%)</title><rect x="106.3" y="483.0" width="16.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="109.3" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.68%)</title><rect x="122.4" y="515.0" width="8.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="125.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 2.04%)</title><rect x="130.4" y="611.0" width="24.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.4" y="622.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 2.04%)</title><rect x="130.4" y="595.0" width="24.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.4" y="606.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.68%)</title><rect x="130.4" y="579.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.4" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.36%)</title><rect x="138.4" y="579.0" width="16.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="141.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 10.20%)</title><rect x="154.5" y="659.0" width="120.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="157.5" y="670.0">org/apache/kafk..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 10.20%)</title><rect x="154.5" y="643.0" width="120.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="157.5" y="654.0">org/apache/kafk..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 4.76%)</title><rect x="154.5" y="627.0" width="56.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.5" y="638.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 4.76%)</title><rect x="154.5" y="611.0" width="56.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="157.5" y="622.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 4.76%)</title><rect x="154.5" y="595.0" width="56.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.5" y="606.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 3.40%)</title><rect x="154.5" y="579.0" width="40.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="157.5" y="590.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 3.40%)</title><rect x="154.5" y="563.0" width="40.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.5" y="574.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 2.04%)</title><rect x="154.5" y="547.0" width="24.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="157.5" y="558.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.68%)</title><rect x="154.5" y="531.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="157.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.68%)</title><rect x="154.5" y="515.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.68%)</title><rect x="154.5" y="499.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.68%)</title><rect x="154.5" y="483.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.68%)</title><rect x="154.5" y="467.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.5" y="478.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.68%)</title><rect x="154.5" y="451.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="157.5" y="462.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.68%)</title><rect x="154.5" y="435.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="157.5" y="446.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.68%)</title><rect x="154.5" y="419.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="157.5" y="430.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::call_event(Method*, CompLevel) (1 samples, 0.68%)</title><rect x="154.5" y="403.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="157.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.68%)</title><rect x="162.5" y="531.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="165.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.68%)</title><rect x="162.5" y="515.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="165.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.68%)</title><rect x="170.5" y="531.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.68%)</title><rect x="170.5" y="515.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.68%)</title><rect x="170.5" y="499.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.68%)</title><rect x="170.5" y="483.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.baseOffset (1 samples, 0.68%)</title><rect x="170.5" y="467.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.5" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (1 samples, 0.68%)</title><rect x="170.5" y="451.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.5" y="462.0"></text>
</g>
<g>
<title>java/nio/Bits.getLong (1 samples, 0.68%)</title><rect x="170.5" y="435.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 1.36%)</title><rect x="178.6" y="547.0" width="16.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 1.36%)</title><rect x="178.6" y="531.0" width="16.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="181.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 1.36%)</title><rect x="178.6" y="515.0" width="16.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="181.6" y="526.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 1.36%)</title><rect x="178.6" y="499.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.6" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.68%)</title><rect x="186.6" y="483.0" width="8.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="189.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.68%)</title><rect x="194.6" y="579.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.68%)</title><rect x="194.6" y="563.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.68%)</title><rect x="194.6" y="547.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.68%)</title><rect x="194.6" y="531.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="197.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.68%)</title><rect x="194.6" y="515.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.68%)</title><rect x="194.6" y="499.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.68%)</title><rect x="202.7" y="579.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.68%)</title><rect x="202.7" y="563.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.68%)</title><rect x="202.7" y="547.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.68%)</title><rect x="202.7" y="531.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 2.72%)</title><rect x="210.7" y="627.0" width="32.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.7" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.36%)</title><rect x="218.7" y="611.0" width="16.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.36%)</title><rect x="218.7" y="595.0" width="16.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.68%)</title><rect x="218.7" y="579.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.68%)</title><rect x="218.7" y="563.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.68%)</title><rect x="218.7" y="547.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.68%)</title><rect x="218.7" y="531.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.68%)</title><rect x="218.7" y="515.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.68%)</title><rect x="218.7" y="499.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.7" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.68%)</title><rect x="218.7" y="483.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.68%)</title><rect x="218.7" y="467.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.7" y="478.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.68%)</title><rect x="218.7" y="451.0" width="8.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="221.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.68%)</title><rect x="226.7" y="579.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toSet (1 samples, 0.68%)</title><rect x="226.7" y="563.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.68%)</title><rect x="226.7" y="547.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.68%)</title><rect x="234.8" y="611.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.68%)</title><rect x="234.8" y="595.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerInterceptors.onConsume (1 samples, 0.68%)</title><rect x="242.8" y="627.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.68%)</title><rect x="250.8" y="627.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.68%)</title><rect x="250.8" y="611.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.68%)</title><rect x="250.8" y="595.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.68%)</title><rect x="250.8" y="579.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.68%)</title><rect x="250.8" y="563.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.68%)</title><rect x="250.8" y="547.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.68%)</title><rect x="250.8" y="531.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.68%)</title><rect x="250.8" y="515.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.68%)</title><rect x="250.8" y="499.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.68%)</title><rect x="250.8" y="483.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.68%)</title><rect x="250.8" y="467.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.68%)</title><rect x="250.8" y="451.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.68%)</title><rect x="250.8" y="435.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.68%)</title><rect x="250.8" y="419.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.8" y="430.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.68%)</title><rect x="250.8" y="403.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.8" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.68%)</title><rect x="258.8" y="627.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.68%)</title><rect x="266.9" y="627.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.68%)</title><rect x="266.9" y="611.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.68%)</title><rect x="266.9" y="595.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.68%)</title><rect x="266.9" y="579.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.68%)</title><rect x="266.9" y="563.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="269.9" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.run (67 samples, 45.58%)</title><rect x="274.9" y="691.0" width="537.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.9" y="702.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (67 samples, 45.58%)</title><rect x="274.9" y="675.0" width="537.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.9" y="686.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (67 samples, 45.58%)</title><rect x="274.9" y="659.0" width="537.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.9" y="670.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1941437632.run (40 samples, 27.21%)</title><rect x="282.9" y="643.0" width="321.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.9" y="654.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (40 samples, 27.21%)</title><rect x="282.9" y="627.0" width="321.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.9" y="638.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (40 samples, 27.21%)</title><rect x="282.9" y="611.0" width="321.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.9" y="622.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (40 samples, 27.21%)</title><rect x="282.9" y="595.0" width="321.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.9" y="606.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (18 samples, 12.24%)</title><rect x="291.0" y="579.0" width="144.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.0" y="590.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (18 samples, 12.24%)</title><rect x="291.0" y="563.0" width="144.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="294.0" y="574.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (18 samples, 12.24%)</title><rect x="291.0" y="547.0" width="144.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.0" y="558.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (18 samples, 12.24%)</title><rect x="291.0" y="531.0" width="144.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.0" y="542.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (18 samples, 12.24%)</title><rect x="291.0" y="515.0" width="144.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.0" y="526.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (18 samples, 12.24%)</title><rect x="291.0" y="499.0" width="144.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.0" y="510.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 4.08%)</title><rect x="291.0" y="483.0" width="48.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.0" y="494.0">com/..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.68%)</title><rect x="307.0" y="467.0" width="8.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="310.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 1.36%)</title><rect x="315.0" y="467.0" width="16.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="318.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 1.36%)</title><rect x="315.0" y="451.0" width="16.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.68%)</title><rect x="323.1" y="435.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.1" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.68%)</title><rect x="323.1" y="419.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.1" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.68%)</title><rect x="323.1" y="403.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.1" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.68%)</title><rect x="323.1" y="387.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.68%)</title><rect x="331.1" y="467.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 7.48%)</title><rect x="339.1" y="483.0" width="88.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.1" y="494.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.68%)</title><rect x="339.1" y="467.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.68%)</title><rect x="339.1" y="451.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.68%)</title><rect x="339.1" y="435.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.68%)</title><rect x="347.1" y="467.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="350.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.68%)</title><rect x="347.1" y="451.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 4.76%)</title><rect x="355.2" y="467.0" width="56.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.2" y="478.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.68%)</title><rect x="355.2" y="451.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="358.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 4.08%)</title><rect x="363.2" y="451.0" width="48.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="366.2" y="462.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 4.08%)</title><rect x="363.2" y="435.0" width="48.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="366.2" y="446.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 4.08%)</title><rect x="363.2" y="419.0" width="48.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.2" y="430.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 2.04%)</title><rect x="363.2" y="403.0" width="24.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.2" y="414.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.68%)</title><rect x="371.2" y="387.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="374.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.68%)</title><rect x="371.2" y="371.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.68%)</title><rect x="371.2" y="355.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="374.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.68%)</title><rect x="371.2" y="339.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.68%)</title><rect x="371.2" y="323.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.2" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.68%)</title><rect x="379.3" y="387.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="382.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.68%)</title><rect x="379.3" y="371.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="382.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.68%)</title><rect x="379.3" y="355.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.68%)</title><rect x="387.3" y="403.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.68%)</title><rect x="395.3" y="403.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="398.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.68%)</title><rect x="395.3" y="387.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="398.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.68%)</title><rect x="395.3" y="371.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="398.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.68%)</title><rect x="395.3" y="355.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.3" y="366.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.68%)</title><rect x="395.3" y="339.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.3" y="350.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.68%)</title><rect x="395.3" y="323.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="398.3" y="334.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.68%)</title><rect x="395.3" y="307.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="398.3" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.68%)</title><rect x="403.3" y="403.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.68%)</title><rect x="403.3" y="387.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.68%)</title><rect x="403.3" y="371.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.68%)</title><rect x="411.4" y="467.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.68%)</title><rect x="419.4" y="467.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="422.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.68%)</title><rect x="427.4" y="483.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="430.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.68%)</title><rect x="427.4" y="467.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="430.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.68%)</title><rect x="427.4" y="451.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.68%)</title><rect x="427.4" y="435.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="430.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.68%)</title><rect x="427.4" y="419.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="430.4" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (17 samples, 11.56%)</title><rect x="435.4" y="579.0" width="136.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.4" y="590.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.36%)</title><rect x="435.4" y="563.0" width="16.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.4" y="574.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.36%)</title><rect x="435.4" y="547.0" width="16.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="438.4" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.36%)</title><rect x="435.4" y="531.0" width="16.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="438.4" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.36%)</title><rect x="435.4" y="515.0" width="16.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.68%)</title><rect x="443.5" y="499.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="446.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.68%)</title><rect x="443.5" y="483.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="446.5" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 1.36%)</title><rect x="451.5" y="563.0" width="16.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="454.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 1.36%)</title><rect x="451.5" y="547.0" width="16.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="454.5" y="558.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 1.36%)</title><rect x="451.5" y="531.0" width="16.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="454.5" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (8 samples, 5.44%)</title><rect x="467.6" y="563.0" width="64.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="470.6" y="574.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (8 samples, 5.44%)</title><rect x="467.6" y="547.0" width="64.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.6" y="558.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 1.36%)</title><rect x="467.6" y="531.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="470.6" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.68%)</title><rect x="475.6" y="515.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="478.6" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.68%)</title><rect x="475.6" y="499.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="478.6" y="510.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.68%)</title><rect x="475.6" y="483.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="478.6" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.68%)</title><rect x="475.6" y="467.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="478.6" y="478.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 4.08%)</title><rect x="483.6" y="531.0" width="48.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.6" y="542.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 4.08%)</title><rect x="483.6" y="515.0" width="48.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.6" y="526.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 4.08%)</title><rect x="483.6" y="499.0" width="48.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="486.6" y="510.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 3.40%)</title><rect x="491.6" y="483.0" width="40.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="494.6" y="494.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.36%)</title><rect x="515.7" y="467.0" width="16.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="518.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.68%)</title><rect x="515.7" y="451.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="518.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.68%)</title><rect x="523.7" y="451.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="526.7" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.68%)</title><rect x="523.7" y="435.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="526.7" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.68%)</title><rect x="523.7" y="419.0" width="8.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="526.7" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 2.04%)</title><rect x="531.8" y="563.0" width="24.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="534.8" y="574.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 2.04%)</title><rect x="531.8" y="547.0" width="24.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="534.8" y="558.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1334245820.process (2 samples, 1.36%)</title><rect x="531.8" y="531.0" width="16.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="534.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.36%)</title><rect x="531.8" y="515.0" width="16.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.36%)</title><rect x="531.8" y="499.0" width="16.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="534.8" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.68%)</title><rect x="531.8" y="483.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="534.8" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.68%)</title><rect x="531.8" y="467.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="534.8" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.68%)</title><rect x="539.8" y="483.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="542.8" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.68%)</title><rect x="539.8" y="467.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="542.8" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.68%)</title><rect x="539.8" y="451.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="542.8" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.68%)</title><rect x="539.8" y="435.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="542.8" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.68%)</title><rect x="539.8" y="419.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="542.8" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.68%)</title><rect x="539.8" y="403.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="542.8" y="414.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.68%)</title><rect x="539.8" y="387.0" width="8.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="542.8" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.68%)</title><rect x="547.8" y="531.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="550.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.68%)</title><rect x="555.9" y="563.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="558.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.68%)</title><rect x="555.9" y="547.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="558.9" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.68%)</title><rect x="555.9" y="531.0" width="8.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="558.9" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.68%)</title><rect x="555.9" y="515.0" width="8.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="558.9" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.68%)</title><rect x="563.9" y="563.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="566.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.&lt;init&gt; (1 samples, 0.68%)</title><rect x="563.9" y="547.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="566.9" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.68%)</title><rect x="563.9" y="531.0" width="8.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="566.9" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.68%)</title><rect x="563.9" y="515.0" width="8.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="566.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 2.04%)</title><rect x="571.9" y="579.0" width="24.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="574.9" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 2.04%)</title><rect x="571.9" y="563.0" width="24.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="574.9" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 2.04%)</title><rect x="571.9" y="547.0" width="24.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="574.9" y="558.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/396774823.accept (3 samples, 2.04%)</title><rect x="571.9" y="531.0" width="24.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="574.9" y="542.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (3 samples, 2.04%)</title><rect x="571.9" y="515.0" width="24.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="574.9" y="526.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/88521299.complete (3 samples, 2.04%)</title><rect x="571.9" y="499.0" width="24.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="574.9" y="510.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (3 samples, 2.04%)</title><rect x="571.9" y="483.0" width="24.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="574.9" y="494.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 2.04%)</title><rect x="571.9" y="467.0" width="24.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="574.9" y="478.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 2.04%)</title><rect x="571.9" y="451.0" width="24.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="574.9" y="462.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 2.04%)</title><rect x="571.9" y="435.0" width="24.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="574.9" y="446.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 2.04%)</title><rect x="571.9" y="419.0" width="24.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="574.9" y="430.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 2.04%)</title><rect x="571.9" y="403.0" width="24.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="574.9" y="414.0">c..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.68%)</title><rect x="596.0" y="579.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="599.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 2.04%)</title><rect x="604.0" y="643.0" width="24.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="607.0" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.36%)</title><rect x="612.0" y="627.0" width="16.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="615.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.68%)</title><rect x="620.1" y="611.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.68%)</title><rect x="628.1" y="643.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="631.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (22 samples, 14.97%)</title><rect x="636.1" y="643.0" width="176.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.1" y="654.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (22 samples, 14.97%)</title><rect x="636.1" y="627.0" width="176.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.1" y="638.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (19 samples, 12.93%)</title><rect x="636.1" y="611.0" width="152.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="639.1" y="622.0">java/util/concurren..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.68%)</title><rect x="644.1" y="595.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="647.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (17 samples, 11.56%)</title><rect x="652.2" y="595.0" width="136.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.2" y="606.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (17 samples, 11.56%)</title><rect x="652.2" y="579.0" width="136.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="655.2" y="590.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>Unsafe_Park (14 samples, 9.52%)</title><rect x="668.2" y="563.0" width="112.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="671.2" y="574.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 2.72%)</title><rect x="668.2" y="547.0" width="32.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="671.2" y="558.0">Pa..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.68%)</title><rect x="692.3" y="531.0" width="8.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="695.3" y="542.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.68%)</title><rect x="700.3" y="547.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="703.3" y="558.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.68%)</title><rect x="708.4" y="547.0" width="8.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="711.4" y="558.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.36%)</title><rect x="716.4" y="547.0" width="16.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="719.4" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 2.04%)</title><rect x="732.4" y="547.0" width="24.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="735.4" y="558.0">_..</text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.68%)</title><rect x="756.5" y="547.0" width="8.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="759.5" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.68%)</title><rect x="764.6" y="547.0" width="8.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="767.6" y="558.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.68%)</title><rect x="772.6" y="547.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="775.6" y="558.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.68%)</title><rect x="780.6" y="563.0" width="8.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="783.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 1.36%)</title><rect x="788.6" y="611.0" width="16.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="791.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 1.36%)</title><rect x="788.6" y="595.0" width="16.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="791.6" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.68%)</title><rect x="796.7" y="579.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="799.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.68%)</title><rect x="804.7" y="611.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="807.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.68%)</title><rect x="804.7" y="595.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="807.7" y="606.0"></text>
</g>
<g>
<title>start_thread (47 samples, 31.97%)</title><rect x="812.7" y="691.0" width="377.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="815.7" y="702.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (47 samples, 31.97%)</title><rect x="812.7" y="675.0" width="377.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="815.7" y="686.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 5.44%)</title><rect x="812.7" y="659.0" width="64.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="815.7" y="670.0">GangWor..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 5.44%)</title><rect x="812.7" y="643.0" width="64.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="815.7" y="654.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 4.76%)</title><rect x="812.7" y="627.0" width="56.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="815.7" y="638.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.68%)</title><rect x="812.7" y="611.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="815.7" y="622.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 2.04%)</title><rect x="820.7" y="611.0" width="24.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="823.7" y="622.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.68%)</title><rect x="836.8" y="595.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="839.8" y="606.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.68%)</title><rect x="844.8" y="611.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="847.8" y="622.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.36%)</title><rect x="852.9" y="611.0" width="16.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="855.9" y="622.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (1 samples, 0.68%)</title><rect x="860.9" y="595.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="863.9" y="606.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.68%)</title><rect x="868.9" y="627.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="871.9" y="638.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.68%)</title><rect x="868.9" y="611.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="871.9" y="622.0"></text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.68%)</title><rect x="868.9" y="595.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="871.9" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (39 samples, 26.53%)</title><rect x="876.9" y="659.0" width="313.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="879.9" y="670.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (39 samples, 26.53%)</title><rect x="876.9" y="643.0" width="313.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="879.9" y="654.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (38 samples, 25.85%)</title><rect x="876.9" y="627.0" width="305.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="879.9" y="638.0">CompileBroker::invoke_compiler_on_method(..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (37 samples, 25.17%)</title><rect x="876.9" y="611.0" width="297.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="879.9" y="622.0">C2Compiler::compile_method(ciEnv*, ciMet..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (37 samples, 25.17%)</title><rect x="876.9" y="595.0" width="297.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="879.9" y="606.0">Compile::Compile(ciEnv*, C2Compiler*, ci..</text>
</g>
<g>
<title>Compile::Code_Gen() (19 samples, 12.93%)</title><rect x="876.9" y="579.0" width="152.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="879.9" y="590.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.68%)</title><rect x="876.9" y="563.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="879.9" y="574.0"></text>
</g>
<g>
<title>compareAndSwapINode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.68%)</title><rect x="876.9" y="547.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="879.9" y="558.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.36%)</title><rect x="885.0" y="563.0" width="16.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.0" y="574.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.36%)</title><rect x="885.0" y="547.0" width="16.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.0" y="558.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.36%)</title><rect x="885.0" y="531.0" width="16.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="888.0" y="542.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.68%)</title><rect x="885.0" y="515.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.0" y="526.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.68%)</title><rect x="893.0" y="515.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="896.0" y="526.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.68%)</title><rect x="893.0" y="499.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="896.0" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.68%)</title><rect x="901.0" y="563.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="904.0" y="574.0"></text>
</g>
<g>
<title>Block::is_Empty() const (1 samples, 0.68%)</title><rect x="901.0" y="547.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="904.0" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (14 samples, 9.52%)</title><rect x="909.0" y="563.0" width="112.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="912.0" y="574.0">PhaseChaitin::..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.68%)</title><rect x="909.0" y="547.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="912.0" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.68%)</title><rect x="909.0" y="531.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.0" y="542.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.68%)</title><rect x="909.0" y="515.0" width="8.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="912.0" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.68%)</title><rect x="917.1" y="547.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.1" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.68%)</title><rect x="917.1" y="531.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="920.1" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.68%)</title><rect x="917.1" y="515.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.1" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 2.72%)</title><rect x="925.1" y="547.0" width="32.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="928.1" y="558.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.36%)</title><rect x="933.1" y="531.0" width="16.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.1" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.68%)</title><rect x="949.2" y="531.0" width="8.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="952.2" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.68%)</title><rect x="957.2" y="547.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.2" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (2 samples, 1.36%)</title><rect x="965.2" y="547.0" width="16.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.2" y="558.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (2 samples, 1.36%)</title><rect x="965.2" y="531.0" width="16.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="968.2" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.68%)</title><rect x="981.3" y="547.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.3" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.68%)</title><rect x="989.3" y="547.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.3" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.68%)</title><rect x="989.3" y="531.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.3" y="542.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 2.04%)</title><rect x="997.3" y="547.0" width="24.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1000.3" y="558.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.68%)</title><rect x="1013.4" y="531.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.4" y="542.0"></text>
</g>
<g>
<title>loadNKlassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.68%)</title><rect x="1021.4" y="563.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.4" y="574.0"></text>
</g>
<g>
<title>Compile::Optimize() (14 samples, 9.52%)</title><rect x="1029.5" y="579.0" width="112.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1032.5" y="590.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.68%)</title><rect x="1029.5" y="563.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1032.5" y="574.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.68%)</title><rect x="1029.5" y="547.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1032.5" y="558.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.68%)</title><rect x="1029.5" y="531.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.5" y="542.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.68%)</title><rect x="1037.5" y="563.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.5" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.68%)</title><rect x="1037.5" y="547.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1040.5" y="558.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 0.68%)</title><rect x="1037.5" y="531.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1040.5" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 7.48%)</title><rect x="1045.5" y="563.0" width="88.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1048.5" y="574.0">PhaseIdeal..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.68%)</title><rect x="1045.5" y="547.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.5" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.68%)</title><rect x="1045.5" y="531.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1048.5" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.68%)</title><rect x="1045.5" y="515.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1048.5" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.68%)</title><rect x="1045.5" y="499.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1048.5" y="510.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.68%)</title><rect x="1045.5" y="483.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1048.5" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.36%)</title><rect x="1053.5" y="547.0" width="16.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1056.5" y="558.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.68%)</title><rect x="1053.5" y="531.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1056.5" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.68%)</title><rect x="1061.6" y="531.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.6" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.68%)</title><rect x="1069.6" y="547.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.6" y="558.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.68%)</title><rect x="1069.6" y="531.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.6" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 2.72%)</title><rect x="1077.6" y="547.0" width="32.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1080.6" y="558.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.36%)</title><rect x="1093.7" y="531.0" width="16.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.7" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.68%)</title><rect x="1093.7" y="515.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.7" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.68%)</title><rect x="1101.7" y="515.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.7" y="526.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.68%)</title><rect x="1101.7" y="499.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.7" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.68%)</title><rect x="1101.7" y="483.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.7" y="494.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.68%)</title><rect x="1101.7" y="467.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.7" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 2.04%)</title><rect x="1109.7" y="547.0" width="24.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.7" y="558.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 2.04%)</title><rect x="1109.7" y="531.0" width="24.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.7" y="542.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.68%)</title><rect x="1109.7" y="515.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.7" y="526.0"></text>
</g>
<g>
<title>LShiftLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.68%)</title><rect x="1117.8" y="515.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.8" y="526.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.68%)</title><rect x="1117.8" y="499.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.8" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.68%)</title><rect x="1117.8" y="483.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.8" y="494.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.68%)</title><rect x="1117.8" y="467.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.8" y="478.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.68%)</title><rect x="1117.8" y="451.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.8" y="462.0"></text>
</g>
<g>
<title>StoreCNode::Ideal(PhaseGVN*, bool) (1 samples, 0.68%)</title><rect x="1125.8" y="515.0" width="8.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.8" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.68%)</title><rect x="1133.8" y="563.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.8" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.68%)</title><rect x="1133.8" y="547.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.8" y="558.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.68%)</title><rect x="1133.8" y="531.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="542.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.68%)</title><rect x="1133.8" y="515.0" width="8.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.8" y="526.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.68%)</title><rect x="1133.8" y="499.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.8" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.68%)</title><rect x="1133.8" y="483.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.8" y="494.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.68%)</title><rect x="1133.8" y="467.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.8" y="478.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.68%)</title><rect x="1133.8" y="451.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.72%)</title><rect x="1141.8" y="579.0" width="32.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.8" y="590.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.72%)</title><rect x="1141.8" y="563.0" width="32.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.8" y="574.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.72%)</title><rect x="1141.8" y="547.0" width="32.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.8" y="558.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.72%)</title><rect x="1141.8" y="531.0" width="32.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.8" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.72%)</title><rect x="1141.8" y="515.0" width="32.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.8" y="526.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.04%)</title><rect x="1141.8" y="499.0" width="24.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.8" y="510.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.04%)</title><rect x="1141.8" y="483.0" width="24.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.8" y="494.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.04%)</title><rect x="1141.8" y="467.0" width="24.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.8" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.04%)</title><rect x="1141.8" y="451.0" width="24.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.8" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.04%)</title><rect x="1141.8" y="435.0" width="24.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.8" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.04%)</title><rect x="1141.8" y="419.0" width="24.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.8" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.04%)</title><rect x="1141.8" y="403.0" width="24.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.8" y="414.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.68%)</title><rect x="1141.8" y="387.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.68%)</title><rect x="1141.8" y="371.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.68%)</title><rect x="1141.8" y="355.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.68%)</title><rect x="1141.8" y="339.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.68%)</title><rect x="1141.8" y="323.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.68%)</title><rect x="1141.8" y="307.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.8" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.68%)</title><rect x="1141.8" y="291.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.68%)</title><rect x="1141.8" y="275.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.68%)</title><rect x="1141.8" y="259.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.68%)</title><rect x="1141.8" y="243.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.68%)</title><rect x="1141.8" y="227.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.68%)</title><rect x="1141.8" y="211.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.8" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.68%)</title><rect x="1141.8" y="195.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.8" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.68%)</title><rect x="1141.8" y="179.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.68%)</title><rect x="1141.8" y="163.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.68%)</title><rect x="1141.8" y="147.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.68%)</title><rect x="1141.8" y="131.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.68%)</title><rect x="1141.8" y="115.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.8" y="126.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.68%)</title><rect x="1141.8" y="99.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.8" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.68%)</title><rect x="1141.8" y="83.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.8" y="94.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.68%)</title><rect x="1141.8" y="67.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.8" y="78.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.68%)</title><rect x="1141.8" y="51.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.8" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.68%)</title><rect x="1141.8" y="35.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.36%)</title><rect x="1149.9" y="387.0" width="16.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.9" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.36%)</title><rect x="1149.9" y="371.0" width="16.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.36%)</title><rect x="1149.9" y="355.0" width="16.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.36%)</title><rect x="1149.9" y="339.0" width="16.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.36%)</title><rect x="1149.9" y="323.0" width="16.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.36%)</title><rect x="1149.9" y="307.0" width="16.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.36%)</title><rect x="1149.9" y="291.0" width="16.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.68%)</title><rect x="1149.9" y="275.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.9" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.68%)</title><rect x="1149.9" y="259.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.9" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.68%)</title><rect x="1149.9" y="243.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.9" y="254.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.68%)</title><rect x="1149.9" y="227.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.9" y="238.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.68%)</title><rect x="1149.9" y="211.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.9" y="222.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.68%)</title><rect x="1149.9" y="195.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.9" y="206.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.68%)</title><rect x="1149.9" y="179.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.68%)</title><rect x="1157.9" y="275.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.9" y="286.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.68%)</title><rect x="1157.9" y="259.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.9" y="270.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.68%)</title><rect x="1157.9" y="243.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.68%)</title><rect x="1165.9" y="499.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.9" y="510.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.68%)</title><rect x="1165.9" y="483.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.9" y="494.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.68%)</title><rect x="1165.9" y="467.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.9" y="478.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.68%)</title><rect x="1165.9" y="451.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.9" y="462.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.68%)</title><rect x="1173.9" y="611.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="622.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.68%)</title><rect x="1173.9" y="595.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="606.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.68%)</title><rect x="1173.9" y="579.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="590.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.68%)</title><rect x="1173.9" y="563.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="574.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.68%)</title><rect x="1173.9" y="547.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="558.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.68%)</title><rect x="1173.9" y="531.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="542.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.68%)</title><rect x="1173.9" y="515.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="526.0"></text>
</g>
<g>
<title>LIRGenerator::do_Invoke(Invoke*) (1 samples, 0.68%)</title><rect x="1173.9" y="499.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="510.0"></text>
</g>
<g>
<title>LIRGenerator::invoke_load_arguments(Invoke*, LIRItemList*, LIR_OprList const*) (1 samples, 0.68%)</title><rect x="1173.9" y="483.0" width="8.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="494.0"></text>
</g>
<g>
<title>LIR_List::move(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*) [clone .constprop.387] (1 samples, 0.68%)</title><rect x="1173.9" y="467.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="478.0"></text>
</g>
<g>
<title>stringStream::stringStream(char*, unsigned long) (1 samples, 0.68%)</title><rect x="1182.0" y="627.0" width="8.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="638.0"></text>
</g>
</g>
</svg>
