<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (168 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 16.67%)</title><rect x="10.0" y="787.0" width="196.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="798.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (28 samples, 16.67%)</title><rect x="10.0" y="771.0" width="196.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="782.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (21 samples, 12.50%)</title><rect x="10.0" y="755.0" width="147.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="766.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/839485715.accept (20 samples, 11.90%)</title><rect x="17.0" y="739.0" width="140.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="750.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (20 samples, 11.90%)</title><rect x="17.0" y="723.0" width="140.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.0" y="734.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 7.74%)</title><rect x="17.0" y="707.0" width="91.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.0" y="718.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 7.74%)</title><rect x="17.0" y="691.0" width="91.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.0" y="702.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 7.74%)</title><rect x="17.0" y="675.0" width="91.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.0" y="686.0">com/linecor..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 7.74%)</title><rect x="17.0" y="659.0" width="91.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.0" y="670.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 7.74%)</title><rect x="17.0" y="643.0" width="91.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.0" y="654.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 7.74%)</title><rect x="17.0" y="627.0" width="91.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.0" y="638.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 4.76%)</title><rect x="17.0" y="611.0" width="56.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.0" y="622.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.60%)</title><rect x="17.0" y="595.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.60%)</title><rect x="17.0" y="579.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.60%)</title><rect x="17.0" y="563.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 4.17%)</title><rect x="24.0" y="595.0" width="49.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.0" y="606.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 4.17%)</title><rect x="24.0" y="579.0" width="49.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.0" y="590.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 4.17%)</title><rect x="24.0" y="563.0" width="49.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.0" y="574.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 4.17%)</title><rect x="24.0" y="547.0" width="49.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.0" y="558.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 4.17%)</title><rect x="24.0" y="531.0" width="49.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.0" y="542.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 2.98%)</title><rect x="31.1" y="515.0" width="35.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="34.1" y="526.0">Uns..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.38%)</title><rect x="31.1" y="499.0" width="28.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="34.1" y="510.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.60%)</title><rect x="59.2" y="499.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="62.2" y="510.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.60%)</title><rect x="66.2" y="515.0" width="7.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="69.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 2.98%)</title><rect x="73.2" y="611.0" width="35.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="76.2" y="622.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 2.98%)</title><rect x="73.2" y="595.0" width="35.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.2" y="606.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 2.98%)</title><rect x="73.2" y="579.0" width="35.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.2" y="590.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 1.19%)</title><rect x="108.3" y="707.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 1.19%)</title><rect x="108.3" y="691.0" width="14.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 2.98%)</title><rect x="122.4" y="707.0" width="35.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="125.4" y="718.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.98%)</title><rect x="122.4" y="691.0" width="35.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="125.4" y="702.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.79%)</title><rect x="129.4" y="675.0" width="21.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.4" y="686.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.79%)</title><rect x="129.4" y="659.0" width="21.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.4" y="670.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.79%)</title><rect x="129.4" y="643.0" width="21.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.4" y="654.0">j..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.60%)</title><rect x="150.5" y="675.0" width="7.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="153.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.17%)</title><rect x="157.5" y="755.0" width="49.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="160.5" y="766.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.17%)</title><rect x="157.5" y="739.0" width="49.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="160.5" y="750.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.98%)</title><rect x="157.5" y="723.0" width="35.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.5" y="734.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.60%)</title><rect x="157.5" y="707.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="160.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.60%)</title><rect x="157.5" y="691.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.60%)</title><rect x="157.5" y="675.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="160.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.60%)</title><rect x="157.5" y="659.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="160.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.60%)</title><rect x="157.5" y="643.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="160.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/ResponseHeader.parse (1 samples, 0.60%)</title><rect x="157.5" y="627.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.&lt;init&gt; (1 samples, 0.60%)</title><rect x="157.5" y="611.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="160.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.38%)</title><rect x="164.5" y="707.0" width="28.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.5" y="718.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.38%)</title><rect x="164.5" y="691.0" width="28.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.5" y="702.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 2.38%)</title><rect x="164.5" y="675.0" width="28.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.5" y="686.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 2.38%)</title><rect x="164.5" y="659.0" width="28.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="167.5" y="670.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.79%)</title><rect x="164.5" y="643.0" width="21.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.5" y="654.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.60%)</title><rect x="178.6" y="627.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="181.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.60%)</title><rect x="178.6" y="611.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="181.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.60%)</title><rect x="178.6" y="595.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.60%)</title><rect x="178.6" y="579.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.60%)</title><rect x="178.6" y="563.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.60%)</title><rect x="178.6" y="547.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.60%)</title><rect x="178.6" y="531.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="181.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.60%)</title><rect x="185.6" y="643.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.60%)</title><rect x="185.6" y="627.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="188.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.60%)</title><rect x="185.6" y="611.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="188.6" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.60%)</title><rect x="185.6" y="595.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.6" y="606.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.60%)</title><rect x="185.6" y="579.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.60%)</title><rect x="185.6" y="563.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="188.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.60%)</title><rect x="185.6" y="547.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="188.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.60%)</title><rect x="185.6" y="531.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="188.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.19%)</title><rect x="192.6" y="723.0" width="14.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.19%)</title><rect x="192.6" y="707.0" width="14.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.60%)</title><rect x="192.6" y="691.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.60%)</title><rect x="192.6" y="675.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.6" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.60%)</title><rect x="192.6" y="659.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.6" y="670.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.60%)</title><rect x="192.6" y="643.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.60%)</title><rect x="199.6" y="691.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.6" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/274773041.linkToTargetMethod (1 samples, 0.60%)</title><rect x="199.6" y="675.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.6" y="686.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.60%)</title><rect x="199.6" y="659.0" width="7.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="202.6" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (59 samples, 35.12%)</title><rect x="206.7" y="787.0" width="414.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="209.7" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (59 samples, 35.12%)</title><rect x="206.7" y="771.0" width="414.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.7" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (59 samples, 35.12%)</title><rect x="206.7" y="755.0" width="414.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.7" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1671705227.run (38 samples, 22.62%)</title><rect x="213.7" y="739.0" width="266.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.7" y="750.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (38 samples, 22.62%)</title><rect x="213.7" y="723.0" width="266.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.7" y="734.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (38 samples, 22.62%)</title><rect x="213.7" y="707.0" width="266.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.7" y="718.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (36 samples, 21.43%)</title><rect x="213.7" y="691.0" width="252.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.7" y="702.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (3 samples, 1.79%)</title><rect x="213.7" y="675.0" width="21.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.7" y="686.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (3 samples, 1.79%)</title><rect x="213.7" y="659.0" width="21.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.7" y="670.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.scheduledTimeMillis (1 samples, 0.60%)</title><rect x="213.7" y="643.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/1723941460.get (1 samples, 0.60%)</title><rect x="220.7" y="643.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.7" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.60%)</title><rect x="220.7" y="627.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.7" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.60%)</title><rect x="220.7" y="611.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="223.7" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.60%)</title><rect x="220.7" y="595.0" width="7.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="223.7" y="606.0"></text>
</g>
<g>
<title>java/lang/Math.max (1 samples, 0.60%)</title><rect x="227.7" y="643.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (10 samples, 5.95%)</title><rect x="234.8" y="675.0" width="70.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.8" y="686.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 5.95%)</title><rect x="234.8" y="659.0" width="70.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.8" y="670.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 5.95%)</title><rect x="234.8" y="643.0" width="70.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.8" y="654.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 5.95%)</title><rect x="234.8" y="627.0" width="70.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.8" y="638.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 5.95%)</title><rect x="234.8" y="611.0" width="70.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.8" y="622.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 5.95%)</title><rect x="234.8" y="595.0" width="70.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.8" y="606.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.79%)</title><rect x="234.8" y="579.0" width="21.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.8" y="590.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 1.19%)</title><rect x="234.8" y="563.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 1.19%)</title><rect x="234.8" y="547.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 1.19%)</title><rect x="234.8" y="531.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.8" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.19%)</title><rect x="234.8" y="515.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.8" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.60%)</title><rect x="241.8" y="499.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.8" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.60%)</title><rect x="241.8" y="483.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.60%)</title><rect x="248.8" y="563.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 4.17%)</title><rect x="255.8" y="579.0" width="49.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.8" y="590.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.60%)</title><rect x="255.8" y="563.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.60%)</title><rect x="255.8" y="547.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.60%)</title><rect x="255.8" y="531.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.60%)</title><rect x="255.8" y="515.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 3.57%)</title><rect x="262.9" y="563.0" width="42.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.9" y="574.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.60%)</title><rect x="262.9" y="547.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.60%)</title><rect x="262.9" y="531.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.60%)</title><rect x="262.9" y="515.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.98%)</title><rect x="269.9" y="547.0" width="35.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.9" y="558.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.98%)</title><rect x="269.9" y="531.0" width="35.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.9" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.98%)</title><rect x="269.9" y="515.0" width="35.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.9" y="526.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.79%)</title><rect x="269.9" y="499.0" width="21.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.9" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.60%)</title><rect x="269.9" y="483.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.60%)</title><rect x="269.9" y="467.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.60%)</title><rect x="269.9" y="451.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.60%)</title><rect x="269.9" y="435.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.60%)</title><rect x="269.9" y="419.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.60%)</title><rect x="269.9" y="403.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.60%)</title><rect x="269.9" y="387.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.9" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.60%)</title><rect x="276.9" y="483.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.60%)</title><rect x="276.9" y="467.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.60%)</title><rect x="283.9" y="483.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.60%)</title><rect x="291.0" y="499.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.60%)</title><rect x="298.0" y="499.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.60%)</title><rect x="298.0" y="483.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="301.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.60%)</title><rect x="298.0" y="467.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="301.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.60%)</title><rect x="298.0" y="451.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.0" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.60%)</title><rect x="298.0" y="435.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.0" y="446.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.60%)</title><rect x="298.0" y="419.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (23 samples, 13.69%)</title><rect x="305.0" y="675.0" width="161.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.0" y="686.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.79%)</title><rect x="305.0" y="659.0" width="21.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.0" y="670.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.79%)</title><rect x="305.0" y="643.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="308.0" y="654.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.79%)</title><rect x="305.0" y="627.0" width="21.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="308.0" y="638.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.60%)</title><rect x="305.0" y="611.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.60%)</title><rect x="305.0" y="595.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.0" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.60%)</title><rect x="305.0" y="579.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.60%)</title><rect x="305.0" y="563.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="308.0" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.19%)</title><rect x="312.0" y="611.0" width="14.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="315.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 1.19%)</title><rect x="326.1" y="659.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="329.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.60%)</title><rect x="333.1" y="643.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.1" y="654.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.60%)</title><rect x="333.1" y="627.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="336.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (11 samples, 6.55%)</title><rect x="340.1" y="659.0" width="77.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="343.1" y="670.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (11 samples, 6.55%)</title><rect x="340.1" y="643.0" width="77.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="343.1" y="654.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.79%)</title><rect x="347.1" y="627.0" width="21.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.1" y="638.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.19%)</title><rect x="347.1" y="611.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="350.1" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.19%)</title><rect x="347.1" y="595.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.1" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.60%)</title><rect x="354.2" y="579.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.2" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.60%)</title><rect x="354.2" y="563.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.2" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.60%)</title><rect x="354.2" y="547.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="357.2" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.60%)</title><rect x="354.2" y="531.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="357.2" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.60%)</title><rect x="354.2" y="515.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="357.2" y="526.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.60%)</title><rect x="354.2" y="499.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="357.2" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.60%)</title><rect x="361.2" y="611.0" width="7.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="364.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.topic (1 samples, 0.60%)</title><rect x="368.2" y="627.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.2" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.57%)</title><rect x="375.2" y="627.0" width="42.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.2" y="638.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.57%)</title><rect x="375.2" y="611.0" width="42.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.2" y="622.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.60%)</title><rect x="375.2" y="595.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="378.2" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.60%)</title><rect x="375.2" y="579.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="378.2" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.60%)</title><rect x="375.2" y="563.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="378.2" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.60%)</title><rect x="375.2" y="547.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.2" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.98%)</title><rect x="382.3" y="595.0" width="35.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="385.3" y="606.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.38%)</title><rect x="389.3" y="579.0" width="28.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="392.3" y="590.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 2.38%)</title><rect x="417.4" y="659.0" width="28.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.4" y="670.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.38%)</title><rect x="417.4" y="643.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="420.4" y="654.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/917879162.process (1 samples, 0.60%)</title><rect x="424.4" y="627.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="427.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.60%)</title><rect x="424.4" y="611.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="427.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.60%)</title><rect x="424.4" y="595.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.60%)</title><rect x="424.4" y="579.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="427.4" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.60%)</title><rect x="431.4" y="627.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="434.4" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.60%)</title><rect x="431.4" y="611.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.4" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.60%)</title><rect x="438.5" y="627.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="441.5" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.60%)</title><rect x="438.5" y="611.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="441.5" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.60%)</title><rect x="438.5" y="595.0" width="7.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="441.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.60%)</title><rect x="445.5" y="659.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.60%)</title><rect x="445.5" y="643.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.5" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/783602199.linkToTargetMethod (1 samples, 0.60%)</title><rect x="452.5" y="659.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="455.5" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.60%)</title><rect x="452.5" y="643.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="455.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1391353689.get$Lambda (1 samples, 0.60%)</title><rect x="452.5" y="627.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.60%)</title><rect x="459.5" y="659.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="462.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.60%)</title><rect x="459.5" y="643.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.5" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.60%)</title><rect x="459.5" y="627.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="462.5" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.60%)</title><rect x="459.5" y="611.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="462.5" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.60%)</title><rect x="459.5" y="595.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="462.5" y="606.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.60%)</title><rect x="459.5" y="579.0" width="7.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="462.5" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.60%)</title><rect x="466.5" y="691.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="469.5" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.60%)</title><rect x="466.5" y="675.0" width="7.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="469.5" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.60%)</title><rect x="466.5" y="659.0" width="7.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="469.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.60%)</title><rect x="473.6" y="691.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="476.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.60%)</title><rect x="473.6" y="675.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.60%)</title><rect x="473.6" y="659.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="476.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$278/2077399033.accept (1 samples, 0.60%)</title><rect x="473.6" y="643.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="476.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$1 (1 samples, 0.60%)</title><rect x="473.6" y="627.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="476.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/475174013.complete (1 samples, 0.60%)</title><rect x="473.6" y="611.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="476.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.60%)</title><rect x="473.6" y="595.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.60%)</title><rect x="473.6" y="579.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="476.6" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.60%)</title><rect x="473.6" y="563.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.6" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.60%)</title><rect x="473.6" y="547.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="476.6" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.60%)</title><rect x="473.6" y="531.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="476.6" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.60%)</title><rect x="473.6" y="515.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 1.79%)</title><rect x="480.6" y="739.0" width="21.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.6" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (17 samples, 10.12%)</title><rect x="501.7" y="739.0" width="119.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.7" y="750.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (17 samples, 10.12%)</title><rect x="501.7" y="723.0" width="119.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="504.7" y="734.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 7.14%)</title><rect x="529.8" y="707.0" width="84.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="532.8" y="718.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 7.14%)</title><rect x="529.8" y="691.0" width="84.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="532.8" y="702.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (12 samples, 7.14%)</title><rect x="529.8" y="675.0" width="84.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="532.8" y="686.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Park (12 samples, 7.14%)</title><rect x="529.8" y="659.0" width="84.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="532.8" y="670.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.60%)</title><rect x="529.8" y="643.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="532.8" y="654.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.19%)</title><rect x="536.8" y="643.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="539.8" y="654.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.60%)</title><rect x="543.8" y="627.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="546.8" y="638.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.60%)</title><rect x="543.8" y="611.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="546.8" y="622.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.60%)</title><rect x="550.8" y="643.0" width="7.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="553.8" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.19%)</title><rect x="557.9" y="643.0" width="14.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="560.9" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 1.19%)</title><rect x="571.9" y="643.0" width="14.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="574.9" y="654.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.60%)</title><rect x="586.0" y="643.0" width="7.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="589.0" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.60%)</title><rect x="593.0" y="643.0" width="7.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="596.0" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 1.19%)</title><rect x="600.0" y="643.0" width="14.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="603.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.60%)</title><rect x="614.0" y="707.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.60%)</title><rect x="614.0" y="691.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.60%)</title><rect x="614.0" y="675.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="617.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.60%)</title><rect x="614.0" y="659.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="617.0" y="670.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.60%)</title><rect x="621.1" y="787.0" width="7.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="624.1" y="798.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.60%)</title><rect x="621.1" y="771.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="624.1" y="782.0"></text>
</g>
<g>
<title>start_thread (80 samples, 47.62%)</title><rect x="628.1" y="787.0" width="561.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="631.1" y="798.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (80 samples, 47.62%)</title><rect x="628.1" y="771.0" width="561.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="631.1" y="782.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 8.93%)</title><rect x="628.1" y="755.0" width="105.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="631.1" y="766.0">GangWorker::l..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 2.38%)</title><rect x="628.1" y="739.0" width="28.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="631.1" y="750.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.38%)</title><rect x="628.1" y="723.0" width="28.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="631.1" y="734.0">G1..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.60%)</title><rect x="628.1" y="707.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="631.1" y="718.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.79%)</title><rect x="635.1" y="707.0" width="21.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="638.1" y="718.0">S..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (11 samples, 6.55%)</title><rect x="656.2" y="739.0" width="77.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="659.2" y="750.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 5.95%)</title><rect x="656.2" y="723.0" width="70.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="659.2" y="734.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.38%)</title><rect x="656.2" y="707.0" width="28.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="659.2" y="718.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.79%)</title><rect x="656.2" y="691.0" width="21.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="659.2" y="702.0">G..</text>
</g>
<g>
<title>objArrayOopDesc::object_size(int) (1 samples, 0.60%)</title><rect x="670.2" y="675.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="673.2" y="686.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.60%)</title><rect x="677.3" y="691.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="680.3" y="702.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 2.38%)</title><rect x="684.3" y="707.0" width="28.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="687.3" y="718.0">Ge..</text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.60%)</title><rect x="705.4" y="691.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="708.4" y="702.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.19%)</title><rect x="712.4" y="707.0" width="14.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="715.4" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.60%)</title><rect x="726.4" y="723.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="729.4" y="734.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.60%)</title><rect x="726.4" y="707.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="729.4" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.60%)</title><rect x="726.4" y="691.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="729.4" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.60%)</title><rect x="726.4" y="675.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="729.4" y="686.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.60%)</title><rect x="726.4" y="659.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="729.4" y="670.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.60%)</title><rect x="726.4" y="643.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="729.4" y="654.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.60%)</title><rect x="726.4" y="627.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="729.4" y="638.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.60%)</title><rect x="726.4" y="611.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="729.4" y="622.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.60%)</title><rect x="726.4" y="595.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="729.4" y="606.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.60%)</title><rect x="726.4" y="579.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="729.4" y="590.0"></text>
</g>
<g>
<title>CodeRootSetTable::new_entry(nmethod*) (1 samples, 0.60%)</title><rect x="726.4" y="563.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="729.4" y="574.0"></text>
</g>
<g>
<title>_init (1 samples, 0.60%)</title><rect x="726.4" y="547.0" width="7.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="729.4" y="558.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (65 samples, 38.69%)</title><rect x="733.5" y="755.0" width="456.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="736.5" y="766.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (65 samples, 38.69%)</title><rect x="733.5" y="739.0" width="456.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="736.5" y="750.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (65 samples, 38.69%)</title><rect x="733.5" y="723.0" width="456.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="736.5" y="734.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (62 samples, 36.90%)</title><rect x="733.5" y="707.0" width="435.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="736.5" y="718.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (62 samples, 36.90%)</title><rect x="733.5" y="691.0" width="435.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="736.5" y="702.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (36 samples, 21.43%)</title><rect x="733.5" y="675.0" width="252.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="736.5" y="686.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.19%)</title><rect x="733.5" y="659.0" width="14.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="736.5" y="670.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.60%)</title><rect x="733.5" y="643.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="736.5" y="654.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.60%)</title><rect x="740.5" y="643.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="743.5" y="654.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.60%)</title><rect x="740.5" y="627.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="743.5" y="638.0"></text>
</g>
<g>
<title>BoxLockNode::in_RegMask(unsigned int) const (1 samples, 0.60%)</title><rect x="740.5" y="611.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="743.5" y="622.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.60%)</title><rect x="747.5" y="659.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="750.5" y="670.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.60%)</title><rect x="747.5" y="643.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="750.5" y="654.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.79%)</title><rect x="754.5" y="659.0" width="21.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="757.5" y="670.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.60%)</title><rect x="754.5" y="643.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="757.5" y="654.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.19%)</title><rect x="761.5" y="643.0" width="14.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="764.5" y="654.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.60%)</title><rect x="761.5" y="627.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="764.5" y="638.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.60%)</title><rect x="768.6" y="627.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="771.6" y="638.0"></text>
</g>
<g>
<title>Node::match_edge(unsigned int) const (1 samples, 0.60%)</title><rect x="768.6" y="611.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="771.6" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.19%)</title><rect x="775.6" y="659.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="778.6" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.19%)</title><rect x="775.6" y="643.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="778.6" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.19%)</title><rect x="775.6" y="627.0" width="14.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="778.6" y="638.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.60%)</title><rect x="775.6" y="611.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="778.6" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.60%)</title><rect x="782.6" y="611.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="785.6" y="622.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.60%)</title><rect x="782.6" y="595.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="785.6" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.60%)</title><rect x="782.6" y="579.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="785.6" y="590.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.60%)</title><rect x="782.6" y="563.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="785.6" y="574.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.60%)</title><rect x="782.6" y="547.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="785.6" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;) (1 samples, 0.60%)</title><rect x="789.6" y="659.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="792.6" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 16.07%)</title><rect x="796.7" y="659.0" width="189.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="799.7" y="670.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.60%)</title><rect x="796.7" y="643.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="799.7" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.60%)</title><rect x="803.7" y="643.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="806.7" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.60%)</title><rect x="803.7" y="627.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="806.7" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.60%)</title><rect x="803.7" y="611.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="806.7" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.38%)</title><rect x="810.7" y="643.0" width="28.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="813.7" y="654.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 2.98%)</title><rect x="838.8" y="643.0" width="35.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="841.8" y="654.0">Pha..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.60%)</title><rect x="852.9" y="627.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="855.9" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.60%)</title><rect x="859.9" y="627.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="862.9" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.60%)</title><rect x="859.9" y="611.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="862.9" y="622.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.60%)</title><rect x="866.9" y="627.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="869.9" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.60%)</title><rect x="873.9" y="643.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="876.9" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.60%)</title><rect x="881.0" y="643.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="884.0" y="654.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.60%)</title><rect x="881.0" y="627.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="884.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 2.38%)</title><rect x="888.0" y="643.0" width="28.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="891.0" y="654.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.60%)</title><rect x="916.1" y="643.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="919.1" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.19%)</title><rect x="923.1" y="643.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="926.1" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.60%)</title><rect x="930.1" y="627.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.1" y="638.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.60%)</title><rect x="937.1" y="643.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="940.1" y="654.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.60%)</title><rect x="937.1" y="627.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="940.1" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.60%)</title><rect x="944.2" y="643.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="947.2" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.60%)</title><rect x="944.2" y="627.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="947.2" y="638.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 2.98%)</title><rect x="951.2" y="643.0" width="35.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="954.2" y="654.0">Pha..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.60%)</title><rect x="965.2" y="627.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="968.2" y="638.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.19%)</title><rect x="972.3" y="627.0" width="14.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="975.3" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 9.52%)</title><rect x="986.3" y="675.0" width="112.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.3" y="686.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.60%)</title><rect x="986.3" y="659.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="989.3" y="670.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.60%)</title><rect x="986.3" y="643.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="989.3" y="654.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.60%)</title><rect x="986.3" y="627.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.3" y="638.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.60%)</title><rect x="986.3" y="611.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.3" y="622.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.60%)</title><rect x="986.3" y="595.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.3" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.19%)</title><rect x="993.3" y="659.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.3" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.19%)</title><rect x="993.3" y="643.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="996.3" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.60%)</title><rect x="993.3" y="627.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.3" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.60%)</title><rect x="993.3" y="611.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.3" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.60%)</title><rect x="993.3" y="595.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.3" y="606.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.60%)</title><rect x="993.3" y="579.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.3" y="590.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.60%)</title><rect x="993.3" y="563.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="996.3" y="574.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.60%)</title><rect x="993.3" y="547.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.3" y="558.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.60%)</title><rect x="993.3" y="531.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.3" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.60%)</title><rect x="1000.4" y="627.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1003.4" y="638.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.60%)</title><rect x="1007.4" y="659.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1010.4" y="670.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.60%)</title><rect x="1007.4" y="643.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1010.4" y="654.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.60%)</title><rect x="1007.4" y="627.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.4" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (8 samples, 4.76%)</title><rect x="1014.4" y="659.0" width="56.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.4" y="670.0">PhaseI..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.60%)</title><rect x="1014.4" y="643.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1017.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.79%)</title><rect x="1021.4" y="643.0" width="21.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1024.4" y="654.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.19%)</title><rect x="1028.5" y="627.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.5" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.60%)</title><rect x="1028.5" y="611.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.5" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.60%)</title><rect x="1035.5" y="611.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.5" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.60%)</title><rect x="1035.5" y="595.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1038.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.79%)</title><rect x="1042.5" y="643.0" width="21.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.5" y="654.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.60%)</title><rect x="1049.5" y="627.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1052.5" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.60%)</title><rect x="1049.5" y="611.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.5" y="622.0"></text>
</g>
<g>
<title>TypePtr::get_con() const (1 samples, 0.60%)</title><rect x="1049.5" y="595.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.60%)</title><rect x="1056.5" y="627.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1059.5" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.60%)</title><rect x="1056.5" y="611.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1059.5" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.60%)</title><rect x="1063.6" y="643.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1066.6" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.60%)</title><rect x="1063.6" y="627.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1066.6" y="638.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.60%)</title><rect x="1063.6" y="611.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.6" y="622.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.60%)</title><rect x="1063.6" y="595.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1066.6" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.19%)</title><rect x="1070.6" y="659.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.6" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.19%)</title><rect x="1070.6" y="643.0" width="14.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.6" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.60%)</title><rect x="1070.6" y="627.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.6" y="638.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.60%)</title><rect x="1077.6" y="627.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.6" y="638.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.60%)</title><rect x="1077.6" y="611.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.6" y="622.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.60%)</title><rect x="1084.6" y="659.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.6" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.60%)</title><rect x="1084.6" y="643.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1087.6" y="654.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.60%)</title><rect x="1084.6" y="627.0" width="7.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1087.6" y="638.0"></text>
</g>
<g>
<title>StoreNode::Value(PhaseTransform*) const (1 samples, 0.60%)</title><rect x="1091.7" y="659.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 4.17%)</title><rect x="1098.7" y="675.0" width="49.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.7" y="686.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 4.17%)</title><rect x="1098.7" y="659.0" width="49.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.7" y="670.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.57%)</title><rect x="1098.7" y="643.0" width="42.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.7" y="654.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.57%)</title><rect x="1098.7" y="627.0" width="42.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.7" y="638.0">Pars..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.60%)</title><rect x="1098.7" y="611.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1101.7" y="622.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.60%)</title><rect x="1098.7" y="595.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1101.7" y="606.0"></text>
</g>
<g>
<title>CompileBroker::maybe_block() (1 samples, 0.60%)</title><rect x="1098.7" y="579.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.38%)</title><rect x="1105.7" y="611.0" width="28.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.7" y="622.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.79%)</title><rect x="1105.7" y="595.0" width="21.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.7" y="606.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.79%)</title><rect x="1105.7" y="579.0" width="21.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.7" y="590.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.79%)</title><rect x="1105.7" y="563.0" width="21.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.7" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.79%)</title><rect x="1105.7" y="547.0" width="21.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.7" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.79%)</title><rect x="1105.7" y="531.0" width="21.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.7" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.79%)</title><rect x="1105.7" y="515.0" width="21.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.7" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.79%)</title><rect x="1105.7" y="499.0" width="21.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.7" y="510.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.79%)</title><rect x="1105.7" y="483.0" width="21.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.7" y="494.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.79%)</title><rect x="1105.7" y="467.0" width="21.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.7" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.79%)</title><rect x="1105.7" y="451.0" width="21.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.7" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.79%)</title><rect x="1105.7" y="435.0" width="21.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.7" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.79%)</title><rect x="1105.7" y="419.0" width="21.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.7" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.79%)</title><rect x="1105.7" y="403.0" width="21.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.7" y="414.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.60%)</title><rect x="1105.7" y="387.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.7" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.60%)</title><rect x="1105.7" y="371.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.7" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.60%)</title><rect x="1105.7" y="355.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.7" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.60%)</title><rect x="1105.7" y="339.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.7" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.60%)</title><rect x="1105.7" y="323.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.7" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="1105.7" y="307.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.7" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="1105.7" y="291.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.7" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.60%)</title><rect x="1105.7" y="275.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.7" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.60%)</title><rect x="1105.7" y="259.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.7" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.60%)</title><rect x="1105.7" y="243.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.7" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.60%)</title><rect x="1105.7" y="227.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.7" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.60%)</title><rect x="1105.7" y="211.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.7" y="222.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_and_type_ref_index_at(int, bool) (1 samples, 0.60%)</title><rect x="1105.7" y="195.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.7" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.19%)</title><rect x="1112.7" y="387.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.19%)</title><rect x="1112.7" y="371.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.19%)</title><rect x="1112.7" y="355.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.19%)</title><rect x="1112.7" y="339.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.19%)</title><rect x="1112.7" y="323.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.19%)</title><rect x="1112.7" y="307.0" width="14.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.7" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.60%)</title><rect x="1112.7" y="291.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.7" y="302.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.60%)</title><rect x="1112.7" y="275.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1119.8" y="291.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1119.8" y="275.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1119.8" y="259.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1119.8" y="243.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1119.8" y="227.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1119.8" y="211.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.8" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1119.8" y="195.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.8" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1119.8" y="179.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1119.8" y="163.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1119.8" y="147.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1119.8" y="131.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.60%)</title><rect x="1119.8" y="115.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.8" y="126.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.60%)</title><rect x="1119.8" y="99.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.8" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.60%)</title><rect x="1119.8" y="83.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.8" y="94.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.60%)</title><rect x="1119.8" y="67.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.8" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.60%)</title><rect x="1119.8" y="51.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.8" y="62.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.60%)</title><rect x="1119.8" y="35.0" width="7.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1122.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.60%)</title><rect x="1126.8" y="595.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.60%)</title><rect x="1126.8" y="579.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.8" y="590.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.60%)</title><rect x="1126.8" y="563.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.8" y="574.0"></text>
</g>
<g>
<title>PhaseTransform::zerocon(BasicType) (1 samples, 0.60%)</title><rect x="1133.8" y="611.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.8" y="622.0"></text>
</g>
<g>
<title>Parse::load_interpreter_state(Node*) (1 samples, 0.60%)</title><rect x="1140.8" y="643.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.8" y="654.0"></text>
</g>
<g>
<title>Parse::check_interpreter_type(Node*, Type const*, SafePointNode*&amp;) (1 samples, 0.60%)</title><rect x="1140.8" y="627.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.8" y="638.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.60%)</title><rect x="1140.8" y="611.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.8" y="622.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.60%)</title><rect x="1140.8" y="595.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.8" y="606.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.60%)</title><rect x="1140.8" y="579.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.8" y="590.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.19%)</title><rect x="1147.9" y="675.0" width="14.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.9" y="686.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.60%)</title><rect x="1147.9" y="659.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.9" y="670.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.60%)</title><rect x="1154.9" y="659.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.9" y="670.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.60%)</title><rect x="1161.9" y="675.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.9" y="686.0"></text>
</g>
<g>
<title>nmethod::make_not_entrant_or_zombie(unsigned int) (1 samples, 0.60%)</title><rect x="1161.9" y="659.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.9" y="670.0"></text>
</g>
<g>
<title>AbstractCompiler::is_c2() (1 samples, 0.60%)</title><rect x="1161.9" y="643.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.9" y="654.0"></text>
</g>
<g>
<title>CompileBroker::collect_statistics(CompilerThread*, elapsedTimer, CompileTask*) (1 samples, 0.60%)</title><rect x="1168.9" y="707.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="718.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.19%)</title><rect x="1176.0" y="707.0" width="14.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.0" y="718.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.19%)</title><rect x="1176.0" y="691.0" width="14.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.0" y="702.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.19%)</title><rect x="1176.0" y="675.0" width="14.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="686.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.60%)</title><rect x="1176.0" y="659.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="670.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.60%)</title><rect x="1176.0" y="643.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.0" y="654.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.60%)</title><rect x="1176.0" y="627.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.0" y="638.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.60%)</title><rect x="1176.0" y="611.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.60%)</title><rect x="1176.0" y="595.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.60%)</title><rect x="1176.0" y="579.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.60%)</title><rect x="1176.0" y="563.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.60%)</title><rect x="1176.0" y="547.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.60%)</title><rect x="1176.0" y="531.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.60%)</title><rect x="1176.0" y="515.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.0" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::null_check(Instruction*) (1 samples, 0.60%)</title><rect x="1176.0" y="499.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="510.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.60%)</title><rect x="1183.0" y="659.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="670.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.60%)</title><rect x="1183.0" y="643.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="654.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.60%)</title><rect x="1183.0" y="627.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.60%)</title><rect x="1183.0" y="611.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.60%)</title><rect x="1183.0" y="595.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>CallRelocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*) (1 samples, 0.60%)</title><rect x="1183.0" y="579.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
</g>
</svg>
