<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (143 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 19.58%)</title><rect x="10.0" y="867.0" width="231.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="878.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (28 samples, 19.58%)</title><rect x="10.0" y="851.0" width="231.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.70%)</title><rect x="10.0" y="835.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.70%)</title><rect x="10.0" y="819.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/818403214.accept (1 samples, 0.70%)</title><rect x="10.0" y="803.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.70%)</title><rect x="10.0" y="787.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.70%)</title><rect x="10.0" y="771.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.70%)</title><rect x="10.0" y="755.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (12 samples, 8.39%)</title><rect x="18.3" y="835.0" width="99.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.3" y="846.0">java/lang/It..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1992302078.accept (12 samples, 8.39%)</title><rect x="18.3" y="819.0" width="99.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.3" y="830.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (12 samples, 8.39%)</title><rect x="18.3" y="803.0" width="99.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.3" y="814.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (10 samples, 6.99%)</title><rect x="18.3" y="787.0" width="82.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.3" y="798.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (10 samples, 6.99%)</title><rect x="18.3" y="771.0" width="82.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="782.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (10 samples, 6.99%)</title><rect x="18.3" y="755.0" width="82.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.3" y="766.0">com/linec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (10 samples, 6.99%)</title><rect x="18.3" y="739.0" width="82.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.3" y="750.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 6.99%)</title><rect x="18.3" y="723.0" width="82.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="734.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (10 samples, 6.99%)</title><rect x="18.3" y="707.0" width="82.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.3" y="718.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 5.59%)</title><rect x="18.3" y="691.0" width="66.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="702.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.70%)</title><rect x="18.3" y="675.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.70%)</title><rect x="18.3" y="659.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.70%)</title><rect x="18.3" y="643.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 4.90%)</title><rect x="26.5" y="675.0" width="57.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.5" y="686.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 4.90%)</title><rect x="26.5" y="659.0" width="57.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.5" y="670.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 4.90%)</title><rect x="26.5" y="643.0" width="57.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.5" y="654.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 4.90%)</title><rect x="26.5" y="627.0" width="57.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.5" y="638.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 4.20%)</title><rect x="34.8" y="611.0" width="49.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.8" y="622.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 3.50%)</title><rect x="43.0" y="595.0" width="41.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="46.0" y="606.0">Uns..</text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 2.10%)</title><rect x="43.0" y="579.0" width="24.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="46.0" y="590.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.40%)</title><rect x="67.8" y="579.0" width="16.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="70.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.40%)</title><rect x="84.3" y="691.0" width="16.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.40%)</title><rect x="84.3" y="675.0" width="16.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.40%)</title><rect x="84.3" y="659.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="87.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.40%)</title><rect x="84.3" y="643.0" width="16.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.70%)</title><rect x="100.8" y="787.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.70%)</title><rect x="100.8" y="771.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.70%)</title><rect x="100.8" y="755.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.70%)</title><rect x="109.0" y="787.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="112.0" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.70%)</title><rect x="109.0" y="771.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 10.49%)</title><rect x="117.3" y="835.0" width="123.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.3" y="846.0">org/apache/kafk..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 10.49%)</title><rect x="117.3" y="819.0" width="123.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.3" y="830.0">org/apache/kafk..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 3.50%)</title><rect x="117.3" y="803.0" width="41.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.3" y="814.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 3.50%)</title><rect x="117.3" y="787.0" width="41.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="120.3" y="798.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 3.50%)</title><rect x="117.3" y="771.0" width="41.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="120.3" y="782.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 2.80%)</title><rect x="117.3" y="755.0" width="33.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="120.3" y="766.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 2.80%)</title><rect x="117.3" y="739.0" width="33.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="120.3" y="750.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.40%)</title><rect x="117.3" y="723.0" width="16.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.70%)</title><rect x="125.5" y="707.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.70%)</title><rect x="125.5" y="691.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="128.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.70%)</title><rect x="125.5" y="675.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="128.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.70%)</title><rect x="125.5" y="659.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="128.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.70%)</title><rect x="125.5" y="643.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="128.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.70%)</title><rect x="125.5" y="627.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.70%)</title><rect x="125.5" y="611.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="128.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 1.40%)</title><rect x="133.8" y="723.0" width="16.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="136.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 1.40%)</title><rect x="133.8" y="707.0" width="16.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 1.40%)</title><rect x="133.8" y="691.0" width="16.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.8" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 1.40%)</title><rect x="133.8" y="675.0" width="16.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="136.8" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.70%)</title><rect x="142.0" y="659.0" width="8.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="145.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.70%)</title><rect x="150.3" y="755.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 4.90%)</title><rect x="158.5" y="803.0" width="57.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.5" y="814.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 4.20%)</title><rect x="158.5" y="787.0" width="49.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.5" y="798.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 3.50%)</title><rect x="158.5" y="771.0" width="41.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.5" y="782.0">org..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 1.40%)</title><rect x="158.5" y="755.0" width="16.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="161.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/342535713.accept (2 samples, 1.40%)</title><rect x="158.5" y="739.0" width="16.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 1.40%)</title><rect x="158.5" y="723.0" width="16.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="161.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.70%)</title><rect x="158.5" y="707.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="161.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.70%)</title><rect x="158.5" y="691.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.70%)</title><rect x="158.5" y="675.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.5" y="686.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.70%)</title><rect x="158.5" y="659.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.5" y="670.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.70%)</title><rect x="158.5" y="643.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.70%)</title><rect x="166.8" y="707.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.70%)</title><rect x="166.8" y="691.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.70%)</title><rect x="166.8" y="675.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.8" y="686.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.70%)</title><rect x="166.8" y="659.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.70%)</title><rect x="166.8" y="643.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="169.8" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.70%)</title><rect x="175.0" y="755.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="178.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.70%)</title><rect x="175.0" y="739.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.0" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1197120122.linkToTargetMethod (1 samples, 0.70%)</title><rect x="175.0" y="723.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="178.0" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.70%)</title><rect x="175.0" y="707.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$68/1312845614.get$Lambda (1 samples, 0.70%)</title><rect x="175.0" y="691.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 1.40%)</title><rect x="183.3" y="755.0" width="16.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 1.40%)</title><rect x="183.3" y="739.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 1.40%)</title><rect x="183.3" y="723.0" width="16.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 1.40%)</title><rect x="183.3" y="707.0" width="16.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.70%)</title><rect x="183.3" y="691.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="186.3" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.70%)</title><rect x="183.3" y="675.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.70%)</title><rect x="183.3" y="659.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.70%)</title><rect x="183.3" y="643.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="186.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.70%)</title><rect x="183.3" y="627.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.70%)</title><rect x="191.5" y="691.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.5" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.70%)</title><rect x="191.5" y="675.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="194.5" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.70%)</title><rect x="191.5" y="659.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.5" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.70%)</title><rect x="191.5" y="643.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="194.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.70%)</title><rect x="199.8" y="771.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.70%)</title><rect x="199.8" y="755.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.70%)</title><rect x="199.8" y="739.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.70%)</title><rect x="199.8" y="723.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.70%)</title><rect x="199.8" y="707.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.70%)</title><rect x="199.8" y="691.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.70%)</title><rect x="199.8" y="675.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.8" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.70%)</title><rect x="199.8" y="659.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.70%)</title><rect x="199.8" y="643.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.70%)</title><rect x="208.0" y="787.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.70%)</title><rect x="208.0" y="771.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.40%)</title><rect x="216.3" y="803.0" width="16.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 1.40%)</title><rect x="216.3" y="787.0" width="16.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 1.40%)</title><rect x="216.3" y="771.0" width="16.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 1.40%)</title><rect x="216.3" y="755.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="219.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 1.40%)</title><rect x="216.3" y="739.0" width="16.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 1.40%)</title><rect x="216.3" y="723.0" width="16.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 1.40%)</title><rect x="216.3" y="707.0" width="16.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (2 samples, 1.40%)</title><rect x="216.3" y="691.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$TopicAndPartitionData.batchByTopic (1 samples, 0.70%)</title><rect x="224.5" y="675.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.5" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (1 samples, 0.70%)</title><rect x="224.5" y="659.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.70%)</title><rect x="232.8" y="803.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.70%)</title><rect x="232.8" y="787.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.70%)</title><rect x="232.8" y="771.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="235.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.70%)</title><rect x="232.8" y="755.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.70%)</title><rect x="232.8" y="739.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.70%)</title><rect x="232.8" y="723.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.70%)</title><rect x="232.8" y="707.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.8" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (46 samples, 32.17%)</title><rect x="241.0" y="867.0" width="379.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.0" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (46 samples, 32.17%)</title><rect x="241.0" y="851.0" width="379.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.0" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (46 samples, 32.17%)</title><rect x="241.0" y="835.0" width="379.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.0" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.70%)</title><rect x="241.0" y="819.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1529316903.run (28 samples, 19.58%)</title><rect x="249.3" y="819.0" width="231.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.3" y="830.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (28 samples, 19.58%)</title><rect x="249.3" y="803.0" width="231.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.3" y="814.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (28 samples, 19.58%)</title><rect x="249.3" y="787.0" width="231.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.3" y="798.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (27 samples, 18.88%)</title><rect x="249.3" y="771.0" width="222.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.3" y="782.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (8 samples, 5.59%)</title><rect x="249.3" y="755.0" width="66.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.3" y="766.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (5 samples, 3.50%)</title><rect x="249.3" y="739.0" width="41.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.3" y="750.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (5 samples, 3.50%)</title><rect x="249.3" y="723.0" width="41.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.3" y="734.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (5 samples, 3.50%)</title><rect x="249.3" y="707.0" width="41.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.3" y="718.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (5 samples, 3.50%)</title><rect x="249.3" y="691.0" width="41.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.3" y="702.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (5 samples, 3.50%)</title><rect x="249.3" y="675.0" width="41.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.3" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.40%)</title><rect x="249.3" y="659.0" width="16.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.40%)</title><rect x="249.3" y="643.0" width="16.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.40%)</title><rect x="249.3" y="627.0" width="16.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 1.40%)</title><rect x="249.3" y="611.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 1.40%)</title><rect x="249.3" y="595.0" width="16.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 2.10%)</title><rect x="265.8" y="659.0" width="24.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.8" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.70%)</title><rect x="265.8" y="643.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.70%)</title><rect x="265.8" y="627.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.70%)</title><rect x="265.8" y="611.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.70%)</title><rect x="265.8" y="595.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.70%)</title><rect x="265.8" y="579.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.70%)</title><rect x="265.8" y="563.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.70%)</title><rect x="265.8" y="547.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.70%)</title><rect x="274.1" y="643.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.70%)</title><rect x="274.1" y="627.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.70%)</title><rect x="274.1" y="611.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.70%)</title><rect x="274.1" y="595.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.70%)</title><rect x="274.1" y="579.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (1 samples, 0.70%)</title><rect x="282.3" y="643.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.70%)</title><rect x="282.3" y="627.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.70%)</title><rect x="282.3" y="611.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.70%)</title><rect x="282.3" y="595.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.70%)</title><rect x="282.3" y="579.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.70%)</title><rect x="282.3" y="563.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.70%)</title><rect x="282.3" y="547.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.validateTask (1 samples, 0.70%)</title><rect x="290.6" y="739.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.6" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.40%)</title><rect x="298.8" y="739.0" width="16.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="301.8" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.70%)</title><rect x="307.1" y="723.0" width="8.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="310.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (19 samples, 13.29%)</title><rect x="315.3" y="755.0" width="156.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="318.3" y="766.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 2.80%)</title><rect x="315.3" y="739.0" width="33.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="318.3" y="750.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.80%)</title><rect x="315.3" y="723.0" width="33.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="318.3" y="734.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 2.10%)</title><rect x="323.6" y="707.0" width="24.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="326.6" y="718.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.70%)</title><rect x="340.1" y="691.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="343.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.70%)</title><rect x="348.3" y="739.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="351.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.70%)</title><rect x="348.3" y="723.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.70%)</title><rect x="348.3" y="707.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (10 samples, 6.99%)</title><rect x="356.6" y="739.0" width="82.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="359.6" y="750.0">com/linec..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.70%)</title><rect x="356.6" y="723.0" width="8.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="359.6" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.70%)</title><rect x="356.6" y="707.0" width="8.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="359.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (9 samples, 6.29%)</title><rect x="364.8" y="723.0" width="74.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.8" y="734.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 2.10%)</title><rect x="364.8" y="707.0" width="24.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="367.8" y="718.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.40%)</title><rect x="364.8" y="691.0" width="16.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.8" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.70%)</title><rect x="373.1" y="675.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="376.1" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.70%)</title><rect x="373.1" y="659.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="376.1" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.70%)</title><rect x="373.1" y="643.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="376.1" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.70%)</title><rect x="373.1" y="627.0" width="8.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="376.1" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.70%)</title><rect x="381.3" y="691.0" width="8.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="384.3" y="702.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 4.20%)</title><rect x="389.6" y="707.0" width="49.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="392.6" y="718.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 3.50%)</title><rect x="397.8" y="691.0" width="41.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="400.8" y="702.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.70%)</title><rect x="397.8" y="675.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.8" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.80%)</title><rect x="406.1" y="675.0" width="33.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="409.1" y="686.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.40%)</title><rect x="422.6" y="659.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="425.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.40%)</title><rect x="422.6" y="643.0" width="16.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 2.10%)</title><rect x="439.1" y="739.0" width="24.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="442.1" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 2.10%)</title><rect x="439.1" y="723.0" width="24.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="442.1" y="734.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.70%)</title><rect x="439.1" y="707.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="442.1" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.70%)</title><rect x="439.1" y="691.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="442.1" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.70%)</title><rect x="439.1" y="675.0" width="8.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="442.1" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 1.40%)</title><rect x="447.3" y="707.0" width="16.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="450.3" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (2 samples, 1.40%)</title><rect x="447.3" y="691.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="450.3" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (2 samples, 1.40%)</title><rect x="447.3" y="675.0" width="16.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="450.3" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.40%)</title><rect x="447.3" y="659.0" width="16.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="450.3" y="670.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.40%)</title><rect x="447.3" y="643.0" width="16.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="450.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.70%)</title><rect x="463.8" y="739.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="466.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.70%)</title><rect x="463.8" y="723.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="466.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.70%)</title><rect x="463.8" y="707.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="466.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1052564536.accept (1 samples, 0.70%)</title><rect x="463.8" y="691.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="466.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$0 (1 samples, 0.70%)</title><rect x="463.8" y="675.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="466.8" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.70%)</title><rect x="463.8" y="659.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.8" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.70%)</title><rect x="463.8" y="643.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="466.8" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.70%)</title><rect x="463.8" y="627.0" width="8.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="466.8" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.70%)</title><rect x="463.8" y="611.0" width="8.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="466.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.70%)</title><rect x="472.1" y="771.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.70%)</title><rect x="472.1" y="755.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.70%)</title><rect x="472.1" y="739.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="475.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$267/1383734762.accept (1 samples, 0.70%)</title><rect x="472.1" y="723.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="475.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$1 (1 samples, 0.70%)</title><rect x="472.1" y="707.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="475.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/393736314.complete (1 samples, 0.70%)</title><rect x="472.1" y="691.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="475.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.70%)</title><rect x="472.1" y="675.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="475.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.70%)</title><rect x="472.1" y="659.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.1" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.70%)</title><rect x="472.1" y="643.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.1" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.70%)</title><rect x="472.1" y="627.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="475.1" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.70%)</title><rect x="472.1" y="611.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.1" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.70%)</title><rect x="472.1" y="595.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="475.1" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 2.10%)</title><rect x="480.3" y="819.0" width="24.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.3" y="830.0">j..</text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 1.40%)</title><rect x="488.6" y="803.0" width="16.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.6" y="814.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.70%)</title><rect x="488.6" y="787.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="491.6" y="798.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.70%)</title><rect x="496.9" y="787.0" width="8.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="499.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.70%)</title><rect x="505.1" y="819.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="508.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.70%)</title><rect x="505.1" y="803.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.40%)</title><rect x="513.4" y="819.0" width="16.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="516.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1529316903.run (1 samples, 0.70%)</title><rect x="521.6" y="803.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="524.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 7.69%)</title><rect x="529.9" y="819.0" width="90.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.9" y="830.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 7.69%)</title><rect x="529.9" y="803.0" width="90.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="532.9" y="814.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (10 samples, 6.99%)</title><rect x="529.9" y="787.0" width="82.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="532.9" y="798.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 6.29%)</title><rect x="538.1" y="771.0" width="74.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.1" y="782.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (9 samples, 6.29%)</title><rect x="538.1" y="755.0" width="74.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="541.1" y="766.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 5.59%)</title><rect x="546.4" y="739.0" width="66.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="549.4" y="750.0">Unsafe_..</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.40%)</title><rect x="546.4" y="723.0" width="16.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="549.4" y="734.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.70%)</title><rect x="562.9" y="723.0" width="8.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="565.9" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.40%)</title><rect x="571.1" y="723.0" width="16.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="574.1" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 2.10%)</title><rect x="587.6" y="723.0" width="24.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="590.6" y="734.0">_..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.70%)</title><rect x="612.4" y="787.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="615.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.70%)</title><rect x="612.4" y="771.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="615.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.70%)</title><rect x="612.4" y="755.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="615.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.70%)</title><rect x="612.4" y="739.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="615.4" y="750.0"></text>
</g>
<g>
<title>start_thread (69 samples, 48.25%)</title><rect x="620.6" y="867.0" width="569.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="623.6" y="878.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (69 samples, 48.25%)</title><rect x="620.6" y="851.0" width="569.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="623.6" y="862.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 10.49%)</title><rect x="620.6" y="835.0" width="123.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="623.6" y="846.0">GangWorker::loo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.70%)</title><rect x="620.6" y="819.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="623.6" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.70%)</title><rect x="620.6" y="803.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="623.6" y="814.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.70%)</title><rect x="620.6" y="787.0" width="8.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="623.6" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (14 samples, 9.79%)</title><rect x="628.9" y="819.0" width="115.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="631.9" y="830.0">G1ParTask::wor..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 7.69%)</title><rect x="628.9" y="803.0" width="90.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="631.9" y="814.0">G1ParEvacu..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 2.10%)</title><rect x="628.9" y="787.0" width="24.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="631.9" y="798.0">G..</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.70%)</title><rect x="637.1" y="771.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="640.1" y="782.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.70%)</title><rect x="645.4" y="771.0" width="8.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="648.4" y="782.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (5 samples, 3.50%)</title><rect x="653.6" y="787.0" width="41.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="656.6" y="798.0">Gen..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.40%)</title><rect x="694.9" y="787.0" width="16.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="697.9" y="798.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.70%)</title><rect x="711.4" y="787.0" width="8.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="714.4" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.40%)</title><rect x="719.7" y="803.0" width="16.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="722.7" y="814.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.70%)</title><rect x="719.7" y="787.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="722.7" y="798.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.70%)</title><rect x="719.7" y="771.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="722.7" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.70%)</title><rect x="727.9" y="787.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="730.9" y="798.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.70%)</title><rect x="727.9" y="771.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="730.9" y="782.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.70%)</title><rect x="727.9" y="755.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="730.9" y="766.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.70%)</title><rect x="727.9" y="739.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="730.9" y="750.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.70%)</title><rect x="727.9" y="723.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="730.9" y="734.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.70%)</title><rect x="727.9" y="707.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="730.9" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.70%)</title><rect x="736.2" y="803.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="739.2" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.70%)</title><rect x="736.2" y="787.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="739.2" y="798.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.70%)</title><rect x="736.2" y="771.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="739.2" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.70%)</title><rect x="736.2" y="755.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="739.2" y="766.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.70%)</title><rect x="736.2" y="739.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="739.2" y="750.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.70%)</title><rect x="736.2" y="723.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="739.2" y="734.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.70%)</title><rect x="736.2" y="707.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="739.2" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (54 samples, 37.76%)</title><rect x="744.4" y="835.0" width="445.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="747.4" y="846.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (54 samples, 37.76%)</title><rect x="744.4" y="819.0" width="445.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="747.4" y="830.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (54 samples, 37.76%)</title><rect x="744.4" y="803.0" width="445.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="747.4" y="814.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (51 samples, 35.66%)</title><rect x="744.4" y="787.0" width="420.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="747.4" y="798.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (51 samples, 35.66%)</title><rect x="744.4" y="771.0" width="420.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="747.4" y="782.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (29 samples, 20.28%)</title><rect x="744.4" y="755.0" width="239.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="747.4" y="766.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 2.10%)</title><rect x="744.4" y="739.0" width="24.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="747.4" y="750.0">C..</text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 2.10%)</title><rect x="744.4" y="723.0" width="24.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="747.4" y="734.0">C..</text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.70%)</title><rect x="744.4" y="707.0" width="8.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="747.4" y="718.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.70%)</title><rect x="744.4" y="691.0" width="8.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="747.4" y="702.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.70%)</title><rect x="744.4" y="675.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="747.4" y="686.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.70%)</title><rect x="744.4" y="659.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="747.4" y="670.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.70%)</title><rect x="744.4" y="643.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="747.4" y="654.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.70%)</title><rect x="752.7" y="707.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="755.7" y="718.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.70%)</title><rect x="752.7" y="691.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="755.7" y="702.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.70%)</title><rect x="752.7" y="675.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="755.7" y="686.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.70%)</title><rect x="752.7" y="659.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="755.7" y="670.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.70%)</title><rect x="752.7" y="643.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="755.7" y="654.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.70%)</title><rect x="760.9" y="707.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="763.9" y="718.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.70%)</title><rect x="760.9" y="691.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="763.9" y="702.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::ValueRecorder(Arena*) (1 samples, 0.70%)</title><rect x="760.9" y="675.0" width="8.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="763.9" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.70%)</title><rect x="769.2" y="739.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="772.2" y="750.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.70%)</title><rect x="769.2" y="723.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="772.2" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 2.10%)</title><rect x="777.4" y="739.0" width="24.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="780.4" y="750.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 2.10%)</title><rect x="777.4" y="723.0" width="24.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="780.4" y="734.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 2.10%)</title><rect x="777.4" y="707.0" width="24.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="780.4" y="718.0">P..</text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.70%)</title><rect x="777.4" y="691.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="780.4" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.70%)</title><rect x="785.7" y="691.0" width="8.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="788.7" y="702.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.70%)</title><rect x="785.7" y="675.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="788.7" y="686.0"></text>
</g>
<g>
<title>loadPNode::memory_operand() const (1 samples, 0.70%)</title><rect x="785.7" y="659.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="788.7" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.70%)</title><rect x="793.9" y="691.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="796.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 15.38%)</title><rect x="802.2" y="739.0" width="181.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="805.2" y="750.0">PhaseChaitin::Register_..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.40%)</title><rect x="802.2" y="723.0" width="16.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="805.2" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.70%)</title><rect x="802.2" y="707.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="805.2" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.70%)</title><rect x="810.4" y="707.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="813.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.70%)</title><rect x="818.7" y="723.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="821.7" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.70%)</title><rect x="818.7" y="707.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="821.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.40%)</title><rect x="826.9" y="723.0" width="16.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="829.9" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.70%)</title><rect x="835.2" y="707.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="838.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 4.20%)</title><rect x="843.4" y="723.0" width="49.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="846.4" y="734.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.70%)</title><rect x="868.2" y="707.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="871.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.40%)</title><rect x="876.4" y="707.0" width="16.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="879.4" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.70%)</title><rect x="884.7" y="691.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="887.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (2 samples, 1.40%)</title><rect x="892.9" y="723.0" width="16.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="895.9" y="734.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.70%)</title><rect x="892.9" y="707.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="895.9" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.70%)</title><rect x="901.2" y="707.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="904.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.40%)</title><rect x="909.4" y="723.0" width="16.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.4" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.70%)</title><rect x="909.4" y="707.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="912.4" y="718.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.70%)</title><rect x="917.7" y="707.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 2.10%)</title><rect x="925.9" y="723.0" width="24.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="928.9" y="734.0">P..</text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.70%)</title><rect x="942.4" y="707.0" width="8.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="945.4" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 1.40%)</title><rect x="950.7" y="723.0" width="16.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="953.7" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.70%)</title><rect x="959.0" y="707.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.0" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.40%)</title><rect x="967.2" y="723.0" width="16.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.2" y="734.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.70%)</title><rect x="975.5" y="707.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="978.5" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.70%)</title><rect x="975.5" y="691.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="978.5" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 11.19%)</title><rect x="983.7" y="755.0" width="132.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.7" y="766.0">Compile::Optimiz..</text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 1.40%)</title><rect x="983.7" y="739.0" width="16.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.7" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::saturate(Type const*, Type const*, Type const*) const (1 samples, 0.70%)</title><rect x="983.7" y="723.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.7" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.70%)</title><rect x="992.0" y="723.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.0" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.70%)</title><rect x="992.0" y="707.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.0" y="718.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.70%)</title><rect x="992.0" y="691.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.0" y="702.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.70%)</title><rect x="992.0" y="675.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.0" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (12 samples, 8.39%)</title><rect x="1000.2" y="739.0" width="99.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1003.2" y="750.0">PhaseIdealLo..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.70%)</title><rect x="1000.2" y="723.0" width="8.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1003.2" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.70%)</title><rect x="1000.2" y="707.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1003.2" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.70%)</title><rect x="1000.2" y="691.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1003.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.70%)</title><rect x="1000.2" y="675.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1003.2" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::scheduled_nodelist(IdealLoopTree*, VectorSet&amp;, Node_List&amp;) (1 samples, 0.70%)</title><rect x="1000.2" y="659.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1003.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.70%)</title><rect x="1008.5" y="723.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1011.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.70%)</title><rect x="1016.7" y="723.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1019.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 3.50%)</title><rect x="1025.0" y="723.0" width="41.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.0" y="734.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 2.10%)</title><rect x="1041.5" y="707.0" width="24.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1044.5" y="718.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.70%)</title><rect x="1049.7" y="691.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1052.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.70%)</title><rect x="1058.0" y="691.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 1.40%)</title><rect x="1066.2" y="723.0" width="16.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 1.40%)</title><rect x="1066.2" y="707.0" width="16.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.40%)</title><rect x="1082.7" y="723.0" width="16.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.40%)</title><rect x="1082.7" y="707.0" width="16.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.7" y="718.0"></text>
</g>
<g>
<title>CmpINode::Opcode() const (1 samples, 0.70%)</title><rect x="1082.7" y="691.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.7" y="702.0"></text>
</g>
<g>
<title>MulNode::Identity(PhaseTransform*) (1 samples, 0.70%)</title><rect x="1091.0" y="691.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.0" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.70%)</title><rect x="1091.0" y="675.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.0" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.70%)</title><rect x="1099.2" y="739.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.70%)</title><rect x="1099.2" y="723.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.2" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.70%)</title><rect x="1107.5" y="739.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.70%)</title><rect x="1107.5" y="723.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::saturate(Type const*, Type const*, Type const*) const (1 samples, 0.70%)</title><rect x="1107.5" y="707.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.5" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.50%)</title><rect x="1115.7" y="755.0" width="41.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.7" y="766.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.50%)</title><rect x="1115.7" y="739.0" width="41.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.7" y="750.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.50%)</title><rect x="1115.7" y="723.0" width="41.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.7" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.50%)</title><rect x="1115.7" y="707.0" width="41.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.7" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.50%)</title><rect x="1115.7" y="691.0" width="41.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.7" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.50%)</title><rect x="1115.7" y="675.0" width="41.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.7" y="686.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.80%)</title><rect x="1115.7" y="659.0" width="33.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.7" y="670.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.80%)</title><rect x="1115.7" y="643.0" width="33.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.7" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.80%)</title><rect x="1115.7" y="627.0" width="33.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.7" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.80%)</title><rect x="1115.7" y="611.0" width="33.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.7" y="622.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.80%)</title><rect x="1115.7" y="595.0" width="33.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.7" y="606.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.80%)</title><rect x="1115.7" y="579.0" width="33.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.7" y="590.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.80%)</title><rect x="1115.7" y="563.0" width="33.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.7" y="574.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.80%)</title><rect x="1115.7" y="547.0" width="33.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.7" y="558.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.80%)</title><rect x="1115.7" y="531.0" width="33.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.7" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.80%)</title><rect x="1115.7" y="515.0" width="33.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.7" y="526.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.80%)</title><rect x="1115.7" y="499.0" width="33.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.7" y="510.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.10%)</title><rect x="1115.7" y="483.0" width="24.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.7" y="494.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.10%)</title><rect x="1115.7" y="467.0" width="24.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.7" y="478.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.10%)</title><rect x="1115.7" y="451.0" width="24.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.7" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.10%)</title><rect x="1115.7" y="435.0" width="24.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.7" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.10%)</title><rect x="1115.7" y="419.0" width="24.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.7" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.10%)</title><rect x="1115.7" y="403.0" width="24.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.7" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.10%)</title><rect x="1115.7" y="387.0" width="24.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.7" y="398.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.10%)</title><rect x="1115.7" y="371.0" width="24.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.7" y="382.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.10%)</title><rect x="1115.7" y="355.0" width="24.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.7" y="366.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.10%)</title><rect x="1115.7" y="339.0" width="24.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.7" y="350.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.10%)</title><rect x="1115.7" y="323.0" width="24.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.7" y="334.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.10%)</title><rect x="1115.7" y="307.0" width="24.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.7" y="318.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.70%)</title><rect x="1115.7" y="291.0" width="8.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.7" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.70%)</title><rect x="1115.7" y="275.0" width="8.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.7" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.70%)</title><rect x="1115.7" y="259.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.70%)</title><rect x="1115.7" y="243.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.70%)</title><rect x="1115.7" y="227.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.70%)</title><rect x="1115.7" y="211.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.70%)</title><rect x="1115.7" y="195.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.7" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.70%)</title><rect x="1115.7" y="179.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.7" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.70%)</title><rect x="1115.7" y="163.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.70%)</title><rect x="1115.7" y="147.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.70%)</title><rect x="1115.7" y="131.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.70%)</title><rect x="1115.7" y="115.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.70%)</title><rect x="1115.7" y="99.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.7" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.70%)</title><rect x="1115.7" y="83.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.7" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.70%)</title><rect x="1115.7" y="67.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.7" y="78.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.70%)</title><rect x="1115.7" y="51.0" width="8.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1118.7" y="62.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 1.40%)</title><rect x="1124.0" y="291.0" width="16.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 1.40%)</title><rect x="1124.0" y="275.0" width="16.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.0" y="286.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.70%)</title><rect x="1124.0" y="259.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.0" y="270.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.70%)</title><rect x="1124.0" y="243.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.0" y="254.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.70%)</title><rect x="1124.0" y="227.0" width="8.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1127.0" y="238.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.70%)</title><rect x="1132.2" y="259.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.2" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.70%)</title><rect x="1132.2" y="243.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.2" y="254.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.70%)</title><rect x="1132.2" y="227.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.2" y="238.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.70%)</title><rect x="1132.2" y="211.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.2" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.70%)</title><rect x="1132.2" y="195.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.2" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.70%)</title><rect x="1132.2" y="179.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.2" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.70%)</title><rect x="1132.2" y="163.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.2" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.70%)</title><rect x="1132.2" y="147.0" width="8.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.2" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.70%)</title><rect x="1132.2" y="131.0" width="8.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.2" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.70%)</title><rect x="1132.2" y="115.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.2" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.70%)</title><rect x="1132.2" y="99.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.2" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.70%)</title><rect x="1132.2" y="83.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.2" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.70%)</title><rect x="1132.2" y="67.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.2" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.70%)</title><rect x="1132.2" y="51.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.2" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.70%)</title><rect x="1132.2" y="35.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.70%)</title><rect x="1140.5" y="483.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.5" y="494.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.70%)</title><rect x="1140.5" y="467.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.5" y="478.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.70%)</title><rect x="1140.5" y="451.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.5" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.70%)</title><rect x="1148.7" y="659.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.70%)</title><rect x="1148.7" y="643.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.70%)</title><rect x="1148.7" y="627.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.70%)</title><rect x="1148.7" y="611.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.70%)</title><rect x="1148.7" y="595.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.70%)</title><rect x="1148.7" y="579.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.70%)</title><rect x="1148.7" y="563.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.70%)</title><rect x="1148.7" y="547.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.70%)</title><rect x="1148.7" y="531.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.70%)</title><rect x="1148.7" y="515.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.70%)</title><rect x="1148.7" y="499.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.70%)</title><rect x="1148.7" y="483.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.70%)</title><rect x="1148.7" y="467.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.70%)</title><rect x="1148.7" y="451.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.70%)</title><rect x="1148.7" y="435.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.70%)</title><rect x="1148.7" y="419.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.70%)</title><rect x="1148.7" y="403.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.70%)</title><rect x="1148.7" y="387.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.7" y="398.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.70%)</title><rect x="1148.7" y="371.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.7" y="382.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.70%)</title><rect x="1148.7" y="355.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.7" y="366.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.70%)</title><rect x="1148.7" y="339.0" width="8.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.7" y="350.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.70%)</title><rect x="1148.7" y="323.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.7" y="334.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.70%)</title><rect x="1157.0" y="755.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.0" y="766.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.70%)</title><rect x="1157.0" y="739.0" width="8.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.0" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 2.10%)</title><rect x="1165.2" y="787.0" width="24.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.2" y="798.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 2.10%)</title><rect x="1165.2" y="771.0" width="24.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.2" y="782.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 2.10%)</title><rect x="1165.2" y="755.0" width="24.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.2" y="766.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.40%)</title><rect x="1165.2" y="739.0" width="16.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.2" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.40%)</title><rect x="1165.2" y="723.0" width="16.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.2" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 1.40%)</title><rect x="1165.2" y="707.0" width="16.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.2" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 1.40%)</title><rect x="1165.2" y="691.0" width="16.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.2" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 1.40%)</title><rect x="1165.2" y="675.0" width="16.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.2" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.40%)</title><rect x="1165.2" y="659.0" width="16.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.2" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.40%)</title><rect x="1165.2" y="643.0" width="16.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.2" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.70%)</title><rect x="1165.2" y="627.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.2" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.70%)</title><rect x="1173.5" y="627.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.5" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.70%)</title><rect x="1173.5" y="611.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.70%)</title><rect x="1173.5" y="595.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.70%)</title><rect x="1173.5" y="579.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.5" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.70%)</title><rect x="1173.5" y="563.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.5" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.70%)</title><rect x="1173.5" y="547.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.5" y="558.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.70%)</title><rect x="1173.5" y="531.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.5" y="542.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.70%)</title><rect x="1173.5" y="515.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="526.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.70%)</title><rect x="1173.5" y="499.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.5" y="510.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.70%)</title><rect x="1173.5" y="483.0" width="8.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="494.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.70%)</title><rect x="1181.7" y="739.0" width="8.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.70%)</title><rect x="1181.7" y="723.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.70%)</title><rect x="1181.7" y="707.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.70%)</title><rect x="1181.7" y="691.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="702.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.70%)</title><rect x="1181.7" y="675.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="686.0"></text>
</g>
</g>
</svg>
