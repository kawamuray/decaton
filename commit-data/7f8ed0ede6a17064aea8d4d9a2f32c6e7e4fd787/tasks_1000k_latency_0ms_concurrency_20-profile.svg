<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (1,066 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (282 samples, 26.45%)</title><rect x="10.0" y="963.0" width="312.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="11.1" y="947.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.09%)</title><rect x="12.2" y="947.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="12.2" y="931.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="12.2" y="915.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.09%)</title><rect x="12.2" y="899.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.2" y="883.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.2" y="867.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.2" y="851.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="12.2" y="835.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="12.2" y="819.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="12.2" y="803.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="12.2" y="787.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="12.2" y="771.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="12.2" y="755.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="12.2" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="12.2" y="723.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.2" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="12.2" y="707.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.2" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="12.2" y="691.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="12.2" y="675.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="12.2" y="659.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.09%)</title><rect x="12.2" y="643.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.2" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="12.2" y="627.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="15.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (279 samples, 26.17%)</title><rect x="13.3" y="947.0" width="308.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="958.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.28%)</title><rect x="13.3" y="931.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.28%)</title><rect x="13.3" y="915.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1292127355.accept (3 samples, 0.28%)</title><rect x="13.3" y="899.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.28%)</title><rect x="13.3" y="883.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.28%)</title><rect x="13.3" y="867.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.3" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.28%)</title><rect x="13.3" y="851.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.38%)</title><rect x="16.6" y="931.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.38%)</title><rect x="16.6" y="915.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="16.6" y="899.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="16.6" y="883.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="16.6" y="867.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.28%)</title><rect x="17.7" y="899.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.28%)</title><rect x="17.7" y="883.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.19%)</title><rect x="18.9" y="867.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="18.9" y="851.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="18.9" y="835.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.9" y="846.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="18.9" y="819.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="18.9" y="803.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="20.0" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="20.0" y="819.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="20.0" y="803.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="20.0" y="787.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="20.0" y="771.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (212 samples, 19.89%)</title><rect x="21.1" y="931.0" width="234.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.1" y="942.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2134329347.accept (203 samples, 19.04%)</title><rect x="21.1" y="915.0" width="224.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.1" y="926.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (203 samples, 19.04%)</title><rect x="21.1" y="899.0" width="224.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.1" y="910.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.19%)</title><rect x="21.1" y="883.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (165 samples, 15.48%)</title><rect x="23.3" y="883.0" width="182.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.3" y="894.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (165 samples, 15.48%)</title><rect x="23.3" y="867.0" width="182.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.3" y="878.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (165 samples, 15.48%)</title><rect x="23.3" y="851.0" width="182.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.3" y="862.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (165 samples, 15.48%)</title><rect x="23.3" y="835.0" width="182.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.3" y="846.0">java/util/concurrent/Exe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (165 samples, 15.48%)</title><rect x="23.3" y="819.0" width="182.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.3" y="830.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (149 samples, 13.98%)</title><rect x="41.0" y="803.0" width="164.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.0" y="814.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (114 samples, 10.69%)</title><rect x="41.0" y="787.0" width="126.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.0" y="798.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (114 samples, 10.69%)</title><rect x="41.0" y="771.0" width="126.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.0" y="782.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (114 samples, 10.69%)</title><rect x="41.0" y="755.0" width="126.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.0" y="766.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (114 samples, 10.69%)</title><rect x="41.0" y="739.0" width="126.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.0" y="750.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (114 samples, 10.69%)</title><rect x="41.0" y="723.0" width="126.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.0" y="734.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (73 samples, 6.85%)</title><rect x="86.4" y="707.0" width="80.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.4" y="718.0">sun/misc/..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="88.6" y="691.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="91.6" y="702.0"></text>
</g>
<g>
<title>Unsafe_Unpark (62 samples, 5.82%)</title><rect x="89.7" y="691.0" width="68.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="92.7" y="702.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.28%)</title><rect x="90.8" y="675.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="93.8" y="686.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.19%)</title><rect x="94.1" y="675.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="97.1" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.75%)</title><rect x="96.3" y="675.0" width="44.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="99.3" y="686.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="140.6" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="143.6" y="686.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.41%)</title><rect x="141.7" y="675.0" width="16.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="144.7" y="686.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 0.66%)</title><rect x="158.3" y="691.0" width="7.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="161.3" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="166.1" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="169.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (35 samples, 3.28%)</title><rect x="167.2" y="787.0" width="38.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.2" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (35 samples, 3.28%)</title><rect x="167.2" y="771.0" width="38.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.2" y="782.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (35 samples, 3.28%)</title><rect x="167.2" y="755.0" width="38.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.2" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (35 samples, 3.28%)</title><rect x="167.2" y="739.0" width="38.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.2" y="750.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.09%)</title><rect x="205.9" y="883.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.09%)</title><rect x="205.9" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.28%)</title><rect x="207.0" y="883.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="210.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.28%)</title><rect x="207.0" y="867.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.28%)</title><rect x="207.0" y="851.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (32 samples, 3.00%)</title><rect x="210.4" y="883.0" width="35.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.4" y="894.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (31 samples, 2.91%)</title><rect x="210.4" y="867.0" width="34.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.4" y="878.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 1.41%)</title><rect x="224.7" y="851.0" width="16.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.7" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (11 samples, 1.03%)</title><rect x="224.7" y="835.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.7" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (11 samples, 1.03%)</title><rect x="224.7" y="819.0" width="12.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.7" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 1.03%)</title><rect x="224.7" y="803.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.7" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.56%)</title><rect x="230.3" y="787.0" width="6.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="233.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="236.9" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.28%)</title><rect x="238.0" y="835.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.0" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="241.4" y="851.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="244.4" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="244.7" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.7" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="244.7" y="851.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="247.7" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="244.7" y="835.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="247.7" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="244.7" y="819.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="247.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.66%)</title><rect x="245.8" y="915.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="248.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.66%)</title><rect x="245.8" y="899.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.66%)</title><rect x="245.8" y="883.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.66%)</title><rect x="245.8" y="867.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.8" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (5 samples, 0.47%)</title><rect x="246.9" y="851.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.09%)</title><rect x="252.4" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.19%)</title><rect x="253.5" y="915.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.19%)</title><rect x="253.5" y="899.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.63%)</title><rect x="255.7" y="931.0" width="66.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.7" y="942.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.63%)</title><rect x="255.7" y="915.0" width="66.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.7" y="926.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.09%)</title><rect x="256.8" y="899.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.09%)</title><rect x="256.8" y="883.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="259.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (32 samples, 3.00%)</title><rect x="258.0" y="899.0" width="35.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.0" y="910.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (32 samples, 3.00%)</title><rect x="258.0" y="883.0" width="35.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.0" y="894.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (31 samples, 2.91%)</title><rect x="258.0" y="867.0" width="34.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.0" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 2.35%)</title><rect x="258.0" y="851.0" width="27.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.0" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 2.35%)</title><rect x="258.0" y="835.0" width="27.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.0" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.69%)</title><rect x="260.2" y="819.0" width="19.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.94%)</title><rect x="267.9" y="803.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.94%)</title><rect x="267.9" y="787.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.94%)</title><rect x="267.9" y="771.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.94%)</title><rect x="267.9" y="755.0" width="11.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="270.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.94%)</title><rect x="267.9" y="739.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.94%)</title><rect x="267.9" y="723.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.94%)</title><rect x="267.9" y="707.0" width="11.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.09%)</title><rect x="279.0" y="803.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (5 samples, 0.47%)</title><rect x="280.1" y="819.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 0.47%)</title><rect x="280.1" y="803.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.28%)</title><rect x="280.1" y="787.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.1" y="798.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.28%)</title><rect x="280.1" y="771.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="283.1" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="281.2" y="755.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="284.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.19%)</title><rect x="283.4" y="787.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.4" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.19%)</title><rect x="283.4" y="771.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.28%)</title><rect x="285.6" y="851.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.28%)</title><rect x="285.6" y="835.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.09%)</title><rect x="285.6" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.6" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="285.6" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.6" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="285.6" y="787.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="286.7" y="819.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="286.7" y="803.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="287.8" y="787.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="287.8" y="771.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.09%)</title><rect x="287.8" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.28%)</title><rect x="288.9" y="851.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.28%)</title><rect x="288.9" y="835.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="288.9" y="819.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="288.9" y="803.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.9" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="288.9" y="787.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="291.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="290.1" y="819.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="290.1" y="803.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="290.1" y="787.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="293.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="290.1" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.1" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="291.2" y="787.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="294.2" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="291.2" y="771.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="294.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.09%)</title><rect x="292.3" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="292.3" y="851.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="292.3" y="835.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.3" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="292.3" y="819.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="292.3" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.94%)</title><rect x="293.4" y="899.0" width="11.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.84%)</title><rect x="293.4" y="883.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.66%)</title><rect x="293.4" y="867.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.4" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.38%)</title><rect x="294.5" y="851.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1790581906.accept (4 samples, 0.38%)</title><rect x="294.5" y="835.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (4 samples, 0.38%)</title><rect x="294.5" y="819.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (3 samples, 0.28%)</title><rect x="294.5" y="803.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.09%)</title><rect x="294.5" y="787.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="294.5" y="771.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="294.5" y="755.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.09%)</title><rect x="294.5" y="739.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.19%)</title><rect x="295.6" y="787.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (2 samples, 0.19%)</title><rect x="295.6" y="771.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.6" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (2 samples, 0.19%)</title><rect x="295.6" y="755.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.6" y="766.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.19%)</title><rect x="295.6" y="739.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="297.8" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="300.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="297.8" y="787.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="297.8" y="771.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="300.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Enum.equals (1 samples, 0.09%)</title><rect x="297.8" y="755.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="298.9" y="851.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="298.9" y="835.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="298.9" y="819.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="298.9" y="803.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="301.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="298.9" y="787.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.9" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="298.9" y="771.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="298.9" y="755.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="300.0" y="851.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="303.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="300.0" y="835.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="300.0" y="819.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="300.0" y="803.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="300.0" y="787.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="300.0" y="771.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="303.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="300.0" y="755.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.0" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="300.0" y="739.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="303.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.19%)</title><rect x="301.1" y="867.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.19%)</title><rect x="301.1" y="851.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="301.1" y="835.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.19%)</title><rect x="301.1" y="819.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="304.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.19%)</title><rect x="301.1" y="803.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="302.2" y="787.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="305.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="302.2" y="771.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="302.2" y="755.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="302.2" y="739.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.2" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="302.2" y="723.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="302.2" y="707.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.09%)</title><rect x="302.2" y="691.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$223/244295138.test (1 samples, 0.09%)</title><rect x="302.2" y="675.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$hasAllFetchPositions$4 (1 samples, 0.09%)</title><rect x="302.2" y="659.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2400 (1 samples, 0.09%)</title><rect x="302.2" y="643.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.09%)</title><rect x="302.2" y="627.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="303.3" y="883.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.09%)</title><rect x="303.3" y="867.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="303.3" y="851.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="304.4" y="899.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.09%)</title><rect x="304.4" y="883.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.09%)</title><rect x="304.4" y="867.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="307.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="304.4" y="851.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="307.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="304.4" y="835.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.09%)</title><rect x="304.4" y="819.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.56%)</title><rect x="305.6" y="899.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.47%)</title><rect x="305.6" y="883.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.47%)</title><rect x="305.6" y="867.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.47%)</title><rect x="305.6" y="851.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="305.6" y="835.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="305.6" y="819.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="305.6" y="803.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="308.6" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="305.6" y="787.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="308.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.09%)</title><rect x="306.7" y="835.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="309.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="306.7" y="819.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="306.7" y="803.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="309.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.28%)</title><rect x="307.8" y="835.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.28%)</title><rect x="307.8" y="819.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.28%)</title><rect x="307.8" y="803.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.28%)</title><rect x="307.8" y="787.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.28%)</title><rect x="307.8" y="771.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.8" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.28%)</title><rect x="307.8" y="755.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="310.8" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.19%)</title><rect x="307.8" y="739.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.8" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.19%)</title><rect x="307.8" y="723.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="307.8" y="707.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="310.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.19%)</title><rect x="307.8" y="691.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.8" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="307.8" y="675.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="310.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureReadOpen (1 samples, 0.09%)</title><rect x="310.0" y="739.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="311.1" y="883.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="314.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="311.1" y="867.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="311.1" y="851.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="314.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="311.1" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="311.1" y="819.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.09%)</title><rect x="311.1" y="803.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.sizeBuffer (1 samples, 0.09%)</title><rect x="311.1" y="787.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.1" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.09%)</title><rect x="311.1" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.1" y="782.0"></text>
</g>
<g>
<title>java/nio/Bits.putInt (1 samples, 0.09%)</title><rect x="311.1" y="755.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.1" y="766.0"></text>
</g>
<g>
<title>java/nio/Bits.putIntB (1 samples, 0.09%)</title><rect x="311.1" y="739.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.47%)</title><rect x="312.2" y="899.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="315.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.47%)</title><rect x="312.2" y="883.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="315.2" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="312.2" y="867.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/42461578.accept (2 samples, 0.19%)</title><rect x="312.2" y="851.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.19%)</title><rect x="312.2" y="835.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.19%)</title><rect x="312.2" y="819.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="315.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.09%)</title><rect x="312.2" y="803.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="315.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="312.2" y="787.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="315.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="312.2" y="771.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="315.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="313.3" y="803.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="313.3" y="787.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.3" y="798.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.09%)</title><rect x="313.3" y="771.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.3" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.09%)</title><rect x="313.3" y="755.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.28%)</title><rect x="314.4" y="867.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.09%)</title><rect x="314.4" y="851.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.09%)</title><rect x="314.4" y="835.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="314.4" y="819.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="317.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.19%)</title><rect x="315.5" y="851.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.19%)</title><rect x="317.7" y="899.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="317.7" y="883.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="317.7" y="867.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="320.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="317.7" y="851.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="320.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="317.7" y="835.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.09%)</title><rect x="318.8" y="867.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="321.8" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="318.8" y="851.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="321.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.19%)</title><rect x="319.9" y="899.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="319.9" y="883.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="319.9" y="867.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="319.9" y="851.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="322.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="319.9" y="835.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="322.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="319.9" y="819.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="322.9" y="830.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="319.9" y="803.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="322.9" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="321.1" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="324.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="321.1" y="867.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="324.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (714 samples, 66.98%)</title><rect x="322.2" y="963.0" width="790.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.2" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (714 samples, 66.98%)</title><rect x="322.2" y="947.0" width="790.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.2" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (714 samples, 66.98%)</title><rect x="322.2" y="931.0" width="790.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.2" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/346794680.run (481 samples, 45.12%)</title><rect x="327.7" y="915.0" width="532.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.7" y="926.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/346794680..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (479 samples, 44.93%)</title><rect x="329.9" y="899.0" width="530.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.9" y="910.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (479 samples, 44.93%)</title><rect x="329.9" y="883.0" width="530.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="332.9" y="894.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (460 samples, 43.15%)</title><rect x="329.9" y="867.0" width="509.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="332.9" y="878.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (155 samples, 14.54%)</title><rect x="337.7" y="851.0" width="171.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.7" y="862.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="342.1" y="835.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="345.1" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.84%)</title><rect x="344.3" y="835.0" width="10.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="347.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.56%)</title><rect x="347.6" y="819.0" width="6.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="350.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (140 samples, 13.13%)</title><rect x="354.3" y="835.0" width="154.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.3" y="846.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (140 samples, 13.13%)</title><rect x="354.3" y="819.0" width="154.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.3" y="830.0">com/linecorp/decaton..</text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="354.3" y="803.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="357.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (139 samples, 13.04%)</title><rect x="355.4" y="803.0" width="153.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.4" y="814.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (139 samples, 13.04%)</title><rect x="355.4" y="787.0" width="153.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="358.4" y="798.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (139 samples, 13.04%)</title><rect x="355.4" y="771.0" width="153.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.4" y="782.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (35 samples, 3.28%)</title><rect x="355.4" y="755.0" width="38.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="358.4" y="766.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (12 samples, 1.13%)</title><rect x="355.4" y="739.0" width="13.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="358.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (12 samples, 1.13%)</title><rect x="355.4" y="723.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (12 samples, 1.13%)</title><rect x="355.4" y="707.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.4" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.13%)</title><rect x="355.4" y="691.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (12 samples, 1.13%)</title><rect x="355.4" y="675.0" width="13.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="366.4" y="659.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="369.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (23 samples, 2.16%)</title><rect x="368.6" y="739.0" width="25.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.6" y="750.0">c..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="368.6" y="723.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="371.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 2.06%)</title><rect x="369.8" y="723.0" width="24.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="372.8" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (7 samples, 0.66%)</title><rect x="369.8" y="707.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (7 samples, 0.66%)</title><rect x="369.8" y="691.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (15 samples, 1.41%)</title><rect x="377.5" y="707.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="380.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (15 samples, 1.41%)</title><rect x="377.5" y="691.0" width="16.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (9 samples, 0.84%)</title><rect x="377.5" y="675.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.38%)</title><rect x="387.5" y="675.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.5" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="389.7" y="659.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="392.7" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="389.7" y="643.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="392.7" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="389.7" y="627.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="392.7" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="390.8" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="393.8" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="390.8" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="393.8" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="390.8" y="611.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="393.8" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="390.8" y="595.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="393.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.19%)</title><rect x="391.9" y="675.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="394.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="393.0" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (96 samples, 9.01%)</title><rect x="394.1" y="755.0" width="106.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.1" y="766.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.47%)</title><rect x="394.1" y="739.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="397.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.47%)</title><rect x="394.1" y="723.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="397.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.47%)</title><rect x="394.1" y="707.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.47%)</title><rect x="394.1" y="691.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="397.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (5 samples, 0.47%)</title><rect x="394.1" y="675.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="397.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.28%)</title><rect x="394.1" y="659.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="397.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.19%)</title><rect x="397.4" y="659.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.19%)</title><rect x="397.4" y="643.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.56%)</title><rect x="399.6" y="739.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="402.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.56%)</title><rect x="399.6" y="723.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="402.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.09%)</title><rect x="405.2" y="707.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.94%)</title><rect x="406.3" y="739.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.56%)</title><rect x="410.7" y="723.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="413.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.56%)</title><rect x="410.7" y="707.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.38%)</title><rect x="412.9" y="691.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="416.2" y="675.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="419.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.19%)</title><rect x="417.4" y="739.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.19%)</title><rect x="417.4" y="723.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="420.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (73 samples, 6.85%)</title><rect x="419.6" y="739.0" width="80.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.6" y="750.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.88%)</title><rect x="420.7" y="723.0" width="22.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="423.7" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.19%)</title><rect x="428.4" y="707.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="431.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.19%)</title><rect x="428.4" y="691.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="431.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.19%)</title><rect x="428.4" y="675.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="431.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.19%)</title><rect x="428.4" y="659.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="431.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.19%)</title><rect x="428.4" y="643.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="431.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.38%)</title><rect x="430.6" y="707.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="433.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.38%)</title><rect x="430.6" y="691.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.38%)</title><rect x="430.6" y="675.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="433.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.38%)</title><rect x="430.6" y="659.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.getAndSet (4 samples, 0.38%)</title><rect x="430.6" y="643.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.09%)</title><rect x="434.0" y="627.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="437.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (7 samples, 0.66%)</title><rect x="435.1" y="707.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (52 samples, 4.88%)</title><rect x="442.8" y="723.0" width="57.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="445.8" y="734.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (52 samples, 4.88%)</title><rect x="442.8" y="707.0" width="57.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.8" y="718.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (52 samples, 4.88%)</title><rect x="442.8" y="691.0" width="57.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="445.8" y="702.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.78%)</title><rect x="446.1" y="675.0" width="21.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="449.1" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.75%)</title><rect x="449.5" y="659.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="452.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.19%)</title><rect x="458.3" y="659.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.19%)</title><rect x="458.3" y="643.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="461.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.19%)</title><rect x="458.3" y="627.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="461.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.19%)</title><rect x="458.3" y="611.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="461.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.19%)</title><rect x="458.3" y="595.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="461.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.19%)</title><rect x="460.5" y="659.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="463.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.19%)</title><rect x="460.5" y="643.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.19%)</title><rect x="460.5" y="627.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="463.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.19%)</title><rect x="460.5" y="611.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.getAndSet (2 samples, 0.19%)</title><rect x="460.5" y="595.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="463.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.38%)</title><rect x="462.7" y="659.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="465.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.38%)</title><rect x="462.7" y="643.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="465.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="466.1" y="627.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="469.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.56%)</title><rect x="467.2" y="675.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="470.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.56%)</title><rect x="467.2" y="659.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="470.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.56%)</title><rect x="467.2" y="643.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="470.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.56%)</title><rect x="467.2" y="627.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="470.2" y="638.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.56%)</title><rect x="467.2" y="611.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="470.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (13 samples, 1.22%)</title><rect x="473.8" y="675.0" width="14.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (13 samples, 1.22%)</title><rect x="473.8" y="659.0" width="14.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="476.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (13 samples, 1.22%)</title><rect x="473.8" y="643.0" width="14.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="476.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (13 samples, 1.22%)</title><rect x="473.8" y="627.0" width="14.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.8" y="638.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (13 samples, 1.22%)</title><rect x="473.8" y="611.0" width="14.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.8" y="622.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.38%)</title><rect x="481.6" y="595.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.6" y="606.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (2 samples, 0.19%)</title><rect x="483.8" y="579.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="486.8" y="590.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (2 samples, 0.19%)</title><rect x="486.0" y="595.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="489.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.28%)</title><rect x="488.2" y="675.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.28%)</title><rect x="488.2" y="659.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.28%)</title><rect x="488.2" y="643.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="490.4" y="627.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="493.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (8 samples, 0.75%)</title><rect x="491.5" y="675.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="494.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.75%)</title><rect x="500.4" y="755.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.75%)</title><rect x="500.4" y="739.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="503.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.75%)</title><rect x="500.4" y="723.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="503.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.75%)</title><rect x="500.4" y="707.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="503.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.75%)</title><rect x="500.4" y="691.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="503.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (291 samples, 27.30%)</title><rect x="509.2" y="851.0" width="322.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.2" y="862.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (55 samples, 5.16%)</title><rect x="511.4" y="835.0" width="60.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.4" y="846.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (53 samples, 4.97%)</title><rect x="513.7" y="819.0" width="58.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="516.7" y="830.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (49 samples, 4.60%)</title><rect x="518.1" y="803.0" width="54.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="521.1" y="814.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (17 samples, 1.59%)</title><rect x="520.3" y="787.0" width="18.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="523.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.56%)</title><rect x="532.5" y="771.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="535.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.56%)</title><rect x="532.5" y="755.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="535.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.56%)</title><rect x="532.5" y="739.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="535.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (6 samples, 0.56%)</title><rect x="532.5" y="723.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="535.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.94%)</title><rect x="539.1" y="787.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="542.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 0.94%)</title><rect x="539.1" y="771.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="542.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 0.94%)</title><rect x="539.1" y="755.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="542.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.09%)</title><rect x="549.1" y="739.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.1" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (20 samples, 1.88%)</title><rect x="550.2" y="787.0" width="22.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="553.2" y="798.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 1.03%)</title><rect x="560.2" y="771.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="563.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.19%)</title><rect x="560.2" y="755.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="563.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.84%)</title><rect x="562.4" y="755.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="565.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="571.2" y="739.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="574.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.75%)</title><rect x="572.3" y="835.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="575.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.66%)</title><rect x="573.4" y="819.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="576.4" y="830.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.66%)</title><rect x="573.4" y="803.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="576.4" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="580.1" y="787.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="583.1" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="580.1" y="771.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="583.1" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="580.1" y="755.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="583.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="580.1" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="583.1" y="750.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="580.1" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="583.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (155 samples, 14.54%)</title><rect x="581.2" y="835.0" width="171.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="584.2" y="846.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="581.2" y="819.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="584.2" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.28%)</title><rect x="582.3" y="819.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="585.3" y="830.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="582.3" y="803.0" width="3.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="585.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (150 samples, 14.07%)</title><rect x="585.6" y="819.0" width="166.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="588.6" y="830.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (49 samples, 4.60%)</title><rect x="585.6" y="803.0" width="54.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="588.6" y="814.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.19%)</title><rect x="585.6" y="787.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.6" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.19%)</title><rect x="585.6" y="771.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="588.6" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="585.6" y="755.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="588.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="585.6" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="588.6" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="585.6" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="588.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="585.6" y="707.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="588.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="586.7" y="755.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="589.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="586.7" y="739.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="589.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (45 samples, 4.22%)</title><rect x="587.8" y="787.0" width="49.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="590.8" y="798.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (29 samples, 2.72%)</title><rect x="596.7" y="771.0" width="32.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="599.7" y="782.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (15 samples, 1.41%)</title><rect x="606.6" y="755.0" width="16.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="609.6" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (15 samples, 1.41%)</title><rect x="606.6" y="739.0" width="16.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="609.6" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 1.41%)</title><rect x="606.6" y="723.0" width="16.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="609.6" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.66%)</title><rect x="610.0" y="707.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="613.0" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="610.0" y="691.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="613.0" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.19%)</title><rect x="611.1" y="691.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="614.1" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.19%)</title><rect x="611.1" y="675.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="614.1" y="686.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.19%)</title><rect x="611.1" y="659.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="614.1" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="611.1" y="643.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="614.1" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="611.1" y="627.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="614.1" y="638.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="612.2" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="615.2" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.38%)</title><rect x="613.3" y="691.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="616.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.28%)</title><rect x="614.4" y="675.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="617.4" y="686.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="614.4" y="659.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="617.4" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="615.5" y="659.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="618.5" y="670.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="616.6" y="659.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="619.6" y="670.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.09%)</title><rect x="617.7" y="707.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="620.7" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.38%)</title><rect x="618.8" y="707.0" width="4.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="621.8" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.28%)</title><rect x="623.2" y="755.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="626.2" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="626.6" y="755.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="629.6" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="627.7" y="755.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="630.7" y="766.0"></text>
</g>
<g>
<title>jshort_arraycopy (5 samples, 0.47%)</title><rect x="628.8" y="771.0" width="5.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="631.8" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="634.3" y="771.0" width="3.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="637.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.19%)</title><rect x="637.6" y="787.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="640.6" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="637.6" y="771.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="640.6" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="637.6" y="755.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="640.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="637.6" y="739.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="640.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="638.7" y="771.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="641.7" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="638.7" y="755.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="641.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="638.7" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="641.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.66%)</title><rect x="639.8" y="803.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="642.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.19%)</title><rect x="639.8" y="787.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="642.8" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="639.8" y="771.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="642.8" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="641.0" y="771.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="644.0" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="641.0" y="755.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="644.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="641.0" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="644.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="641.0" y="723.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="644.0" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="641.0" y="707.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="644.0" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.47%)</title><rect x="642.1" y="787.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.47%)</title><rect x="642.1" y="771.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="645.1" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (94 samples, 8.82%)</title><rect x="647.6" y="803.0" width="104.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.6" y="814.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (84 samples, 7.88%)</title><rect x="655.3" y="787.0" width="93.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.3" y="798.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (28 samples, 2.63%)</title><rect x="657.6" y="771.0" width="31.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="660.6" y="782.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (18 samples, 1.69%)</title><rect x="668.6" y="755.0" width="20.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="671.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (18 samples, 1.69%)</title><rect x="668.6" y="739.0" width="20.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="671.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (18 samples, 1.69%)</title><rect x="668.6" y="723.0" width="20.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="671.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (18 samples, 1.69%)</title><rect x="668.6" y="707.0" width="20.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="671.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="688.6" y="771.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="691.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="688.6" y="755.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="691.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="688.6" y="739.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="691.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.19%)</title><rect x="688.6" y="723.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.6" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (52 samples, 4.88%)</title><rect x="690.8" y="771.0" width="57.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="693.8" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (45 samples, 4.22%)</title><rect x="698.5" y="755.0" width="49.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="701.5" y="766.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.56%)</title><rect x="700.7" y="739.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="703.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.56%)</title><rect x="700.7" y="723.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="703.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 3.47%)</title><rect x="707.4" y="739.0" width="40.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="710.4" y="750.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.38%)</title><rect x="728.4" y="723.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (14 samples, 1.31%)</title><rect x="732.8" y="723.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="735.8" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.28%)</title><rect x="745.0" y="707.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="748.0" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.28%)</title><rect x="745.0" y="691.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="748.0" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.28%)</title><rect x="745.0" y="675.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="748.0" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.19%)</title><rect x="746.1" y="659.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="749.1" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="746.1" y="643.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="749.1" y="654.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="747.2" y="643.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="750.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 0.28%)</title><rect x="748.3" y="787.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="751.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="751.7" y="819.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="754.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (58 samples, 5.44%)</title><rect x="752.8" y="835.0" width="64.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="755.8" y="846.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 0.19%)</title><rect x="755.0" y="819.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (54 samples, 5.07%)</title><rect x="757.2" y="819.0" width="59.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.2" y="830.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1062034147.process (28 samples, 2.63%)</title><rect x="761.6" y="803.0" width="31.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="764.6" y="814.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (28 samples, 2.63%)</title><rect x="761.6" y="787.0" width="31.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="764.6" y="798.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 2.06%)</title><rect x="764.9" y="771.0" width="24.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="767.9" y="782.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.09%)</title><rect x="766.0" y="755.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="769.0" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.09%)</title><rect x="766.0" y="739.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="769.0" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.09%)</title><rect x="766.0" y="723.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="769.0" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.09%)</title><rect x="766.0" y="707.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="769.0" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.09%)</title><rect x="766.0" y="691.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="769.0" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.09%)</title><rect x="766.0" y="675.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="769.0" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.09%)</title><rect x="766.0" y="659.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="769.0" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.09%)</title><rect x="766.0" y="643.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="769.0" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.09%)</title><rect x="766.0" y="627.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.0" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (1 samples, 0.09%)</title><rect x="766.0" y="611.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.0" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (1 samples, 0.09%)</title><rect x="766.0" y="595.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="769.0" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (1 samples, 0.09%)</title><rect x="766.0" y="579.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="769.0" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/PatternLayoutBase.writeLoopOnConverters (1 samples, 0.09%)</title><rect x="766.0" y="563.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="769.0" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/FormattingConverter.write (1 samples, 0.09%)</title><rect x="766.0" y="547.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.0" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/DateConverter.convert (1 samples, 0.09%)</title><rect x="766.0" y="531.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.0" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/DateConverter.convert (1 samples, 0.09%)</title><rect x="766.0" y="515.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.0" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (1 samples, 0.09%)</title><rect x="766.0" y="499.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="769.0" y="510.0"></text>
</g>
<g>
<title>java/text/DateFormat.format (1 samples, 0.09%)</title><rect x="766.0" y="483.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="769.0" y="494.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (1 samples, 0.09%)</title><rect x="766.0" y="467.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="769.0" y="478.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (1 samples, 0.09%)</title><rect x="766.0" y="451.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="769.0" y="462.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.subFormat (1 samples, 0.09%)</title><rect x="766.0" y="435.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="769.0" y="446.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.zeroPaddingNumber (1 samples, 0.09%)</title><rect x="766.0" y="419.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="769.0" y="430.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (1 samples, 0.09%)</title><rect x="766.0" y="403.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="769.0" y="414.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (1 samples, 0.09%)</title><rect x="766.0" y="387.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="769.0" y="398.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.subformat (1 samples, 0.09%)</title><rect x="766.0" y="371.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="769.0" y="382.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.getPositiveSuffixFieldPositions (1 samples, 0.09%)</title><rect x="766.0" y="355.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.0" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.28%)</title><rect x="767.1" y="755.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="770.1" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.28%)</title><rect x="767.1" y="739.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="770.1" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.28%)</title><rect x="767.1" y="723.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="770.1" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.28%)</title><rect x="767.1" y="707.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="770.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.28%)</title><rect x="767.1" y="691.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="770.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="769.4" y="675.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="772.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.75%)</title><rect x="770.5" y="755.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.5" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.75%)</title><rect x="770.5" y="739.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="773.5" y="750.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.75%)</title><rect x="770.5" y="723.0" width="8.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="773.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.84%)</title><rect x="779.3" y="755.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.28%)</title><rect x="789.3" y="771.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="792.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.28%)</title><rect x="789.3" y="755.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="792.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.28%)</title><rect x="789.3" y="739.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="792.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.28%)</title><rect x="789.3" y="723.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="792.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.47%)</title><rect x="792.6" y="803.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="795.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.47%)</title><rect x="792.6" y="787.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="795.6" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 0.38%)</title><rect x="798.1" y="803.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="801.1" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 0.38%)</title><rect x="798.1" y="787.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="801.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/535944015.get$Lambda (4 samples, 0.38%)</title><rect x="798.1" y="771.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="801.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/535944015.&lt;init&gt; (4 samples, 0.38%)</title><rect x="798.1" y="755.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.1" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="802.6" y="803.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="805.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="802.6" y="787.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="805.6" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.84%)</title><rect x="803.7" y="803.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="806.7" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.75%)</title><rect x="804.8" y="787.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="807.8" y="798.0"></text>
</g>
<g>
<title>itable stub (7 samples, 0.66%)</title><rect x="804.8" y="771.0" width="7.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="807.8" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="812.5" y="771.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="815.5" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="813.6" y="803.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="816.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="813.6" y="787.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="816.6" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.19%)</title><rect x="814.7" y="803.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.22%)</title><rect x="817.0" y="835.0" width="14.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="820.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.22%)</title><rect x="817.0" y="819.0" width="14.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="820.0" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.28%)</title><rect x="821.4" y="803.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="824.4" y="814.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="821.4" y="787.0" width="3.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="824.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.47%)</title><rect x="824.7" y="803.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="827.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1545176267.accept (5 samples, 0.47%)</title><rect x="824.7" y="787.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="827.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (5 samples, 0.47%)</title><rect x="824.7" y="771.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (5 samples, 0.47%)</title><rect x="824.7" y="755.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.7" y="766.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.47%)</title><rect x="824.7" y="739.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="827.7" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.47%)</title><rect x="824.7" y="723.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="827.7" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.19%)</title><rect x="828.0" y="707.0" width="2.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="831.0" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="828.0" y="691.0" width="2.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="831.0" y="702.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="830.2" y="803.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="833.2" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.66%)</title><rect x="831.4" y="851.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="834.4" y="862.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.66%)</title><rect x="831.4" y="835.0" width="7.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="834.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.66%)</title><rect x="839.1" y="867.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="842.1" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.47%)</title><rect x="841.3" y="851.0" width="5.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="844.3" y="862.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="842.4" y="835.0" width="4.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="845.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.13%)</title><rect x="846.8" y="867.0" width="13.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="849.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.13%)</title><rect x="846.8" y="851.0" width="13.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="849.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 1.03%)</title><rect x="848.0" y="835.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="851.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1545176267.accept (11 samples, 1.03%)</title><rect x="848.0" y="819.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="851.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (11 samples, 1.03%)</title><rect x="848.0" y="803.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="851.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (11 samples, 1.03%)</title><rect x="848.0" y="787.0" width="12.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="851.0" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (11 samples, 1.03%)</title><rect x="848.0" y="771.0" width="12.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="851.0" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.create (11 samples, 1.03%)</title><rect x="848.0" y="755.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="851.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.56%)</title><rect x="860.1" y="915.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="863.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.56%)</title><rect x="860.1" y="899.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="863.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.56%)</title><rect x="860.1" y="883.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="863.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.56%)</title><rect x="860.1" y="867.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="863.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.09%)</title><rect x="865.7" y="851.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="868.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (222 samples, 20.83%)</title><rect x="866.8" y="915.0" width="245.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="869.8" y="926.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (221 samples, 20.73%)</title><rect x="867.9" y="899.0" width="244.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="870.9" y="910.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (180 samples, 16.89%)</title><rect x="888.9" y="883.0" width="199.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="891.9" y="894.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.56%)</title><rect x="894.4" y="867.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="897.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.56%)</title><rect x="894.4" y="851.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="897.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.56%)</title><rect x="894.4" y="835.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="897.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.56%)</title><rect x="894.4" y="819.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="897.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (169 samples, 15.85%)</title><rect x="901.1" y="867.0" width="187.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="904.1" y="878.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (169 samples, 15.85%)</title><rect x="901.1" y="851.0" width="187.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="904.1" y="862.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.19%)</title><rect x="908.8" y="835.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.8" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.38%)</title><rect x="911.1" y="835.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.1" y="846.0"></text>
</g>
<g>
<title>Unsafe_Park (151 samples, 14.17%)</title><rect x="915.5" y="835.0" width="167.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="918.5" y="846.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="917.7" y="819.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="920.7" y="830.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="919.9" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.9" y="830.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.53%)</title><rect x="921.0" y="819.0" width="29.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="924.0" y="830.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.75%)</title><rect x="936.5" y="803.0" width="8.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="939.5" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.19%)</title><rect x="937.6" y="787.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.6" y="798.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.19%)</title><rect x="939.8" y="787.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.8" y="798.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.28%)</title><rect x="942.0" y="787.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="945.0" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.47%)</title><rect x="945.4" y="803.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.4" y="814.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 1.03%)</title><rect x="950.9" y="819.0" width="12.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="953.9" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (39 samples, 3.66%)</title><rect x="963.1" y="819.0" width="43.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="966.1" y="830.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 4.60%)</title><rect x="1006.2" y="819.0" width="54.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1009.2" y="830.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.47%)</title><rect x="1060.5" y="819.0" width="5.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1063.5" y="830.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1066.0" y="819.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1069.0" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.28%)</title><rect x="1067.1" y="819.0" width="3.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1070.1" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.38%)</title><rect x="1070.5" y="819.0" width="4.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1073.5" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.47%)</title><rect x="1074.9" y="819.0" width="5.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1077.9" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.19%)</title><rect x="1080.4" y="819.0" width="2.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1083.4" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.19%)</title><rect x="1082.6" y="835.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1085.6" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.28%)</title><rect x="1084.8" y="835.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1087.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 2.06%)</title><rect x="1088.2" y="883.0" width="24.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1091.2" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 2.06%)</title><rect x="1088.2" y="867.0" width="24.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1091.2" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 2.06%)</title><rect x="1088.2" y="851.0" width="24.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1091.2" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 2.06%)</title><rect x="1088.2" y="835.0" width="24.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1091.2" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="1112.5" y="963.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1115.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="1112.5" y="947.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1115.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.09%)</title><rect x="1112.5" y="931.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1115.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.09%)</title><rect x="1112.5" y="915.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1115.5" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.09%)</title><rect x="1112.5" y="899.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1115.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1113.6" y="963.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1116.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1113.6" y="947.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1116.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1113.6" y="931.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1116.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.09%)</title><rect x="1113.6" y="915.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1116.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.09%)</title><rect x="1113.6" y="899.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1116.6" y="910.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.09%)</title><rect x="1113.6" y="883.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1116.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$73/2071677381.get (1 samples, 0.09%)</title><rect x="1113.6" y="867.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1116.6" y="878.0"></text>
</g>
<g>
<title>start_thread (68 samples, 6.38%)</title><rect x="1114.7" y="963.0" width="75.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1117.7" y="974.0">start_th..</text>
</g>
<g>
<title>java_start(Thread*) (68 samples, 6.38%)</title><rect x="1114.7" y="947.0" width="75.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1117.7" y="958.0">java_sta..</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.78%)</title><rect x="1114.7" y="931.0" width="21.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.7" y="942.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.47%)</title><rect x="1114.7" y="915.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.7" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.47%)</title><rect x="1114.7" y="899.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.7" y="910.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.19%)</title><rect x="1114.7" y="883.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.7" y="894.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.28%)</title><rect x="1116.9" y="883.0" width="3.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1119.9" y="894.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.31%)</title><rect x="1120.3" y="915.0" width="15.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.3" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.47%)</title><rect x="1120.3" y="899.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.3" y="910.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.19%)</title><rect x="1120.3" y="883.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.3" y="894.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.28%)</title><rect x="1122.5" y="883.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1125.5" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.28%)</title><rect x="1125.8" y="899.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.8" y="910.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1125.8" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.8" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1126.9" y="883.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.9" y="894.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1126.9" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.9" y="878.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1126.9" y="851.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.9" y="862.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1126.9" y="835.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.9" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1128.0" y="883.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.0" y="894.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1128.0" y="867.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.0" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.56%)</title><rect x="1129.1" y="899.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.1" y="910.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.56%)</title><rect x="1129.1" y="883.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.1" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.56%)</title><rect x="1129.1" y="867.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.1" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.56%)</title><rect x="1129.1" y="851.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.1" y="862.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.47%)</title><rect x="1130.2" y="835.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.2" y="846.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.47%)</title><rect x="1130.2" y="819.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.2" y="830.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.47%)</title><rect x="1130.2" y="803.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.2" y="814.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.28%)</title><rect x="1130.2" y="787.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.2" y="798.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.19%)</title><rect x="1131.3" y="771.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.3" y="782.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1132.4" y="755.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.4" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1133.5" y="787.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.5" y="798.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="1133.5" y="771.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.5" y="782.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1134.7" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.7" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (47 samples, 4.41%)</title><rect x="1135.8" y="931.0" width="52.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.8" y="942.0">JavaT..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (47 samples, 4.41%)</title><rect x="1135.8" y="915.0" width="52.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.8" y="926.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (47 samples, 4.41%)</title><rect x="1135.8" y="899.0" width="52.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.8" y="910.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (46 samples, 4.32%)</title><rect x="1135.8" y="883.0" width="50.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.8" y="894.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (45 samples, 4.22%)</title><rect x="1135.8" y="867.0" width="49.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.8" y="878.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (45 samples, 4.22%)</title><rect x="1135.8" y="851.0" width="49.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.8" y="862.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (22 samples, 2.06%)</title><rect x="1135.8" y="835.0" width="24.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.8" y="846.0">C..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1135.8" y="819.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.8" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1135.8" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.8" y="814.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1136.9" y="819.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.9" y="830.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.09%)</title><rect x="1136.9" y="803.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.9" y="814.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.28%)</title><rect x="1138.0" y="819.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.0" y="830.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1138.0" y="803.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.0" y="814.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.19%)</title><rect x="1139.1" y="803.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.1" y="814.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="1140.2" y="787.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.2" y="798.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1140.2" y="771.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.2" y="782.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1140.2" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.2" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1141.3" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1141.3" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.3" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1141.3" y="787.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.3" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.09%)</title><rect x="1142.4" y="819.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.4" y="830.0"></text>
</g>
<g>
<title>Block_Array::map(unsigned int, Block*) (1 samples, 0.09%)</title><rect x="1142.4" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.4" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (15 samples, 1.41%)</title><rect x="1143.5" y="819.0" width="16.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.5" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.38%)</title><rect x="1143.5" y="803.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.5" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1145.7" y="787.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.7" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1146.8" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.8" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1146.8" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.19%)</title><rect x="1147.9" y="803.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.9" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.28%)</title><rect x="1150.2" y="803.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.2" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1152.4" y="787.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.28%)</title><rect x="1153.5" y="803.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.5" y="814.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.09%)</title><rect x="1155.7" y="787.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.19%)</title><rect x="1156.8" y="803.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.8" y="814.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="1159.0" y="803.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.0" y="814.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1159.0" y="787.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.0" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 1.59%)</title><rect x="1160.1" y="835.0" width="18.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.1" y="846.0"></text>
</g>
<g>
<title>BoolNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1160.1" y="819.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.1" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1161.2" y="819.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.2" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1162.3" y="819.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.3" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1162.3" y="803.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 1.22%)</title><rect x="1163.4" y="819.0" width="14.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1163.4" y="803.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 0.94%)</title><rect x="1164.5" y="803.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 0.84%)</title><rect x="1165.6" y="787.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.6" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 0.75%)</title><rect x="1166.8" y="771.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1174.5" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.5" y="739.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.09%)</title><rect x="1175.6" y="803.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1176.7" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1176.7" y="787.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1176.7" y="771.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1177.8" y="819.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1177.8" y="803.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="814.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1177.8" y="787.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.47%)</title><rect x="1178.9" y="835.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.47%)</title><rect x="1178.9" y="819.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.47%)</title><rect x="1178.9" y="803.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.47%)</title><rect x="1178.9" y="787.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.47%)</title><rect x="1178.9" y="771.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.47%)</title><rect x="1178.9" y="755.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.47%)</title><rect x="1178.9" y="739.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.47%)</title><rect x="1178.9" y="723.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.47%)</title><rect x="1178.9" y="707.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.47%)</title><rect x="1178.9" y="691.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.47%)</title><rect x="1178.9" y="675.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.47%)</title><rect x="1178.9" y="659.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.38%)</title><rect x="1178.9" y="643.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.38%)</title><rect x="1178.9" y="627.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.38%)</title><rect x="1178.9" y="611.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.38%)</title><rect x="1178.9" y="595.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.38%)</title><rect x="1178.9" y="579.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.38%)</title><rect x="1178.9" y="563.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.38%)</title><rect x="1178.9" y="547.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.38%)</title><rect x="1178.9" y="531.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.38%)</title><rect x="1178.9" y="515.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.38%)</title><rect x="1178.9" y="499.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.38%)</title><rect x="1178.9" y="483.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="494.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.09%)</title><rect x="1178.9" y="467.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="478.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.09%)</title><rect x="1178.9" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="462.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*) (1 samples, 0.09%)</title><rect x="1178.9" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1180.0" y="467.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1180.0" y="451.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1180.0" y="435.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1180.0" y="419.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1180.0" y="403.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1180.0" y="387.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1180.0" y="371.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1180.0" y="355.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1180.0" y="339.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1180.0" y="323.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1180.0" y="307.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1180.0" y="291.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="302.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.09%)</title><rect x="1180.0" y="275.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.0" y="286.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.09%)</title><rect x="1180.0" y="259.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.0" y="270.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*) (1 samples, 0.09%)</title><rect x="1180.0" y="243.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.0" y="254.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.0" y="227.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="238.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1180.0" y="211.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1181.1" y="275.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1181.1" y="259.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1181.1" y="243.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1181.1" y="227.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1181.1" y="211.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1181.1" y="195.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.1" y="179.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="190.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="163.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="174.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.09%)</title><rect x="1181.1" y="147.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1181.1" y="131.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1181.1" y="115.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.1" y="126.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1181.1" y="99.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="110.0"></text>
</g>
<g>
<title>GraphKit::sync_kit(IdealKit&amp;) (1 samples, 0.09%)</title><rect x="1181.1" y="83.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.09%)</title><rect x="1181.1" y="67.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.1" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1181.1" y="51.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1181.1" y="35.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1182.3" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1182.3" y="163.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="174.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1182.3" y="147.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="158.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1182.3" y="131.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="142.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1182.3" y="115.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="126.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1182.3" y="99.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.4" y="643.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.4" y="627.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.4" y="611.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.4" y="595.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.4" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1183.4" y="563.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="574.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.09%)</title><rect x="1183.4" y="547.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.4" y="558.0"></text>
</g>
<g>
<title>GraphKit::add_exception_state(SafePointNode*) (1 samples, 0.09%)</title><rect x="1183.4" y="531.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="542.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1184.5" y="835.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="846.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1184.5" y="819.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="830.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.09%)</title><rect x="1185.6" y="867.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.6" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.09%)</title><rect x="1185.6" y="851.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.6" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.09%)</title><rect x="1185.6" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.6" y="846.0"></text>
</g>
<g>
<title>ciObject::ciObject(Handle) (1 samples, 0.09%)</title><rect x="1185.6" y="819.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.6" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_scavengable(void const*) (1 samples, 0.09%)</title><rect x="1185.6" y="803.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.6" y="814.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1186.7" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1186.7" y="867.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1186.7" y="851.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.7" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.7" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="846.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1186.7" y="819.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.19%)</title><rect x="1187.8" y="931.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.8" y="942.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.19%)</title><rect x="1187.8" y="915.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="926.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.09%)</title><rect x="1187.8" y="899.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="910.0"></text>
</g>
<g>
<title>RuntimeService::record_safepoint_end() (1 samples, 0.09%)</title><rect x="1187.8" y="883.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="894.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="899.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="910.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="883.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.9" y="894.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="867.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.9" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.9" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.09%)</title><rect x="1188.9" y="835.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="846.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.09%)</title><rect x="1188.9" y="819.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
</g>
</svg>
