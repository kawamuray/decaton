<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1381"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1381"> </text>
<g id="frames">
<g>
<title>all (91 samples, 100.00%)</title><rect x="10.0" y="1347.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 1.10%)</title><rect x="10.0" y="1331.0" width="13.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>malloc_consolidate (1 samples, 1.10%)</title><rect x="10.0" y="1315.0" width="13.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (7 samples, 7.69%)</title><rect x="23.0" y="1331.0" width="90.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.0" y="1342.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (7 samples, 7.69%)</title><rect x="23.0" y="1315.0" width="90.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.0" y="1326.0">com/lineco..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 1.10%)</title><rect x="23.0" y="1299.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1992302078.accept (1 samples, 1.10%)</title><rect x="23.0" y="1283.0" width="12.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (1 samples, 1.10%)</title><rect x="23.0" y="1267.0" width="12.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 1.10%)</title><rect x="23.0" y="1251.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.0" y="1262.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 1.10%)</title><rect x="23.0" y="1235.0" width="12.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="26.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 6.59%)</title><rect x="35.9" y="1299.0" width="77.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.9" y="1310.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 6.59%)</title><rect x="35.9" y="1283.0" width="77.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.9" y="1294.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 5.49%)</title><rect x="35.9" y="1267.0" width="64.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.9" y="1278.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 4.40%)</title><rect x="35.9" y="1251.0" width="51.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.9" y="1262.0">org/a..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 1.10%)</title><rect x="35.9" y="1235.0" width="13.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 2.20%)</title><rect x="48.9" y="1235.0" width="25.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.9" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 2.20%)</title><rect x="48.9" y="1219.0" width="25.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.9" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 2.20%)</title><rect x="48.9" y="1203.0" width="25.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="51.9" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 2.20%)</title><rect x="48.9" y="1187.0" width="25.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.9" y="1198.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 1.10%)</title><rect x="48.9" y="1171.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 1.10%)</title><rect x="48.9" y="1155.0" width="13.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 1.10%)</title><rect x="48.9" y="1139.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 1.10%)</title><rect x="48.9" y="1123.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 1.10%)</title><rect x="48.9" y="1107.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 1.10%)</title><rect x="48.9" y="1091.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 1.10%)</title><rect x="48.9" y="1075.0" width="13.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 1.10%)</title><rect x="61.9" y="1171.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="64.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 1.10%)</title><rect x="61.9" y="1155.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="64.9" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 1.10%)</title><rect x="61.9" y="1139.0" width="12.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="64.9" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 1.10%)</title><rect x="61.9" y="1123.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="64.9" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 1.10%)</title><rect x="61.9" y="1107.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="64.9" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 1.10%)</title><rect x="61.9" y="1091.0" width="12.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="64.9" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 1.10%)</title><rect x="61.9" y="1075.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="64.9" y="1086.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 1.10%)</title><rect x="61.9" y="1059.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="64.9" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 1.10%)</title><rect x="61.9" y="1043.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="64.9" y="1054.0"></text>
</g>
<g>
<title>ConstantPool::klass_ref_at(int, Thread*) (1 samples, 1.10%)</title><rect x="61.9" y="1027.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="64.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 1.10%)</title><rect x="74.8" y="1235.0" width="13.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 1.10%)</title><rect x="74.8" y="1219.0" width="13.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 1.10%)</title><rect x="74.8" y="1203.0" width="13.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.8" y="1214.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 1.10%)</title><rect x="74.8" y="1187.0" width="13.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.8" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 1.10%)</title><rect x="74.8" y="1171.0" width="13.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 1.10%)</title><rect x="87.8" y="1251.0" width="13.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 1.10%)</title><rect x="87.8" y="1235.0" width="13.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 1.10%)</title><rect x="87.8" y="1219.0" width="13.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.8" y="1230.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 1.10%)</title><rect x="87.8" y="1203.0" width="13.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.8" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 1.10%)</title><rect x="87.8" y="1187.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.8" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.size (1 samples, 1.10%)</title><rect x="87.8" y="1171.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="90.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 1.10%)</title><rect x="100.8" y="1267.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 1.10%)</title><rect x="100.8" y="1251.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 1.10%)</title><rect x="100.8" y="1235.0" width="12.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 1.10%)</title><rect x="100.8" y="1219.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 1.10%)</title><rect x="100.8" y="1203.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 1.10%)</title><rect x="100.8" y="1187.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="103.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 1.10%)</title><rect x="100.8" y="1171.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 1.10%)</title><rect x="100.8" y="1155.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.8" y="1166.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 1.10%)</title><rect x="100.8" y="1139.0" width="12.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.8" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 1.10%)</title><rect x="100.8" y="1123.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="103.8" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.writerCleanup (1 samples, 1.10%)</title><rect x="100.8" y="1107.0" width="12.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="103.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 1.10%)</title><rect x="100.8" y="1091.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 1.10%)</title><rect x="113.7" y="1331.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 1.10%)</title><rect x="113.7" y="1315.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="116.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 1.10%)</title><rect x="113.7" y="1299.0" width="13.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="116.7" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1529316903.run (1 samples, 1.10%)</title><rect x="113.7" y="1283.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.7" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (1 samples, 1.10%)</title><rect x="113.7" y="1267.0" width="13.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="116.7" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 1.10%)</title><rect x="113.7" y="1251.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="116.7" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 1.10%)</title><rect x="113.7" y="1235.0" width="13.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="116.7" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 1.10%)</title><rect x="113.7" y="1219.0" width="13.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (1 samples, 1.10%)</title><rect x="113.7" y="1203.0" width="13.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 1.10%)</title><rect x="113.7" y="1187.0" width="13.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.7" y="1198.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 1.10%)</title><rect x="113.7" y="1171.0" width="13.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="116.7" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 1.10%)</title><rect x="113.7" y="1155.0" width="13.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 1.10%)</title><rect x="113.7" y="1139.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.7" y="1150.0"></text>
</g>
<g>
<title>start_thread (82 samples, 90.11%)</title><rect x="126.7" y="1331.0" width="1063.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="129.7" y="1342.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (82 samples, 90.11%)</title><rect x="126.7" y="1315.0" width="1063.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="129.7" y="1326.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (82 samples, 90.11%)</title><rect x="126.7" y="1299.0" width="1063.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="129.7" y="1310.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (81 samples, 89.01%)</title><rect x="126.7" y="1283.0" width="1050.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="129.7" y="1294.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (81 samples, 89.01%)</title><rect x="126.7" y="1267.0" width="1050.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="129.7" y="1278.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (76 samples, 83.52%)</title><rect x="126.7" y="1251.0" width="985.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="129.7" y="1262.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (76 samples, 83.52%)</title><rect x="126.7" y="1235.0" width="985.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="129.7" y="1246.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (45 samples, 49.45%)</title><rect x="126.7" y="1219.0" width="583.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="129.7" y="1230.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 3.30%)</title><rect x="126.7" y="1203.0" width="38.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="129.7" y="1214.0">Com..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 2.20%)</title><rect x="126.7" y="1187.0" width="25.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="129.7" y="1198.0">C..</text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 1.10%)</title><rect x="139.7" y="1171.0" width="12.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="142.7" y="1182.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 1.10%)</title><rect x="139.7" y="1155.0" width="12.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="142.7" y="1166.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 1.10%)</title><rect x="152.6" y="1187.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="155.6" y="1198.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 1.10%)</title><rect x="152.6" y="1171.0" width="13.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="155.6" y="1182.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 1.10%)</title><rect x="152.6" y="1155.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="155.6" y="1166.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 1.10%)</title><rect x="152.6" y="1139.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="155.6" y="1150.0"></text>
</g>
<g>
<title>MacroAssembler::int3() (1 samples, 1.10%)</title><rect x="152.6" y="1123.0" width="13.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="155.6" y="1134.0"></text>
</g>
<g>
<title>MacroAssembler::call(AddressLiteral) (1 samples, 1.10%)</title><rect x="152.6" y="1107.0" width="13.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="155.6" y="1118.0"></text>
</g>
<g>
<title>runtime_call_Relocation::type() (1 samples, 1.10%)</title><rect x="152.6" y="1091.0" width="13.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="155.6" y="1102.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 1.10%)</title><rect x="165.6" y="1203.0" width="13.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="168.6" y="1214.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 1.10%)</title><rect x="165.6" y="1187.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="168.6" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 1.10%)</title><rect x="165.6" y="1171.0" width="13.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="168.6" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 1.10%)</title><rect x="165.6" y="1155.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="168.6" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 4.40%)</title><rect x="178.6" y="1203.0" width="51.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="181.6" y="1214.0">Match..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 4.40%)</title><rect x="178.6" y="1187.0" width="51.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="181.6" y="1198.0">Match..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 3.30%)</title><rect x="191.5" y="1171.0" width="38.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="194.5" y="1182.0">Mat..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 2.20%)</title><rect x="191.5" y="1155.0" width="26.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="194.5" y="1166.0">M..</text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.10%)</title><rect x="191.5" y="1139.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="194.5" y="1150.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.10%)</title><rect x="191.5" y="1123.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="194.5" y="1134.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.10%)</title><rect x="204.5" y="1139.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="207.5" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 1.10%)</title><rect x="217.5" y="1155.0" width="12.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="220.5" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 1.10%)</title><rect x="217.5" y="1139.0" width="12.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="220.5" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 1.10%)</title><rect x="217.5" y="1123.0" width="12.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="220.5" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 1.10%)</title><rect x="217.5" y="1107.0" width="12.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="220.5" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 1.10%)</title><rect x="217.5" y="1091.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="220.5" y="1102.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 1.10%)</title><rect x="217.5" y="1075.0" width="12.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="220.5" y="1086.0"></text>
</g>
<g>
<title>xorL_rRegNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 1.10%)</title><rect x="217.5" y="1059.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="220.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 3.30%)</title><rect x="230.4" y="1203.0" width="38.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="233.4" y="1214.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 3.30%)</title><rect x="230.4" y="1187.0" width="38.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="233.4" y="1198.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 1.10%)</title><rect x="230.4" y="1171.0" width="13.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="233.4" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 1.10%)</title><rect x="230.4" y="1155.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="233.4" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 1.10%)</title><rect x="243.4" y="1171.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="246.4" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 1.10%)</title><rect x="243.4" y="1155.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="246.4" y="1166.0"></text>
</g>
<g>
<title>storeImmCM0_regNode::ideal_Opcode() const (1 samples, 1.10%)</title><rect x="256.4" y="1171.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="259.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (34 samples, 37.36%)</title><rect x="269.3" y="1203.0" width="440.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="272.3" y="1214.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 1.10%)</title><rect x="269.3" y="1187.0" width="13.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="272.3" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 1.10%)</title><rect x="282.3" y="1187.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="285.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 1.10%)</title><rect x="282.3" y="1171.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="285.3" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 3.30%)</title><rect x="295.3" y="1187.0" width="38.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="298.3" y="1198.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 2.20%)</title><rect x="308.2" y="1171.0" width="26.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="311.2" y="1182.0">I..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 5.49%)</title><rect x="334.2" y="1187.0" width="64.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="337.2" y="1198.0">PhaseCh..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 1.10%)</title><rect x="373.1" y="1171.0" width="12.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="376.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 1.10%)</title><rect x="386.0" y="1171.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="389.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 1.10%)</title><rect x="386.0" y="1155.0" width="13.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="389.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 3.30%)</title><rect x="399.0" y="1187.0" width="38.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="402.0" y="1198.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 2.20%)</title><rect x="399.0" y="1171.0" width="25.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="402.0" y="1182.0">P..</text>
</g>
<g>
<title>lower_pressure(LRG*, unsigned int, Block*, unsigned int*, unsigned int*) [clone .isra.134] (1 samples, 1.10%)</title><rect x="424.9" y="1171.0" width="13.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="427.9" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 1.10%)</title><rect x="437.9" y="1187.0" width="13.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="440.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 1.10%)</title><rect x="437.9" y="1171.0" width="13.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="440.9" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 1.10%)</title><rect x="450.9" y="1187.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="453.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 4.40%)</title><rect x="463.8" y="1187.0" width="51.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="466.8" y="1198.0">Phase..</text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 1.10%)</title><rect x="476.8" y="1171.0" width="13.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="479.8" y="1182.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 1.10%)</title><rect x="489.8" y="1171.0" width="12.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="492.8" y="1182.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 1.10%)</title><rect x="502.7" y="1171.0" width="13.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="505.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 1.10%)</title><rect x="515.7" y="1187.0" width="13.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="518.7" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 4.40%)</title><rect x="528.7" y="1187.0" width="51.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="531.7" y="1198.0">Phase..</text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 1.10%)</title><rect x="541.6" y="1171.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="544.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 2.20%)</title><rect x="554.6" y="1171.0" width="25.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="557.6" y="1182.0">P..</text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 4.40%)</title><rect x="580.5" y="1187.0" width="51.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="583.5" y="1198.0">Phase..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 1.10%)</title><rect x="580.5" y="1171.0" width="13.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="583.5" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 3.30%)</title><rect x="593.5" y="1171.0" width="38.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="596.5" y="1182.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 3.30%)</title><rect x="593.5" y="1155.0" width="38.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="596.5" y="1166.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 2.20%)</title><rect x="593.5" y="1139.0" width="26.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="596.5" y="1150.0">I..</text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 1.10%)</title><rect x="619.5" y="1139.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="622.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 1.10%)</title><rect x="632.4" y="1187.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="635.4" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.10%)</title><rect x="632.4" y="1171.0" width="13.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="635.4" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 5.49%)</title><rect x="645.4" y="1187.0" width="64.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="648.4" y="1198.0">PhaseLi..</text>
</g>
<g>
<title>Compile::Optimize() (23 samples, 25.27%)</title><rect x="710.2" y="1219.0" width="298.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="713.2" y="1230.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 1.10%)</title><rect x="710.2" y="1203.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="713.2" y="1214.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 1.10%)</title><rect x="710.2" y="1187.0" width="13.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="713.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (12 samples, 13.19%)</title><rect x="723.2" y="1203.0" width="155.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="726.2" y="1214.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 1.10%)</title><rect x="723.2" y="1187.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="726.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 9.89%)</title><rect x="736.2" y="1187.0" width="116.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="739.2" y="1198.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 9.89%)</title><rect x="736.2" y="1171.0" width="116.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="739.2" y="1182.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 9.89%)</title><rect x="736.2" y="1155.0" width="116.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="739.2" y="1166.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (8 samples, 8.79%)</title><rect x="749.1" y="1139.0" width="103.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="752.1" y="1150.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 1.10%)</title><rect x="852.9" y="1187.0" width="12.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="855.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 1.10%)</title><rect x="852.9" y="1171.0" width="12.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="855.9" y="1182.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 1.10%)</title><rect x="852.9" y="1155.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.9" y="1166.0"></text>
</g>
<g>
<title>SafePointNode::pinned() const (1 samples, 1.10%)</title><rect x="865.8" y="1187.0" width="13.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="868.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 7.69%)</title><rect x="878.8" y="1203.0" width="90.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="881.8" y="1214.0">PhaseIterG..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 7.69%)</title><rect x="878.8" y="1187.0" width="90.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="881.8" y="1198.0">PhaseIterG..</text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 1.10%)</title><rect x="878.8" y="1171.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="881.8" y="1182.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 1.10%)</title><rect x="878.8" y="1155.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="881.8" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 1.10%)</title><rect x="891.8" y="1171.0" width="12.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="894.8" y="1182.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 1.10%)</title><rect x="891.8" y="1155.0" width="12.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="894.8" y="1166.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 3.30%)</title><rect x="904.7" y="1171.0" width="38.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="907.7" y="1182.0">Reg..</text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 1.10%)</title><rect x="904.7" y="1155.0" width="13.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="907.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 1.10%)</title><rect x="917.7" y="1155.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.7" y="1166.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 1.10%)</title><rect x="917.7" y="1139.0" width="13.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="920.7" y="1150.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 1.10%)</title><rect x="917.7" y="1123.0" width="13.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="920.7" y="1134.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 1.10%)</title><rect x="917.7" y="1107.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="920.7" y="1118.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 1.10%)</title><rect x="930.7" y="1155.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="933.7" y="1166.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 1.10%)</title><rect x="943.6" y="1171.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.6" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 1.10%)</title><rect x="943.6" y="1155.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="946.6" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="1139.0" width="13.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="946.6" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="1123.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.6" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="1107.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="946.6" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="1091.0" width="13.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="946.6" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="1075.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="946.6" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="1059.0" width="13.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="946.6" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="1043.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="946.6" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="1027.0" width="13.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="946.6" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="1011.0" width="13.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="946.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="995.0" width="13.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="946.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="979.0" width="13.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="946.6" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="963.0" width="13.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.6" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="947.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="946.6" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="931.0" width="13.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="946.6" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="915.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="946.6" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="899.0" width="13.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="946.6" y="910.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.10%)</title><rect x="943.6" y="883.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="946.6" y="894.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.10%)</title><rect x="943.6" y="867.0" width="13.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="946.6" y="878.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 1.10%)</title><rect x="956.6" y="1171.0" width="13.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="959.6" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 2.20%)</title><rect x="969.6" y="1203.0" width="25.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="972.6" y="1214.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 1.10%)</title><rect x="969.6" y="1187.0" width="12.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 1.10%)</title><rect x="969.6" y="1171.0" width="12.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="972.6" y="1182.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 1.10%)</title><rect x="969.6" y="1155.0" width="12.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="972.6" y="1166.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 1.10%)</title><rect x="969.6" y="1139.0" width="12.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="972.6" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.10%)</title><rect x="969.6" y="1123.0" width="12.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.6" y="1134.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 1.10%)</title><rect x="969.6" y="1107.0" width="12.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.6" y="1118.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 1.10%)</title><rect x="969.6" y="1091.0" width="12.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="972.6" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 1.10%)</title><rect x="982.5" y="1187.0" width="13.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 1.10%)</title><rect x="982.5" y="1171.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.5" y="1182.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 1.10%)</title><rect x="982.5" y="1155.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.5" y="1166.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 1.10%)</title><rect x="995.5" y="1203.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.5" y="1214.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 1.10%)</title><rect x="995.5" y="1187.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="998.5" y="1198.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 1.10%)</title><rect x="995.5" y="1171.0" width="13.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.5" y="1182.0"></text>
</g>
<g>
<title>Compile::rethrow_exceptions(JVMState*) (1 samples, 1.10%)</title><rect x="1008.5" y="1219.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1011.5" y="1230.0"></text>
</g>
<g>
<title>RethrowNode::RethrowNode(Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 1.10%)</title><rect x="1008.5" y="1203.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.5" y="1214.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 1.10%)</title><rect x="1008.5" y="1187.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1011.5" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 7.69%)</title><rect x="1021.4" y="1219.0" width="90.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.4" y="1230.0">ParseGener..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 7.69%)</title><rect x="1021.4" y="1203.0" width="90.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.4" y="1214.0">Parse::Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 7.69%)</title><rect x="1021.4" y="1187.0" width="90.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.4" y="1198.0">Parse::do_..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 7.69%)</title><rect x="1021.4" y="1171.0" width="90.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.4" y="1182.0">Parse::do_..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 7.69%)</title><rect x="1021.4" y="1155.0" width="90.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.4" y="1166.0">Parse::do_..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 7.69%)</title><rect x="1021.4" y="1139.0" width="90.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1024.4" y="1150.0">Parse::do_..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.10%)</title><rect x="1021.4" y="1123.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.4" y="1134.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.10%)</title><rect x="1021.4" y="1107.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.4" y="1118.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.10%)</title><rect x="1021.4" y="1091.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.4" y="1102.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.10%)</title><rect x="1021.4" y="1075.0" width="13.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.4" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 1.10%)</title><rect x="1021.4" y="1059.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1024.4" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 1.10%)</title><rect x="1021.4" y="1043.0" width="13.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.4" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.10%)</title><rect x="1021.4" y="1027.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.4" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.10%)</title><rect x="1021.4" y="1011.0" width="13.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.4" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 1.10%)</title><rect x="1021.4" y="995.0" width="13.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1024.4" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 1.10%)</title><rect x="1021.4" y="979.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.4" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 1.10%)</title><rect x="1021.4" y="963.0" width="13.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.4" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 1.10%)</title><rect x="1021.4" y="947.0" width="13.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1024.4" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 1.10%)</title><rect x="1021.4" y="931.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.4" y="942.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 1.10%)</title><rect x="1021.4" y="915.0" width="13.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1024.4" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 1.10%)</title><rect x="1021.4" y="899.0" width="13.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.4" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 1.10%)</title><rect x="1021.4" y="883.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.4" y="894.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 1.10%)</title><rect x="1021.4" y="867.0" width="13.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.4" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.30%)</title><rect x="1034.4" y="1123.0" width="38.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.4" y="1134.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.30%)</title><rect x="1034.4" y="1107.0" width="38.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.4" y="1118.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.30%)</title><rect x="1034.4" y="1091.0" width="38.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.4" y="1102.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.30%)</title><rect x="1034.4" y="1075.0" width="38.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.4" y="1086.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.30%)</title><rect x="1034.4" y="1059.0" width="38.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.4" y="1070.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.30%)</title><rect x="1034.4" y="1043.0" width="38.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1037.4" y="1054.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.30%)</title><rect x="1034.4" y="1027.0" width="38.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1037.4" y="1038.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.30%)</title><rect x="1034.4" y="1011.0" width="38.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.4" y="1022.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.30%)</title><rect x="1034.4" y="995.0" width="38.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1037.4" y="1006.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.30%)</title><rect x="1034.4" y="979.0" width="38.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1037.4" y="990.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.30%)</title><rect x="1034.4" y="963.0" width="38.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.4" y="974.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.30%)</title><rect x="1034.4" y="947.0" width="38.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1037.4" y="958.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.20%)</title><rect x="1034.4" y="931.0" width="25.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1037.4" y="942.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.20%)</title><rect x="1034.4" y="915.0" width="25.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.4" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.20%)</title><rect x="1034.4" y="899.0" width="25.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.4" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.20%)</title><rect x="1034.4" y="883.0" width="25.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1037.4" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.20%)</title><rect x="1034.4" y="867.0" width="25.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.4" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.20%)</title><rect x="1034.4" y="851.0" width="25.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1037.4" y="862.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.20%)</title><rect x="1034.4" y="835.0" width="25.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.4" y="846.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.20%)</title><rect x="1034.4" y="819.0" width="25.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.4" y="830.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.20%)</title><rect x="1034.4" y="803.0" width="25.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1037.4" y="814.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.20%)</title><rect x="1034.4" y="787.0" width="25.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.4" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.20%)</title><rect x="1034.4" y="771.0" width="25.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1037.4" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.20%)</title><rect x="1034.4" y="755.0" width="25.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.4" y="766.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.20%)</title><rect x="1034.4" y="739.0" width="25.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1037.4" y="750.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.20%)</title><rect x="1034.4" y="723.0" width="25.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.4" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.20%)</title><rect x="1034.4" y="707.0" width="25.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1037.4" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.20%)</title><rect x="1034.4" y="691.0" width="25.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.4" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.20%)</title><rect x="1034.4" y="675.0" width="25.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1037.4" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.20%)</title><rect x="1034.4" y="659.0" width="25.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1037.4" y="670.0">P..</text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 1.10%)</title><rect x="1034.4" y="643.0" width="13.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.4" y="654.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 1.10%)</title><rect x="1034.4" y="627.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.4" y="638.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 1.10%)</title><rect x="1034.4" y="611.0" width="13.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.10%)</title><rect x="1047.4" y="643.0" width="12.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1050.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.10%)</title><rect x="1047.4" y="627.0" width="12.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1050.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.10%)</title><rect x="1047.4" y="611.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.10%)</title><rect x="1047.4" y="595.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.10%)</title><rect x="1047.4" y="579.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.4" y="590.0"></text>
</g>
<g>
<title>Parse::push_constant(ciConstant, bool, bool, Type const*) (1 samples, 1.10%)</title><rect x="1047.4" y="563.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.4" y="574.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 1.10%)</title><rect x="1047.4" y="547.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.4" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.10%)</title><rect x="1060.3" y="931.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1063.3" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.10%)</title><rect x="1060.3" y="915.0" width="13.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1063.3" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.10%)</title><rect x="1060.3" y="899.0" width="13.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1063.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.10%)</title><rect x="1060.3" y="883.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1063.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.10%)</title><rect x="1060.3" y="867.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1063.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.10%)</title><rect x="1060.3" y="851.0" width="13.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1063.3" y="862.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 1.10%)</title><rect x="1060.3" y="835.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1063.3" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 3.30%)</title><rect x="1073.3" y="1123.0" width="38.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.3" y="1134.0">Pre..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.30%)</title><rect x="1073.3" y="1107.0" width="38.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.3" y="1118.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.30%)</title><rect x="1073.3" y="1091.0" width="38.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.3" y="1102.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.30%)</title><rect x="1073.3" y="1075.0" width="38.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1076.3" y="1086.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.30%)</title><rect x="1073.3" y="1059.0" width="38.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.3" y="1070.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.30%)</title><rect x="1073.3" y="1043.0" width="38.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1076.3" y="1054.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.30%)</title><rect x="1073.3" y="1027.0" width="38.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.3" y="1038.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.30%)</title><rect x="1073.3" y="1011.0" width="38.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.3" y="1022.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.30%)</title><rect x="1073.3" y="995.0" width="38.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.3" y="1006.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.30%)</title><rect x="1073.3" y="979.0" width="38.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1076.3" y="990.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.30%)</title><rect x="1073.3" y="963.0" width="38.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.3" y="974.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.30%)</title><rect x="1073.3" y="947.0" width="38.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1076.3" y="958.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.30%)</title><rect x="1073.3" y="931.0" width="38.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.3" y="942.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.30%)</title><rect x="1073.3" y="915.0" width="38.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.3" y="926.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.30%)</title><rect x="1073.3" y="899.0" width="38.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.3" y="910.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.30%)</title><rect x="1073.3" y="883.0" width="38.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.3" y="894.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.30%)</title><rect x="1073.3" y="867.0" width="38.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1076.3" y="878.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.30%)</title><rect x="1073.3" y="851.0" width="38.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.3" y="862.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.30%)</title><rect x="1073.3" y="835.0" width="38.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.3" y="846.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.30%)</title><rect x="1073.3" y="819.0" width="38.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.3" y="830.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.30%)</title><rect x="1073.3" y="803.0" width="38.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1076.3" y="814.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.30%)</title><rect x="1073.3" y="787.0" width="38.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.3" y="798.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.30%)</title><rect x="1073.3" y="771.0" width="38.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.3" y="782.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.30%)</title><rect x="1073.3" y="755.0" width="38.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.3" y="766.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.30%)</title><rect x="1073.3" y="739.0" width="38.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.3" y="750.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.30%)</title><rect x="1073.3" y="723.0" width="38.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.3" y="734.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.30%)</title><rect x="1073.3" y="707.0" width="38.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.3" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.30%)</title><rect x="1073.3" y="691.0" width="38.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.3" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.30%)</title><rect x="1073.3" y="675.0" width="38.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.3" y="686.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.30%)</title><rect x="1073.3" y="659.0" width="38.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.3" y="670.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.30%)</title><rect x="1073.3" y="643.0" width="38.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.3" y="654.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.20%)</title><rect x="1073.3" y="627.0" width="25.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.3" y="638.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.20%)</title><rect x="1073.3" y="611.0" width="25.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.3" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.20%)</title><rect x="1073.3" y="595.0" width="25.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.3" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.20%)</title><rect x="1073.3" y="579.0" width="25.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.3" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.20%)</title><rect x="1073.3" y="563.0" width="25.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.3" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.20%)</title><rect x="1073.3" y="547.0" width="25.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.3" y="558.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.20%)</title><rect x="1073.3" y="531.0" width="25.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.3" y="542.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.20%)</title><rect x="1073.3" y="515.0" width="25.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.3" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.20%)</title><rect x="1073.3" y="499.0" width="25.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.3" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.20%)</title><rect x="1073.3" y="483.0" width="25.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.3" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.20%)</title><rect x="1073.3" y="467.0" width="25.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.3" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.20%)</title><rect x="1073.3" y="451.0" width="25.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.3" y="462.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.10%)</title><rect x="1073.3" y="435.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.3" y="446.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 1.10%)</title><rect x="1073.3" y="419.0" width="13.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.3" y="430.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 1.10%)</title><rect x="1073.3" y="403.0" width="13.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.3" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.10%)</title><rect x="1073.3" y="387.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.3" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.10%)</title><rect x="1073.3" y="371.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.3" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.10%)</title><rect x="1073.3" y="355.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.3" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 1.10%)</title><rect x="1073.3" y="339.0" width="13.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.3" y="350.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 1.10%)</title><rect x="1073.3" y="323.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.3" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.10%)</title><rect x="1086.3" y="435.0" width="12.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.10%)</title><rect x="1086.3" y="419.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.10%)</title><rect x="1086.3" y="403.0" width="12.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.10%)</title><rect x="1086.3" y="387.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.10%)</title><rect x="1086.3" y="371.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.10%)</title><rect x="1086.3" y="355.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.3" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.10%)</title><rect x="1086.3" y="339.0" width="12.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1089.3" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.10%)</title><rect x="1086.3" y="323.0" width="12.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.10%)</title><rect x="1086.3" y="307.0" width="12.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.10%)</title><rect x="1086.3" y="291.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.10%)</title><rect x="1086.3" y="275.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.10%)</title><rect x="1086.3" y="259.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1089.3" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.10%)</title><rect x="1086.3" y="243.0" width="12.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1089.3" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.10%)</title><rect x="1086.3" y="227.0" width="12.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.10%)</title><rect x="1086.3" y="211.0" width="12.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1089.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.10%)</title><rect x="1086.3" y="195.0" width="12.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.10%)</title><rect x="1086.3" y="179.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.10%)</title><rect x="1086.3" y="163.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 1.10%)</title><rect x="1086.3" y="147.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 1.10%)</title><rect x="1086.3" y="131.0" width="12.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.3" y="142.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 1.10%)</title><rect x="1086.3" y="115.0" width="12.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.3" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.10%)</title><rect x="1086.3" y="99.0" width="12.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1089.3" y="110.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 1.10%)</title><rect x="1086.3" y="83.0" width="12.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.3" y="94.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 1.10%)</title><rect x="1086.3" y="67.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.3" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.10%)</title><rect x="1086.3" y="51.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.3" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.10%)</title><rect x="1086.3" y="35.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.10%)</title><rect x="1099.2" y="627.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.10%)</title><rect x="1099.2" y="611.0" width="13.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.10%)</title><rect x="1099.2" y="595.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.10%)</title><rect x="1099.2" y="579.0" width="13.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.10%)</title><rect x="1099.2" y="563.0" width="13.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.10%)</title><rect x="1099.2" y="547.0" width="13.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.10%)</title><rect x="1099.2" y="531.0" width="13.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.10%)</title><rect x="1099.2" y="515.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.10%)</title><rect x="1099.2" y="499.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.10%)</title><rect x="1099.2" y="483.0" width="13.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.10%)</title><rect x="1099.2" y="467.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.10%)</title><rect x="1099.2" y="451.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.10%)</title><rect x="1099.2" y="435.0" width="13.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.2" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.10%)</title><rect x="1099.2" y="419.0" width="13.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.2" y="430.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 1.10%)</title><rect x="1099.2" y="403.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.2" y="414.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 1.10%)</title><rect x="1099.2" y="387.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.2" y="398.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 4.40%)</title><rect x="1112.2" y="1251.0" width="51.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.2" y="1262.0">Compi..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 4.40%)</title><rect x="1112.2" y="1235.0" width="51.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.2" y="1246.0">Compi..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 4.40%)</title><rect x="1112.2" y="1219.0" width="51.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.2" y="1230.0">Compi..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 3.30%)</title><rect x="1112.2" y="1203.0" width="38.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.2" y="1214.0">Com..</text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 2.20%)</title><rect x="1112.2" y="1187.0" width="25.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.2" y="1198.0">C..</text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 1.10%)</title><rect x="1112.2" y="1171.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.2" y="1182.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 1.10%)</title><rect x="1112.2" y="1155.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1115.2" y="1166.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 1.10%)</title><rect x="1112.2" y="1139.0" width="13.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.2" y="1150.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 1.10%)</title><rect x="1112.2" y="1123.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.2" y="1134.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 1.10%)</title><rect x="1112.2" y="1107.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.2" y="1118.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 1.10%)</title><rect x="1112.2" y="1091.0" width="13.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.2" y="1102.0"></text>
</g>
<g>
<title>SubstitutionResolver::visit(Instruction**) (1 samples, 1.10%)</title><rect x="1112.2" y="1075.0" width="13.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.2" y="1086.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 1.10%)</title><rect x="1125.2" y="1171.0" width="12.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.2" y="1182.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 1.10%)</title><rect x="1125.2" y="1155.0" width="12.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.2" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 1.10%)</title><rect x="1125.2" y="1139.0" width="12.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.2" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 1.10%)</title><rect x="1125.2" y="1123.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.2" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 1.10%)</title><rect x="1125.2" y="1107.0" width="12.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.2" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 1.10%)</title><rect x="1125.2" y="1091.0" width="12.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.2" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 1.10%)</title><rect x="1125.2" y="1075.0" width="12.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.2" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 1.10%)</title><rect x="1125.2" y="1059.0" width="12.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.2" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 1.10%)</title><rect x="1125.2" y="1043.0" width="12.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.2" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 1.10%)</title><rect x="1125.2" y="1027.0" width="12.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.2" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 1.10%)</title><rect x="1125.2" y="1011.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.2" y="1022.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 1.10%)</title><rect x="1125.2" y="995.0" width="12.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.2" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 1.10%)</title><rect x="1125.2" y="979.0" width="12.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.2" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 1.10%)</title><rect x="1125.2" y="963.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.2" y="974.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 1.10%)</title><rect x="1125.2" y="947.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.2" y="958.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 1.10%)</title><rect x="1138.1" y="1187.0" width="13.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.1" y="1198.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 1.10%)</title><rect x="1138.1" y="1171.0" width="13.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.1" y="1182.0"></text>
</g>
<g>
<title>LIR_Assembler::return_op(LIR_OprDesc*) (1 samples, 1.10%)</title><rect x="1138.1" y="1155.0" width="13.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.1" y="1166.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 1.10%)</title><rect x="1151.1" y="1203.0" width="13.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.1" y="1214.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 1.10%)</title><rect x="1151.1" y="1187.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.1" y="1198.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 1.10%)</title><rect x="1151.1" y="1171.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.1" y="1182.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 1.10%)</title><rect x="1151.1" y="1155.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.1" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 1.10%)</title><rect x="1151.1" y="1139.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.1" y="1150.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 1.10%)</title><rect x="1164.1" y="1251.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="1262.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 1.10%)</title><rect x="1164.1" y="1235.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.1" y="1246.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 1.10%)</title><rect x="1177.0" y="1283.0" width="13.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.0" y="1294.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 1.10%)</title><rect x="1177.0" y="1267.0" width="13.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.0" y="1278.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 1.10%)</title><rect x="1177.0" y="1251.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="1262.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 1.10%)</title><rect x="1177.0" y="1235.0" width="13.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1180.0" y="1246.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 1.10%)</title><rect x="1177.0" y="1219.0" width="13.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="1230.0"></text>
</g>
</g>
</svg>
