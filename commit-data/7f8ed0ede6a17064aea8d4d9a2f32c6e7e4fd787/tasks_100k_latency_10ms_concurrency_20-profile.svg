<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (284 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.35%)</title><rect x="10.0" y="1315.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>Deoptimization::unpack_frames(JavaThread*, int) (1 samples, 0.35%)</title><rect x="10.0" y="1299.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>vframeArray::unpack_to_stack(frame&amp;, int, int) (1 samples, 0.35%)</title><rect x="10.0" y="1283.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>vframeArrayElement::unpack_on_stack(int, int, int, frame*, bool, bool, int) (1 samples, 0.35%)</title><rect x="10.0" y="1267.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>JumpData::cell_count() const (1 samples, 0.35%)</title><rect x="10.0" y="1251.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 7.04%)</title><rect x="14.2" y="1315.0" width="83.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1326.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 7.04%)</title><rect x="14.2" y="1299.0" width="83.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1310.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.35%)</title><rect x="14.2" y="1283.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.35%)</title><rect x="14.2" y="1267.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$285/929403601.accept (1 samples, 0.35%)</title><rect x="14.2" y="1251.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$resumePartitions$39 (1 samples, 0.35%)</title><rect x="14.2" y="1235.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.resume (1 samples, 0.35%)</title><rect x="14.2" y="1219.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.70%)</title><rect x="18.3" y="1283.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/251689173.accept (2 samples, 0.70%)</title><rect x="18.3" y="1267.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.3" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (2 samples, 0.70%)</title><rect x="18.3" y="1251.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.35%)</title><rect x="18.3" y="1235.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.35%)</title><rect x="18.3" y="1219.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.35%)</title><rect x="18.3" y="1203.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.35%)</title><rect x="18.3" y="1187.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.35%)</title><rect x="18.3" y="1171.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.35%)</title><rect x="18.3" y="1155.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.35%)</title><rect x="18.3" y="1139.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.35%)</title><rect x="18.3" y="1123.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.35%)</title><rect x="18.3" y="1107.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.35%)</title><rect x="22.5" y="1235.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.5" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.35%)</title><rect x="22.5" y="1219.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 5.99%)</title><rect x="26.6" y="1283.0" width="70.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.6" y="1294.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 5.99%)</title><rect x="26.6" y="1267.0" width="70.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.6" y="1278.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.35%)</title><rect x="26.6" y="1251.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 2.82%)</title><rect x="30.8" y="1251.0" width="33.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.8" y="1262.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.35%)</title><rect x="30.8" y="1235.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.35%)</title><rect x="30.8" y="1219.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.8" y="1230.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.35%)</title><rect x="30.8" y="1203.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="33.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.76%)</title><rect x="34.9" y="1235.0" width="20.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.76%)</title><rect x="34.9" y="1219.0" width="20.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="34.9" y="1203.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="37.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="34.9" y="1187.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.35%)</title><rect x="34.9" y="1171.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/212323226.linkToTargetMethod (1 samples, 0.35%)</title><rect x="34.9" y="1155.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1392327493.invokeStatic_JJ_L (1 samples, 0.35%)</title><rect x="34.9" y="1139.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/275554500.shouldBlock (1 samples, 0.35%)</title><rect x="39.1" y="1203.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.35%)</title><rect x="39.1" y="1187.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.35%)</title><rect x="39.1" y="1171.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.35%)</title><rect x="39.1" y="1155.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="39.1" y="1139.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="39.1" y="1123.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="39.1" y="1107.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="39.1" y="1091.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="39.1" y="1075.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.35%)</title><rect x="39.1" y="1059.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.35%)</title><rect x="39.1" y="1043.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.35%)</title><rect x="39.1" y="1027.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.35%)</title><rect x="43.2" y="1203.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.35%)</title><rect x="43.2" y="1187.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.35%)</title><rect x="47.4" y="1203.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.35%)</title><rect x="47.4" y="1187.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.35%)</title><rect x="47.4" y="1171.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.35%)</title><rect x="47.4" y="1155.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.35%)</title><rect x="47.4" y="1139.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.35%)</title><rect x="47.4" y="1123.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.35%)</title><rect x="51.5" y="1203.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.35%)</title><rect x="51.5" y="1187.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.35%)</title><rect x="51.5" y="1171.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.5" y="1182.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.35%)</title><rect x="51.5" y="1155.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="54.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.35%)</title><rect x="55.7" y="1235.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="58.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.35%)</title><rect x="55.7" y="1219.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.35%)</title><rect x="55.7" y="1203.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.35%)</title><rect x="55.7" y="1187.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.35%)</title><rect x="55.7" y="1171.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.35%)</title><rect x="55.7" y="1155.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.35%)</title><rect x="55.7" y="1139.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.35%)</title><rect x="55.7" y="1123.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.35%)</title><rect x="55.7" y="1107.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.35%)</title><rect x="55.7" y="1091.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.35%)</title><rect x="55.7" y="1075.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.35%)</title><rect x="55.7" y="1059.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.35%)</title><rect x="59.9" y="1235.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.35%)</title><rect x="59.9" y="1219.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.add (1 samples, 0.35%)</title><rect x="59.9" y="1203.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.9" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.35%)</title><rect x="59.9" y="1187.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.9" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.35%)</title><rect x="59.9" y="1171.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.41%)</title><rect x="64.0" y="1251.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 1.41%)</title><rect x="64.0" y="1235.0" width="16.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.06%)</title><rect x="64.0" y="1219.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.35%)</title><rect x="64.0" y="1203.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="67.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1991282176.accept (1 samples, 0.35%)</title><rect x="64.0" y="1187.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.35%)</title><rect x="64.0" y="1171.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.35%)</title><rect x="64.0" y="1155.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.35%)</title><rect x="64.0" y="1139.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.35%)</title><rect x="64.0" y="1123.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="64.0" y="1107.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="67.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="64.0" y="1091.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.35%)</title><rect x="68.2" y="1203.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.35%)</title><rect x="68.2" y="1187.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.2" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="68.2" y="1171.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="68.2" y="1155.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="68.2" y="1139.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="68.2" y="1123.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.2" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="68.2" y="1107.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.2" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.35%)</title><rect x="68.2" y="1091.0" width="4.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="71.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.35%)</title><rect x="72.3" y="1203.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.35%)</title><rect x="72.3" y="1187.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.3" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="72.3" y="1171.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="72.3" y="1155.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="72.3" y="1139.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="72.3" y="1123.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.3" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="72.3" y="1107.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="75.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.35%)</title><rect x="72.3" y="1091.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.35%)</title><rect x="72.3" y="1075.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.3" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.35%)</title><rect x="72.3" y="1059.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/1732870639.apply (1 samples, 0.35%)</title><rect x="72.3" y="1043.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.35%)</title><rect x="76.5" y="1219.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.5" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.35%)</title><rect x="76.5" y="1203.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="76.5" y="1187.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="76.5" y="1171.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.5" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="76.5" y="1155.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.5" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="76.5" y="1139.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.5" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="76.5" y="1123.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.35%)</title><rect x="76.5" y="1107.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.35%)</title><rect x="76.5" y="1091.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="79.5" y="1102.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.35%)</title><rect x="76.5" y="1075.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="79.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.70%)</title><rect x="80.6" y="1251.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="83.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.70%)</title><rect x="80.6" y="1235.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.35%)</title><rect x="80.6" y="1219.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.35%)</title><rect x="80.6" y="1203.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.35%)</title><rect x="80.6" y="1187.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="84.8" y="1219.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.35%)</title><rect x="84.8" y="1203.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.35%)</title><rect x="84.8" y="1187.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.35%)</title><rect x="84.8" y="1171.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="84.8" y="1155.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="84.8" y="1139.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.35%)</title><rect x="84.8" y="1123.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.70%)</title><rect x="88.9" y="1251.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.70%)</title><rect x="88.9" y="1235.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.70%)</title><rect x="88.9" y="1219.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.9" y="1230.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.35%)</title><rect x="88.9" y="1203.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.35%)</title><rect x="93.1" y="1203.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="93.1" y="1187.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="93.1" y="1171.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="96.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="93.1" y="1155.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="93.1" y="1139.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="93.1" y="1123.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.35%)</title><rect x="93.1" y="1107.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.1" y="1118.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.35%)</title><rect x="93.1" y="1091.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.1" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.35%)</title><rect x="93.1" y="1075.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (157 samples, 55.28%)</title><rect x="97.3" y="1315.0" width="652.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="100.3" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (157 samples, 55.28%)</title><rect x="97.3" y="1299.0" width="652.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.3" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (157 samples, 55.28%)</title><rect x="97.3" y="1283.0" width="652.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="100.3" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1387199738.run (152 samples, 53.52%)</title><rect x="97.3" y="1267.0" width="631.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.3" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1387199738.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (152 samples, 53.52%)</title><rect x="97.3" y="1251.0" width="631.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.3" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (152 samples, 53.52%)</title><rect x="97.3" y="1235.0" width="631.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.3" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (146 samples, 51.41%)</title><rect x="97.3" y="1219.0" width="606.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="100.3" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="101.4" y="1203.0" width="4.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="104.4" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="101.4" y="1187.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="104.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.35%)</title><rect x="105.6" y="1203.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="108.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.35%)</title><rect x="105.6" y="1187.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/1706917919.get (1 samples, 0.35%)</title><rect x="105.6" y="1171.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="108.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.35%)</title><rect x="105.6" y="1155.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.&lt;init&gt; (1 samples, 0.35%)</title><rect x="105.6" y="1139.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="108.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/Number.&lt;init&gt; (1 samples, 0.35%)</title><rect x="105.6" y="1123.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.6" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.35%)</title><rect x="105.6" y="1107.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="108.6" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="105.6" y="1091.0" width="4.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="108.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (30 samples, 10.56%)</title><rect x="109.7" y="1203.0" width="124.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="112.7" y="1214.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (30 samples, 10.56%)</title><rect x="109.7" y="1187.0" width="124.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="112.7" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (30 samples, 10.56%)</title><rect x="109.7" y="1171.0" width="124.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.7" y="1182.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (30 samples, 10.56%)</title><rect x="109.7" y="1155.0" width="124.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="112.7" y="1166.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (30 samples, 10.56%)</title><rect x="109.7" y="1139.0" width="124.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="112.7" y="1150.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (30 samples, 10.56%)</title><rect x="109.7" y="1123.0" width="124.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="112.7" y="1134.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (16 samples, 5.63%)</title><rect x="109.7" y="1107.0" width="66.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.7" y="1118.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.41%)</title><rect x="109.7" y="1091.0" width="16.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.41%)</title><rect x="109.7" y="1075.0" width="16.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="112.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.41%)</title><rect x="109.7" y="1059.0" width="16.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.41%)</title><rect x="109.7" y="1043.0" width="16.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="112.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (11 samples, 3.87%)</title><rect x="126.3" y="1091.0" width="45.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.3" y="1102.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.76%)</title><rect x="126.3" y="1075.0" width="20.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.35%)</title><rect x="126.3" y="1059.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="129.3" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="126.3" y="1043.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="129.3" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.35%)</title><rect x="126.3" y="1027.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="129.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 1.41%)</title><rect x="130.5" y="1059.0" width="16.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.41%)</title><rect x="130.5" y="1043.0" width="16.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="133.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.35%)</title><rect x="143.0" y="1027.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="146.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (6 samples, 2.11%)</title><rect x="147.1" y="1075.0" width="24.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.1" y="1086.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="172.0" y="1091.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 4.58%)</title><rect x="176.2" y="1107.0" width="54.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.2" y="1118.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.35%)</title><rect x="176.2" y="1091.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.35%)</title><rect x="176.2" y="1075.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.35%)</title><rect x="176.2" y="1059.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.35%)</title><rect x="176.2" y="1043.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.35%)</title><rect x="176.2" y="1027.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.35%)</title><rect x="180.4" y="1091.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.35%)</title><rect x="180.4" y="1075.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="180.4" y="1059.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="183.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.35%)</title><rect x="180.4" y="1043.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 3.87%)</title><rect x="184.5" y="1091.0" width="45.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.5" y="1102.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="184.5" y="1075.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="187.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.35%)</title><rect x="184.5" y="1059.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 3.52%)</title><rect x="188.7" y="1075.0" width="41.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.7" y="1086.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 3.52%)</title><rect x="188.7" y="1059.0" width="41.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.7" y="1070.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 3.52%)</title><rect x="188.7" y="1043.0" width="41.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.7" y="1054.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.76%)</title><rect x="192.8" y="1027.0" width="20.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.35%)</title><rect x="197.0" y="1011.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.35%)</title><rect x="197.0" y="995.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="200.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.35%)</title><rect x="197.0" y="979.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.06%)</title><rect x="201.1" y="1011.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.35%)</title><rect x="213.6" y="1027.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.35%)</title><rect x="213.6" y="1011.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.35%)</title><rect x="213.6" y="995.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.35%)</title><rect x="213.6" y="979.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.6" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.35%)</title><rect x="213.6" y="963.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.70%)</title><rect x="217.7" y="1027.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="220.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.70%)</title><rect x="217.7" y="1011.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="220.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.70%)</title><rect x="217.7" y="995.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.70%)</title><rect x="217.7" y="979.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.7" y="990.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.70%)</title><rect x="217.7" y="963.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.7" y="974.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.70%)</title><rect x="217.7" y="947.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.7" y="958.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (2 samples, 0.70%)</title><rect x="217.7" y="931.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.35%)</title><rect x="226.1" y="1027.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.1" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="226.1" y="1011.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.1" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="226.1" y="995.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.35%)</title><rect x="230.2" y="1107.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.35%)</title><rect x="230.2" y="1091.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.35%)</title><rect x="230.2" y="1075.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.35%)</title><rect x="230.2" y="1059.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.35%)</title><rect x="230.2" y="1043.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (113 samples, 39.79%)</title><rect x="234.4" y="1203.0" width="469.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.4" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (13 samples, 4.58%)</title><rect x="234.4" y="1187.0" width="54.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.4" y="1198.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.35%)</title><rect x="234.4" y="1171.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.4" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.35%)</title><rect x="234.4" y="1155.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.35%)</title><rect x="234.4" y="1139.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.4" y="1150.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (12 samples, 4.23%)</title><rect x="238.5" y="1171.0" width="49.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.5" y="1182.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (10 samples, 3.52%)</title><rect x="246.8" y="1155.0" width="41.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.8" y="1166.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 2.11%)</title><rect x="263.5" y="1139.0" width="24.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="266.5" y="1150.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.41%)</title><rect x="271.8" y="1123.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.35%)</title><rect x="271.8" y="1107.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="274.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.06%)</title><rect x="275.9" y="1107.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="278.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="288.4" y="1187.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (30 samples, 10.56%)</title><rect x="292.5" y="1187.0" width="124.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.5" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (30 samples, 10.56%)</title><rect x="292.5" y="1171.0" width="124.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.5" y="1182.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 5.28%)</title><rect x="292.5" y="1155.0" width="62.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.5" y="1166.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.70%)</title><rect x="292.5" y="1139.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.70%)</title><rect x="292.5" y="1123.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.5" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="296.7" y="1107.0" width="4.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="299.7" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="296.7" y="1091.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="299.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 3.17%)</title><rect x="300.8" y="1139.0" width="37.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.8" y="1150.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 3.17%)</title><rect x="300.8" y="1123.0" width="37.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.8" y="1134.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.70%)</title><rect x="300.8" y="1107.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="303.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.70%)</title><rect x="300.8" y="1091.0" width="8.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="303.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.70%)</title><rect x="300.8" y="1075.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.70%)</title><rect x="300.8" y="1059.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="303.8" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.35%)</title><rect x="300.8" y="1043.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="303.8" y="1054.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.35%)</title><rect x="300.8" y="1027.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="303.8" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.35%)</title><rect x="300.8" y="1011.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="303.8" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="305.0" y="1043.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="308.0" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="305.0" y="1027.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="308.0" y="1038.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.35%)</title><rect x="305.0" y="1011.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="308.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.35%)</title><rect x="309.2" y="1107.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.getChars (2 samples, 0.70%)</title><rect x="313.3" y="1107.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.3" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.70%)</title><rect x="313.3" y="1091.0" width="8.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="316.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 1.41%)</title><rect x="321.6" y="1107.0" width="16.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 1.41%)</title><rect x="338.2" y="1139.0" width="16.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="341.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 1.41%)</title><rect x="338.2" y="1123.0" width="16.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.2" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 1.41%)</title><rect x="338.2" y="1107.0" width="16.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="341.2" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="350.7" y="1091.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="353.7" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.35%)</title><rect x="350.7" y="1075.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="353.7" y="1086.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.35%)</title><rect x="350.7" y="1059.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="353.7" y="1070.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.35%)</title><rect x="350.7" y="1043.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="353.7" y="1054.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.35%)</title><rect x="350.7" y="1027.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="353.7" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.35%)</title><rect x="350.7" y="1011.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="353.7" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (15 samples, 5.28%)</title><rect x="354.9" y="1155.0" width="62.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.9" y="1166.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (14 samples, 4.93%)</title><rect x="359.0" y="1139.0" width="58.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="362.0" y="1150.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.06%)</title><rect x="359.0" y="1123.0" width="12.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.06%)</title><rect x="359.0" y="1107.0" width="12.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.06%)</title><rect x="359.0" y="1091.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.06%)</title><rect x="359.0" y="1075.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.70%)</title><rect x="363.2" y="1059.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.70%)</title><rect x="363.2" y="1043.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="366.2" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 3.87%)</title><rect x="371.5" y="1123.0" width="45.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="374.5" y="1134.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.87%)</title><rect x="371.5" y="1107.0" width="45.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.5" y="1118.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 2.11%)</title><rect x="392.3" y="1091.0" width="24.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="395.3" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.70%)</title><rect x="404.7" y="1075.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="407.7" y="1086.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.35%)</title><rect x="413.0" y="1075.0" width="4.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="416.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (64 samples, 22.54%)</title><rect x="417.2" y="1187.0" width="265.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="420.2" y="1198.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (64 samples, 22.54%)</title><rect x="417.2" y="1171.0" width="265.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.2" y="1182.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1412965736.process (51 samples, 17.96%)</title><rect x="421.3" y="1155.0" width="211.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="424.3" y="1166.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (49 samples, 17.25%)</title><rect x="429.6" y="1139.0" width="203.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="432.6" y="1150.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (49 samples, 17.25%)</title><rect x="429.6" y="1123.0" width="203.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="432.6" y="1134.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.70%)</title><rect x="433.8" y="1107.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="436.8" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.70%)</title><rect x="433.8" y="1091.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.8" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.70%)</title><rect x="433.8" y="1075.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="436.8" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.70%)</title><rect x="433.8" y="1059.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.35%)</title><rect x="438.0" y="1043.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="441.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.35%)</title><rect x="438.0" y="1027.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="441.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (44 samples, 15.49%)</title><rect x="442.1" y="1107.0" width="182.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="445.1" y="1118.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>java/lang/Thread.sleep (42 samples, 14.79%)</title><rect x="442.1" y="1091.0" width="174.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="445.1" y="1102.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (36 samples, 12.68%)</title><rect x="462.9" y="1075.0" width="149.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="465.9" y="1086.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.06%)</title><rect x="475.4" y="1059.0" width="12.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="478.4" y="1070.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.35%)</title><rect x="487.8" y="1059.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="490.8" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="492.0" y="1059.0" width="4.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="495.0" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.35%)</title><rect x="496.1" y="1059.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="499.1" y="1070.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (27 samples, 9.51%)</title><rect x="500.3" y="1059.0" width="112.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="503.3" y="1070.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.70%)</title><rect x="529.4" y="1043.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="532.4" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.70%)</title><rect x="529.4" y="1027.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="532.4" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.06%)</title><rect x="537.7" y="1043.0" width="12.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="540.7" y="1054.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.06%)</title><rect x="537.7" y="1027.0" width="12.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="540.7" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.35%)</title><rect x="550.1" y="1043.0" width="4.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="553.1" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 3.87%)</title><rect x="554.3" y="1043.0" width="45.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="557.3" y="1054.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.35%)</title><rect x="600.0" y="1043.0" width="4.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="603.0" y="1054.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.35%)</title><rect x="604.2" y="1043.0" width="4.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="607.2" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="608.3" y="1043.0" width="4.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="611.3" y="1054.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.35%)</title><rect x="612.5" y="1075.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="615.5" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.70%)</title><rect x="616.6" y="1091.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="619.6" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.70%)</title><rect x="616.6" y="1075.0" width="8.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="619.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.70%)</title><rect x="624.9" y="1107.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="627.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="633.2" y="1155.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.35%)</title><rect x="633.2" y="1139.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="636.2" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="633.2" y="1123.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="636.2" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="633.2" y="1107.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="636.2" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="633.2" y="1091.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="636.2" y="1102.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.35%)</title><rect x="633.2" y="1075.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="636.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 1.06%)</title><rect x="637.4" y="1155.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="640.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 1.06%)</title><rect x="637.4" y="1139.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/793267996.get$Lambda (3 samples, 1.06%)</title><rect x="637.4" y="1123.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="640.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/793267996.&lt;init&gt; (3 samples, 1.06%)</title><rect x="637.4" y="1107.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.4" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.35%)</title><rect x="649.9" y="1155.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="652.9" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.35%)</title><rect x="649.9" y="1139.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="652.9" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.35%)</title><rect x="649.9" y="1123.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="652.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.70%)</title><rect x="654.0" y="1155.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.0" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.70%)</title><rect x="654.0" y="1139.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.70%)</title><rect x="662.3" y="1155.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="665.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 1.06%)</title><rect x="670.6" y="1155.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="673.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.76%)</title><rect x="683.1" y="1187.0" width="20.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="686.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.76%)</title><rect x="683.1" y="1171.0" width="20.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="686.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.35%)</title><rect x="703.9" y="1219.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="706.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.35%)</title><rect x="703.9" y="1203.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="706.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$272/1824032655.get$Lambda (1 samples, 0.35%)</title><rect x="703.9" y="1187.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="706.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.35%)</title><rect x="703.9" y="1171.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="706.9" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="703.9" y="1155.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="706.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.76%)</title><rect x="708.0" y="1219.0" width="20.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="711.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.76%)</title><rect x="708.0" y="1203.0" width="20.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="711.0" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="716.3" y="1187.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="719.3" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="716.3" y="1171.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="719.3" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="716.3" y="1155.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="719.3" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="716.3" y="1139.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="719.3" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.35%)</title><rect x="716.3" y="1123.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="719.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.70%)</title><rect x="720.5" y="1187.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="723.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$272/1824032655.accept (2 samples, 0.70%)</title><rect x="720.5" y="1171.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="723.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (2 samples, 0.70%)</title><rect x="720.5" y="1155.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="723.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1330510765.complete (2 samples, 0.70%)</title><rect x="720.5" y="1139.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="723.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (2 samples, 0.70%)</title><rect x="720.5" y="1123.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.70%)</title><rect x="720.5" y="1107.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.5" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.70%)</title><rect x="720.5" y="1091.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.5" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.70%)</title><rect x="720.5" y="1075.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.35%)</title><rect x="728.8" y="1267.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.35%)</title><rect x="728.8" y="1251.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="731.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.35%)</title><rect x="728.8" y="1235.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="731.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.35%)</title><rect x="728.8" y="1219.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="731.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.35%)</title><rect x="728.8" y="1203.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.41%)</title><rect x="733.0" y="1267.0" width="16.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="736.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.06%)</title><rect x="737.1" y="1251.0" width="12.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="740.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.06%)</title><rect x="737.1" y="1235.0" width="12.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="740.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.06%)</title><rect x="737.1" y="1219.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="740.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.06%)</title><rect x="737.1" y="1203.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="740.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.06%)</title><rect x="737.1" y="1187.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="740.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.35%)</title><rect x="749.6" y="1315.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="752.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.35%)</title><rect x="749.6" y="1299.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="752.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="749.6" y="1283.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.35%)</title><rect x="749.6" y="1267.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="752.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.35%)</title><rect x="749.6" y="1251.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="752.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.35%)</title><rect x="749.6" y="1235.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="752.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.35%)</title><rect x="749.6" y="1219.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="752.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.35%)</title><rect x="749.6" y="1203.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="752.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.35%)</title><rect x="749.6" y="1187.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.6" y="1198.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.35%)</title><rect x="749.6" y="1171.0" width="4.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="752.6" y="1182.0"></text>
</g>
<g>
<title>start_thread (105 samples, 36.97%)</title><rect x="753.7" y="1315.0" width="436.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="756.7" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (105 samples, 36.97%)</title><rect x="753.7" y="1299.0" width="436.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="756.7" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 2.82%)</title><rect x="753.7" y="1283.0" width="33.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="756.7" y="1294.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 2.82%)</title><rect x="753.7" y="1267.0" width="33.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="756.7" y="1278.0">G1..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 2.82%)</title><rect x="753.7" y="1251.0" width="33.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="756.7" y="1262.0">G1..</text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.35%)</title><rect x="753.7" y="1235.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="756.7" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.35%)</title><rect x="753.7" y="1219.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="756.7" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.35%)</title><rect x="753.7" y="1203.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="756.7" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.35%)</title><rect x="757.9" y="1235.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="760.9" y="1246.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.35%)</title><rect x="757.9" y="1219.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="760.9" y="1230.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.35%)</title><rect x="757.9" y="1203.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="760.9" y="1214.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.35%)</title><rect x="757.9" y="1187.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="760.9" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (6 samples, 2.11%)</title><rect x="762.0" y="1235.0" width="25.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="765.0" y="1246.0">G..</text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (6 samples, 2.11%)</title><rect x="762.0" y="1219.0" width="25.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="765.0" y="1230.0">S..</text>
</g>
<g>
<title>JavaThread::run() (97 samples, 34.15%)</title><rect x="787.0" y="1283.0" width="403.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="790.0" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (97 samples, 34.15%)</title><rect x="787.0" y="1267.0" width="403.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="790.0" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (97 samples, 34.15%)</title><rect x="787.0" y="1251.0" width="403.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="790.0" y="1262.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (97 samples, 34.15%)</title><rect x="787.0" y="1235.0" width="403.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="790.0" y="1246.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (94 samples, 33.10%)</title><rect x="787.0" y="1219.0" width="390.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="790.0" y="1230.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (94 samples, 33.10%)</title><rect x="787.0" y="1203.0" width="390.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="790.0" y="1214.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 12.32%)</title><rect x="787.0" y="1187.0" width="145.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="790.0" y="1198.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.35%)</title><rect x="787.0" y="1171.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="790.0" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.35%)</title><rect x="787.0" y="1155.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="790.0" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.35%)</title><rect x="787.0" y="1139.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="790.0" y="1150.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.35%)</title><rect x="791.1" y="1171.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="794.1" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.41%)</title><rect x="795.3" y="1171.0" width="16.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="798.3" y="1182.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.35%)</title><rect x="795.3" y="1155.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="798.3" y="1166.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.06%)</title><rect x="799.4" y="1155.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="802.4" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.35%)</title><rect x="803.6" y="1139.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="806.6" y="1150.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.35%)</title><rect x="807.7" y="1139.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="810.7" y="1150.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="807.7" y="1123.0" width="4.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="810.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.70%)</title><rect x="811.9" y="1171.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="814.9" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.70%)</title><rect x="811.9" y="1155.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="814.9" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.70%)</title><rect x="811.9" y="1139.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="814.9" y="1150.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.35%)</title><rect x="811.9" y="1123.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="814.9" y="1134.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::is_block_proj() const (1 samples, 0.35%)</title><rect x="816.1" y="1123.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="819.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 9.51%)</title><rect x="820.2" y="1171.0" width="112.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="823.2" y="1182.0">PhaseChaitin::..</text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.35%)</title><rect x="828.5" y="1155.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="831.5" y="1166.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.70%)</title><rect x="832.7" y="1155.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="835.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.70%)</title><rect x="841.0" y="1155.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="844.0" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.35%)</title><rect x="841.0" y="1139.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="844.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.35%)</title><rect x="845.1" y="1139.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="848.1" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="845.1" y="1123.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="848.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.41%)</title><rect x="849.3" y="1155.0" width="16.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="852.3" y="1166.0"></text>
</g>
<g>
<title>loadSNode::rule() const (1 samples, 0.35%)</title><rect x="861.8" y="1139.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.41%)</title><rect x="865.9" y="1155.0" width="16.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="868.9" y="1166.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.35%)</title><rect x="865.9" y="1139.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="868.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.06%)</title><rect x="870.1" y="1139.0" width="12.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="873.1" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.70%)</title><rect x="870.1" y="1123.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="873.1" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="878.4" y="1123.0" width="4.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="881.4" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.35%)</title><rect x="882.5" y="1155.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="885.5" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.35%)</title><rect x="886.7" y="1155.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="889.7" y="1166.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.35%)</title><rect x="886.7" y="1139.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="889.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.35%)</title><rect x="890.8" y="1155.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="893.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.06%)</title><rect x="895.0" y="1155.0" width="12.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="898.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.70%)</title><rect x="899.2" y="1139.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="902.2" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.35%)</title><rect x="903.3" y="1123.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="906.3" y="1134.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.35%)</title><rect x="903.3" y="1107.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="906.3" y="1118.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.70%)</title><rect x="907.5" y="1155.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="910.5" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.70%)</title><rect x="907.5" y="1139.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="910.5" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.70%)</title><rect x="907.5" y="1123.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="910.5" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.70%)</title><rect x="907.5" y="1107.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="910.5" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="911.6" y="1091.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="914.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.35%)</title><rect x="915.8" y="1155.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="918.8" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="915.8" y="1139.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="918.8" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.06%)</title><rect x="919.9" y="1155.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="922.9" y="1166.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.35%)</title><rect x="924.1" y="1139.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="927.1" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.35%)</title><rect x="928.2" y="1139.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="931.2" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="928.2" y="1123.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="931.2" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (52 samples, 18.31%)</title><rect x="932.4" y="1187.0" width="216.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="935.4" y="1198.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.35%)</title><rect x="932.4" y="1171.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="935.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.35%)</title><rect x="932.4" y="1155.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="935.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 2.11%)</title><rect x="936.5" y="1171.0" width="25.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.5" y="1182.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 2.11%)</title><rect x="936.5" y="1155.0" width="25.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="939.5" y="1166.0">C..</text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.35%)</title><rect x="936.5" y="1139.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.35%)</title><rect x="936.5" y="1123.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="939.5" y="1134.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.35%)</title><rect x="936.5" y="1107.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="939.5" y="1118.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.35%)</title><rect x="936.5" y="1091.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.5" y="1102.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.35%)</title><rect x="936.5" y="1075.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.5" y="1086.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.35%)</title><rect x="936.5" y="1059.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="939.5" y="1070.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.35%)</title><rect x="936.5" y="1043.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="939.5" y="1054.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.35%)</title><rect x="936.5" y="1027.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.5" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="936.5" y="1011.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="939.5" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="936.5" y="995.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="939.5" y="1006.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.35%)</title><rect x="936.5" y="979.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.35%)</title><rect x="940.7" y="1139.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="943.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 1.41%)</title><rect x="944.9" y="1139.0" width="16.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="947.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 1.41%)</title><rect x="944.9" y="1123.0" width="16.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="947.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 1.41%)</title><rect x="944.9" y="1107.0" width="16.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="947.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.70%)</title><rect x="944.9" y="1091.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="947.9" y="1102.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (2 samples, 0.70%)</title><rect x="944.9" y="1075.0" width="8.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="947.9" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.70%)</title><rect x="953.2" y="1091.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.70%)</title><rect x="953.2" y="1075.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.70%)</title><rect x="953.2" y="1059.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="956.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.70%)</title><rect x="953.2" y="1043.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="1027.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="1011.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="956.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="995.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="956.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="979.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="956.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="963.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="947.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="956.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="931.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="956.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="915.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="899.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="956.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="883.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="956.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="867.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="956.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="851.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="956.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="835.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="956.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="819.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="956.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="803.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="787.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="771.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="956.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="755.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="956.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="739.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="723.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="707.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="956.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="691.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="956.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="675.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="956.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="659.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="956.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="643.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="627.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="956.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="611.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="956.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="595.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="956.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="579.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="956.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="563.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="547.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="531.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="956.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="515.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="956.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="499.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="956.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="483.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="956.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="467.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="956.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="451.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="956.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="435.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="956.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="419.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="403.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="956.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="387.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="956.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="371.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="956.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="355.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="956.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.35%)</title><rect x="953.2" y="339.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="956.2" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="957.3" y="1027.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="960.3" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="957.3" y="1011.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.3" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="957.3" y="995.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="960.3" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="957.3" y="979.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.3" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="957.3" y="963.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.3" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.35%)</title><rect x="957.3" y="947.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.3" y="958.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.35%)</title><rect x="957.3" y="931.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (35 samples, 12.32%)</title><rect x="961.5" y="1171.0" width="145.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="964.5" y="1182.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.35%)</title><rect x="961.5" y="1155.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="964.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.35%)</title><rect x="965.6" y="1155.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="968.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.35%)</title><rect x="965.6" y="1139.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (28 samples, 9.86%)</title><rect x="969.8" y="1155.0" width="116.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.8" y="1166.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (26 samples, 9.15%)</title><rect x="978.1" y="1139.0" width="108.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.1" y="1150.0">PhaseIdealLoo..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.35%)</title><rect x="978.1" y="1123.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.35%)</title><rect x="982.3" y="1123.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="985.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (24 samples, 8.45%)</title><rect x="986.4" y="1123.0" width="99.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="989.4" y="1134.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.70%)</title><rect x="1077.8" y="1107.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.35%)</title><rect x="1086.1" y="1155.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.35%)</title><rect x="1086.1" y="1139.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.70%)</title><rect x="1090.3" y="1155.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.35%)</title><rect x="1094.4" y="1139.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.35%)</title><rect x="1094.4" y="1123.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="1098.6" y="1155.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="1098.6" y="1139.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.6" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.35%)</title><rect x="1098.6" y="1123.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.6" y="1134.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.35%)</title><rect x="1102.7" y="1155.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.7" y="1166.0"></text>
</g>
<g>
<title>free (1 samples, 0.35%)</title><rect x="1102.7" y="1139.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1105.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 2.82%)</title><rect x="1106.9" y="1171.0" width="33.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.9" y="1182.0">Ph..</text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.35%)</title><rect x="1106.9" y="1155.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1109.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 2.46%)</title><rect x="1111.1" y="1155.0" width="29.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.1" y="1166.0">Ph..</text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1111.1" y="1139.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.1" y="1150.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1111.1" y="1123.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.1" y="1134.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.35%)</title><rect x="1111.1" y="1107.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.1" y="1118.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.35%)</title><rect x="1111.1" y="1091.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.1" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1111.1" y="1075.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.1" y="1086.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.35%)</title><rect x="1111.1" y="1059.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.70%)</title><rect x="1115.2" y="1139.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.35%)</title><rect x="1119.4" y="1123.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.4" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1123.5" y="1139.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.5" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1127.7" y="1139.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.7" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1131.8" y="1139.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.8" y="1150.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.35%)</title><rect x="1131.8" y="1123.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.8" y="1134.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1136.0" y="1139.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.0" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.35%)</title><rect x="1136.0" y="1123.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.0" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1136.0" y="1107.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.0" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1136.0" y="1091.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.0" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1136.0" y="1075.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.0" y="1086.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.35%)</title><rect x="1136.0" y="1059.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.0" y="1070.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="1136.0" y="1043.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.0" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.70%)</title><rect x="1140.1" y="1171.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.1" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.70%)</title><rect x="1140.1" y="1155.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.1" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.35%)</title><rect x="1140.1" y="1139.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1140.1" y="1123.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.1" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1144.3" y="1139.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.3" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1144.3" y="1123.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.3" y="1134.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1144.3" y="1107.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.3" y="1118.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.35%)</title><rect x="1144.3" y="1091.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.3" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.11%)</title><rect x="1148.5" y="1187.0" width="24.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.5" y="1198.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.11%)</title><rect x="1148.5" y="1171.0" width="24.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.5" y="1182.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.11%)</title><rect x="1148.5" y="1155.0" width="24.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.5" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.11%)</title><rect x="1148.5" y="1139.0" width="24.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.5" y="1150.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.11%)</title><rect x="1148.5" y="1123.0" width="24.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.5" y="1134.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.11%)</title><rect x="1148.5" y="1107.0" width="24.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.5" y="1118.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.11%)</title><rect x="1148.5" y="1091.0" width="24.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.5" y="1102.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.11%)</title><rect x="1148.5" y="1075.0" width="24.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.5" y="1086.0">P..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.35%)</title><rect x="1148.5" y="1059.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.5" y="1070.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.35%)</title><rect x="1148.5" y="1043.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.5" y="1054.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.35%)</title><rect x="1148.5" y="1027.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.5" y="1038.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.35%)</title><rect x="1148.5" y="1011.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.5" y="1022.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.35%)</title><rect x="1148.5" y="995.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.5" y="1006.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.35%)</title><rect x="1148.5" y="979.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.5" y="990.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.35%)</title><rect x="1148.5" y="963.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.76%)</title><rect x="1152.6" y="1059.0" width="20.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.76%)</title><rect x="1152.6" y="1043.0" width="20.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.76%)</title><rect x="1152.6" y="1027.0" width="20.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.76%)</title><rect x="1152.6" y="1011.0" width="20.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.41%)</title><rect x="1152.6" y="995.0" width="16.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.41%)</title><rect x="1152.6" y="979.0" width="16.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.41%)</title><rect x="1152.6" y="963.0" width="16.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.41%)</title><rect x="1152.6" y="947.0" width="16.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.41%)</title><rect x="1152.6" y="931.0" width="16.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.41%)</title><rect x="1152.6" y="915.0" width="16.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.41%)</title><rect x="1152.6" y="899.0" width="16.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.6" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.41%)</title><rect x="1152.6" y="883.0" width="16.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.41%)</title><rect x="1152.6" y="867.0" width="16.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.41%)</title><rect x="1152.6" y="851.0" width="16.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.41%)</title><rect x="1152.6" y="835.0" width="16.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.06%)</title><rect x="1152.6" y="819.0" width="12.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.06%)</title><rect x="1152.6" y="803.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.06%)</title><rect x="1152.6" y="787.0" width="12.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.06%)</title><rect x="1152.6" y="771.0" width="12.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.06%)</title><rect x="1152.6" y="755.0" width="12.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.06%)</title><rect x="1152.6" y="739.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.06%)</title><rect x="1152.6" y="723.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1152.6" y="707.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1152.6" y="691.0" width="8.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1152.6" y="675.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1152.6" y="659.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1152.6" y="643.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1152.6" y="627.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.6" y="611.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.6" y="595.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.6" y="579.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.6" y="563.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.6" y="547.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.6" y="531.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.6" y="515.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.6" y="499.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.6" y="483.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.6" y="467.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.6" y="451.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.6" y="435.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.6" y="419.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.6" y="403.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.6" y="387.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.6" y="371.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.6" y="355.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.6" y="339.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.6" y="323.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.6" y="307.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.6" y="291.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.6" y="275.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.6" y="259.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.6" y="243.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.6" y="227.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.6" y="211.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.6" y="195.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.6" y="179.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.6" y="163.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1152.6" y="147.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1152.6" y="131.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.6" y="142.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.35%)</title><rect x="1152.6" y="115.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.6" y="126.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1152.6" y="99.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.6" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.35%)</title><rect x="1152.6" y="83.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.6" y="94.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.35%)</title><rect x="1152.6" y="67.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="78.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.35%)</title><rect x="1152.6" y="51.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.6" y="62.0"></text>
</g>
<g>
<title>InstanceKlass::find_field_from_offset(int, bool, fieldDescriptor*) const (1 samples, 0.35%)</title><rect x="1152.6" y="35.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.8" y="611.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.8" y="595.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1156.8" y="579.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1156.8" y="563.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1156.8" y="547.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1156.8" y="531.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1156.8" y="515.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.8" y="499.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1156.8" y="483.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1156.8" y="467.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1156.8" y="451.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1156.8" y="435.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1156.8" y="419.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.8" y="403.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1156.8" y="387.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1156.8" y="371.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1156.8" y="355.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1156.8" y="339.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1156.8" y="323.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.8" y="334.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.35%)</title><rect x="1156.8" y="307.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.8" y="318.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.35%)</title><rect x="1156.8" y="291.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.8" y="302.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.35%)</title><rect x="1156.8" y="275.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.8" y="286.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.35%)</title><rect x="1156.8" y="259.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.8" y="270.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.35%)</title><rect x="1156.8" y="243.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.8" y="254.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.35%)</title><rect x="1156.8" y="227.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.8" y="238.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1156.8" y="211.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.8" y="222.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1156.8" y="195.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.8" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="707.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="691.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1160.9" y="675.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1160.9" y="659.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1160.9" y="643.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1160.9" y="627.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1160.9" y="611.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="595.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1160.9" y="579.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1160.9" y="563.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1160.9" y="547.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1160.9" y="531.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1160.9" y="515.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="499.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="483.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1160.9" y="467.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1160.9" y="451.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1160.9" y="435.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1160.9" y="419.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1160.9" y="403.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="387.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1160.9" y="371.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1160.9" y="355.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1160.9" y="339.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1160.9" y="323.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1160.9" y="307.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="291.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1160.9" y="275.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1160.9" y="259.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1160.9" y="243.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1160.9" y="227.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1160.9" y="211.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1160.9" y="195.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.9" y="206.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.35%)</title><rect x="1160.9" y="179.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.9" y="190.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.35%)</title><rect x="1160.9" y="163.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.9" y="174.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.35%)</title><rect x="1160.9" y="147.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.9" y="158.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.35%)</title><rect x="1160.9" y="131.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="142.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.35%)</title><rect x="1160.9" y="115.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.35%)</title><rect x="1165.1" y="819.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.1" y="830.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.35%)</title><rect x="1165.1" y="803.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.1" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.35%)</title><rect x="1165.1" y="787.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.1" y="798.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.35%)</title><rect x="1165.1" y="771.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.1" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1169.2" y="995.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.2" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1169.2" y="979.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.2" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1169.2" y="963.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1169.2" y="947.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1169.2" y="931.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1169.2" y="915.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1169.2" y="899.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1169.2" y="883.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.2" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1169.2" y="867.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1169.2" y="851.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1169.2" y="835.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1169.2" y="819.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1169.2" y="803.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1169.2" y="787.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1169.2" y="771.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1169.2" y="755.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1169.2" y="739.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1169.2" y="723.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1169.2" y="707.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1169.2" y="691.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.2" y="702.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.35%)</title><rect x="1169.2" y="675.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.2" y="686.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.35%)</title><rect x="1169.2" y="659.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.2" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1169.2" y="643.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.2" y="654.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.35%)</title><rect x="1169.2" y="627.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.2" y="638.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.35%)</title><rect x="1173.4" y="1187.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.4" y="1198.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.06%)</title><rect x="1177.5" y="1219.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.06%)</title><rect x="1177.5" y="1203.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.06%)</title><rect x="1177.5" y="1187.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.5" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.06%)</title><rect x="1177.5" y="1171.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="1182.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.35%)</title><rect x="1177.5" y="1155.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="1166.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.35%)</title><rect x="1177.5" y="1139.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="1150.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.35%)</title><rect x="1177.5" y="1123.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.35%)</title><rect x="1177.5" y="1107.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1177.5" y="1091.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1177.5" y="1075.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1177.5" y="1059.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1177.5" y="1043.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="1054.0"></text>
</g>
<g>
<title>ConstantPool::has_method_type_at_if_loaded(constantPoolHandle, int) (1 samples, 0.35%)</title><rect x="1177.5" y="1027.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="1038.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.70%)</title><rect x="1181.7" y="1155.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="1166.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.70%)</title><rect x="1181.7" y="1139.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="1150.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.35%)</title><rect x="1181.7" y="1123.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="1134.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.35%)</title><rect x="1181.7" y="1107.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="1118.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.35%)</title><rect x="1181.7" y="1091.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="1102.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.35%)</title><rect x="1185.8" y="1123.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.8" y="1134.0"></text>
</g>
</g>
</svg>
