<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1558" onload="init(evt)" viewBox="0 0 1200 1558" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1541"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1541"> </text>
<g id="frames">
<g>
<title>all (262 samples, 100.00%)</title><rect x="10.0" y="1507.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1518.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 8.78%)</title><rect x="10.0" y="1491.0" width="103.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1502.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.76%)</title><rect x="10.0" y="1475.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.76%)</title><rect x="10.0" y="1459.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.76%)</title><rect x="10.0" y="1443.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.76%)</title><rect x="10.0" y="1427.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.76%)</title><rect x="10.0" y="1411.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.76%)</title><rect x="10.0" y="1395.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.76%)</title><rect x="10.0" y="1379.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.38%)</title><rect x="10.0" y="1363.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.38%)</title><rect x="10.0" y="1347.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.38%)</title><rect x="10.0" y="1331.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.38%)</title><rect x="10.0" y="1315.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.38%)</title><rect x="10.0" y="1299.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.38%)</title><rect x="10.0" y="1283.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.38%)</title><rect x="10.0" y="1267.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.38%)</title><rect x="10.0" y="1251.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.38%)</title><rect x="10.0" y="1235.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.38%)</title><rect x="10.0" y="1219.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.38%)</title><rect x="10.0" y="1203.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="10.0" y="1187.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="10.0" y="1171.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.38%)</title><rect x="10.0" y="1155.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.38%)</title><rect x="10.0" y="1139.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.38%)</title><rect x="10.0" y="1123.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="10.0" y="1107.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.38%)</title><rect x="10.0" y="1091.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.38%)</title><rect x="14.5" y="1363.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.38%)</title><rect x="14.5" y="1347.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.38%)</title><rect x="14.5" y="1331.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.38%)</title><rect x="14.5" y="1315.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.38%)</title><rect x="14.5" y="1299.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.38%)</title><rect x="14.5" y="1283.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 7.63%)</title><rect x="19.0" y="1475.0" width="90.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.0" y="1486.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 1.15%)</title><rect x="19.0" y="1459.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.38%)</title><rect x="19.0" y="1443.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.0" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.38%)</title><rect x="19.0" y="1427.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.0" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.38%)</title><rect x="19.0" y="1411.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.0" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.38%)</title><rect x="19.0" y="1395.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.0" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.38%)</title><rect x="19.0" y="1379.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.0" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.38%)</title><rect x="19.0" y="1363.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.0" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.38%)</title><rect x="19.0" y="1347.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.0" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.38%)</title><rect x="19.0" y="1331.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.0" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.38%)</title><rect x="19.0" y="1315.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.0" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.38%)</title><rect x="19.0" y="1299.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.0" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (2 samples, 0.76%)</title><rect x="23.5" y="1443.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.5" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$287/1349771783.accept (2 samples, 0.76%)</title><rect x="23.5" y="1427.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.5" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$resumePartitions$40 (2 samples, 0.76%)</title><rect x="23.5" y="1411.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.5" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.resume (2 samples, 0.76%)</title><rect x="23.5" y="1395.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.5" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/metrics/ValueGauge.decrement (1 samples, 0.38%)</title><rect x="28.0" y="1379.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.decrementAndGet (1 samples, 0.38%)</title><rect x="28.0" y="1363.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.0" y="1374.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.15%)</title><rect x="32.5" y="1459.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.5" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2074020945.accept (2 samples, 0.76%)</title><rect x="32.5" y="1443.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.5" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (2 samples, 0.76%)</title><rect x="32.5" y="1427.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.5" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.76%)</title><rect x="32.5" y="1411.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.5" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.76%)</title><rect x="32.5" y="1395.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.5" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.76%)</title><rect x="32.5" y="1379.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.76%)</title><rect x="32.5" y="1363.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.5" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.76%)</title><rect x="32.5" y="1347.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="35.5" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.76%)</title><rect x="32.5" y="1331.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.76%)</title><rect x="32.5" y="1315.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.76%)</title><rect x="32.5" y="1299.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.76%)</title><rect x="32.5" y="1283.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.38%)</title><rect x="41.5" y="1443.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.5" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.38%)</title><rect x="41.5" y="1427.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.5" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.38%)</title><rect x="41.5" y="1411.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="44.5" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.38%)</title><rect x="41.5" y="1395.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="44.5" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 5.34%)</title><rect x="46.0" y="1459.0" width="63.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="49.0" y="1470.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 5.34%)</title><rect x="46.0" y="1443.0" width="63.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.0" y="1454.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 4.20%)</title><rect x="46.0" y="1427.0" width="49.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="49.0" y="1438.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.53%)</title><rect x="46.0" y="1411.0" width="18.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.53%)</title><rect x="46.0" y="1395.0" width="18.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="49.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.76%)</title><rect x="50.5" y="1379.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.38%)</title><rect x="50.5" y="1363.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.38%)</title><rect x="50.5" y="1347.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.38%)</title><rect x="50.5" y="1331.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.38%)</title><rect x="50.5" y="1315.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getString (1 samples, 0.38%)</title><rect x="50.5" y="1299.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="53.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.38%)</title><rect x="55.0" y="1363.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.38%)</title><rect x="55.0" y="1347.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.38%)</title><rect x="59.5" y="1379.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.29%)</title><rect x="64.0" y="1411.0" width="27.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.0" y="1422.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.53%)</title><rect x="64.0" y="1395.0" width="18.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.53%)</title><rect x="64.0" y="1379.0" width="18.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.53%)</title><rect x="64.0" y="1363.0" width="18.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.15%)</title><rect x="64.0" y="1347.0" width="13.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="67.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 1.15%)</title><rect x="64.0" y="1331.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.76%)</title><rect x="68.5" y="1315.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.76%)</title><rect x="68.5" y="1299.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.76%)</title><rect x="68.5" y="1283.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.76%)</title><rect x="68.5" y="1267.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.76%)</title><rect x="68.5" y="1251.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.76%)</title><rect x="68.5" y="1235.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.38%)</title><rect x="77.6" y="1347.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.38%)</title><rect x="77.6" y="1331.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.38%)</title><rect x="77.6" y="1315.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.6" y="1326.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.38%)</title><rect x="77.6" y="1299.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.6" y="1310.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.38%)</title><rect x="77.6" y="1283.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.6" y="1294.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.38%)</title><rect x="77.6" y="1267.0" width="4.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="80.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.38%)</title><rect x="82.1" y="1395.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.1" y="1406.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.38%)</title><rect x="82.1" y="1379.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="85.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.38%)</title><rect x="86.6" y="1395.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.38%)</title><rect x="86.6" y="1379.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.38%)</title><rect x="86.6" y="1363.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.6" y="1374.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.38%)</title><rect x="86.6" y="1347.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.6" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.38%)</title><rect x="86.6" y="1331.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.38%)</title><rect x="86.6" y="1315.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.38%)</title><rect x="91.1" y="1411.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="94.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.38%)</title><rect x="91.1" y="1395.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="94.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.38%)</title><rect x="91.1" y="1379.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.38%)</title><rect x="91.1" y="1363.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="94.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.38%)</title><rect x="91.1" y="1347.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="94.1" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.38%)</title><rect x="91.1" y="1331.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.1" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.38%)</title><rect x="91.1" y="1315.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.76%)</title><rect x="95.6" y="1427.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="98.6" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.38%)</title><rect x="95.6" y="1411.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="98.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.38%)</title><rect x="95.6" y="1395.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.38%)</title><rect x="95.6" y="1379.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.38%)</title><rect x="95.6" y="1363.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="98.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.38%)</title><rect x="95.6" y="1347.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.38%)</title><rect x="95.6" y="1331.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.38%)</title><rect x="100.1" y="1411.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="103.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.38%)</title><rect x="100.1" y="1395.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.38%)</title><rect x="100.1" y="1379.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.38%)</title><rect x="100.1" y="1363.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.38%)</title><rect x="100.1" y="1347.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.38%)</title><rect x="100.1" y="1331.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.38%)</title><rect x="100.1" y="1315.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.38%)</title><rect x="100.1" y="1299.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.38%)</title><rect x="100.1" y="1283.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type.isArray (1 samples, 0.38%)</title><rect x="100.1" y="1267.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.arrayElementType (1 samples, 0.38%)</title><rect x="100.1" y="1251.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.1" y="1262.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.38%)</title><rect x="100.1" y="1235.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.1" y="1246.0"></text>
</g>
<g>
<title>java/util/Optional.&lt;init&gt; (1 samples, 0.38%)</title><rect x="100.1" y="1219.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.1" y="1230.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.38%)</title><rect x="100.1" y="1203.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.38%)</title><rect x="104.6" y="1427.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="107.6" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.38%)</title><rect x="104.6" y="1411.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.38%)</title><rect x="104.6" y="1395.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="107.6" y="1406.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.38%)</title><rect x="109.1" y="1475.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="112.1" y="1486.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="109.1" y="1459.0" width="4.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="112.1" y="1470.0"></text>
</g>
<g>
<title>java/lang/Thread.run (161 samples, 61.45%)</title><rect x="113.6" y="1491.0" width="725.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.6" y="1502.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (161 samples, 61.45%)</title><rect x="113.6" y="1475.0" width="725.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="116.6" y="1486.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (161 samples, 61.45%)</title><rect x="113.6" y="1459.0" width="725.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.6" y="1470.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883020.run (153 samples, 58.40%)</title><rect x="122.6" y="1443.0" width="689.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="125.6" y="1454.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883020.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (153 samples, 58.40%)</title><rect x="122.6" y="1427.0" width="689.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="125.6" y="1438.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (153 samples, 58.40%)</title><rect x="122.6" y="1411.0" width="689.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.6" y="1422.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.38%)</title><rect x="127.1" y="1395.0" width="4.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="130.1" y="1406.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="127.1" y="1379.0" width="4.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="130.1" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (151 samples, 57.63%)</title><rect x="131.6" y="1395.0" width="680.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.6" y="1406.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (34 samples, 12.98%)</title><rect x="140.6" y="1379.0" width="153.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="143.6" y="1390.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (34 samples, 12.98%)</title><rect x="140.6" y="1363.0" width="153.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.6" y="1374.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (34 samples, 12.98%)</title><rect x="140.6" y="1347.0" width="153.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.6" y="1358.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (34 samples, 12.98%)</title><rect x="140.6" y="1331.0" width="153.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.6" y="1342.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (34 samples, 12.98%)</title><rect x="140.6" y="1315.0" width="153.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.6" y="1326.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (34 samples, 12.98%)</title><rect x="140.6" y="1299.0" width="153.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.6" y="1310.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 3.05%)</title><rect x="140.6" y="1283.0" width="36.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.6" y="1294.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.38%)</title><rect x="140.6" y="1267.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.6" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.38%)</title><rect x="140.6" y="1251.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.6" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.38%)</title><rect x="140.6" y="1235.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.38%)</title><rect x="140.6" y="1219.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="143.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.38%)</title><rect x="140.6" y="1203.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.67%)</title><rect x="145.1" y="1267.0" width="31.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.1" y="1278.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 2.67%)</title><rect x="145.1" y="1251.0" width="31.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.1" y="1262.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 1.53%)</title><rect x="145.1" y="1235.0" width="18.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 1.53%)</title><rect x="145.1" y="1219.0" width="18.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.1" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.38%)</title><rect x="163.1" y="1235.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.1" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.38%)</title><rect x="163.1" y="1219.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="166.1" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.38%)</title><rect x="163.1" y="1203.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="166.1" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.38%)</title><rect x="163.1" y="1187.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="166.1" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.38%)</title><rect x="163.1" y="1171.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="166.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.76%)</title><rect x="167.6" y="1235.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.6" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.38%)</title><rect x="167.6" y="1219.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.38%)</title><rect x="167.6" y="1203.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="170.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.38%)</title><rect x="172.1" y="1219.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.38%)</title><rect x="172.1" y="1203.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.1" y="1214.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.38%)</title><rect x="172.1" y="1187.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="175.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (22 samples, 8.40%)</title><rect x="176.6" y="1283.0" width="99.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.6" y="1294.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.38%)</title><rect x="176.6" y="1267.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.6" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.38%)</title><rect x="176.6" y="1251.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.6" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.38%)</title><rect x="176.6" y="1235.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.6" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.38%)</title><rect x="176.6" y="1219.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="179.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.38%)</title><rect x="176.6" y="1203.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.38%)</title><rect x="181.1" y="1267.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.38%)</title><rect x="181.1" y="1251.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.1" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 1.91%)</title><rect x="185.6" y="1267.0" width="22.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.6" y="1278.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.91%)</title><rect x="185.6" y="1251.0" width="22.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.6" y="1262.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 1.15%)</title><rect x="194.7" y="1235.0" width="13.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 1.15%)</title><rect x="194.7" y="1219.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.7" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.38%)</title><rect x="203.7" y="1203.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 1.15%)</title><rect x="208.2" y="1267.0" width="13.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.2" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 1.15%)</title><rect x="208.2" y="1251.0" width="13.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.2" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 1.15%)</title><rect x="208.2" y="1235.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 1.15%)</title><rect x="208.2" y="1219.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.2" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.76%)</title><rect x="208.2" y="1203.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.38%)</title><rect x="217.2" y="1203.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 4.58%)</title><rect x="221.7" y="1267.0" width="54.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.7" y="1278.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.38%)</title><rect x="221.7" y="1251.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.7" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.38%)</title><rect x="221.7" y="1235.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 4.20%)</title><rect x="226.2" y="1251.0" width="49.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.2" y="1262.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 4.20%)</title><rect x="226.2" y="1235.0" width="49.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.2" y="1246.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (11 samples, 4.20%)</title><rect x="226.2" y="1219.0" width="49.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.2" y="1230.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 2.67%)</title><rect x="226.2" y="1203.0" width="31.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.2" y="1214.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.76%)</title><rect x="239.7" y="1187.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.76%)</title><rect x="239.7" y="1171.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.76%)</title><rect x="239.7" y="1155.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.76%)</title><rect x="239.7" y="1139.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.38%)</title><rect x="248.7" y="1187.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.38%)</title><rect x="253.2" y="1187.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.38%)</title><rect x="253.2" y="1171.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.38%)</title><rect x="253.2" y="1155.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.38%)</title><rect x="257.7" y="1203.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.38%)</title><rect x="262.2" y="1203.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.38%)</title><rect x="266.7" y="1203.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.38%)</title><rect x="266.7" y="1187.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.38%)</title><rect x="266.7" y="1171.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.38%)</title><rect x="266.7" y="1155.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.38%)</title><rect x="266.7" y="1139.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.7" y="1150.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.38%)</title><rect x="266.7" y="1123.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.7" y="1134.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.38%)</title><rect x="266.7" y="1107.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.38%)</title><rect x="271.2" y="1203.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.53%)</title><rect x="275.7" y="1283.0" width="18.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.7" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 1.53%)</title><rect x="275.7" y="1267.0" width="18.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.7" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 1.53%)</title><rect x="275.7" y="1251.0" width="18.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.7" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 1.53%)</title><rect x="275.7" y="1235.0" width="18.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.53%)</title><rect x="275.7" y="1219.0" width="18.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.38%)</title><rect x="289.2" y="1203.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (109 samples, 41.60%)</title><rect x="293.7" y="1379.0" width="491.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.7" y="1390.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (23 samples, 8.78%)</title><rect x="293.7" y="1363.0" width="103.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.7" y="1374.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.38%)</title><rect x="302.7" y="1347.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.7" y="1358.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (20 samples, 7.63%)</title><rect x="307.3" y="1347.0" width="90.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.3" y="1358.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (19 samples, 7.25%)</title><rect x="311.8" y="1331.0" width="85.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.8" y="1342.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 3.44%)</title><rect x="316.3" y="1315.0" width="40.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.3" y="1326.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 3.44%)</title><rect x="316.3" y="1299.0" width="40.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.3" y="1310.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.76%)</title><rect x="347.8" y="1283.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="350.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.76%)</title><rect x="347.8" y="1267.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.76%)</title><rect x="347.8" y="1251.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="350.8" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 3.44%)</title><rect x="356.8" y="1315.0" width="40.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="359.8" y="1326.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 3.44%)</title><rect x="356.8" y="1299.0" width="40.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.8" y="1310.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.76%)</title><rect x="356.8" y="1283.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.76%)</title><rect x="356.8" y="1267.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="359.8" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 2.67%)</title><rect x="365.8" y="1283.0" width="31.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.8" y="1294.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.38%)</title><rect x="397.3" y="1363.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.3" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.38%)</title><rect x="397.3" y="1347.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.3" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.38%)</title><rect x="397.3" y="1331.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="400.3" y="1342.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.38%)</title><rect x="397.3" y="1315.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="400.3" y="1326.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.38%)</title><rect x="397.3" y="1299.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="400.3" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.38%)</title><rect x="397.3" y="1283.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="400.3" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.38%)</title><rect x="397.3" y="1267.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="400.3" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.38%)</title><rect x="397.3" y="1251.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="400.3" y="1262.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.38%)</title><rect x="397.3" y="1235.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="400.3" y="1246.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.38%)</title><rect x="397.3" y="1219.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="400.3" y="1230.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.38%)</title><rect x="397.3" y="1203.0" width="4.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="400.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (24 samples, 9.16%)</title><rect x="401.8" y="1363.0" width="108.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.8" y="1374.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (24 samples, 9.16%)</title><rect x="401.8" y="1347.0" width="108.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.8" y="1358.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 5.73%)</title><rect x="410.8" y="1331.0" width="67.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.8" y="1342.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.38%)</title><rect x="437.9" y="1315.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.38%)</title><rect x="437.9" y="1299.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="440.9" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.38%)</title><rect x="437.9" y="1283.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="440.9" y="1294.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.38%)</title><rect x="437.9" y="1267.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="440.9" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.38%)</title><rect x="437.9" y="1251.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="440.9" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.38%)</title><rect x="437.9" y="1235.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="440.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.91%)</title><rect x="442.4" y="1315.0" width="22.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.4" y="1326.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.91%)</title><rect x="442.4" y="1299.0" width="22.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="445.4" y="1310.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.15%)</title><rect x="446.9" y="1283.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="449.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.15%)</title><rect x="446.9" y="1267.0" width="13.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="449.9" y="1278.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.15%)</title><rect x="446.9" y="1251.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.9" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.15%)</title><rect x="446.9" y="1235.0" width="13.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="449.9" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 1.15%)</title><rect x="446.9" y="1219.0" width="13.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="449.9" y="1230.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 1.15%)</title><rect x="446.9" y="1203.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="449.9" y="1214.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 1.15%)</title><rect x="446.9" y="1187.0" width="13.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="449.9" y="1198.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.38%)</title><rect x="451.4" y="1171.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="454.4" y="1182.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.38%)</title><rect x="451.4" y="1155.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="454.4" y="1166.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.38%)</title><rect x="455.9" y="1171.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="458.9" y="1182.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.38%)</title><rect x="460.4" y="1283.0" width="4.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="463.4" y="1294.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.38%)</title><rect x="464.9" y="1315.0" width="4.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="467.9" y="1326.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.76%)</title><rect x="469.4" y="1315.0" width="9.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="472.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.38%)</title><rect x="478.4" y="1331.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.38%)</title><rect x="478.4" y="1315.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="481.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.38%)</title><rect x="478.4" y="1299.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="481.4" y="1310.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.29%)</title><rect x="482.9" y="1331.0" width="27.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.9" y="1342.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 2.29%)</title><rect x="482.9" y="1315.0" width="27.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.9" y="1326.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.76%)</title><rect x="482.9" y="1299.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.9" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.76%)</title><rect x="482.9" y="1283.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.9" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.53%)</title><rect x="491.9" y="1299.0" width="18.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="494.9" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.53%)</title><rect x="491.9" y="1283.0" width="18.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="494.9" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.53%)</title><rect x="491.9" y="1267.0" width="18.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="494.9" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.76%)</title><rect x="500.9" y="1251.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="503.9" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (53 samples, 20.23%)</title><rect x="509.9" y="1363.0" width="238.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="512.9" y="1374.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (53 samples, 20.23%)</title><rect x="509.9" y="1347.0" width="238.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="512.9" y="1358.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/588734280.process (48 samples, 18.32%)</title><rect x="514.4" y="1331.0" width="216.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="517.4" y="1342.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (48 samples, 18.32%)</title><rect x="514.4" y="1315.0" width="216.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="517.4" y="1326.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (48 samples, 18.32%)</title><rect x="514.4" y="1299.0" width="216.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="517.4" y="1310.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.38%)</title><rect x="514.4" y="1283.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="517.4" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.38%)</title><rect x="514.4" y="1267.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="517.4" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.38%)</title><rect x="514.4" y="1251.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="517.4" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.38%)</title><rect x="514.4" y="1235.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="517.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.38%)</title><rect x="514.4" y="1219.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="517.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (47 samples, 17.94%)</title><rect x="518.9" y="1283.0" width="211.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="521.9" y="1294.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (46 samples, 17.56%)</title><rect x="518.9" y="1267.0" width="207.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="521.9" y="1278.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (37 samples, 14.12%)</title><rect x="550.5" y="1251.0" width="166.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="553.5" y="1262.0">JVM_Sleep</text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="559.5" y="1235.0" width="4.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="562.5" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.76%)</title><rect x="564.0" y="1235.0" width="9.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="567.0" y="1246.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.38%)</title><rect x="573.0" y="1235.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="576.0" y="1246.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (31 samples, 11.83%)</title><rect x="577.5" y="1235.0" width="139.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="580.5" y="1246.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.38%)</title><rect x="613.5" y="1219.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="616.5" y="1230.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.38%)</title><rect x="618.0" y="1219.0" width="4.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="621.0" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.38%)</title><rect x="622.5" y="1219.0" width="4.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="625.5" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="622.5" y="1203.0" width="4.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="625.5" y="1214.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.76%)</title><rect x="627.0" y="1219.0" width="9.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="630.0" y="1230.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.38%)</title><rect x="636.0" y="1219.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="639.0" y="1230.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 4.58%)</title><rect x="640.5" y="1219.0" width="54.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="643.5" y="1230.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.76%)</title><rect x="694.6" y="1219.0" width="9.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="697.6" y="1230.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.15%)</title><rect x="703.6" y="1219.0" width="13.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="706.6" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.38%)</title><rect x="717.1" y="1251.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="720.1" y="1262.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.38%)</title><rect x="721.6" y="1251.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="724.6" y="1262.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.38%)</title><rect x="726.1" y="1267.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="729.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.38%)</title><rect x="730.6" y="1331.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="733.6" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.38%)</title><rect x="730.6" y="1315.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="733.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.76%)</title><rect x="735.1" y="1331.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="738.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.76%)</title><rect x="735.1" y="1315.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/589821885.get$Lambda (2 samples, 0.76%)</title><rect x="735.1" y="1299.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="738.1" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/589821885.&lt;init&gt; (2 samples, 0.76%)</title><rect x="735.1" y="1283.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="738.1" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.38%)</title><rect x="744.1" y="1331.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="747.1" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.38%)</title><rect x="744.1" y="1315.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.05%)</title><rect x="748.6" y="1363.0" width="36.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="751.6" y="1374.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 3.05%)</title><rect x="748.6" y="1347.0" width="36.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="751.6" y="1358.0">jav..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.38%)</title><rect x="775.6" y="1331.0" width="4.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="778.6" y="1342.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="775.6" y="1315.0" width="4.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="778.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.38%)</title><rect x="780.2" y="1331.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="783.2" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/636502435.accept (1 samples, 0.38%)</title><rect x="780.2" y="1315.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.2" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.38%)</title><rect x="780.2" y="1299.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.38%)</title><rect x="780.2" y="1283.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="783.2" y="1294.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.38%)</title><rect x="780.2" y="1267.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="783.2" y="1278.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.38%)</title><rect x="780.2" y="1251.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.53%)</title><rect x="784.7" y="1379.0" width="18.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.7" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.53%)</title><rect x="784.7" y="1363.0" width="18.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="787.7" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.15%)</title><rect x="789.2" y="1347.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="792.2" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/636502435.accept (3 samples, 1.15%)</title><rect x="789.2" y="1331.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="792.2" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (3 samples, 1.15%)</title><rect x="789.2" y="1315.0" width="13.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="792.2" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 1.15%)</title><rect x="789.2" y="1299.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="792.2" y="1310.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.15%)</title><rect x="789.2" y="1283.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="792.2" y="1294.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 1.15%)</title><rect x="789.2" y="1267.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="792.2" y="1278.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.76%)</title><rect x="802.7" y="1379.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="805.7" y="1390.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.76%)</title><rect x="802.7" y="1363.0" width="9.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="805.7" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.29%)</title><rect x="811.7" y="1443.0" width="27.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.7" y="1454.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.91%)</title><rect x="816.2" y="1427.0" width="22.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="819.2" y="1438.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.53%)</title><rect x="820.7" y="1411.0" width="18.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.7" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.53%)</title><rect x="820.7" y="1395.0" width="18.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="823.7" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.53%)</title><rect x="820.7" y="1379.0" width="18.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="823.7" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.53%)</title><rect x="820.7" y="1363.0" width="18.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="823.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.38%)</title><rect x="838.7" y="1491.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="841.7" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.38%)</title><rect x="838.7" y="1475.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="841.7" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.38%)</title><rect x="838.7" y="1459.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="841.7" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.38%)</title><rect x="838.7" y="1443.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="841.7" y="1454.0"></text>
</g>
<g>
<title>start_thread (77 samples, 29.39%)</title><rect x="843.2" y="1491.0" width="346.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="846.2" y="1502.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (77 samples, 29.39%)</title><rect x="843.2" y="1475.0" width="346.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="846.2" y="1486.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (5 samples, 1.91%)</title><rect x="843.2" y="1459.0" width="22.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="846.2" y="1470.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 1.15%)</title><rect x="843.2" y="1443.0" width="13.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="846.2" y="1454.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.15%)</title><rect x="843.2" y="1427.0" width="13.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="846.2" y="1438.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.15%)</title><rect x="843.2" y="1411.0" width="13.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="846.2" y="1422.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.76%)</title><rect x="847.7" y="1395.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="850.7" y="1406.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.38%)</title><rect x="852.2" y="1379.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="855.2" y="1390.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.38%)</title><rect x="856.7" y="1443.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="859.7" y="1454.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.38%)</title><rect x="861.2" y="1443.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="864.2" y="1454.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.38%)</title><rect x="861.2" y="1427.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="864.2" y="1438.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.38%)</title><rect x="861.2" y="1411.0" width="4.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="864.2" y="1422.0"></text>
</g>
<g>
<title>JavaThread::run() (72 samples, 27.48%)</title><rect x="865.7" y="1459.0" width="324.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="868.7" y="1470.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (72 samples, 27.48%)</title><rect x="865.7" y="1443.0" width="324.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="868.7" y="1454.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (72 samples, 27.48%)</title><rect x="865.7" y="1427.0" width="324.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="868.7" y="1438.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (72 samples, 27.48%)</title><rect x="865.7" y="1411.0" width="324.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="868.7" y="1422.0">CompileBroker::invoke_compiler_on_method(Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (68 samples, 25.95%)</title><rect x="865.7" y="1395.0" width="306.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="868.7" y="1406.0">C2Compiler::compile_method(ciEnv*, ciMeth..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (68 samples, 25.95%)</title><rect x="865.7" y="1379.0" width="306.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.7" y="1390.0">Compile::Compile(ciEnv*, C2Compiler*, ciM..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.38%)</title><rect x="865.7" y="1363.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="868.7" y="1374.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.38%)</title><rect x="865.7" y="1347.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="868.7" y="1358.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.38%)</title><rect x="865.7" y="1331.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="868.7" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.38%)</title><rect x="865.7" y="1315.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="868.7" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.38%)</title><rect x="865.7" y="1299.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="868.7" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="865.7" y="1283.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="868.7" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="865.7" y="1267.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="868.7" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="865.7" y="1251.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="868.7" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="865.7" y="1235.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="868.7" y="1246.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.38%)</title><rect x="865.7" y="1219.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="868.7" y="1230.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="865.7" y="1203.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="868.7" y="1214.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="865.7" y="1187.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="868.7" y="1198.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="865.7" y="1171.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="868.7" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.38%)</title><rect x="865.7" y="1155.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="868.7" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::find_interface_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.38%)</title><rect x="865.7" y="1139.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="868.7" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.38%)</title><rect x="865.7" y="1123.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.7" y="1134.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 14.50%)</title><rect x="870.2" y="1363.0" width="171.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="873.2" y="1374.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.38%)</title><rect x="870.2" y="1347.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="873.2" y="1358.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.38%)</title><rect x="870.2" y="1331.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="873.2" y="1342.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.38%)</title><rect x="870.2" y="1315.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="873.2" y="1326.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.38%)</title><rect x="870.2" y="1299.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="873.2" y="1310.0"></text>
</g>
<g>
<title>storeImmCM0_regNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.38%)</title><rect x="870.2" y="1283.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="873.2" y="1294.0"></text>
</g>
<g>
<title>Assembler::movb(Address, RegisterImpl*) (1 samples, 0.38%)</title><rect x="870.2" y="1267.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="873.2" y="1278.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.76%)</title><rect x="874.7" y="1347.0" width="9.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="877.7" y="1358.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.38%)</title><rect x="874.7" y="1331.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.7" y="1342.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.38%)</title><rect x="874.7" y="1315.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="877.7" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.38%)</title><rect x="874.7" y="1299.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="877.7" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.38%)</title><rect x="879.2" y="1331.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.2" y="1342.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.38%)</title><rect x="879.2" y="1315.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="882.2" y="1326.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.53%)</title><rect x="883.7" y="1347.0" width="18.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="886.7" y="1358.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.53%)</title><rect x="883.7" y="1331.0" width="18.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="886.7" y="1342.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.76%)</title><rect x="888.2" y="1315.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="891.2" y="1326.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.38%)</title><rect x="897.3" y="1315.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="900.3" y="1326.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.38%)</title><rect x="897.3" y="1299.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="900.3" y="1310.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.38%)</title><rect x="897.3" y="1283.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="900.3" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.76%)</title><rect x="901.8" y="1347.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="904.8" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.76%)</title><rect x="901.8" y="1331.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="904.8" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.38%)</title><rect x="901.8" y="1315.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="904.8" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="906.3" y="1315.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="909.3" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.38%)</title><rect x="906.3" y="1299.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="909.3" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (29 samples, 11.07%)</title><rect x="910.8" y="1347.0" width="130.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="913.8" y="1358.0">PhaseChaitin::Re..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.76%)</title><rect x="910.8" y="1331.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="913.8" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.38%)</title><rect x="915.3" y="1315.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="918.3" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.76%)</title><rect x="919.8" y="1331.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="922.8" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.76%)</title><rect x="919.8" y="1315.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.8" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.76%)</title><rect x="919.8" y="1299.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.8" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.76%)</title><rect x="928.8" y="1331.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.8" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.76%)</title><rect x="928.8" y="1315.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="931.8" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.76%)</title><rect x="928.8" y="1299.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.8" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.15%)</title><rect x="937.8" y="1331.0" width="13.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="940.8" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.29%)</title><rect x="951.3" y="1331.0" width="27.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="954.3" y="1342.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.15%)</title><rect x="964.8" y="1315.0" width="13.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="967.8" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="973.8" y="1299.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="976.8" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.76%)</title><rect x="978.3" y="1331.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.3" y="1342.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.38%)</title><rect x="982.8" y="1315.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.8" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.38%)</title><rect x="987.3" y="1331.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.3" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.38%)</title><rect x="991.8" y="1331.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.8" y="1342.0"></text>
</g>
<g>
<title>loadConL0Node::bottom_type() const (1 samples, 0.38%)</title><rect x="991.8" y="1315.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.8" y="1326.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="991.8" y="1299.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="994.8" y="1310.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (7 samples, 2.67%)</title><rect x="996.3" y="1331.0" width="31.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.3" y="1342.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 2.67%)</title><rect x="996.3" y="1315.0" width="31.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="999.3" y="1326.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 2.67%)</title><rect x="996.3" y="1299.0" width="31.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="999.3" y="1310.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.38%)</title><rect x="996.3" y="1283.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="999.3" y="1294.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.53%)</title><rect x="1000.8" y="1283.0" width="18.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1003.8" y="1294.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="1014.4" y="1267.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.4" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.76%)</title><rect x="1018.9" y="1283.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1021.9" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.38%)</title><rect x="1027.9" y="1331.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.9" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="1027.9" y="1315.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1030.9" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.76%)</title><rect x="1032.4" y="1331.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1035.4" y="1342.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="1036.9" y="1315.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1039.9" y="1326.0"></text>
</g>
<g>
<title>Compile::Optimize() (23 samples, 8.78%)</title><rect x="1041.4" y="1363.0" width="103.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1044.4" y="1374.0">Compile::Opt..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.38%)</title><rect x="1041.4" y="1347.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1044.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.38%)</title><rect x="1041.4" y="1331.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1044.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1041.4" y="1315.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.4" y="1326.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.76%)</title><rect x="1045.9" y="1347.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.9" y="1358.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.38%)</title><rect x="1050.4" y="1331.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1053.4" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (18 samples, 6.87%)</title><rect x="1054.9" y="1347.0" width="81.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.9" y="1358.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.15%)</title><rect x="1054.9" y="1331.0" width="13.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.9" y="1342.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.38%)</title><rect x="1063.9" y="1315.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 5.73%)</title><rect x="1068.4" y="1331.0" width="67.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1071.4" y="1342.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 4.20%)</title><rect x="1086.4" y="1315.0" width="49.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.4" y="1326.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 4.20%)</title><rect x="1086.4" y="1299.0" width="49.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.4" y="1310.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.15%)</title><rect x="1122.4" y="1283.0" width="13.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.4" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.38%)</title><rect x="1136.0" y="1347.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.0" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.38%)</title><rect x="1136.0" y="1331.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.0" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.38%)</title><rect x="1136.0" y="1315.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.38%)</title><rect x="1136.0" y="1299.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.0" y="1310.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.38%)</title><rect x="1140.5" y="1347.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.5" y="1358.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.38%)</title><rect x="1140.5" y="1331.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.5" y="1342.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1140.5" y="1315.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.5" y="1326.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.38%)</title><rect x="1140.5" y="1299.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.5" y="1310.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.38%)</title><rect x="1140.5" y="1283.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.5" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.91%)</title><rect x="1145.0" y="1363.0" width="22.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.0" y="1374.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.91%)</title><rect x="1145.0" y="1347.0" width="22.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.0" y="1358.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.91%)</title><rect x="1145.0" y="1331.0" width="22.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.0" y="1342.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.91%)</title><rect x="1145.0" y="1315.0" width="22.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.0" y="1326.0">P..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.38%)</title><rect x="1145.0" y="1299.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.0" y="1310.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.38%)</title><rect x="1145.0" y="1283.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.0" y="1294.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.38%)</title><rect x="1145.0" y="1267.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.0" y="1278.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.38%)</title><rect x="1145.0" y="1251.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.53%)</title><rect x="1149.5" y="1299.0" width="18.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.15%)</title><rect x="1149.5" y="1283.0" width="13.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.5" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.15%)</title><rect x="1149.5" y="1267.0" width="13.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.5" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.15%)</title><rect x="1149.5" y="1251.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.15%)</title><rect x="1149.5" y="1235.0" width="13.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.15%)</title><rect x="1149.5" y="1219.0" width="13.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.15%)</title><rect x="1149.5" y="1203.0" width="13.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.15%)</title><rect x="1149.5" y="1187.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1149.5" y="1171.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1149.5" y="1155.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1149.5" y="1139.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1149.5" y="1123.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1149.5" y="1107.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1149.5" y="1091.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1149.5" y="1075.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1149.5" y="1059.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1149.5" y="1043.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1149.5" y="1027.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1149.5" y="1011.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1149.5" y="995.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="1006.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1149.5" y="979.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="990.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.38%)</title><rect x="1149.5" y="963.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.38%)</title><rect x="1149.5" y="947.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.38%)</title><rect x="1149.5" y="931.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.5" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.38%)</title><rect x="1149.5" y="915.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1149.5" y="899.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1149.5" y="883.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.5" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="1149.5" y="867.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.5" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.38%)</title><rect x="1149.5" y="851.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.5" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.38%)</title><rect x="1149.5" y="835.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1149.5" y="819.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1149.5" y="803.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.38%)</title><rect x="1149.5" y="787.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.5" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.38%)</title><rect x="1149.5" y="771.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.5" y="782.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1149.5" y="755.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="766.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.38%)</title><rect x="1149.5" y="739.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="750.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.38%)</title><rect x="1149.5" y="723.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.5" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.38%)</title><rect x="1149.5" y="707.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.76%)</title><rect x="1154.0" y="1171.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.0" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.76%)</title><rect x="1154.0" y="1155.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.0" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.76%)</title><rect x="1154.0" y="1139.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.76%)</title><rect x="1154.0" y="1123.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.76%)</title><rect x="1154.0" y="1107.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.76%)</title><rect x="1154.0" y="1091.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.76%)</title><rect x="1154.0" y="1075.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.0" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.76%)</title><rect x="1154.0" y="1059.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.0" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.76%)</title><rect x="1154.0" y="1043.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.76%)</title><rect x="1154.0" y="1027.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.76%)</title><rect x="1154.0" y="1011.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.76%)</title><rect x="1154.0" y="995.0" width="9.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.76%)</title><rect x="1154.0" y="979.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.0" y="990.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.38%)</title><rect x="1154.0" y="963.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.0" y="974.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.38%)</title><rect x="1154.0" y="947.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.0" y="958.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.38%)</title><rect x="1154.0" y="931.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.0" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1154.0" y="915.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.0" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="1154.0" y="899.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.0" y="910.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.38%)</title><rect x="1154.0" y="883.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.0" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.5" y="963.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.5" y="947.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.5" y="931.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.5" y="915.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.5" y="899.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.5" y="883.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.5" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.5" y="867.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.5" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.5" y="851.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.5" y="835.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.5" y="819.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.5" y="803.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.5" y="787.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.5" y="771.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.5" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.5" y="755.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.5" y="739.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.5" y="723.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.5" y="707.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.5" y="691.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.5" y="675.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.5" y="659.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.5" y="643.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.5" y="627.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.5" y="611.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.5" y="595.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.5" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.5" y="579.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.5" y="563.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.5" y="547.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.5" y="531.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.5" y="515.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.5" y="499.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.5" y="483.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.5" y="467.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.5" y="451.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.5" y="435.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.5" y="419.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.5" y="403.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.5" y="387.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.5" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.5" y="371.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.5" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.5" y="355.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.5" y="339.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.5" y="323.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.5" y="307.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.5" y="291.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.5" y="302.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1158.5" y="275.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.5" y="286.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.38%)</title><rect x="1158.5" y="259.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.5" y="270.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.38%)</title><rect x="1158.5" y="243.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.5" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.38%)</title><rect x="1158.5" y="227.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.5" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.38%)</title><rect x="1158.5" y="211.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.5" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1158.5" y="195.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.5" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1158.5" y="179.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.5" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="1158.5" y="163.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.5" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putfield(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="1158.5" y="147.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.5" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.38%)</title><rect x="1158.5" y="131.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.5" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1158.5" y="115.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.5" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1158.5" y="99.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.5" y="110.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1158.5" y="83.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.5" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1158.5" y="67.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.5" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1158.5" y="51.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.5" y="62.0"></text>
</g>
<g>
<title>ciEnv::check_klass_accessibility(ciKlass*, Klass*) (1 samples, 0.38%)</title><rect x="1158.5" y="35.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.38%)</title><rect x="1163.0" y="1283.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.38%)</title><rect x="1163.0" y="1267.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.0" y="1278.0"></text>
</g>
<g>
<title>Parse::push_constant(ciConstant, bool, bool, Type const*) (1 samples, 0.38%)</title><rect x="1163.0" y="1251.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.0" y="1262.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.38%)</title><rect x="1163.0" y="1235.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.0" y="1246.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.38%)</title><rect x="1163.0" y="1219.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.0" y="1230.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.38%)</title><rect x="1167.5" y="1363.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.5" y="1374.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.38%)</title><rect x="1167.5" y="1347.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.5" y="1358.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.38%)</title><rect x="1167.5" y="1331.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.5" y="1342.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.15%)</title><rect x="1172.0" y="1395.0" width="13.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.0" y="1406.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.15%)</title><rect x="1172.0" y="1379.0" width="13.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.0" y="1390.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.15%)</title><rect x="1172.0" y="1363.0" width="13.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="1374.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.76%)</title><rect x="1172.0" y="1347.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.0" y="1358.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.38%)</title><rect x="1172.0" y="1331.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.0" y="1342.0"></text>
</g>
<g>
<title>IR::split_critical_edges() (1 samples, 0.38%)</title><rect x="1172.0" y="1315.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.0" y="1326.0"></text>
</g>
<g>
<title>BlockBegin::insert_block_between(BlockBegin*) (1 samples, 0.38%)</title><rect x="1172.0" y="1299.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.0" y="1310.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.38%)</title><rect x="1176.5" y="1331.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.5" y="1342.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.38%)</title><rect x="1176.5" y="1315.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.5" y="1326.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.38%)</title><rect x="1176.5" y="1299.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.5" y="1310.0"></text>
</g>
<g>
<title>LIR_Assembler::move_op(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool) (1 samples, 0.38%)</title><rect x="1176.5" y="1283.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.5" y="1294.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.38%)</title><rect x="1181.0" y="1347.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="1358.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.38%)</title><rect x="1181.0" y="1331.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="1342.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.38%)</title><rect x="1181.0" y="1315.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="1326.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.38%)</title><rect x="1181.0" y="1299.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="1310.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.38%)</title><rect x="1181.0" y="1283.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="1294.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.38%)</title><rect x="1185.5" y="1395.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.5" y="1406.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.38%)</title><rect x="1185.5" y="1379.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="1390.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.38%)</title><rect x="1185.5" y="1363.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.5" y="1374.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.38%)</title><rect x="1185.5" y="1347.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="1358.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.38%)</title><rect x="1185.5" y="1331.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="1342.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.38%)</title><rect x="1185.5" y="1315.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="1326.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.38%)</title><rect x="1185.5" y="1299.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.5" y="1310.0"></text>
</g>
</g>
</svg>
