<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (969 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (254 samples, 26.21%)</title><rect x="10.0" y="547.0" width="309.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="558.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (254 samples, 26.21%)</title><rect x="10.0" y="531.0" width="309.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="542.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.31%)</title><rect x="10.0" y="515.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.31%)</title><rect x="10.0" y="499.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/24125126.accept (3 samples, 0.31%)</title><rect x="10.0" y="483.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.31%)</title><rect x="10.0" y="467.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.21%)</title><rect x="11.2" y="451.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.10%)</title><rect x="12.4" y="435.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.4" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.31%)</title><rect x="13.7" y="515.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.31%)</title><rect x="13.7" y="499.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.7" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.31%)</title><rect x="13.7" y="483.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.31%)</title><rect x="13.7" y="467.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.7" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.31%)</title><rect x="13.7" y="451.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.7" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.31%)</title><rect x="13.7" y="435.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.7" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.31%)</title><rect x="13.7" y="419.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="13.7" y="403.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.7" y="414.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="14.9" y="403.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.9" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="16.1" y="403.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="16.1" y="387.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="398.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="16.1" y="371.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.1" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="16.1" y="355.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.1" y="366.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$169/199823400.get (1 samples, 0.10%)</title><rect x="16.1" y="339.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.10%)</title><rect x="17.3" y="515.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.3" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="17.3" y="499.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.3" y="510.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (204 samples, 21.05%)</title><rect x="18.5" y="515.0" width="248.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.5" y="526.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/943125262.accept (201 samples, 20.74%)</title><rect x="18.5" y="499.0" width="244.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.5" y="510.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (201 samples, 20.74%)</title><rect x="18.5" y="483.0" width="244.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.5" y="494.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (156 samples, 16.10%)</title><rect x="22.2" y="467.0" width="189.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.2" y="478.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (156 samples, 16.10%)</title><rect x="22.2" y="451.0" width="189.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.2" y="462.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (156 samples, 16.10%)</title><rect x="22.2" y="435.0" width="189.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="446.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (156 samples, 16.10%)</title><rect x="22.2" y="419.0" width="189.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.2" y="430.0">java/util/concurrent/Exec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (156 samples, 16.10%)</title><rect x="22.2" y="403.0" width="189.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.2" y="414.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (156 samples, 16.10%)</title><rect x="22.2" y="387.0" width="189.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.2" y="398.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (111 samples, 11.46%)</title><rect x="22.2" y="371.0" width="135.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.2" y="382.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (29 samples, 2.99%)</title><rect x="22.2" y="355.0" width="35.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="366.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (29 samples, 2.99%)</title><rect x="22.2" y="339.0" width="35.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.2" y="350.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 2.68%)</title><rect x="25.8" y="323.0" width="31.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.8" y="334.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (26 samples, 2.68%)</title><rect x="25.8" y="307.0" width="31.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.8" y="318.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.52%)</title><rect x="57.5" y="355.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.52%)</title><rect x="57.5" y="339.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.10%)</title><rect x="59.9" y="323.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.9" y="334.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.10%)</title><rect x="59.9" y="307.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="62.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.21%)</title><rect x="61.1" y="323.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (77 samples, 7.95%)</title><rect x="63.6" y="355.0" width="93.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.6" y="366.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (77 samples, 7.95%)</title><rect x="63.6" y="339.0" width="93.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.6" y="350.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (74 samples, 7.64%)</title><rect x="64.8" y="323.0" width="90.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.8" y="334.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (74 samples, 7.64%)</title><rect x="64.8" y="307.0" width="90.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.8" y="318.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (73 samples, 7.53%)</title><rect x="66.0" y="291.0" width="88.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.0" y="302.0">sun/misc/U..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="69.7" y="275.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="72.7" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark (61 samples, 6.30%)</title><rect x="70.9" y="275.0" width="74.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="73.9" y="286.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.21%)</title><rect x="70.9" y="259.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="73.9" y="270.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.21%)</title><rect x="73.3" y="259.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="76.3" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.21%)</title><rect x="75.8" y="259.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="78.8" y="270.0"></text>
</g>
<g>
<title>__pthread_cond_signal (37 samples, 3.82%)</title><rect x="78.2" y="259.0" width="45.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="81.2" y="270.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.31%)</title><rect x="123.3" y="259.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="126.3" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.55%)</title><rect x="126.9" y="259.0" width="18.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="129.9" y="270.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.10%)</title><rect x="145.2" y="275.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="148.2" y="286.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.41%)</title><rect x="146.4" y="275.0" width="4.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="149.4" y="286.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.31%)</title><rect x="151.3" y="275.0" width="3.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="154.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.21%)</title><rect x="154.9" y="323.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.21%)</title><rect x="157.3" y="371.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="160.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.21%)</title><rect x="157.3" y="355.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.21%)</title><rect x="157.3" y="339.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="160.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (43 samples, 4.44%)</title><rect x="159.8" y="371.0" width="52.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.8" y="382.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (43 samples, 4.44%)</title><rect x="159.8" y="355.0" width="52.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="162.8" y="366.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="159.8" y="339.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.10%)</title><rect x="159.8" y="323.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (42 samples, 4.33%)</title><rect x="161.0" y="339.0" width="51.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.0" y="350.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.21%)</title><rect x="207.3" y="323.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.3" y="334.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.21%)</title><rect x="209.7" y="323.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="212.7" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (6 samples, 0.62%)</title><rect x="212.1" y="467.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.1" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (6 samples, 0.62%)</title><rect x="212.1" y="451.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.1" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.21%)</title><rect x="219.5" y="467.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.21%)</title><rect x="219.5" y="451.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.5" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.21%)</title><rect x="219.5" y="435.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.5" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (30 samples, 3.10%)</title><rect x="221.9" y="467.0" width="36.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.9" y="478.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 3.10%)</title><rect x="221.9" y="451.0" width="36.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.9" y="462.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.72%)</title><rect x="245.0" y="435.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.0" y="446.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.10%)</title><rect x="246.2" y="419.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.2" y="430.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.10%)</title><rect x="246.2" y="403.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.2" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="246.2" y="387.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.2" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.31%)</title><rect x="247.5" y="419.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.5" y="430.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.21%)</title><rect x="251.1" y="419.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.1" y="430.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.41%)</title><rect x="253.6" y="435.0" width="4.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="256.6" y="446.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.41%)</title><rect x="258.4" y="467.0" width="4.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="261.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.31%)</title><rect x="263.3" y="499.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.31%)</title><rect x="263.3" y="483.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.31%)</title><rect x="263.3" y="467.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.31%)</title><rect x="263.3" y="451.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (43 samples, 4.44%)</title><rect x="266.9" y="515.0" width="52.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.9" y="526.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (43 samples, 4.44%)</title><rect x="266.9" y="499.0" width="52.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.9" y="510.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.10%)</title><rect x="266.9" y="483.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (22 samples, 2.27%)</title><rect x="268.2" y="483.0" width="26.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="271.2" y="494.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (22 samples, 2.27%)</title><rect x="268.2" y="467.0" width="26.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.2" y="478.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (22 samples, 2.27%)</title><rect x="268.2" y="451.0" width="26.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.2" y="462.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (18 samples, 1.86%)</title><rect x="268.2" y="435.0" width="21.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.2" y="446.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (18 samples, 1.86%)</title><rect x="268.2" y="419.0" width="21.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.2" y="430.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (8 samples, 0.83%)</title><rect x="270.6" y="403.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.52%)</title><rect x="274.3" y="387.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.52%)</title><rect x="274.3" y="371.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.3" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.52%)</title><rect x="274.3" y="355.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.3" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.52%)</title><rect x="274.3" y="339.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.3" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.52%)</title><rect x="274.3" y="323.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.3" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.52%)</title><rect x="274.3" y="307.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.3" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.52%)</title><rect x="274.3" y="291.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.3" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (7 samples, 0.72%)</title><rect x="280.3" y="403.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.3" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.72%)</title><rect x="280.3" y="387.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="283.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.52%)</title><rect x="280.3" y="371.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.3" y="382.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.52%)</title><rect x="280.3" y="355.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.3" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="285.2" y="339.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="288.2" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.21%)</title><rect x="286.4" y="371.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.4" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.21%)</title><rect x="286.4" y="355.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.4" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.10%)</title><rect x="288.9" y="403.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.21%)</title><rect x="290.1" y="435.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.21%)</title><rect x="290.1" y="419.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.21%)</title><rect x="290.1" y="403.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="293.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.21%)</title><rect x="290.1" y="387.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="293.1" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.21%)</title><rect x="290.1" y="371.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.1" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.21%)</title><rect x="292.5" y="435.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.21%)</title><rect x="292.5" y="419.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.10%)</title><rect x="292.5" y="403.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.5" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="292.5" y="387.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.10%)</title><rect x="292.5" y="371.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.5" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.10%)</title><rect x="292.5" y="355.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="293.7" y="403.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.7" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="293.7" y="387.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.7" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="293.7" y="371.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.7" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="293.7" y="355.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.7" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 1.03%)</title><rect x="295.0" y="483.0" width="12.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="298.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.93%)</title><rect x="295.0" y="467.0" width="10.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.52%)</title><rect x="295.0" y="451.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.0" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="295.0" y="435.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="295.0" y="419.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="295.0" y="403.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="295.0" y="387.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.0" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="295.0" y="371.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.0" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="295.0" y="355.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (4 samples, 0.41%)</title><rect x="296.2" y="435.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (4 samples, 0.41%)</title><rect x="296.2" y="419.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.2" y="430.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="296.2" y="403.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.2" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="296.2" y="387.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="299.2" y="398.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="296.2" y="371.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.2" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.31%)</title><rect x="297.4" y="403.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="300.4" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.31%)</title><rect x="297.4" y="387.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.4" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.31%)</title><rect x="297.4" y="371.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.4" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.31%)</title><rect x="297.4" y="355.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.4" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.31%)</title><rect x="297.4" y="339.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.4" y="350.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.21%)</title><rect x="297.4" y="323.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (2 samples, 0.21%)</title><rect x="297.4" y="307.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.4" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="299.8" y="323.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.8" y="334.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$220/416709803.get (1 samples, 0.10%)</title><rect x="299.8" y="307.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.8" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (4 samples, 0.41%)</title><rect x="301.0" y="451.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.0" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.31%)</title><rect x="301.0" y="435.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.31%)</title><rect x="301.0" y="419.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="304.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.21%)</title><rect x="301.0" y="403.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.21%)</title><rect x="301.0" y="387.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.0" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.21%)</title><rect x="301.0" y="371.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.0" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.21%)</title><rect x="301.0" y="355.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.0" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.21%)</title><rect x="301.0" y="339.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.0" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.21%)</title><rect x="301.0" y="323.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.0" y="334.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.10%)</title><rect x="302.3" y="307.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.3" y="318.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.getOpFlags (1 samples, 0.10%)</title><rect x="303.5" y="403.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="306.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="304.7" y="435.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="307.7" y="446.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="304.7" y="419.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.7" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="304.7" y="403.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.7" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="304.7" y="387.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.7" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="305.9" y="467.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="308.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.10%)</title><rect x="305.9" y="451.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.10%)</title><rect x="305.9" y="435.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="308.9" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.10%)</title><rect x="305.9" y="419.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.9" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.10%)</title><rect x="305.9" y="403.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.10%)</title><rect x="305.9" y="387.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="305.9" y="371.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="305.9" y="355.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.9" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.10%)</title><rect x="307.1" y="483.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.10%)</title><rect x="307.1" y="467.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="310.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.41%)</title><rect x="308.3" y="483.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.31%)</title><rect x="308.3" y="467.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.21%)</title><rect x="308.3" y="451.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.21%)</title><rect x="308.3" y="435.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.10%)</title><rect x="308.3" y="419.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="311.3" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="308.3" y="403.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.3" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.10%)</title><rect x="308.3" y="387.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="311.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="308.3" y="371.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.3" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="308.3" y="355.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.3" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.10%)</title><rect x="308.3" y="339.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.3" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.10%)</title><rect x="308.3" y="323.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.3" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.10%)</title><rect x="308.3" y="307.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.3" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.10%)</title><rect x="308.3" y="291.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.3" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.10%)</title><rect x="309.6" y="419.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.10%)</title><rect x="309.6" y="403.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.10%)</title><rect x="309.6" y="387.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.10%)</title><rect x="309.6" y="371.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="309.6" y="355.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.6" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="309.6" y="339.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.6" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.10%)</title><rect x="310.8" y="451.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="310.8" y="435.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="310.8" y="419.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.10%)</title><rect x="310.8" y="403.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.10%)</title><rect x="310.8" y="387.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.10%)</title><rect x="310.8" y="371.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.10%)</title><rect x="310.8" y="355.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollCtl (1 samples, 0.10%)</title><rect x="310.8" y="339.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.8" y="350.0"></text>
</g>
<g>
<title>__GI_epoll_ctl (1 samples, 0.10%)</title><rect x="310.8" y="323.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="313.8" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.10%)</title><rect x="312.0" y="467.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.10%)</title><rect x="312.0" y="451.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="315.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="312.0" y="435.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="312.0" y="419.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="315.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.10%)</title><rect x="312.0" y="403.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.10%)</title><rect x="312.0" y="387.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.10%)</title><rect x="312.0" y="371.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.10%)</title><rect x="312.0" y="355.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="315.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.10%)</title><rect x="312.0" y="339.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.0" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.10%)</title><rect x="312.0" y="323.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.0" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.10%)</title><rect x="312.0" y="307.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="315.0" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.10%)</title><rect x="312.0" y="291.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="315.0" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.10%)</title><rect x="312.0" y="275.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.0" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.10%)</title><rect x="312.0" y="259.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.0" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.31%)</title><rect x="313.2" y="483.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.31%)</title><rect x="313.2" y="467.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="314.4" y="451.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.10%)</title><rect x="314.4" y="435.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="317.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="314.4" y="419.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.4" y="430.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.10%)</title><rect x="314.4" y="403.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.4" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="314.4" y="387.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.4" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="315.7" y="451.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="318.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="315.7" y="435.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="318.7" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="315.7" y="419.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="318.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="315.7" y="403.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="315.7" y="387.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="318.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="315.7" y="371.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="318.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.10%)</title><rect x="315.7" y="355.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.7" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.21%)</title><rect x="316.9" y="483.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="319.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.21%)</title><rect x="316.9" y="467.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="316.9" y="451.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="316.9" y="435.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.9" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="316.9" y="419.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.9" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.10%)</title><rect x="316.9" y="403.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.10%)</title><rect x="316.9" y="387.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="319.9" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.10%)</title><rect x="318.1" y="451.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor$RecordingLevel.shouldRecord (1 samples, 0.10%)</title><rect x="318.1" y="435.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.1" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.run (664 samples, 68.52%)</title><rect x="319.3" y="547.0" width="808.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.3" y="558.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (664 samples, 68.52%)</title><rect x="319.3" y="531.0" width="808.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.3" y="542.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (664 samples, 68.52%)</title><rect x="319.3" y="515.0" width="808.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="322.3" y="526.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1581344107.run (459 samples, 47.37%)</title><rect x="323.0" y="499.0" width="558.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="326.0" y="510.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1581344107.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (459 samples, 47.37%)</title><rect x="323.0" y="483.0" width="558.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="326.0" y="494.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (459 samples, 47.37%)</title><rect x="323.0" y="467.0" width="558.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="326.0" y="478.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (456 samples, 47.06%)</title><rect x="323.0" y="451.0" width="555.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="326.0" y="462.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="330.3" y="435.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="333.3" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="330.3" y="419.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="333.3" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="330.3" y="403.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="333.3" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (155 samples, 16.00%)</title><rect x="331.5" y="435.0" width="188.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.5" y="446.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (155 samples, 16.00%)</title><rect x="331.5" y="419.0" width="188.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.5" y="430.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (155 samples, 16.00%)</title><rect x="331.5" y="403.0" width="188.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.5" y="414.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="348.5" y="387.0" width="2.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="351.5" y="398.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.52%)</title><rect x="351.0" y="387.0" width="6.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="354.0" y="398.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.31%)</title><rect x="353.4" y="371.0" width="3.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="356.4" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (134 samples, 13.83%)</title><rect x="357.1" y="387.0" width="163.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="360.1" y="398.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (134 samples, 13.83%)</title><rect x="357.1" y="371.0" width="163.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.1" y="382.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (134 samples, 13.83%)</title><rect x="357.1" y="355.0" width="163.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.1" y="366.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (27 samples, 2.79%)</title><rect x="357.1" y="339.0" width="32.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="360.1" y="350.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.10%)</title><rect x="357.1" y="323.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.1" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.10%)</title><rect x="357.1" y="307.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="360.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.10%)</title><rect x="357.1" y="291.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.1" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="357.1" y="275.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.1" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.10%)</title><rect x="357.1" y="259.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="360.1" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.10%)</title><rect x="357.1" y="243.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="360.1" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.10%)</title><rect x="357.1" y="227.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="360.1" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="357.1" y="211.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="360.1" y="222.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="357.1" y="195.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="360.1" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="357.1" y="179.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="360.1" y="190.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="357.1" y="163.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="360.1" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="357.1" y="147.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="360.1" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (26 samples, 2.68%)</title><rect x="358.3" y="323.0" width="31.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="361.3" y="334.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="358.3" y="307.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="361.3" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="358.3" y="291.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="361.3" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="358.3" y="275.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="361.3" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="358.3" y="259.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="361.3" y="270.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="358.3" y="243.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="361.3" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (25 samples, 2.58%)</title><rect x="359.5" y="307.0" width="30.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="362.5" y="318.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="359.5" y="291.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="362.5" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="359.5" y="275.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="362.5" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="359.5" y="259.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="362.5" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="359.5" y="243.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="362.5" y="254.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="359.5" y="227.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="362.5" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="359.5" y="211.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="362.5" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (13 samples, 1.34%)</title><rect x="360.7" y="291.0" width="15.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.7" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (13 samples, 1.34%)</title><rect x="360.7" y="275.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.byteOffset (1 samples, 0.10%)</title><rect x="375.3" y="259.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 1.14%)</title><rect x="376.5" y="291.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="379.5" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="376.5" y="275.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="379.5" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="376.5" y="259.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="379.5" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="376.5" y="243.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="379.5" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="376.5" y="227.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="379.5" y="238.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="376.5" y="211.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="379.5" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="376.5" y="195.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="379.5" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (10 samples, 1.03%)</title><rect x="377.8" y="275.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="380.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (10 samples, 1.03%)</title><rect x="377.8" y="259.0" width="12.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="380.8" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (10 samples, 1.03%)</title><rect x="377.8" y="243.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="380.8" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (10 samples, 1.03%)</title><rect x="377.8" y="227.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="380.8" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (99 samples, 10.22%)</title><rect x="389.9" y="339.0" width="120.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.9" y="350.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.31%)</title><rect x="389.9" y="323.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.31%)</title><rect x="389.9" y="307.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="392.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.31%)</title><rect x="389.9" y="291.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.31%)</title><rect x="389.9" y="275.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="392.9" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (3 samples, 0.31%)</title><rect x="389.9" y="259.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="392.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (3 samples, 0.31%)</title><rect x="389.9" y="243.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="392.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (3 samples, 0.31%)</title><rect x="389.9" y="227.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.21%)</title><rect x="389.9" y="211.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.byteOffset (1 samples, 0.10%)</title><rect x="392.4" y="211.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="395.4" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.52%)</title><rect x="393.6" y="323.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="396.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.52%)</title><rect x="393.6" y="307.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.21%)</title><rect x="397.2" y="291.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="400.2" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (14 samples, 1.44%)</title><rect x="399.7" y="323.0" width="17.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 1.24%)</title><rect x="402.1" y="307.0" width="14.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="405.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.21%)</title><rect x="403.3" y="291.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.3" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.62%)</title><rect x="405.8" y="291.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="408.8" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.41%)</title><rect x="408.2" y="275.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.2" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.31%)</title><rect x="413.1" y="291.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.31%)</title><rect x="413.1" y="275.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.31%)</title><rect x="413.1" y="259.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="416.1" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.31%)</title><rect x="413.1" y="243.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="416.1" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.62%)</title><rect x="416.7" y="323.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.21%)</title><rect x="416.7" y="307.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.7" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.41%)</title><rect x="419.2" y="307.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.2" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="422.8" y="291.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.8" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="422.8" y="275.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="425.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="422.8" y="259.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.8" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="422.8" y="243.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="425.8" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="422.8" y="227.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="425.8" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="422.8" y="211.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="425.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (71 samples, 7.33%)</title><rect x="424.0" y="323.0" width="86.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="427.0" y="334.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.44%)</title><rect x="424.0" y="307.0" width="17.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="427.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.31%)</title><rect x="426.5" y="291.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="429.5" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.31%)</title><rect x="426.5" y="275.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="429.5" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.31%)</title><rect x="426.5" y="259.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="429.5" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.10%)</title><rect x="428.9" y="243.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.9" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.10%)</title><rect x="428.9" y="227.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="431.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.83%)</title><rect x="430.1" y="291.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="433.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (8 samples, 0.83%)</title><rect x="430.1" y="275.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (8 samples, 0.83%)</title><rect x="430.1" y="259.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.1" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.41%)</title><rect x="435.0" y="243.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.0" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 0.41%)</title><rect x="435.0" y="227.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.0" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.10%)</title><rect x="439.9" y="291.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="442.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (57 samples, 5.88%)</title><rect x="441.1" y="307.0" width="69.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="444.1" y="318.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (57 samples, 5.88%)</title><rect x="441.1" y="291.0" width="69.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="444.1" y="302.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (57 samples, 5.88%)</title><rect x="441.1" y="275.0" width="69.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="444.1" y="286.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.96%)</title><rect x="450.8" y="259.0" width="23.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="453.8" y="270.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (3 samples, 0.31%)</title><rect x="452.0" y="243.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.0" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.21%)</title><rect x="455.7" y="243.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="458.7" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 1.03%)</title><rect x="458.1" y="243.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="461.1" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 1.03%)</title><rect x="458.1" y="227.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="461.1" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 1.03%)</title><rect x="458.1" y="211.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="461.1" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.21%)</title><rect x="461.8" y="195.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.8" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.52%)</title><rect x="464.2" y="195.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="467.2" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.31%)</title><rect x="470.3" y="243.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="473.3" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.31%)</title><rect x="470.3" y="227.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="473.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.31%)</title><rect x="470.3" y="211.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="473.3" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.21%)</title><rect x="471.5" y="195.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="474.5" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.72%)</title><rect x="474.0" y="259.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="477.0" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.72%)</title><rect x="474.0" y="243.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="477.0" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.72%)</title><rect x="474.0" y="227.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="477.0" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.72%)</title><rect x="474.0" y="211.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="477.0" y="222.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.72%)</title><rect x="474.0" y="195.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.0" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 1.14%)</title><rect x="482.5" y="259.0" width="13.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.5" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 1.14%)</title><rect x="482.5" y="243.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="485.5" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 1.14%)</title><rect x="482.5" y="227.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.5" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 1.14%)</title><rect x="482.5" y="211.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.5" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 1.14%)</title><rect x="482.5" y="195.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.5" y="206.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (11 samples, 1.14%)</title><rect x="482.5" y="179.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.5" y="190.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (11 samples, 1.14%)</title><rect x="482.5" y="163.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="485.5" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.41%)</title><rect x="495.9" y="259.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="498.9" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.41%)</title><rect x="495.9" y="243.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="498.9" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.41%)</title><rect x="495.9" y="227.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (8 samples, 0.83%)</title><rect x="500.8" y="259.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="503.8" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.83%)</title><rect x="510.5" y="339.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="513.5" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.83%)</title><rect x="510.5" y="323.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="513.5" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.83%)</title><rect x="510.5" y="307.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="513.5" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.83%)</title><rect x="510.5" y="291.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="513.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.83%)</title><rect x="510.5" y="275.0" width="9.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="513.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.10%)</title><rect x="519.0" y="259.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.0" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (274 samples, 28.28%)</title><rect x="520.2" y="435.0" width="333.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="523.2" y="446.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (64 samples, 6.60%)</title><rect x="520.2" y="419.0" width="78.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="523.2" y="430.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (64 samples, 6.60%)</title><rect x="520.2" y="403.0" width="78.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="523.2" y="414.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (61 samples, 6.30%)</title><rect x="523.9" y="387.0" width="74.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="526.9" y="398.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (18 samples, 1.86%)</title><rect x="534.9" y="371.0" width="21.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="537.9" y="382.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (18 samples, 1.86%)</title><rect x="534.9" y="355.0" width="21.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="537.9" y="366.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (18 samples, 1.86%)</title><rect x="534.9" y="339.0" width="21.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="537.9" y="350.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (18 samples, 1.86%)</title><rect x="534.9" y="323.0" width="21.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="537.9" y="334.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.72%)</title><rect x="556.8" y="371.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="559.8" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.72%)</title><rect x="556.8" y="355.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="559.8" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.72%)</title><rect x="556.8" y="339.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.10%)</title><rect x="564.1" y="323.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.1" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (27 samples, 2.79%)</title><rect x="565.3" y="371.0" width="32.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="568.3" y="382.0">ja..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.10%)</title><rect x="578.7" y="355.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="581.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (15 samples, 1.55%)</title><rect x="579.9" y="355.0" width="18.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="579.9" y="339.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="582.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="579.9" y="323.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (14 samples, 1.44%)</title><rect x="581.1" y="339.0" width="17.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="584.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="595.7" y="323.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="598.7" y="334.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="597.0" y="323.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="600.0" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.41%)</title><rect x="598.2" y="419.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="601.2" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.41%)</title><rect x="598.2" y="403.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="601.2" y="414.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.41%)</title><rect x="598.2" y="387.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="601.2" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (142 samples, 14.65%)</title><rect x="603.0" y="419.0" width="173.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="606.0" y="430.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.62%)</title><rect x="603.0" y="403.0" width="7.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="606.0" y="414.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.52%)</title><rect x="604.3" y="387.0" width="6.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="607.3" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (136 samples, 14.04%)</title><rect x="610.4" y="403.0" width="165.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="613.4" y="414.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (45 samples, 4.64%)</title><rect x="622.5" y="387.0" width="54.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="625.5" y="398.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (45 samples, 4.64%)</title><rect x="622.5" y="371.0" width="54.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="625.5" y="382.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (29 samples, 2.99%)</title><rect x="628.6" y="355.0" width="35.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="631.6" y="366.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (21 samples, 2.17%)</title><rect x="633.5" y="339.0" width="25.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="636.5" y="350.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (21 samples, 2.17%)</title><rect x="633.5" y="323.0" width="25.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.5" y="334.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 2.17%)</title><rect x="633.5" y="307.0" width="25.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="636.5" y="318.0">j..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="638.4" y="291.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="641.4" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.10%)</title><rect x="639.6" y="291.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="642.6" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 1.03%)</title><rect x="640.8" y="291.0" width="12.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="643.8" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="643.2" y="275.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="646.2" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.31%)</title><rect x="644.4" y="275.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="647.4" y="286.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="644.4" y="259.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="647.4" y="270.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.21%)</title><rect x="645.7" y="259.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="648.7" y="270.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.21%)</title><rect x="645.7" y="243.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="648.7" y="254.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.10%)</title><rect x="645.7" y="227.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="648.7" y="238.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="646.9" y="227.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="649.9" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.41%)</title><rect x="648.1" y="275.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="651.1" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.31%)</title><rect x="649.3" y="259.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="652.3" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="649.3" y="243.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="652.3" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="649.3" y="227.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="652.3" y="238.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="649.3" y="211.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="652.3" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="649.3" y="195.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="652.3" y="206.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="649.3" y="179.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="652.3" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="650.5" y="243.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="653.5" y="254.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="651.8" y="243.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="654.8" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="653.0" y="291.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="656.0" y="302.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.41%)</title><rect x="654.2" y="291.0" width="4.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="657.2" y="302.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.41%)</title><rect x="659.1" y="339.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.1" y="350.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.21%)</title><rect x="663.9" y="355.0" width="2.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="666.9" y="366.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.93%)</title><rect x="666.4" y="355.0" width="10.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="669.4" y="366.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.52%)</title><rect x="677.3" y="387.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="680.3" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.31%)</title><rect x="677.3" y="371.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="680.3" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="677.3" y="355.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="680.3" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="677.3" y="339.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="680.3" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="677.3" y="323.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="680.3" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="677.3" y="307.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="680.3" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="677.3" y="291.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="680.3" y="302.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.10%)</title><rect x="677.3" y="275.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="680.3" y="286.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.21%)</title><rect x="678.5" y="355.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="681.5" y="366.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.21%)</title><rect x="681.0" y="371.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="684.0" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.21%)</title><rect x="681.0" y="355.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="684.0" y="366.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (76 samples, 7.84%)</title><rect x="683.4" y="387.0" width="92.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.4" y="398.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (74 samples, 7.64%)</title><rect x="685.9" y="371.0" width="90.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.9" y="382.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 1.24%)</title><rect x="702.9" y="355.0" width="14.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="705.9" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.24%)</title><rect x="702.9" y="339.0" width="14.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="705.9" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (12 samples, 1.24%)</title><rect x="702.9" y="323.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="705.9" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (12 samples, 1.24%)</title><rect x="702.9" y="307.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="705.9" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (48 samples, 4.95%)</title><rect x="717.5" y="355.0" width="58.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="720.5" y="366.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (47 samples, 4.85%)</title><rect x="718.7" y="339.0" width="57.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.7" y="350.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.41%)</title><rect x="723.6" y="323.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="726.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.41%)</title><rect x="723.6" y="307.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="726.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (39 samples, 4.02%)</title><rect x="728.5" y="323.0" width="47.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="731.5" y="334.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.10%)</title><rect x="755.3" y="307.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.3" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.93%)</title><rect x="756.5" y="307.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.5" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.31%)</title><rect x="763.8" y="291.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="766.8" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.31%)</title><rect x="763.8" y="275.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="766.8" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.31%)</title><rect x="763.8" y="259.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="766.8" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.31%)</title><rect x="763.8" y="243.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="766.8" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="763.8" y="227.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="766.8" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="763.8" y="211.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="766.8" y="222.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="763.8" y="195.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="766.8" y="206.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.21%)</title><rect x="765.0" y="227.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="768.0" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="765.0" y="211.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="768.0" y="222.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="766.2" y="211.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="769.2" y="222.0"></text>
</g>
<g>
<title>vtable stub (7 samples, 0.72%)</title><rect x="767.4" y="307.0" width="8.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="770.4" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (49 samples, 5.06%)</title><rect x="776.0" y="419.0" width="59.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.0" y="430.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (49 samples, 5.06%)</title><rect x="776.0" y="403.0" width="59.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="779.0" y="414.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1186306248.process (25 samples, 2.58%)</title><rect x="777.2" y="387.0" width="30.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="780.2" y="398.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (23 samples, 2.37%)</title><rect x="779.6" y="371.0" width="28.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="782.6" y="382.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (21 samples, 2.17%)</title><rect x="780.8" y="355.0" width="25.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="783.8" y="366.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.83%)</title><rect x="794.2" y="339.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="797.2" y="350.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="794.2" y="323.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="797.2" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="794.2" y="307.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="797.2" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.72%)</title><rect x="795.4" y="323.0" width="8.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="798.4" y="334.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.72%)</title><rect x="795.4" y="307.0" width="8.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="798.4" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="804.0" y="339.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.10%)</title><rect x="805.2" y="339.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="808.2" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="806.4" y="355.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="809.4" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="806.4" y="339.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.4" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="806.4" y="323.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="809.4" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="806.4" y="307.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="809.4" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/255240779.complete (1 samples, 0.10%)</title><rect x="807.6" y="387.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.6" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$35 (1 samples, 0.10%)</title><rect x="807.6" y="371.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="810.6" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="807.6" y="355.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="810.6" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="807.6" y="339.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="810.6" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="807.6" y="323.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="810.6" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="807.6" y="307.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="810.6" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.21%)</title><rect x="808.8" y="387.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="811.8" y="398.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.21%)</title><rect x="808.8" y="371.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="811.8" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="811.3" y="387.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.3" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="811.3" y="371.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="814.3" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (12 samples, 1.24%)</title><rect x="812.5" y="387.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="815.5" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.52%)</title><rect x="821.0" y="371.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="824.0" y="382.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.41%)</title><rect x="822.2" y="355.0" width="4.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="825.2" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (5 samples, 0.52%)</title><rect x="827.1" y="387.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="830.1" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (5 samples, 0.52%)</title><rect x="827.1" y="371.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="830.1" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.21%)</title><rect x="833.2" y="387.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="836.2" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="834.4" y="371.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="837.4" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="834.4" y="355.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="837.4" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="834.4" y="339.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="837.4" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="834.4" y="323.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="837.4" y="334.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="834.4" y="307.0" width="1.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="837.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.55%)</title><rect x="835.6" y="419.0" width="18.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="838.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.55%)</title><rect x="835.6" y="403.0" width="18.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.6" y="414.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.41%)</title><rect x="841.7" y="387.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="844.7" y="398.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.41%)</title><rect x="841.7" y="371.0" width="4.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="844.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.62%)</title><rect x="846.6" y="387.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="849.6" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/644163805.accept (6 samples, 0.62%)</title><rect x="846.6" y="371.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="849.6" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (6 samples, 0.62%)</title><rect x="846.6" y="355.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="849.6" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 0.62%)</title><rect x="846.6" y="339.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="849.6" y="350.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.62%)</title><rect x="846.6" y="323.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="849.6" y="334.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.62%)</title><rect x="846.6" y="307.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="849.6" y="318.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.41%)</title><rect x="849.0" y="291.0" width="4.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="852.0" y="302.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.41%)</title><rect x="849.0" y="275.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="852.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.55%)</title><rect x="853.9" y="435.0" width="18.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="856.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.55%)</title><rect x="853.9" y="419.0" width="18.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="856.9" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="855.1" y="403.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="858.1" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="855.1" y="387.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="858.1" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="855.1" y="371.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="858.1" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="855.1" y="355.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="858.1" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="855.1" y="339.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="858.1" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="855.1" y="323.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="858.1" y="334.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="855.1" y="307.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="858.1" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="855.1" y="291.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="858.1" y="302.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="855.1" y="275.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="858.1" y="286.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.10%)</title><rect x="855.1" y="259.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="858.1" y="270.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.10%)</title><rect x="855.1" y="243.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="858.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.34%)</title><rect x="856.3" y="403.0" width="15.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="859.3" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/644163805.accept (13 samples, 1.34%)</title><rect x="856.3" y="387.0" width="15.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="859.3" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (13 samples, 1.34%)</title><rect x="856.3" y="371.0" width="15.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="859.3" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (13 samples, 1.34%)</title><rect x="856.3" y="355.0" width="15.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="859.3" y="366.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (13 samples, 1.34%)</title><rect x="856.3" y="339.0" width="15.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="859.3" y="350.0"></text>
</g>
<g>
<title>java/time/Duration.create (13 samples, 1.34%)</title><rect x="856.3" y="323.0" width="15.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="859.3" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.52%)</title><rect x="872.2" y="435.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="875.2" y="446.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.52%)</title><rect x="872.2" y="419.0" width="6.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="875.2" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.31%)</title><rect x="878.3" y="451.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="881.3" y="462.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.21%)</title><rect x="879.5" y="435.0" width="2.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="882.5" y="446.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="879.5" y="419.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="882.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.93%)</title><rect x="881.9" y="499.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="884.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.93%)</title><rect x="881.9" y="483.0" width="11.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="884.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.93%)</title><rect x="881.9" y="467.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="884.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.93%)</title><rect x="881.9" y="451.0" width="11.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="884.9" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1581344107.run (3 samples, 0.31%)</title><rect x="889.2" y="435.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="892.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (193 samples, 19.92%)</title><rect x="892.9" y="499.0" width="235.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="895.9" y="510.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (193 samples, 19.92%)</title><rect x="892.9" y="483.0" width="235.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="895.9" y="494.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (164 samples, 16.92%)</title><rect x="914.8" y="467.0" width="199.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="917.8" y="478.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.83%)</title><rect x="927.0" y="451.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="930.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.83%)</title><rect x="927.0" y="435.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="930.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.83%)</title><rect x="927.0" y="419.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="930.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.83%)</title><rect x="927.0" y="403.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="930.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (145 samples, 14.96%)</title><rect x="936.7" y="451.0" width="176.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="939.7" y="462.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (145 samples, 14.96%)</title><rect x="936.7" y="435.0" width="176.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="939.7" y="446.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="942.8" y="419.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="945.8" y="430.0"></text>
</g>
<g>
<title>Unsafe_Park (134 samples, 13.83%)</title><rect x="944.0" y="419.0" width="163.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="947.0" y="430.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="947.7" y="403.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="950.7" y="414.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.89%)</title><rect x="948.9" y="403.0" width="34.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="951.9" y="414.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (12 samples, 1.24%)</title><rect x="956.2" y="387.0" width="14.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="959.2" y="398.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="962.3" y="371.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="965.3" y="382.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="962.3" y="355.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.3" y="366.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.21%)</title><rect x="963.5" y="371.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="966.5" y="382.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="965.9" y="371.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="968.9" y="382.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.31%)</title><rect x="967.2" y="371.0" width="3.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="970.2" y="382.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="970.8" y="387.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.8" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.93%)</title><rect x="972.0" y="387.0" width="11.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.0" y="398.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="983.0" y="403.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.0" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.31%)</title><rect x="984.2" y="403.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.2" y="414.0"></text>
</g>
<g>
<title>__lll_lock_wait (14 samples, 1.44%)</title><rect x="987.9" y="403.0" width="17.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="990.9" y="414.0"></text>
</g>
<g>
<title>__lll_unlock_wake (22 samples, 2.27%)</title><rect x="1004.9" y="403.0" width="26.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1007.9" y="414.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 5.37%)</title><rect x="1031.7" y="403.0" width="63.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1034.7" y="414.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.21%)</title><rect x="1095.0" y="403.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1098.0" y="414.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1097.5" y="403.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1100.5" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.10%)</title><rect x="1098.7" y="403.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1101.7" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="1099.9" y="403.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1102.9" y="414.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1101.1" y="403.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1104.1" y="414.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.10%)</title><rect x="1102.3" y="403.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.3" y="414.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.21%)</title><rect x="1103.5" y="403.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.5" y="414.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="1106.0" y="403.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.0" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.41%)</title><rect x="1107.2" y="419.0" width="4.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1110.2" y="430.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1112.1" y="419.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.1" y="430.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.10%)</title><rect x="1113.3" y="451.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1116.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 1.14%)</title><rect x="1114.5" y="467.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1117.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 1.14%)</title><rect x="1114.5" y="451.0" width="13.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1117.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 1.14%)</title><rect x="1114.5" y="435.0" width="13.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1117.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 1.14%)</title><rect x="1114.5" y="419.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1117.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1127.9" y="547.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1130.9" y="558.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.10%)</title><rect x="1127.9" y="531.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.9" y="542.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1127.9" y="515.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.9" y="526.0"></text>
</g>
<g>
<title>start_thread (50 samples, 5.16%)</title><rect x="1129.1" y="547.0" width="60.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1132.1" y="558.0">start_..</text>
</g>
<g>
<title>java_start(Thread*) (50 samples, 5.16%)</title><rect x="1129.1" y="531.0" width="60.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1132.1" y="542.0">java_s..</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.86%)</title><rect x="1129.1" y="515.0" width="21.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.1" y="526.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.41%)</title><rect x="1129.1" y="499.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.1" y="510.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.41%)</title><rect x="1129.1" y="483.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.1" y="494.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.21%)</title><rect x="1129.1" y="467.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.1" y="478.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.21%)</title><rect x="1131.5" y="467.0" width="2.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1134.5" y="478.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.44%)</title><rect x="1134.0" y="499.0" width="17.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.0" y="510.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.31%)</title><rect x="1134.0" y="483.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.0" y="494.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1134.0" y="467.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.0" y="478.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.21%)</title><rect x="1135.2" y="467.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1138.2" y="478.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.72%)</title><rect x="1137.6" y="483.0" width="8.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.6" y="494.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.21%)</title><rect x="1137.6" y="467.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.6" y="478.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1137.6" y="451.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.6" y="462.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1137.6" y="435.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.6" y="446.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.10%)</title><rect x="1137.6" y="419.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.6" y="430.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1138.9" y="451.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.9" y="462.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1138.9" y="435.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.9" y="446.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.10%)</title><rect x="1138.9" y="419.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.9" y="430.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.10%)</title><rect x="1138.9" y="403.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.9" y="414.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.52%)</title><rect x="1140.1" y="467.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.1" y="478.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.41%)</title><rect x="1140.1" y="451.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="462.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1143.7" y="435.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.7" y="446.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.10%)</title><rect x="1144.9" y="451.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.9" y="462.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.10%)</title><rect x="1144.9" y="435.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="446.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.41%)</title><rect x="1146.2" y="483.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.2" y="494.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.41%)</title><rect x="1146.2" y="467.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.2" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.41%)</title><rect x="1146.2" y="451.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.2" y="462.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.41%)</title><rect x="1146.2" y="435.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.2" y="446.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.41%)</title><rect x="1146.2" y="419.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.2" y="430.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.41%)</title><rect x="1146.2" y="403.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.2" y="414.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.41%)</title><rect x="1146.2" y="387.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.2" y="398.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1147.4" y="371.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.4" y="382.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1147.4" y="355.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.4" y="366.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.21%)</title><rect x="1148.6" y="371.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.6" y="382.0"></text>
</g>
<g>
<title>JavaThread::run() (31 samples, 3.20%)</title><rect x="1151.0" y="515.0" width="37.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.0" y="526.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (31 samples, 3.20%)</title><rect x="1151.0" y="499.0" width="37.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.0" y="510.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 3.20%)</title><rect x="1151.0" y="483.0" width="37.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.0" y="494.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 3.20%)</title><rect x="1151.0" y="467.0" width="37.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.0" y="478.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (31 samples, 3.20%)</title><rect x="1151.0" y="451.0" width="37.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.0" y="462.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (31 samples, 3.20%)</title><rect x="1151.0" y="435.0" width="37.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.0" y="446.0">Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 1.86%)</title><rect x="1151.0" y="419.0" width="22.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.0" y="430.0">C..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.21%)</title><rect x="1151.0" y="403.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.0" y="414.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.21%)</title><rect x="1151.0" y="387.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.0" y="398.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.10%)</title><rect x="1151.0" y="371.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.0" y="382.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.10%)</title><rect x="1151.0" y="355.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.0" y="366.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.10%)</title><rect x="1151.0" y="339.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.0" y="350.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="1151.0" y="323.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.0" y="334.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="1152.2" y="371.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.2" y="382.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.10%)</title><rect x="1152.2" y="355.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.2" y="366.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.10%)</title><rect x="1152.2" y="339.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.2" y="350.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="1153.5" y="403.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.5" y="414.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.10%)</title><rect x="1153.5" y="387.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.5" y="398.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.21%)</title><rect x="1154.7" y="403.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.7" y="414.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.21%)</title><rect x="1154.7" y="387.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.7" y="398.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="1155.9" y="371.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.9" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 1.34%)</title><rect x="1157.1" y="403.0" width="15.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.1" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.10%)</title><rect x="1158.3" y="387.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.3" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.10%)</title><rect x="1158.3" y="371.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.3" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.41%)</title><rect x="1159.6" y="387.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.6" y="398.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.10%)</title><rect x="1159.6" y="371.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="382.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1160.8" y="371.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.8" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1162.0" y="371.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.0" y="382.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1162.0" y="355.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="366.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.10%)</title><rect x="1163.2" y="371.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.2" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.10%)</title><rect x="1164.4" y="387.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.4" y="398.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1164.4" y="371.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1167.4" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.10%)</title><rect x="1165.6" y="387.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.6" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.10%)</title><rect x="1166.9" y="387.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.9" y="398.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.41%)</title><rect x="1168.1" y="387.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.1" y="398.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1170.5" y="371.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.5" y="382.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1171.7" y="371.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.7" y="382.0"></text>
</g>
<g>
<title>Compile::Optimize() (9 samples, 0.93%)</title><rect x="1173.0" y="419.0" width="10.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.0" y="430.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1173.0" y="403.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.0" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1173.0" y="387.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.0" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1173.0" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.0" y="382.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1173.0" y="355.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="366.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1173.0" y="339.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="350.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.10%)</title><rect x="1173.0" y="323.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.0" y="334.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1173.0" y="307.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="318.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1173.0" y="291.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.0" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.10%)</title><rect x="1173.0" y="275.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.0" y="286.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1173.0" y="259.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.0" y="270.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.10%)</title><rect x="1173.0" y="243.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 0.41%)</title><rect x="1174.2" y="403.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.2" y="414.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.10%)</title><rect x="1174.2" y="387.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1175.4" y="387.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.4" y="398.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.10%)</title><rect x="1175.4" y="371.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1176.6" y="387.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.6" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.10%)</title><rect x="1176.6" y="371.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.6" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.10%)</title><rect x="1176.6" y="355.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.6" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1176.6" y="339.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.6" y="350.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1177.8" y="387.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1177.8" y="371.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="382.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.41%)</title><rect x="1179.0" y="403.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.41%)</title><rect x="1179.0" y="387.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="398.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1180.3" y="371.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="382.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1180.3" y="355.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="366.0"></text>
</g>
<g>
<title>MemBarCPUOrderNode::Opcode() const (1 samples, 0.10%)</title><rect x="1181.5" y="371.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.5" y="382.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1182.7" y="371.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.21%)</title><rect x="1183.9" y="419.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.21%)</title><rect x="1183.9" y="403.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.21%)</title><rect x="1183.9" y="387.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.21%)</title><rect x="1183.9" y="371.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.21%)</title><rect x="1183.9" y="355.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.21%)</title><rect x="1183.9" y="339.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.21%)</title><rect x="1183.9" y="323.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.21%)</title><rect x="1183.9" y="307.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.21%)</title><rect x="1183.9" y="291.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.21%)</title><rect x="1183.9" y="275.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.21%)</title><rect x="1183.9" y="259.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.9" y="243.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1183.9" y="227.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1183.9" y="211.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.9" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1183.9" y="195.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="206.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1183.9" y="179.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.9" y="190.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1183.9" y="163.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.9" y="174.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1183.9" y="147.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="158.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.10%)</title><rect x="1183.9" y="131.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1185.1" y="243.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1185.1" y="227.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="238.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.10%)</title><rect x="1185.1" y="211.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="222.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.10%)</title><rect x="1185.1" y="195.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1185.1" y="179.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.1" y="190.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1185.1" y="163.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="174.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1185.1" y="147.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="158.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1185.1" y="131.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="142.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1185.1" y="115.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="126.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1185.1" y="99.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.1" y="110.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1185.1" y="83.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="94.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.10%)</title><rect x="1185.1" y="67.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.10%)</title><rect x="1185.1" y="51.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="62.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.10%)</title><rect x="1185.1" y="35.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.1" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1186.3" y="419.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="430.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1186.3" y="403.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.3" y="414.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.10%)</title><rect x="1187.6" y="419.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.6" y="430.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.10%)</title><rect x="1187.6" y="403.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.6" y="414.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.10%)</title><rect x="1187.6" y="387.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.6" y="398.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1187.6" y="371.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1190.6" y="382.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.10%)</title><rect x="1188.8" y="515.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.8" y="526.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.10%)</title><rect x="1188.8" y="499.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="510.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.8" y="483.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="494.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="467.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.8" y="478.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="451.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="435.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.8" y="419.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.8" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.10%)</title><rect x="1188.8" y="403.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.8" y="414.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.10%)</title><rect x="1188.8" y="387.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.8" y="398.0"></text>
</g>
<g>
<title>JNIHandles::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.10%)</title><rect x="1188.8" y="371.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="382.0"></text>
</g>
</g>
</svg>
