<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="709"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="709"> </text>
<g id="frames">
<g>
<title>all (183 samples, 100.00%)</title><rect x="10.0" y="675.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="686.0">all</text>
</g>
<g>
<title>_int_malloc (1 samples, 0.55%)</title><rect x="10.0" y="659.0" width="6.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (32 samples, 17.49%)</title><rect x="16.4" y="659.0" width="206.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.4" y="670.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (32 samples, 17.49%)</title><rect x="16.4" y="643.0" width="206.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.4" y="654.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (25 samples, 13.66%)</title><rect x="16.4" y="627.0" width="161.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.4" y="638.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1896881302.accept (24 samples, 13.11%)</title><rect x="16.4" y="611.0" width="154.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.4" y="622.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (24 samples, 13.11%)</title><rect x="16.4" y="595.0" width="154.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.4" y="606.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (21 samples, 11.48%)</title><rect x="16.4" y="579.0" width="135.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.4" y="590.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (21 samples, 11.48%)</title><rect x="16.4" y="563.0" width="135.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.4" y="574.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (21 samples, 11.48%)</title><rect x="16.4" y="547.0" width="135.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.4" y="558.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (21 samples, 11.48%)</title><rect x="16.4" y="531.0" width="135.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.4" y="542.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (21 samples, 11.48%)</title><rect x="16.4" y="515.0" width="135.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.4" y="526.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (14 samples, 7.65%)</title><rect x="55.1" y="499.0" width="90.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.1" y="510.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (14 samples, 7.65%)</title><rect x="55.1" y="483.0" width="90.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.1" y="494.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 7.65%)</title><rect x="55.1" y="467.0" width="90.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.1" y="478.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 7.65%)</title><rect x="55.1" y="451.0" width="90.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.1" y="462.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 7.65%)</title><rect x="55.1" y="435.0" width="90.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.1" y="446.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 7.65%)</title><rect x="55.1" y="419.0" width="90.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.1" y="430.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (10 samples, 5.46%)</title><rect x="80.9" y="403.0" width="64.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.9" y="414.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 5.46%)</title><rect x="80.9" y="387.0" width="64.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="83.9" y="398.0">Unsafe_..</text>
</g>
<g>
<title>__pthread_cond_signal (9 samples, 4.92%)</title><rect x="80.9" y="371.0" width="58.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="83.9" y="382.0">__pthr..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.55%)</title><rect x="139.0" y="371.0" width="6.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="142.0" y="382.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.55%)</title><rect x="145.4" y="499.0" width="6.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="148.4" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.55%)</title><rect x="151.9" y="579.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="154.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.55%)</title><rect x="151.9" y="563.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.55%)</title><rect x="151.9" y="547.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 1.09%)</title><rect x="158.3" y="579.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.09%)</title><rect x="158.3" y="563.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.3" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.09%)</title><rect x="158.3" y="547.0" width="12.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.3" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.09%)</title><rect x="158.3" y="531.0" width="12.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.3" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.09%)</title><rect x="158.3" y="515.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.55%)</title><rect x="171.2" y="611.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="174.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.55%)</title><rect x="171.2" y="595.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="174.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.55%)</title><rect x="171.2" y="579.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="174.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.55%)</title><rect x="171.2" y="563.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.83%)</title><rect x="177.7" y="627.0" width="45.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.7" y="638.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.83%)</title><rect x="177.7" y="611.0" width="45.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="180.7" y="622.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.09%)</title><rect x="177.7" y="595.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.09%)</title><rect x="177.7" y="579.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="180.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.55%)</title><rect x="177.7" y="563.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="180.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.55%)</title><rect x="177.7" y="547.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.55%)</title><rect x="177.7" y="531.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="180.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.55%)</title><rect x="177.7" y="515.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="180.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.55%)</title><rect x="177.7" y="499.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.55%)</title><rect x="177.7" y="483.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="180.7" y="494.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.55%)</title><rect x="177.7" y="467.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.55%)</title><rect x="184.1" y="563.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="187.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.55%)</title><rect x="184.1" y="547.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.55%)</title><rect x="184.1" y="531.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="187.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.64%)</title><rect x="190.5" y="595.0" width="19.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.09%)</title><rect x="190.5" y="579.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.55%)</title><rect x="190.5" y="563.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.55%)</title><rect x="190.5" y="547.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.55%)</title><rect x="190.5" y="531.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.5" y="542.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.55%)</title><rect x="190.5" y="515.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="193.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.55%)</title><rect x="190.5" y="499.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="193.5" y="510.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.55%)</title><rect x="190.5" y="483.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.55%)</title><rect x="197.0" y="563.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="200.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.55%)</title><rect x="197.0" y="547.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.55%)</title><rect x="197.0" y="531.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="200.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.55%)</title><rect x="197.0" y="515.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.55%)</title><rect x="197.0" y="499.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="200.0" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.55%)</title><rect x="197.0" y="483.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.55%)</title><rect x="197.0" y="467.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.55%)</title><rect x="197.0" y="451.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.0" y="462.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.55%)</title><rect x="197.0" y="435.0" width="6.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="200.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.55%)</title><rect x="203.4" y="579.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.55%)</title><rect x="209.9" y="595.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.55%)</title><rect x="209.9" y="579.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.55%)</title><rect x="209.9" y="563.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.55%)</title><rect x="209.9" y="547.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.55%)</title><rect x="216.3" y="595.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.55%)</title><rect x="216.3" y="579.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.55%)</title><rect x="216.3" y="563.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.55%)</title><rect x="216.3" y="547.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.55%)</title><rect x="216.3" y="531.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.55%)</title><rect x="216.3" y="515.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.55%)</title><rect x="216.3" y="499.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.55%)</title><rect x="216.3" y="483.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.55%)</title><rect x="216.3" y="467.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.55%)</title><rect x="216.3" y="451.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.3" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.55%)</title><rect x="216.3" y="435.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.3" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.55%)</title><rect x="216.3" y="419.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (48 samples, 26.23%)</title><rect x="222.8" y="659.0" width="309.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.8" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (48 samples, 26.23%)</title><rect x="222.8" y="643.0" width="309.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.8" y="654.0">java/util/concurrent/ThreadPoolExecutor$Wo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (48 samples, 26.23%)</title><rect x="222.8" y="627.0" width="309.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.8" y="638.0">java/util/concurrent/ThreadPoolExecutor.ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1435771743.run (30 samples, 16.39%)</title><rect x="229.2" y="611.0" width="193.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.2" y="622.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (30 samples, 16.39%)</title><rect x="229.2" y="595.0" width="193.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.2" y="606.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (30 samples, 16.39%)</title><rect x="229.2" y="579.0" width="193.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="232.2" y="590.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (30 samples, 16.39%)</title><rect x="229.2" y="563.0" width="193.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.2" y="574.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (12 samples, 6.56%)</title><rect x="229.2" y="547.0" width="77.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.2" y="558.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (12 samples, 6.56%)</title><rect x="229.2" y="531.0" width="77.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.2" y="542.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 6.56%)</title><rect x="229.2" y="515.0" width="77.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.2" y="526.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 6.56%)</title><rect x="229.2" y="499.0" width="77.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.2" y="510.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 6.56%)</title><rect x="229.2" y="483.0" width="77.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.2" y="494.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 6.56%)</title><rect x="229.2" y="467.0" width="77.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.2" y="478.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.09%)</title><rect x="229.2" y="451.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.55%)</title><rect x="229.2" y="435.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.55%)</title><rect x="229.2" y="419.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.55%)</title><rect x="229.2" y="403.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.2" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.55%)</title><rect x="229.2" y="387.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.2" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.55%)</title><rect x="229.2" y="371.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.2" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.55%)</title><rect x="229.2" y="355.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.55%)</title><rect x="235.7" y="435.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.55%)</title><rect x="235.7" y="419.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.55%)</title><rect x="235.7" y="403.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 4.92%)</title><rect x="242.1" y="451.0" width="58.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.1" y="462.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.55%)</title><rect x="248.6" y="435.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="251.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 3.83%)</title><rect x="255.0" y="435.0" width="45.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.0" y="446.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.55%)</title><rect x="255.0" y="419.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.55%)</title><rect x="255.0" y="403.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 3.28%)</title><rect x="261.5" y="419.0" width="38.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.5" y="430.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 3.28%)</title><rect x="261.5" y="403.0" width="38.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.5" y="414.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 3.28%)</title><rect x="261.5" y="387.0" width="38.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.5" y="398.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.55%)</title><rect x="267.9" y="371.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.55%)</title><rect x="274.4" y="371.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 1.64%)</title><rect x="280.8" y="371.0" width="19.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="283.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.64%)</title><rect x="280.8" y="355.0" width="19.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="283.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.64%)</title><rect x="280.8" y="339.0" width="19.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.8" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.55%)</title><rect x="300.2" y="451.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.55%)</title><rect x="300.2" y="435.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.55%)</title><rect x="300.2" y="419.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.55%)</title><rect x="300.2" y="403.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.55%)</title><rect x="300.2" y="387.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.2" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (17 samples, 9.29%)</title><rect x="306.6" y="547.0" width="109.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.6" y="558.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.55%)</title><rect x="306.6" y="531.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="309.6" y="542.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.55%)</title><rect x="306.6" y="515.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.6" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.55%)</title><rect x="306.6" y="499.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.6" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.55%)</title><rect x="306.6" y="483.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (12 samples, 6.56%)</title><rect x="313.1" y="531.0" width="77.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="316.1" y="542.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (12 samples, 6.56%)</title><rect x="313.1" y="515.0" width="77.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="316.1" y="526.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 3.83%)</title><rect x="313.1" y="499.0" width="45.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.1" y="510.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.timestampMillis (2 samples, 1.09%)</title><rect x="313.1" y="483.0" width="12.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.1" y="494.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.55%)</title><rect x="326.0" y="483.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="329.0" y="494.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.55%)</title><rect x="326.0" y="467.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.0" y="478.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.19%)</title><rect x="332.4" y="483.0" width="25.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="335.4" y="494.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.55%)</title><rect x="351.7" y="467.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.55%)</title><rect x="358.2" y="499.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.2" y="510.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 2.19%)</title><rect x="364.6" y="499.0" width="25.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="367.6" y="510.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 2.19%)</title><rect x="364.6" y="483.0" width="25.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="367.6" y="494.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.09%)</title><rect x="364.6" y="467.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="367.6" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.09%)</title><rect x="364.6" y="451.0" width="12.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="367.6" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.09%)</title><rect x="364.6" y="435.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="367.6" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.09%)</title><rect x="364.6" y="419.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.6" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.09%)</title><rect x="377.5" y="467.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="380.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.09%)</title><rect x="377.5" y="451.0" width="12.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="380.5" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.55%)</title><rect x="384.0" y="435.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.55%)</title><rect x="384.0" y="419.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="387.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 2.19%)</title><rect x="390.4" y="531.0" width="25.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.4" y="542.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.19%)</title><rect x="390.4" y="515.0" width="25.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="393.4" y="526.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/835915283.process (1 samples, 0.55%)</title><rect x="396.9" y="499.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.9" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.55%)</title><rect x="396.9" y="483.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="399.9" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.55%)</title><rect x="396.9" y="467.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="399.9" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.55%)</title><rect x="396.9" y="451.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.9" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.55%)</title><rect x="396.9" y="435.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="399.9" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.55%)</title><rect x="396.9" y="419.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="399.9" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.55%)</title><rect x="396.9" y="403.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="399.9" y="414.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.55%)</title><rect x="396.9" y="387.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="399.9" y="398.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.55%)</title><rect x="396.9" y="371.0" width="6.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="399.9" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.55%)</title><rect x="403.3" y="499.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.3" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.55%)</title><rect x="403.3" y="483.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.3" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.55%)</title><rect x="409.8" y="499.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="412.8" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.55%)</title><rect x="409.8" y="483.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="412.8" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.55%)</title><rect x="409.8" y="467.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.8" y="478.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.55%)</title><rect x="409.8" y="451.0" width="6.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="412.8" y="462.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.55%)</title><rect x="409.8" y="435.0" width="6.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="412.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.55%)</title><rect x="416.2" y="547.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="419.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.55%)</title><rect x="416.2" y="531.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="419.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.55%)</title><rect x="416.2" y="515.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="419.2" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/1821162145.accept (1 samples, 0.55%)</title><rect x="416.2" y="499.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="419.2" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.55%)</title><rect x="416.2" y="483.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="419.2" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/905848266.complete (1 samples, 0.55%)</title><rect x="416.2" y="467.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.55%)</title><rect x="416.2" y="451.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="419.2" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.55%)</title><rect x="416.2" y="435.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.2" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.55%)</title><rect x="416.2" y="419.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.2" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.55%)</title><rect x="416.2" y="403.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="419.2" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.55%)</title><rect x="416.2" y="387.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="419.2" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.55%)</title><rect x="416.2" y="371.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="419.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (17 samples, 9.29%)</title><rect x="422.7" y="611.0" width="109.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.7" y="622.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (17 samples, 9.29%)</title><rect x="422.7" y="595.0" width="109.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.7" y="606.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 6.56%)</title><rect x="435.6" y="579.0" width="77.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.6" y="590.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.55%)</title><rect x="435.6" y="563.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="438.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.55%)</title><rect x="435.6" y="547.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="438.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.55%)</title><rect x="435.6" y="531.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="438.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.55%)</title><rect x="435.6" y="515.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 6.01%)</title><rect x="442.0" y="563.0" width="71.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.0" y="574.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 6.01%)</title><rect x="442.0" y="547.0" width="71.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="445.0" y="558.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 5.46%)</title><rect x="448.5" y="531.0" width="64.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="451.5" y="542.0">Unsafe_..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.55%)</title><rect x="448.5" y="515.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="451.5" y="526.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.09%)</title><rect x="454.9" y="515.0" width="12.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="457.9" y="526.0"></text>
</g>
<g>
<title>__pthread_cond_wait (7 samples, 3.83%)</title><rect x="467.8" y="515.0" width="45.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="470.8" y="526.0">__pt..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.64%)</title><rect x="513.0" y="579.0" width="19.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="516.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.64%)</title><rect x="513.0" y="563.0" width="19.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="516.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.64%)</title><rect x="513.0" y="547.0" width="19.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="516.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.64%)</title><rect x="513.0" y="531.0" width="19.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="516.0" y="542.0"></text>
</g>
<g>
<title>start_thread (102 samples, 55.74%)</title><rect x="532.3" y="659.0" width="657.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="535.3" y="670.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (102 samples, 55.74%)</title><rect x="532.3" y="643.0" width="657.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="535.3" y="654.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 6.56%)</title><rect x="532.3" y="627.0" width="77.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="535.3" y="638.0">GangWorke..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.55%)</title><rect x="532.3" y="611.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="535.3" y="622.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.55%)</title><rect x="532.3" y="595.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="535.3" y="606.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.55%)</title><rect x="532.3" y="579.0" width="6.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="535.3" y="590.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (11 samples, 6.01%)</title><rect x="538.7" y="611.0" width="71.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="541.7" y="622.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 4.92%)</title><rect x="538.7" y="595.0" width="58.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="541.7" y="606.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 3.28%)</title><rect x="538.7" y="579.0" width="38.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="541.7" y="590.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.64%)</title><rect x="558.1" y="563.0" width="19.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="561.1" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.55%)</title><rect x="571.0" y="547.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="574.0" y="558.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.55%)</title><rect x="571.0" y="531.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="574.0" y="542.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.64%)</title><rect x="577.4" y="579.0" width="19.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="580.4" y="590.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 1.09%)</title><rect x="596.8" y="595.0" width="12.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="599.8" y="606.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.09%)</title><rect x="596.8" y="579.0" width="12.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="599.8" y="590.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.09%)</title><rect x="596.8" y="563.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="599.8" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 1.09%)</title><rect x="596.8" y="547.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="599.8" y="558.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 1.09%)</title><rect x="596.8" y="531.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="599.8" y="542.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (2 samples, 1.09%)</title><rect x="596.8" y="515.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="599.8" y="526.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 1.09%)</title><rect x="596.8" y="499.0" width="12.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="599.8" y="510.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 1.09%)</title><rect x="596.8" y="483.0" width="12.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="599.8" y="494.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**) (1 samples, 0.55%)</title><rect x="596.8" y="467.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="599.8" y="478.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.55%)</title><rect x="596.8" y="451.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="599.8" y="462.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.55%)</title><rect x="596.8" y="435.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="599.8" y="446.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.55%)</title><rect x="603.2" y="467.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="606.2" y="478.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.55%)</title><rect x="603.2" y="451.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="606.2" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (90 samples, 49.18%)</title><rect x="609.7" y="627.0" width="580.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="612.7" y="638.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (90 samples, 49.18%)</title><rect x="609.7" y="611.0" width="580.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="612.7" y="622.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (90 samples, 49.18%)</title><rect x="609.7" y="595.0" width="580.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="612.7" y="606.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (87 samples, 47.54%)</title><rect x="609.7" y="579.0" width="561.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="612.7" y="590.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (87 samples, 47.54%)</title><rect x="609.7" y="563.0" width="561.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="612.7" y="574.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 24.04%)</title><rect x="609.7" y="547.0" width="283.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="612.7" y="558.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.55%)</title><rect x="609.7" y="531.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="612.7" y="542.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.55%)</title><rect x="609.7" y="515.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="612.7" y="526.0"></text>
</g>
<g>
<title>MacroAssembler::int3() (1 samples, 0.55%)</title><rect x="609.7" y="499.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="612.7" y="510.0"></text>
</g>
<g>
<title>MacroAssembler::call(AddressLiteral) (1 samples, 0.55%)</title><rect x="609.7" y="483.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="612.7" y="494.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.55%)</title><rect x="609.7" y="467.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="612.7" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (2 samples, 1.09%)</title><rect x="616.1" y="531.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="619.1" y="542.0"></text>
</g>
<g>
<title>Node::is_block_proj() const (1 samples, 0.55%)</title><rect x="616.1" y="515.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="619.1" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.55%)</title><rect x="622.6" y="515.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="625.6" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.09%)</title><rect x="629.0" y="531.0" width="12.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="632.0" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.09%)</title><rect x="629.0" y="515.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="632.0" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.55%)</title><rect x="629.0" y="499.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="632.0" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (1 samples, 0.55%)</title><rect x="629.0" y="483.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="632.0" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.55%)</title><rect x="635.5" y="499.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="638.5" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.55%)</title><rect x="635.5" y="483.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="638.5" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.55%)</title><rect x="641.9" y="531.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="644.9" y="542.0"></text>
</g>
<g>
<title>Block::is_Empty() const (1 samples, 0.55%)</title><rect x="641.9" y="515.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="644.9" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 20.77%)</title><rect x="648.4" y="531.0" width="245.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="651.4" y="542.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.55%)</title><rect x="648.4" y="515.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="651.4" y="526.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.55%)</title><rect x="654.8" y="515.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="657.8" y="526.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.55%)</title><rect x="661.3" y="515.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="664.3" y="526.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.09%)</title><rect x="667.7" y="515.0" width="12.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="670.7" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 2.73%)</title><rect x="680.6" y="515.0" width="32.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="683.6" y="526.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.55%)</title><rect x="693.5" y="499.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="696.5" y="510.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.55%)</title><rect x="699.9" y="499.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="702.9" y="510.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.55%)</title><rect x="706.4" y="499.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="709.4" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 2.19%)</title><rect x="712.8" y="515.0" width="25.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="715.8" y="526.0">P..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.55%)</title><rect x="712.8" y="499.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="715.8" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 1.64%)</title><rect x="719.3" y="499.0" width="19.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="722.3" y="510.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.55%)</title><rect x="732.2" y="483.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="735.2" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.09%)</title><rect x="738.6" y="515.0" width="12.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="741.6" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 6.01%)</title><rect x="751.5" y="515.0" width="71.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="754.5" y="526.0">PhaseCha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.19%)</title><rect x="783.8" y="499.0" width="25.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="786.8" y="510.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.09%)</title><rect x="796.7" y="483.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="799.7" y="494.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 1.09%)</title><rect x="809.6" y="499.0" width="12.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="812.6" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 1.09%)</title><rect x="822.5" y="515.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="825.5" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.55%)</title><rect x="828.9" y="499.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.9" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.55%)</title><rect x="835.4" y="515.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="838.4" y="526.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.55%)</title><rect x="835.4" y="499.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="838.4" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.09%)</title><rect x="841.8" y="515.0" width="12.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="844.8" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.55%)</title><rect x="854.7" y="515.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="857.7" y="526.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.55%)</title><rect x="861.1" y="515.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="864.1" y="526.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.55%)</title><rect x="861.1" y="499.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="864.1" y="510.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.55%)</title><rect x="861.1" y="483.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="864.1" y="494.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.55%)</title><rect x="861.1" y="467.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="864.1" y="478.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.55%)</title><rect x="867.6" y="515.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="870.6" y="526.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.55%)</title><rect x="867.6" y="499.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="870.6" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.55%)</title><rect x="874.0" y="515.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="877.0" y="526.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.09%)</title><rect x="880.5" y="515.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="883.5" y="526.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.09%)</title><rect x="880.5" y="499.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="883.5" y="510.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.55%)</title><rect x="886.9" y="483.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="889.9" y="494.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 17.49%)</title><rect x="893.4" y="547.0" width="206.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="896.4" y="558.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 1.09%)</title><rect x="893.4" y="531.0" width="12.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="896.4" y="542.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 1.09%)</title><rect x="893.4" y="515.0" width="12.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="896.4" y="526.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.55%)</title><rect x="899.8" y="499.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="902.8" y="510.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.55%)</title><rect x="906.3" y="531.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.3" y="542.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.55%)</title><rect x="906.3" y="515.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="909.3" y="526.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.55%)</title><rect x="906.3" y="499.0" width="6.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="909.3" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.55%)</title><rect x="912.7" y="531.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.55%)</title><rect x="912.7" y="515.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="915.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="499.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="915.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="483.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="915.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="467.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="915.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="451.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="915.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="435.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="915.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="419.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="915.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="403.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="915.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="387.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="371.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="915.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="355.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="915.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="339.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="915.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="323.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="915.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="307.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="291.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="915.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="275.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="259.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="915.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="243.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="915.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="227.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="915.7" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="211.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="915.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="195.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.7" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="179.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="915.7" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="163.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.7" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="147.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="915.7" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="131.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="915.7" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="115.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="915.7" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="99.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="915.7" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="83.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="915.7" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.55%)</title><rect x="912.7" y="67.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.7" y="78.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.55%)</title><rect x="912.7" y="51.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.7" y="62.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.55%)</title><rect x="919.2" y="531.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="922.2" y="542.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.55%)</title><rect x="919.2" y="515.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="922.2" y="526.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.55%)</title><rect x="919.2" y="499.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.2" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.55%)</title><rect x="919.2" y="483.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="922.2" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.55%)</title><rect x="919.2" y="467.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.2" y="478.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.55%)</title><rect x="919.2" y="451.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="922.2" y="462.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.55%)</title><rect x="919.2" y="435.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="922.2" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 12.57%)</title><rect x="925.6" y="531.0" width="148.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="928.6" y="542.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.55%)</title><rect x="925.6" y="515.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="928.6" y="526.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.55%)</title><rect x="925.6" y="499.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="928.6" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.64%)</title><rect x="932.1" y="515.0" width="19.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.1" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (12 samples, 6.56%)</title><rect x="951.4" y="515.0" width="77.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="954.4" y="526.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 3.83%)</title><rect x="983.7" y="499.0" width="45.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.7" y="510.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.55%)</title><rect x="990.1" y="483.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="993.1" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 2.73%)</title><rect x="996.6" y="483.0" width="32.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="999.6" y="494.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 2.19%)</title><rect x="1003.0" y="467.0" width="25.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1006.0" y="478.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.55%)</title><rect x="1028.8" y="515.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.8" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.55%)</title><rect x="1028.8" y="499.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.8" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 2.19%)</title><rect x="1035.2" y="515.0" width="25.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.2" y="526.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.09%)</title><rect x="1048.1" y="499.0" width="12.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1051.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.55%)</title><rect x="1048.1" y="483.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.1" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.55%)</title><rect x="1054.6" y="483.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.6" y="494.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.55%)</title><rect x="1054.6" y="467.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.6" y="478.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.55%)</title><rect x="1054.6" y="451.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.6" y="462.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.55%)</title><rect x="1054.6" y="435.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.6" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.09%)</title><rect x="1061.0" y="515.0" width="12.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.0" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.09%)</title><rect x="1061.0" y="499.0" width="12.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1064.0" y="510.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.55%)</title><rect x="1061.0" y="483.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1064.0" y="494.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1067.5" y="483.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.5" y="494.0"></text>
</g>
<g>
<title>HaltNode::is_CFG() const (1 samples, 0.55%)</title><rect x="1067.5" y="467.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.5" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.64%)</title><rect x="1073.9" y="531.0" width="19.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.9" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.64%)</title><rect x="1073.9" y="515.0" width="19.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.9" y="526.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1073.9" y="499.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.9" y="510.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1080.4" y="499.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.4" y="510.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.55%)</title><rect x="1080.4" y="483.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1083.4" y="494.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.55%)</title><rect x="1080.4" y="467.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.4" y="478.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.55%)</title><rect x="1086.8" y="499.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.8" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.55%)</title><rect x="1086.8" y="483.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.8" y="494.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.55%)</title><rect x="1086.8" y="467.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.8" y="478.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.55%)</title><rect x="1093.3" y="531.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.3" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.55%)</title><rect x="1093.3" y="515.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.3" y="526.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.55%)</title><rect x="1099.7" y="547.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.7" y="558.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.55%)</title><rect x="1099.7" y="531.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1099.7" y="515.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1099.7" y="499.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1099.7" y="483.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1099.7" y="467.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1099.7" y="451.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1099.7" y="435.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1099.7" y="419.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1099.7" y="403.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1099.7" y="387.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1099.7" y="371.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1099.7" y="355.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1099.7" y="339.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1099.7" y="323.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1099.7" y="307.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1099.7" y="291.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1099.7" y="275.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1099.7" y="259.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1099.7" y="243.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1099.7" y="227.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1099.7" y="211.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1099.7" y="195.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1099.7" y="179.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1099.7" y="163.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1099.7" y="147.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1102.7" y="158.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1099.7" y="131.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.7" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.55%)</title><rect x="1099.7" y="115.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.7" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_arraycopy() (1 samples, 0.55%)</title><rect x="1099.7" y="99.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.7" y="110.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.55%)</title><rect x="1099.7" y="83.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.7" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 5.46%)</title><rect x="1106.2" y="547.0" width="64.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.2" y="558.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 5.46%)</title><rect x="1106.2" y="531.0" width="64.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.2" y="542.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 5.46%)</title><rect x="1106.2" y="515.0" width="64.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.2" y="526.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 5.46%)</title><rect x="1106.2" y="499.0" width="64.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.2" y="510.0">Parse::..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.55%)</title><rect x="1106.2" y="483.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.2" y="494.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.55%)</title><rect x="1106.2" y="467.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.2" y="478.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.55%)</title><rect x="1106.2" y="451.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.2" y="462.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.55%)</title><rect x="1106.2" y="435.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.2" y="446.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.55%)</title><rect x="1106.2" y="419.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 4.92%)</title><rect x="1112.6" y="483.0" width="58.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.6" y="494.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 4.92%)</title><rect x="1112.6" y="467.0" width="58.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.6" y="478.0">Parse:..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 4.92%)</title><rect x="1112.6" y="451.0" width="58.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.6" y="462.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 4.92%)</title><rect x="1112.6" y="435.0" width="58.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.6" y="446.0">Parse:..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.55%)</title><rect x="1112.6" y="419.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.6" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.55%)</title><rect x="1112.6" y="403.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.6" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.55%)</title><rect x="1112.6" y="387.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 4.37%)</title><rect x="1119.1" y="419.0" width="51.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.1" y="430.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 4.37%)</title><rect x="1119.1" y="403.0" width="51.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.1" y="414.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 4.37%)</title><rect x="1119.1" y="387.0" width="51.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.1" y="398.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.83%)</title><rect x="1119.1" y="371.0" width="45.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.1" y="382.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.55%)</title><rect x="1119.1" y="355.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.1" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.55%)</title><rect x="1119.1" y="339.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.1" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.55%)</title><rect x="1119.1" y="323.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.1" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.55%)</title><rect x="1119.1" y="307.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.1" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.55%)</title><rect x="1119.1" y="291.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.1" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.55%)</title><rect x="1119.1" y="275.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.55%)</title><rect x="1119.1" y="259.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.55%)</title><rect x="1119.1" y="243.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.1" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.55%)</title><rect x="1119.1" y="227.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.1" y="238.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.55%)</title><rect x="1119.1" y="211.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.1" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.55%)</title><rect x="1119.1" y="195.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.1" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.55%)</title><rect x="1119.1" y="179.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.1" y="190.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.55%)</title><rect x="1119.1" y="163.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.1" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.55%)</title><rect x="1119.1" y="147.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.1" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.55%)</title><rect x="1119.1" y="131.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.1" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.55%)</title><rect x="1119.1" y="115.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.1" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.55%)</title><rect x="1119.1" y="99.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.1" y="110.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.55%)</title><rect x="1119.1" y="83.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.1" y="94.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.55%)</title><rect x="1119.1" y="67.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.1" y="78.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.55%)</title><rect x="1119.1" y="51.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.1" y="62.0"></text>
</g>
<g>
<title>JNIHandles::make_local(Thread*, oopDesc*) (1 samples, 0.55%)</title><rect x="1119.1" y="35.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.1" y="46.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1125.5" y="355.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.5" y="366.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.55%)</title><rect x="1125.5" y="339.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.5" y="350.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.55%)</title><rect x="1125.5" y="323.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.5" y="334.0"></text>
</g>
<g>
<title>LibraryCallKit::make_unsafe_address(Node*, Node*, bool) (1 samples, 0.55%)</title><rect x="1125.5" y="307.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.5" y="318.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.55%)</title><rect x="1125.5" y="291.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.5" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.55%)</title><rect x="1125.5" y="275.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.5" y="286.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.55%)</title><rect x="1125.5" y="259.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.5" y="270.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.55%)</title><rect x="1125.5" y="243.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.5" y="254.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.55%)</title><rect x="1125.5" y="227.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.5" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.19%)</title><rect x="1132.0" y="355.0" width="25.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.0" y="366.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.19%)</title><rect x="1132.0" y="339.0" width="25.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.0" y="350.0">P..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.55%)</title><rect x="1132.0" y="323.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.0" y="334.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.55%)</title><rect x="1132.0" y="307.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.64%)</title><rect x="1138.4" y="323.0" width="19.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.64%)</title><rect x="1138.4" y="307.0" width="19.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.64%)</title><rect x="1138.4" y="291.0" width="19.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.64%)</title><rect x="1138.4" y="275.0" width="19.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.4" y="286.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.55%)</title><rect x="1138.4" y="259.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.4" y="270.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.55%)</title><rect x="1138.4" y="243.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.4" y="254.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.55%)</title><rect x="1138.4" y="227.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.4" y="238.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.55%)</title><rect x="1138.4" y="211.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.4" y="222.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.55%)</title><rect x="1138.4" y="195.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.4" y="206.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.55%)</title><rect x="1138.4" y="179.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.4" y="190.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.55%)</title><rect x="1138.4" y="163.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.4" y="174.0"></text>
</g>
<g>
<title>ciMethod::was_executed_more_than(int) (1 samples, 0.55%)</title><rect x="1138.4" y="147.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.4" y="158.0"></text>
</g>
<g>
<title>Method::was_executed_more_than(int) (1 samples, 0.55%)</title><rect x="1138.4" y="131.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.4" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1144.9" y="259.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.9" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1144.9" y="243.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1144.9" y="227.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1144.9" y="211.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1144.9" y="195.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1144.9" y="179.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.9" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1144.9" y="163.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.9" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1144.9" y="147.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1144.9" y="131.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1144.9" y="115.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1144.9" y="99.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1144.9" y="83.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="94.0"></text>
</g>
<g>
<title>GraphKit::round_double_result(ciMethod*) (1 samples, 0.55%)</title><rect x="1144.9" y="67.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.9" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.3" y="259.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.3" y="243.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.3" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1151.3" y="227.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1151.3" y="211.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1151.3" y="195.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1151.3" y="179.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.55%)</title><rect x="1151.3" y="163.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.55%)</title><rect x="1151.3" y="147.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.55%)</title><rect x="1151.3" y="131.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.55%)</title><rect x="1151.3" y="115.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.3" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.55%)</title><rect x="1151.3" y="99.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.3" y="110.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.55%)</title><rect x="1151.3" y="83.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.3" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.55%)</title><rect x="1151.3" y="67.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.3" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.55%)</title><rect x="1151.3" y="51.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.3" y="62.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1157.8" y="355.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.8" y="366.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.55%)</title><rect x="1157.8" y="339.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.8" y="350.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.55%)</title><rect x="1157.8" y="323.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.8" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.55%)</title><rect x="1157.8" y="307.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.8" y="318.0"></text>
</g>
<g>
<title>constantPoolHandle::constantPoolHandle(constantPoolHandle const&amp;) (1 samples, 0.55%)</title><rect x="1157.8" y="291.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.55%)</title><rect x="1164.2" y="371.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.2" y="382.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.55%)</title><rect x="1164.2" y="355.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.2" y="366.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.55%)</title><rect x="1164.2" y="339.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.2" y="350.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.55%)</title><rect x="1164.2" y="323.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.2" y="334.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.64%)</title><rect x="1170.7" y="579.0" width="19.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.7" y="590.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.55%)</title><rect x="1170.7" y="563.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="574.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.09%)</title><rect x="1177.1" y="563.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.09%)</title><rect x="1177.1" y="547.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="558.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.09%)</title><rect x="1177.1" y="531.0" width="12.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="542.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.09%)</title><rect x="1177.1" y="515.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="526.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.55%)</title><rect x="1177.1" y="499.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="510.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.55%)</title><rect x="1177.1" y="483.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.55%)</title><rect x="1177.1" y="467.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.55%)</title><rect x="1177.1" y="451.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.55%)</title><rect x="1177.1" y="435.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.55%)</title><rect x="1177.1" y="419.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.55%)</title><rect x="1177.1" y="403.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.55%)</title><rect x="1177.1" y="387.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.55%)</title><rect x="1177.1" y="371.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.55%)</title><rect x="1177.1" y="355.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.55%)</title><rect x="1177.1" y="339.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="350.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.55%)</title><rect x="1177.1" y="323.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.55%)</title><rect x="1177.1" y="307.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.55%)</title><rect x="1177.1" y="291.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="302.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.55%)</title><rect x="1177.1" y="275.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="286.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.55%)</title><rect x="1183.6" y="499.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="510.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.55%)</title><rect x="1183.6" y="483.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="494.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (1 samples, 0.55%)</title><rect x="1183.6" y="467.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="478.0"></text>
</g>
<g>
<title>NullCheckEliminator::merge_state_for(BlockBegin*, ValueSet*) (1 samples, 0.55%)</title><rect x="1183.6" y="451.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.6" y="462.0"></text>
</g>
<g>
<title>BitMap::set_intersection_with_result(BitMap) (1 samples, 0.55%)</title><rect x="1183.6" y="435.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="446.0"></text>
</g>
</g>
</svg>
