<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1542" onload="init(evt)" viewBox="0 0 1200 1542" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1525"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1525"> </text>
<g id="frames">
<g>
<title>all (1,243 samples, 100.00%)</title><rect x="10.0" y="1491.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1502.0">all</text>
</g>
<g>
<title>[unknown] (2 samples, 0.16%)</title><rect x="10.0" y="1475.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>_int_malloc (2 samples, 0.16%)</title><rect x="10.0" y="1459.0" width="1.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (249 samples, 20.03%)</title><rect x="11.9" y="1475.0" width="236.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="1486.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.08%)</title><rect x="11.9" y="1459.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.9" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (248 samples, 19.95%)</title><rect x="12.8" y="1459.0" width="235.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.8" y="1470.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.32%)</title><rect x="12.8" y="1443.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.8" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.16%)</title><rect x="14.7" y="1427.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.7" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/113598580.accept (2 samples, 0.16%)</title><rect x="14.7" y="1411.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.7" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.16%)</title><rect x="14.7" y="1395.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.7" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.16%)</title><rect x="14.7" y="1379.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.7" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.16%)</title><rect x="14.7" y="1363.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.32%)</title><rect x="16.6" y="1443.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.6" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.24%)</title><rect x="17.6" y="1427.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.6" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.24%)</title><rect x="17.6" y="1411.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.6" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.24%)</title><rect x="17.6" y="1395.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.6" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.08%)</title><rect x="17.6" y="1379.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.6" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.08%)</title><rect x="17.6" y="1363.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.6" y="1374.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="17.6" y="1347.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.6" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="17.6" y="1331.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.6" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="17.6" y="1315.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.6" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="18.5" y="1379.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.5" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="18.5" y="1363.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.5" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="18.5" y="1347.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.5" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="18.5" y="1331.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.5" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="18.5" y="1315.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.5" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="18.5" y="1299.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.5" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="18.5" y="1283.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.5" y="1294.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="18.5" y="1267.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="21.5" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="19.5" y="1331.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.5" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="19.5" y="1315.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="19.5" y="1299.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (184 samples, 14.80%)</title><rect x="20.4" y="1443.0" width="174.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.4" y="1454.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2074020945.accept (176 samples, 14.16%)</title><rect x="22.3" y="1427.0" width="167.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.3" y="1438.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (176 samples, 14.16%)</title><rect x="22.3" y="1411.0" width="167.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.3" y="1422.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.08%)</title><rect x="22.3" y="1395.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.3" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (142 samples, 11.42%)</title><rect x="23.3" y="1395.0" width="134.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.3" y="1406.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (142 samples, 11.42%)</title><rect x="23.3" y="1379.0" width="134.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.3" y="1390.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (142 samples, 11.42%)</title><rect x="23.3" y="1363.0" width="134.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.3" y="1374.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (142 samples, 11.42%)</title><rect x="23.3" y="1347.0" width="134.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.3" y="1358.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (142 samples, 11.42%)</title><rect x="23.3" y="1331.0" width="134.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="1342.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (142 samples, 11.42%)</title><rect x="23.3" y="1315.0" width="134.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.3" y="1326.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (101 samples, 8.13%)</title><rect x="23.3" y="1299.0" width="95.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.3" y="1310.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (20 samples, 1.61%)</title><rect x="23.3" y="1283.0" width="19.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (20 samples, 1.61%)</title><rect x="23.3" y="1267.0" width="19.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 1.21%)</title><rect x="28.0" y="1251.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (14 samples, 1.13%)</title><rect x="29.0" y="1235.0" width="13.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.56%)</title><rect x="42.3" y="1283.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (7 samples, 0.56%)</title><rect x="42.3" y="1267.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.32%)</title><rect x="43.2" y="1251.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="46.2" y="1262.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.24%)</title><rect x="44.2" y="1235.0" width="2.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="47.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.16%)</title><rect x="47.0" y="1251.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (74 samples, 5.95%)</title><rect x="48.9" y="1283.0" width="70.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.9" y="1294.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (74 samples, 5.95%)</title><rect x="48.9" y="1267.0" width="70.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.9" y="1278.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (74 samples, 5.95%)</title><rect x="48.9" y="1251.0" width="70.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.9" y="1262.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (74 samples, 5.95%)</title><rect x="48.9" y="1235.0" width="70.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.9" y="1246.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (72 samples, 5.79%)</title><rect x="50.8" y="1219.0" width="68.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.8" y="1230.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 5.31%)</title><rect x="52.7" y="1203.0" width="62.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="55.7" y="1214.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="53.7" y="1187.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="56.7" y="1198.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="54.6" y="1187.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="57.6" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="56.5" y="1187.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="59.5" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 3.38%)</title><rect x="57.5" y="1187.0" width="39.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="60.5" y="1198.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (6 samples, 0.48%)</title><rect x="97.3" y="1187.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="100.3" y="1198.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.05%)</title><rect x="103.0" y="1187.0" width="12.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="106.0" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.24%)</title><rect x="115.4" y="1203.0" width="2.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="118.4" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="118.2" y="1203.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="121.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (33 samples, 2.65%)</title><rect x="119.2" y="1299.0" width="31.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.2" y="1310.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (33 samples, 2.65%)</title><rect x="119.2" y="1283.0" width="31.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.2" y="1294.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (33 samples, 2.65%)</title><rect x="119.2" y="1267.0" width="31.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="122.2" y="1278.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="148.6" y="1251.0" width="1.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="151.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.40%)</title><rect x="150.5" y="1299.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 0.40%)</title><rect x="150.5" y="1283.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.40%)</title><rect x="150.5" y="1267.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.5" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="154.3" y="1251.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="157.3" y="1262.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="154.3" y="1235.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="157.3" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="154.3" y="1219.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="157.3" y="1230.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="154.3" y="1203.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="157.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.24%)</title><rect x="155.2" y="1299.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="158.2" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.24%)</title><rect x="155.2" y="1283.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.24%)</title><rect x="155.2" y="1267.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="158.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="155.2" y="1251.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="158.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.16%)</title><rect x="156.2" y="1251.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.16%)</title><rect x="158.1" y="1395.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.1" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.16%)</title><rect x="158.1" y="1379.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.1" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (7 samples, 0.56%)</title><rect x="160.0" y="1395.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.0" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.56%)</title><rect x="160.0" y="1379.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="163.0" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.56%)</title><rect x="160.0" y="1363.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.0" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (24 samples, 1.93%)</title><rect x="166.6" y="1395.0" width="22.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="169.6" y="1406.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (24 samples, 1.93%)</title><rect x="166.6" y="1379.0" width="22.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="169.6" y="1390.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 0.97%)</title><rect x="175.2" y="1363.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.48%)</title><rect x="176.1" y="1347.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.1" y="1358.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.48%)</title><rect x="176.1" y="1331.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.1" y="1342.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.48%)</title><rect x="176.1" y="1315.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.1" y="1326.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="179.0" y="1299.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="182.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="181.8" y="1347.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.8" y="1358.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.32%)</title><rect x="182.8" y="1347.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.8" y="1358.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="186.6" y="1363.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="189.6" y="1374.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="187.5" y="1363.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="190.5" y="1374.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="189.4" y="1427.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="192.4" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.08%)</title><rect x="190.4" y="1427.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.4" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.08%)</title><rect x="190.4" y="1411.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="190.4" y="1395.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.4" y="1406.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="190.4" y="1379.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="193.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.24%)</title><rect x="191.3" y="1427.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.3" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.24%)</title><rect x="191.3" y="1411.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.3" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.24%)</title><rect x="191.3" y="1395.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.24%)</title><rect x="191.3" y="1379.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.3" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (2 samples, 0.16%)</title><rect x="192.3" y="1363.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="195.3" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.16%)</title><rect x="192.3" y="1347.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="194.2" y="1427.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="197.2" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="194.2" y="1411.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="197.2" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.08%)</title><rect x="195.1" y="1443.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="198.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.42%)</title><rect x="196.1" y="1443.0" width="52.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.1" y="1454.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.42%)</title><rect x="196.1" y="1427.0" width="52.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.1" y="1438.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (29 samples, 2.33%)</title><rect x="196.1" y="1411.0" width="27.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="199.1" y="1422.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (29 samples, 2.33%)</title><rect x="196.1" y="1395.0" width="27.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="199.1" y="1406.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (29 samples, 2.33%)</title><rect x="196.1" y="1379.0" width="27.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.1" y="1390.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.09%)</title><rect x="196.1" y="1363.0" width="24.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.1" y="1374.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.09%)</title><rect x="196.1" y="1347.0" width="24.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="199.1" y="1358.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (8 samples, 0.64%)</title><rect x="196.1" y="1331.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.16%)</title><rect x="201.8" y="1315.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.16%)</title><rect x="201.8" y="1299.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.16%)</title><rect x="201.8" y="1283.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.16%)</title><rect x="201.8" y="1267.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.16%)</title><rect x="201.8" y="1251.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.16%)</title><rect x="201.8" y="1235.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.16%)</title><rect x="201.8" y="1219.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (18 samples, 1.45%)</title><rect x="203.7" y="1331.0" width="17.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="203.7" y="1315.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (17 samples, 1.37%)</title><rect x="204.6" y="1315.0" width="16.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.64%)</title><rect x="204.6" y="1299.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.6" y="1310.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.64%)</title><rect x="204.6" y="1283.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.6" y="1294.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="210.3" y="1267.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="213.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (8 samples, 0.64%)</title><rect x="212.2" y="1299.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.2" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.64%)</title><rect x="212.2" y="1283.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.2" y="1294.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="218.8" y="1267.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="221.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.08%)</title><rect x="219.8" y="1299.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.08%)</title><rect x="219.8" y="1283.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.8" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="219.8" y="1267.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="222.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="220.7" y="1363.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="220.7" y="1347.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="220.7" y="1331.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.7" y="1342.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="220.7" y="1315.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.7" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="220.7" y="1299.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.08%)</title><rect x="220.7" y="1283.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.7" y="1294.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="220.7" y="1267.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="223.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="221.7" y="1363.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="224.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="221.7" y="1347.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="221.7" y="1331.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="221.7" y="1315.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.08%)</title><rect x="222.6" y="1363.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="222.6" y="1347.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="222.6" y="1331.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.6" y="1342.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="222.6" y="1315.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.6" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="222.6" y="1299.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.64%)</title><rect x="223.6" y="1411.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.64%)</title><rect x="223.6" y="1395.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.32%)</title><rect x="223.6" y="1379.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="223.6" y="1363.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.6" y="1374.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.16%)</title><rect x="223.6" y="1347.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.6" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="224.5" y="1331.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.5" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="224.5" y="1315.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.5" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="224.5" y="1299.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.5" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="225.5" y="1363.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.5" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="225.5" y="1347.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.5" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="225.5" y="1331.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.5" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="225.5" y="1315.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.5" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="225.5" y="1299.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.5" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="225.5" y="1283.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="226.4" y="1363.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.4" y="1374.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="226.4" y="1347.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.4" y="1358.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="226.4" y="1331.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.4" y="1342.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="226.4" y="1315.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.4" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="226.4" y="1299.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.4" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="226.4" y="1283.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (4 samples, 0.32%)</title><rect x="227.4" y="1379.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.4" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (4 samples, 0.32%)</title><rect x="227.4" y="1363.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.4" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.32%)</title><rect x="227.4" y="1347.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.4" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (4 samples, 0.32%)</title><rect x="227.4" y="1331.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.4" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.24%)</title><rect x="228.3" y="1315.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.3" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.24%)</title><rect x="228.3" y="1299.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.3" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.24%)</title><rect x="228.3" y="1283.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.3" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (3 samples, 0.24%)</title><rect x="228.3" y="1267.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.3" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (3 samples, 0.24%)</title><rect x="228.3" y="1251.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.3" y="1262.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (2 samples, 0.16%)</title><rect x="228.3" y="1235.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.3" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.08%)</title><rect x="228.3" y="1219.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.3" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="229.3" y="1219.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/714435219.apply (1 samples, 0.08%)</title><rect x="229.3" y="1203.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.3" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.cancellationRequested (1 samples, 0.08%)</title><rect x="230.2" y="1235.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.56%)</title><rect x="231.2" y="1411.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.2" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.48%)</title><rect x="231.2" y="1395.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleDisconnections (1 samples, 0.08%)</title><rect x="231.2" y="1379.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.2" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.08%)</title><rect x="231.2" y="1363.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.2" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.40%)</title><rect x="232.1" y="1379.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.32%)</title><rect x="232.1" y="1363.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.16%)</title><rect x="232.1" y="1347.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="232.1" y="1331.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.16%)</title><rect x="232.1" y="1315.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.16%)</title><rect x="232.1" y="1299.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.16%)</title><rect x="232.1" y="1283.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.1" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.16%)</title><rect x="232.1" y="1267.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.1" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="233.1" y="1251.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.1" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="233.1" y="1235.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.1" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="233.1" y="1219.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.1" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.08%)</title><rect x="233.1" y="1203.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.1" y="1214.0"></text>
</g>
<g>
<title>__read (1 samples, 0.08%)</title><rect x="233.1" y="1187.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="236.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (2 samples, 0.16%)</title><rect x="234.0" y="1347.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.0" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="234.0" y="1331.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="237.0" y="1342.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="234.0" y="1315.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="237.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="235.9" y="1363.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.9" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="235.9" y="1347.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.9" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="235.9" y="1331.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.9" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="235.9" y="1315.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.9" y="1326.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.08%)</title><rect x="235.9" y="1299.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.9" y="1310.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.08%)</title><rect x="235.9" y="1283.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="236.9" y="1395.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="236.9" y="1379.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="236.9" y="1363.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="236.9" y="1347.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="236.9" y="1331.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="236.9" y="1315.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="236.9" y="1299.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.08%)</title><rect x="236.9" y="1283.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.08%)</title><rect x="236.9" y="1267.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.9" y="1278.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.08%)</title><rect x="236.9" y="1251.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="239.9" y="1262.0"></text>
</g>
<g>
<title>SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="236.9" y="1235.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="239.9" y="1246.0"></text>
</g>
<g>
<title>CompiledIC::set_to_megamorphic(CallInfo*, Bytecodes::Code, Thread*) (1 samples, 0.08%)</title><rect x="236.9" y="1219.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="239.9" y="1230.0"></text>
</g>
<g>
<title>InlineCacheBuffer::create_transition_stub(CompiledIC*, void*, unsigned char*) (1 samples, 0.08%)</title><rect x="236.9" y="1203.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="239.9" y="1214.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.08%)</title><rect x="236.9" y="1187.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="239.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (9 samples, 0.72%)</title><rect x="237.8" y="1411.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.8" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (9 samples, 0.72%)</title><rect x="237.8" y="1395.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.8" y="1406.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.24%)</title><rect x="238.8" y="1379.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.8" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1673382240.accept (3 samples, 0.24%)</title><rect x="238.8" y="1363.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (3 samples, 0.24%)</title><rect x="238.8" y="1347.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="241.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (3 samples, 0.24%)</title><rect x="238.8" y="1331.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.8" y="1342.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.08%)</title><rect x="238.8" y="1315.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="241.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$211/1038386180.apply (1 samples, 0.08%)</title><rect x="238.8" y="1299.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.08%)</title><rect x="238.8" y="1283.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.16%)</title><rect x="239.7" y="1315.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.7" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="240.7" y="1299.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.7" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="240.7" y="1283.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.32%)</title><rect x="241.6" y="1379.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.6" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="242.6" y="1363.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.16%)</title><rect x="243.5" y="1363.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.5" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="243.5" y="1347.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.5" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="243.5" y="1331.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.5" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="243.5" y="1315.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.5" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="243.5" y="1299.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.5" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="243.5" y="1283.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="246.5" y="1294.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="243.5" y="1267.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.5" y="1278.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="243.5" y="1251.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.5" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="243.5" y="1235.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.5" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="243.5" y="1219.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="246.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/2107138693.test (1 samples, 0.08%)</title><rect x="243.5" y="1203.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.08%)</title><rect x="243.5" y="1187.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/204658276.test (1 samples, 0.08%)</title><rect x="243.5" y="1171.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.08%)</title><rect x="243.5" y="1155.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="243.5" y="1139.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.5" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="243.5" y="1123.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="243.5" y="1107.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.08%)</title><rect x="243.5" y="1091.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="244.5" y="1267.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.5" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="244.5" y="1251.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.5" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="244.5" y="1235.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.5" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="244.5" y="1219.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.5" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$169/2119524276.get (1 samples, 0.08%)</title><rect x="244.5" y="1203.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.5" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="245.4" y="1379.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="248.4" y="1390.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="245.4" y="1363.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="248.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="246.4" y="1411.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="246.4" y="1395.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="247.3" y="1411.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.3" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="247.3" y="1395.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="247.3" y="1379.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="247.3" y="1363.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="247.3" y="1347.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.3" y="1358.0"></text>
</g>
<g>
<title>java/lang/Thread.run (664 samples, 53.42%)</title><rect x="248.3" y="1475.0" width="630.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.3" y="1486.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (664 samples, 53.42%)</title><rect x="248.3" y="1459.0" width="630.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="251.3" y="1470.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (664 samples, 53.42%)</title><rect x="248.3" y="1443.0" width="630.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.3" y="1454.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883020.run (446 samples, 35.88%)</title><rect x="254.9" y="1427.0" width="423.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.9" y="1438.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (446 samples, 35.88%)</title><rect x="254.9" y="1411.0" width="423.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.9" y="1422.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (446 samples, 35.88%)</title><rect x="254.9" y="1395.0" width="423.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.9" y="1406.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (442 samples, 35.56%)</title><rect x="254.9" y="1379.0" width="419.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="257.9" y="1390.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sc..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="262.5" y="1363.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="265.5" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.24%)</title><rect x="263.5" y="1363.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.5" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.08%)</title><rect x="266.3" y="1363.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.3" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.08%)</title><rect x="266.3" y="1347.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.3" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/1542620057.get (1 samples, 0.08%)</title><rect x="266.3" y="1331.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.08%)</title><rect x="266.3" y="1315.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.3" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="266.3" y="1299.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="269.3" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="266.3" y="1283.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="269.3" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="266.3" y="1267.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="269.3" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="266.3" y="1251.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="269.3" y="1262.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="266.3" y="1235.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="269.3" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="266.3" y="1219.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="269.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (132 samples, 10.62%)</title><rect x="267.3" y="1363.0" width="125.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="270.3" y="1374.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (132 samples, 10.62%)</title><rect x="267.3" y="1347.0" width="125.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.3" y="1358.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (132 samples, 10.62%)</title><rect x="267.3" y="1331.0" width="125.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="270.3" y="1342.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="267.3" y="1315.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="270.3" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="267.3" y="1299.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="270.3" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="267.3" y="1283.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="270.3" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (131 samples, 10.54%)</title><rect x="268.2" y="1315.0" width="124.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.2" y="1326.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (131 samples, 10.54%)</title><rect x="268.2" y="1299.0" width="124.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.2" y="1310.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (131 samples, 10.54%)</title><rect x="268.2" y="1283.0" width="124.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.2" y="1294.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (37 samples, 2.98%)</title><rect x="268.2" y="1267.0" width="35.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.2" y="1278.0">com..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="277.7" y="1251.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="280.7" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.48%)</title><rect x="279.6" y="1251.0" width="5.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="282.6" y="1262.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="281.5" y="1235.0" width="3.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="284.5" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.64%)</title><rect x="285.3" y="1251.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.64%)</title><rect x="285.3" y="1235.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.64%)</title><rect x="285.3" y="1219.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.64%)</title><rect x="285.3" y="1203.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (8 samples, 0.64%)</title><rect x="285.3" y="1187.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.64%)</title><rect x="285.3" y="1171.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (11 samples, 0.88%)</title><rect x="292.9" y="1251.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.9" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 0.32%)</title><rect x="299.5" y="1235.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.5" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.16%)</title><rect x="299.5" y="1219.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.5" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.16%)</title><rect x="299.5" y="1203.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.5" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.16%)</title><rect x="301.4" y="1219.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.4" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.16%)</title><rect x="301.4" y="1203.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.4" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.16%)</title><rect x="301.4" y="1187.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.4" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="301.4" y="1171.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="304.4" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="302.4" y="1155.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="305.4" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="302.4" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="305.4" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="302.4" y="1123.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="305.4" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="302.4" y="1107.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="305.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (92 samples, 7.40%)</title><rect x="303.3" y="1267.0" width="87.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="306.3" y="1278.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.24%)</title><rect x="304.3" y="1251.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="307.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.16%)</title><rect x="305.2" y="1235.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (14 samples, 1.13%)</title><rect x="307.1" y="1251.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.1" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.13%)</title><rect x="307.1" y="1235.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (10 samples, 0.80%)</title><rect x="310.9" y="1219.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.9" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (9 samples, 0.72%)</title><rect x="311.9" y="1203.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.9" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="314.7" y="1187.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="317.7" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="314.7" y="1171.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="317.7" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="314.7" y="1155.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="317.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (5 samples, 0.40%)</title><rect x="315.7" y="1187.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (10 samples, 0.80%)</title><rect x="320.4" y="1251.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.4" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="322.3" y="1235.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="325.3" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="322.3" y="1219.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="325.3" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="322.3" y="1203.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="325.3" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="322.3" y="1187.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="325.3" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="322.3" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="325.3" y="1182.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="323.3" y="1171.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="326.3" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="323.3" y="1155.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="326.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.48%)</title><rect x="324.2" y="1235.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (64 samples, 5.15%)</title><rect x="329.9" y="1251.0" width="60.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="332.9" y="1262.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (25 samples, 2.01%)</title><rect x="330.9" y="1235.0" width="23.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="333.9" y="1246.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.64%)</title><rect x="331.8" y="1219.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.64%)</title><rect x="331.8" y="1203.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="334.8" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.64%)</title><rect x="331.8" y="1187.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="334.8" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.48%)</title><rect x="333.7" y="1171.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (6 samples, 0.48%)</title><rect x="333.7" y="1155.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="336.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (12 samples, 0.97%)</title><rect x="339.4" y="1219.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.4" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.40%)</title><rect x="339.4" y="1203.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.4" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (7 samples, 0.56%)</title><rect x="344.2" y="1203.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (7 samples, 0.56%)</title><rect x="344.2" y="1187.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="347.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (6 samples, 0.48%)</title><rect x="345.1" y="1171.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (6 samples, 0.48%)</title><rect x="345.1" y="1155.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.32%)</title><rect x="350.8" y="1219.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.32%)</title><rect x="350.8" y="1203.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.8" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (38 samples, 3.06%)</title><rect x="354.6" y="1235.0" width="36.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="357.6" y="1246.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (38 samples, 3.06%)</title><rect x="354.6" y="1219.0" width="36.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.6" y="1230.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="356.5" y="1203.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.5" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (35 samples, 2.82%)</title><rect x="357.4" y="1203.0" width="33.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="360.4" y="1214.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.29%)</title><rect x="358.4" y="1187.0" width="15.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="361.4" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.40%)</title><rect x="362.2" y="1171.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.40%)</title><rect x="362.2" y="1155.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="365.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.40%)</title><rect x="362.2" y="1139.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.24%)</title><rect x="364.1" y="1123.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="367.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.24%)</title><rect x="364.1" y="1107.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="367.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.16%)</title><rect x="365.0" y="1091.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.16%)</title><rect x="365.0" y="1075.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="368.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.40%)</title><rect x="366.9" y="1171.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.08%)</title><rect x="366.9" y="1155.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="369.9" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.32%)</title><rect x="367.9" y="1155.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="370.9" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.32%)</title><rect x="367.9" y="1139.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="370.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.16%)</title><rect x="371.7" y="1171.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.16%)</title><rect x="371.7" y="1155.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="374.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.56%)</title><rect x="373.6" y="1187.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.6" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.56%)</title><rect x="373.6" y="1171.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="376.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.08%)</title><rect x="376.4" y="1155.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.08%)</title><rect x="376.4" y="1139.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.08%)</title><rect x="376.4" y="1123.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.4" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="376.4" y="1107.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="379.4" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.08%)</title><rect x="376.4" y="1091.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="379.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.24%)</title><rect x="377.4" y="1155.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.24%)</title><rect x="377.4" y="1139.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.24%)</title><rect x="377.4" y="1123.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="380.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.32%)</title><rect x="380.2" y="1187.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="383.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.32%)</title><rect x="380.2" y="1171.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="383.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.32%)</title><rect x="380.2" y="1155.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.32%)</title><rect x="380.2" y="1139.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="383.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.32%)</title><rect x="380.2" y="1123.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.2" y="1134.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.32%)</title><rect x="380.2" y="1107.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="383.2" y="1118.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (2 samples, 0.16%)</title><rect x="382.1" y="1091.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="385.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.16%)</title><rect x="384.0" y="1187.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="387.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.16%)</title><rect x="384.0" y="1171.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="387.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.16%)</title><rect x="384.0" y="1155.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.40%)</title><rect x="385.9" y="1187.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.9" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (5 samples, 0.40%)</title><rect x="385.9" y="1171.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="388.9" y="1182.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (1 samples, 0.08%)</title><rect x="389.7" y="1155.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.16%)</title><rect x="390.7" y="1267.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.7" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.16%)</title><rect x="390.7" y="1251.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.7" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.16%)</title><rect x="390.7" y="1235.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.16%)</title><rect x="390.7" y="1219.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.16%)</title><rect x="390.7" y="1203.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (276 samples, 22.20%)</title><rect x="392.6" y="1363.0" width="262.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="395.6" y="1374.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (47 samples, 3.78%)</title><rect x="393.5" y="1347.0" width="44.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="396.5" y="1358.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (47 samples, 3.78%)</title><rect x="393.5" y="1331.0" width="44.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.5" y="1342.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (45 samples, 3.62%)</title><rect x="395.4" y="1315.0" width="42.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="398.4" y="1326.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.64%)</title><rect x="397.3" y="1299.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.3" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.64%)</title><rect x="397.3" y="1283.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="400.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.64%)</title><rect x="397.3" y="1267.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.64%)</title><rect x="397.3" y="1251.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.32%)</title><rect x="401.1" y="1235.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="404.1" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 0.32%)</title><rect x="401.1" y="1219.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.1" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (35 samples, 2.82%)</title><rect x="404.9" y="1299.0" width="33.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.9" y="1310.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (13 samples, 1.05%)</title><rect x="425.8" y="1283.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="428.8" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.16%)</title><rect x="425.8" y="1267.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="426.7" y="1251.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="429.7" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 0.88%)</title><rect x="427.7" y="1267.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.7" y="1278.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="437.2" y="1251.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="440.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.24%)</title><rect x="438.1" y="1347.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="441.1" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="439.1" y="1331.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="442.1" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.16%)</title><rect x="439.1" y="1315.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="442.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (163 samples, 13.11%)</title><rect x="441.0" y="1347.0" width="154.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="444.0" y="1358.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (163 samples, 13.11%)</title><rect x="441.0" y="1331.0" width="154.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.0" y="1342.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.32%)</title><rect x="451.4" y="1315.0" width="3.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="454.4" y="1326.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="452.4" y="1299.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="455.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (71 samples, 5.71%)</title><rect x="455.2" y="1315.0" width="67.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="458.2" y="1326.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (71 samples, 5.71%)</title><rect x="455.2" y="1299.0" width="67.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="458.2" y="1310.0">java/la..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (53 samples, 4.26%)</title><rect x="463.8" y="1283.0" width="50.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="466.8" y="1294.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="478.0" y="1267.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (33 samples, 2.65%)</title><rect x="479.0" y="1267.0" width="31.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="482.0" y="1278.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (33 samples, 2.65%)</title><rect x="479.0" y="1251.0" width="31.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.0" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (33 samples, 2.65%)</title><rect x="479.0" y="1235.0" width="31.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.0" y="1246.0">ja..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="490.4" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="493.4" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (13 samples, 1.05%)</title><rect x="491.3" y="1219.0" width="12.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="494.3" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.48%)</title><rect x="492.3" y="1203.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="495.3" y="1214.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="492.3" y="1187.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.3" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="492.3" y="1171.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="495.3" y="1182.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="493.2" y="1187.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="496.2" y="1198.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.32%)</title><rect x="494.2" y="1187.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="497.2" y="1198.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.24%)</title><rect x="495.1" y="1171.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="498.1" y="1182.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="495.1" y="1155.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="498.1" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="495.1" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="498.1" y="1150.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.08%)</title><rect x="496.0" y="1155.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="499.0" y="1166.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="497.0" y="1155.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="500.0" y="1166.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.48%)</title><rect x="497.9" y="1203.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="500.9" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (6 samples, 0.48%)</title><rect x="497.9" y="1187.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="500.9" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (3 samples, 0.24%)</title><rect x="497.9" y="1171.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="500.9" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.16%)</title><rect x="498.9" y="1155.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="501.9" y="1166.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="498.9" y="1139.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="501.9" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="498.9" y="1123.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="501.9" y="1134.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="498.9" y="1107.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="501.9" y="1118.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="499.8" y="1139.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="502.8" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.16%)</title><rect x="500.8" y="1171.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="503.8" y="1182.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="502.7" y="1171.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="505.7" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.56%)</title><rect x="503.6" y="1219.0" width="6.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="506.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.32%)</title><rect x="510.3" y="1267.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="513.3" y="1278.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="514.1" y="1283.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="517.1" y="1294.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.64%)</title><rect x="515.0" y="1283.0" width="7.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="518.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="522.6" y="1315.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="525.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.40%)</title><rect x="523.6" y="1315.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="526.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.40%)</title><rect x="523.6" y="1299.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="526.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.40%)</title><rect x="523.6" y="1283.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="526.6" y="1294.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (71 samples, 5.71%)</title><rect x="528.3" y="1315.0" width="67.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="531.3" y="1326.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (69 samples, 5.55%)</title><rect x="530.2" y="1299.0" width="65.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="533.2" y="1310.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.48%)</title><rect x="530.2" y="1283.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.48%)</title><rect x="530.2" y="1267.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.48%)</title><rect x="530.2" y="1251.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="533.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.48%)</title><rect x="530.2" y="1235.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="533.2" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (63 samples, 5.07%)</title><rect x="535.9" y="1283.0" width="59.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="538.9" y="1294.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (60 samples, 4.83%)</title><rect x="538.8" y="1267.0" width="56.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="541.8" y="1278.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (38 samples, 3.06%)</title><rect x="559.7" y="1251.0" width="36.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.7" y="1262.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.24%)</title><rect x="583.4" y="1235.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="586.4" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.56%)</title><rect x="586.2" y="1235.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="589.2" y="1246.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.24%)</title><rect x="592.9" y="1235.0" width="2.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="595.9" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (43 samples, 3.46%)</title><rect x="595.7" y="1347.0" width="40.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="598.7" y="1358.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (43 samples, 3.46%)</title><rect x="595.7" y="1331.0" width="40.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="598.7" y="1342.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/588734280.process (20 samples, 1.61%)</title><rect x="596.7" y="1315.0" width="19.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="599.7" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.61%)</title><rect x="596.7" y="1299.0" width="19.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="599.7" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.29%)</title><rect x="597.6" y="1283.0" width="15.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="600.6" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.48%)</title><rect x="599.5" y="1267.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="602.5" y="1278.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.48%)</title><rect x="599.5" y="1251.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="602.5" y="1262.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.48%)</title><rect x="599.5" y="1235.0" width="5.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="602.5" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.64%)</title><rect x="605.2" y="1267.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="608.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="611.9" y="1251.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="614.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="611.9" y="1235.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="614.9" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.16%)</title><rect x="612.8" y="1283.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="615.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="612.8" y="1267.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="615.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="612.8" y="1251.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="615.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="612.8" y="1235.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="615.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="614.7" y="1283.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="617.7" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="615.7" y="1315.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="618.7" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.08%)</title><rect x="615.7" y="1299.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="618.7" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (18 samples, 1.45%)</title><rect x="616.6" y="1315.0" width="17.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="619.6" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.48%)</title><rect x="628.0" y="1299.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="631.0" y="1310.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.40%)</title><rect x="628.0" y="1283.0" width="4.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="631.0" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.08%)</title><rect x="632.8" y="1283.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="635.8" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="633.7" y="1315.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="636.7" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="633.7" y="1299.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.7" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.16%)</title><rect x="634.7" y="1315.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.53%)</title><rect x="636.5" y="1347.0" width="18.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="639.5" y="1358.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.40%)</title><rect x="640.3" y="1331.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="643.3" y="1342.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.40%)</title><rect x="640.3" y="1315.0" width="4.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="643.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.80%)</title><rect x="645.1" y="1331.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="648.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.72%)</title><rect x="646.0" y="1315.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="649.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$275/1921032468.accept (9 samples, 0.72%)</title><rect x="646.0" y="1299.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="649.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.72%)</title><rect x="646.0" y="1283.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="649.0" y="1294.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (9 samples, 0.72%)</title><rect x="646.0" y="1267.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="649.0" y="1278.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (9 samples, 0.72%)</title><rect x="646.0" y="1251.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="649.0" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.56%)</title><rect x="647.9" y="1235.0" width="6.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="650.9" y="1246.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.56%)</title><rect x="647.9" y="1219.0" width="6.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="650.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.08%)</title><rect x="654.6" y="1363.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="654.6" y="1347.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="657.6" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/671123339.get$Lambda (1 samples, 0.08%)</title><rect x="654.6" y="1331.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="657.6" y="1342.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="654.6" y="1315.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="657.6" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="654.6" y="1299.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="657.6" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="654.6" y="1283.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="657.6" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="654.6" y="1267.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="657.6" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="654.6" y="1251.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="657.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.05%)</title><rect x="655.5" y="1363.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="658.5" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="656.5" y="1347.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="659.5" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.88%)</title><rect x="657.4" y="1347.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="660.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.64%)</title><rect x="659.3" y="1331.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="662.3" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/671123339.accept (8 samples, 0.64%)</title><rect x="659.3" y="1315.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="662.3" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (8 samples, 0.64%)</title><rect x="659.3" y="1299.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="662.3" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/868917848.complete (8 samples, 0.64%)</title><rect x="659.3" y="1283.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="662.3" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (8 samples, 0.64%)</title><rect x="659.3" y="1267.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="662.3" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 0.64%)</title><rect x="659.3" y="1251.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="662.3" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.64%)</title><rect x="659.3" y="1235.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="662.3" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.64%)</title><rect x="659.3" y="1219.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="662.3" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 0.64%)</title><rect x="659.3" y="1203.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.3" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (8 samples, 0.64%)</title><rect x="659.3" y="1187.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="662.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="666.9" y="1331.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="669.9" y="1342.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.56%)</title><rect x="667.9" y="1363.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="670.9" y="1374.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.56%)</title><rect x="667.9" y="1347.0" width="6.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="670.9" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.32%)</title><rect x="674.5" y="1379.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="677.5" y="1390.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="674.5" y="1363.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="677.5" y="1374.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="675.5" y="1363.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="678.5" y="1374.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="675.5" y="1347.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="678.5" y="1358.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="677.4" y="1363.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="680.4" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (211 samples, 16.98%)</title><rect x="678.3" y="1427.0" width="200.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="681.3" y="1438.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (211 samples, 16.98%)</title><rect x="678.3" y="1411.0" width="200.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.3" y="1422.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (176 samples, 14.16%)</title><rect x="702.1" y="1395.0" width="167.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="705.1" y="1406.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.97%)</title><rect x="707.7" y="1379.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="710.7" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.97%)</title><rect x="707.7" y="1363.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="710.7" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.97%)</title><rect x="707.7" y="1347.0" width="11.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="710.7" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.97%)</title><rect x="707.7" y="1331.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="710.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (158 samples, 12.71%)</title><rect x="719.1" y="1379.0" width="150.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="722.1" y="1390.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (158 samples, 12.71%)</title><rect x="719.1" y="1363.0" width="150.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="722.1" y="1374.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="723.9" y="1347.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="726.9" y="1358.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="724.8" y="1347.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="727.8" y="1358.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="725.8" y="1347.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="728.8" y="1358.0"></text>
</g>
<g>
<title>Unsafe_Park (146 samples, 11.75%)</title><rect x="727.7" y="1347.0" width="138.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="730.7" y="1358.0">Unsafe_Park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="729.6" y="1331.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="732.6" y="1342.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.61%)</title><rect x="730.5" y="1331.0" width="19.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="733.5" y="1342.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.64%)</title><rect x="737.2" y="1315.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="740.2" y="1326.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.16%)</title><rect x="738.1" y="1299.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="741.1" y="1310.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="739.1" y="1283.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="742.1" y="1294.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="740.0" y="1299.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="743.0" y="1310.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.24%)</title><rect x="741.9" y="1299.0" width="2.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="744.9" y="1310.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="744.8" y="1315.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="747.8" y="1326.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.32%)</title><rect x="745.7" y="1315.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="748.7" y="1326.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.24%)</title><rect x="749.5" y="1331.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="752.5" y="1342.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="752.4" y="1331.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="755.4" y="1342.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="754.3" y="1331.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="757.3" y="1342.0"></text>
</g>
<g>
<title>__lll_lock_wait (14 samples, 1.13%)</title><rect x="755.2" y="1331.0" width="13.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="758.2" y="1342.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 2.41%)</title><rect x="768.5" y="1331.0" width="28.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="771.5" y="1342.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (54 samples, 4.34%)</title><rect x="797.0" y="1331.0" width="51.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="800.0" y="1342.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.56%)</title><rect x="848.2" y="1331.0" width="6.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="851.2" y="1342.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.16%)</title><rect x="854.9" y="1331.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="857.9" y="1342.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="856.8" y="1331.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="859.8" y="1342.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="858.7" y="1331.0" width="2.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="861.7" y="1342.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="861.5" y="1331.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.5" y="1342.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="864.4" y="1331.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="867.4" y="1342.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="865.3" y="1331.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="868.3" y="1342.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="866.3" y="1347.0" width="1.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="869.3" y="1358.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="868.2" y="1347.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="871.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 0.80%)</title><rect x="869.1" y="1395.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="872.1" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.80%)</title><rect x="869.1" y="1379.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="872.1" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.80%)</title><rect x="869.1" y="1363.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="872.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.80%)</title><rect x="869.1" y="1347.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="872.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="878.6" y="1475.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="881.6" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="878.6" y="1459.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="881.6" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="878.6" y="1443.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="881.6" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="878.6" y="1427.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="881.6" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="878.6" y="1411.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="881.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="878.6" y="1395.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="881.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="878.6" y="1379.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="881.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="878.6" y="1363.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="881.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="878.6" y="1347.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="881.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="878.6" y="1331.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="881.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="878.6" y="1315.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="881.6" y="1326.0"></text>
</g>
<g>
<title>start_thread (327 samples, 26.31%)</title><rect x="879.6" y="1475.0" width="310.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="882.6" y="1486.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (327 samples, 26.31%)</title><rect x="879.6" y="1459.0" width="310.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="882.6" y="1470.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.69%)</title><rect x="879.6" y="1443.0" width="19.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="882.6" y="1454.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.56%)</title><rect x="879.6" y="1427.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.6" y="1438.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.56%)</title><rect x="879.6" y="1411.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="882.6" y="1422.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="879.6" y="1395.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="882.6" y="1406.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.48%)</title><rect x="880.5" y="1395.0" width="5.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="883.5" y="1406.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.13%)</title><rect x="886.2" y="1427.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="889.2" y="1438.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.08%)</title><rect x="886.2" y="1411.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="889.2" y="1422.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="886.2" y="1395.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="889.2" y="1406.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.40%)</title><rect x="887.2" y="1411.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="890.2" y="1422.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="887.2" y="1395.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="890.2" y="1406.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.16%)</title><rect x="887.2" y="1379.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="890.2" y="1390.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="888.1" y="1363.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.1" y="1374.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="888.1" y="1347.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="891.1" y="1358.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.24%)</title><rect x="889.1" y="1395.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="892.1" y="1406.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.24%)</title><rect x="889.1" y="1379.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="892.1" y="1390.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.64%)</title><rect x="891.9" y="1411.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="894.9" y="1422.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.64%)</title><rect x="891.9" y="1395.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="894.9" y="1406.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.56%)</title><rect x="891.9" y="1379.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="894.9" y="1390.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.56%)</title><rect x="891.9" y="1363.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="894.9" y="1374.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.56%)</title><rect x="891.9" y="1347.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.9" y="1358.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.56%)</title><rect x="891.9" y="1331.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="894.9" y="1342.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.32%)</title><rect x="894.8" y="1315.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="897.8" y="1326.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="897.6" y="1299.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="900.6" y="1310.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="898.6" y="1379.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="901.6" y="1390.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="898.6" y="1363.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="901.6" y="1374.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="898.6" y="1347.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="901.6" y="1358.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="898.6" y="1331.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="901.6" y="1342.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="898.6" y="1315.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="901.6" y="1326.0"></text>
</g>
<g>
<title>JavaThread::run() (304 samples, 24.46%)</title><rect x="899.5" y="1443.0" width="288.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="902.5" y="1454.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (304 samples, 24.46%)</title><rect x="899.5" y="1427.0" width="288.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="902.5" y="1438.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (304 samples, 24.46%)</title><rect x="899.5" y="1411.0" width="288.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.5" y="1422.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (304 samples, 24.46%)</title><rect x="899.5" y="1395.0" width="288.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="902.5" y="1406.0">CompileBroker::invoke_compiler_on_metho..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (303 samples, 24.38%)</title><rect x="899.5" y="1379.0" width="287.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="902.5" y="1390.0">C2Compiler::compile_method(ciEnv*, ciMe..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (303 samples, 24.38%)</title><rect x="899.5" y="1363.0" width="287.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="902.5" y="1374.0">Compile::Compile(ciEnv*, C2Compiler*, c..</text>
</g>
<g>
<title>Compile::Code_Gen() (183 samples, 14.72%)</title><rect x="899.5" y="1347.0" width="173.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="902.5" y="1358.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.24%)</title><rect x="899.5" y="1331.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="902.5" y="1342.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="899.5" y="1315.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="902.5" y="1326.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="900.5" y="1315.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.5" y="1326.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="900.5" y="1299.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="903.5" y="1310.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="900.5" y="1283.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.5" y="1294.0"></text>
</g>
<g>
<title>loadConPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="900.5" y="1267.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.5" y="1278.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*) const (1 samples, 0.08%)</title><rect x="900.5" y="1251.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.5" y="1262.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="901.4" y="1315.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="904.4" y="1326.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.56%)</title><rect x="902.4" y="1331.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.4" y="1342.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.24%)</title><rect x="904.3" y="1315.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="907.3" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.24%)</title><rect x="904.3" y="1299.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="907.3" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.24%)</title><rect x="904.3" y="1283.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="907.3" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.16%)</title><rect x="907.1" y="1315.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.1" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.16%)</title><rect x="907.1" y="1299.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="910.1" y="1310.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.08%)</title><rect x="909.0" y="1331.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="912.0" y="1342.0"></text>
</g>
<g>
<title>Matcher::match() (15 samples, 1.21%)</title><rect x="910.0" y="1331.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.0" y="1342.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (15 samples, 1.21%)</title><rect x="910.0" y="1315.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="913.0" y="1326.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (9 samples, 0.72%)</title><rect x="912.8" y="1299.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="915.8" y="1310.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.16%)</title><rect x="921.3" y="1299.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="924.3" y="1310.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.16%)</title><rect x="921.3" y="1283.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="924.3" y="1294.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="921.3" y="1267.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="924.3" y="1278.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="921.3" y="1251.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="924.3" y="1262.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="921.3" y="1235.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="924.3" y="1246.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="921.3" y="1219.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="924.3" y="1230.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="921.3" y="1203.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="924.3" y="1214.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="922.3" y="1267.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="925.3" y="1278.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.08%)</title><rect x="922.3" y="1251.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="925.3" y="1262.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="923.2" y="1299.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.2" y="1310.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="923.2" y="1283.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="926.2" y="1294.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="924.2" y="1331.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="927.2" y="1342.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.08%)</title><rect x="924.2" y="1315.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="927.2" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (3 samples, 0.24%)</title><rect x="925.1" y="1331.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="928.1" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (3 samples, 0.24%)</title><rect x="925.1" y="1315.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="928.1" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.48%)</title><rect x="928.0" y="1331.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.0" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.48%)</title><rect x="928.0" y="1315.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.0" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (5 samples, 0.40%)</title><rect x="928.0" y="1299.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="931.0" y="1310.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.16%)</title><rect x="928.0" y="1283.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.0" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="929.9" y="1283.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="932.9" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.16%)</title><rect x="930.8" y="1283.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.8" y="1294.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.08%)</title><rect x="931.8" y="1267.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.8" y="1278.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="931.8" y="1251.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.8" y="1262.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="931.8" y="1235.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.8" y="1246.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="931.8" y="1219.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.8" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="932.7" y="1299.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="935.7" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.08%)</title><rect x="933.7" y="1331.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="936.7" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (146 samples, 11.75%)</title><rect x="934.6" y="1331.0" width="138.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="937.6" y="1342.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="934.6" y="1315.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="937.6" y="1326.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="935.6" y="1315.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="938.6" y="1326.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="936.5" y="1315.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="939.5" y="1326.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.16%)</title><rect x="937.5" y="1315.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="940.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (14 samples, 1.13%)</title><rect x="939.4" y="1315.0" width="13.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="942.4" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.32%)</title><rect x="943.2" y="1299.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="946.2" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.08%)</title><rect x="947.0" y="1299.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="950.0" y="1310.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.08%)</title><rect x="947.0" y="1283.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="950.0" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.40%)</title><rect x="947.9" y="1299.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="950.9" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="950.8" y="1283.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="953.8" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (8 samples, 0.64%)</title><rect x="952.7" y="1315.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="955.7" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (3 samples, 0.24%)</title><rect x="954.6" y="1299.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="957.6" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="957.4" y="1299.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.16%)</title><rect x="958.4" y="1299.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.4" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="958.4" y="1283.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="961.4" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (18 samples, 1.45%)</title><rect x="960.3" y="1315.0" width="17.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.3" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="974.5" y="1299.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="977.5" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="974.5" y="1283.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="977.5" y="1294.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.08%)</title><rect x="974.5" y="1267.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="977.5" y="1278.0"></text>
</g>
<g>
<title>loadConP0Node::rule() const (1 samples, 0.08%)</title><rect x="975.5" y="1299.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="978.5" y="1310.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.08%)</title><rect x="976.4" y="1299.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.4" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (28 samples, 2.25%)</title><rect x="977.4" y="1315.0" width="26.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.4" y="1326.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.16%)</title><rect x="984.0" y="1299.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.0" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="985.9" y="1299.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.9" y="1310.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="987.8" y="1299.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="990.8" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.88%)</title><rect x="988.7" y="1299.0" width="10.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="991.7" y="1310.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.16%)</title><rect x="995.4" y="1283.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.4" y="1294.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.08%)</title><rect x="996.3" y="1267.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="999.3" y="1278.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="996.3" y="1251.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.3" y="1262.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.08%)</title><rect x="996.3" y="1235.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="999.3" y="1246.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="996.3" y="1219.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="999.3" y="1230.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.08%)</title><rect x="996.3" y="1203.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="999.3" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="997.3" y="1283.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1000.3" y="1294.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="999.2" y="1299.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.2" y="1310.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.24%)</title><rect x="1000.1" y="1299.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1003.1" y="1310.0"></text>
</g>
<g>
<title>loadUBNode::rule() const (1 samples, 0.08%)</title><rect x="1003.0" y="1299.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1006.0" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.16%)</title><rect x="1003.9" y="1315.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1006.9" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.16%)</title><rect x="1003.9" y="1299.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1006.9" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1004.9" y="1283.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1007.9" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.56%)</title><rect x="1005.8" y="1315.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1008.8" y="1326.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1010.6" y="1299.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.6" y="1310.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1011.5" y="1299.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.5" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.16%)</title><rect x="1012.5" y="1315.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1015.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.48%)</title><rect x="1014.4" y="1315.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.4" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.24%)</title><rect x="1017.2" y="1299.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.2" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1019.1" y="1283.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1022.1" y="1294.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1019.1" y="1267.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.1" y="1278.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (33 samples, 2.65%)</title><rect x="1020.1" y="1315.0" width="31.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1023.1" y="1326.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1020.1" y="1299.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1023.1" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (31 samples, 2.49%)</title><rect x="1022.0" y="1299.0" width="29.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.0" y="1310.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (31 samples, 2.49%)</title><rect x="1022.0" y="1283.0" width="29.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1025.0" y="1294.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (7 samples, 0.56%)</title><rect x="1022.0" y="1267.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1025.0" y="1278.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (22 samples, 1.77%)</title><rect x="1028.6" y="1267.0" width="20.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1031.6" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (2 samples, 0.16%)</title><rect x="1049.5" y="1267.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.40%)</title><rect x="1051.4" y="1315.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1054.4" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.32%)</title><rect x="1052.3" y="1299.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.24%)</title><rect x="1056.1" y="1315.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1059.1" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1058.0" y="1299.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.0" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1059.0" y="1315.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1062.0" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (12 samples, 0.97%)</title><rect x="1059.9" y="1315.0" width="11.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.9" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.32%)</title><rect x="1066.6" y="1299.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.6" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1068.5" y="1283.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.5" y="1294.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.08%)</title><rect x="1069.4" y="1283.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.4" y="1294.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.08%)</title><rect x="1069.4" y="1267.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.4" y="1278.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1070.4" y="1299.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1073.4" y="1310.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1071.3" y="1315.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.3" y="1326.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1072.3" y="1315.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1075.3" y="1326.0"></text>
</g>
<g>
<title>Compile::Optimize() (106 samples, 8.53%)</title><rect x="1073.2" y="1347.0" width="100.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.2" y="1358.0">Compile::Opt..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.16%)</title><rect x="1073.2" y="1331.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.2" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1074.2" y="1315.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1077.2" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1074.2" y="1299.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.2" y="1310.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1074.2" y="1283.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.40%)</title><rect x="1075.1" y="1331.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1078.1" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.40%)</title><rect x="1075.1" y="1315.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.1" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.08%)</title><rect x="1075.1" y="1299.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.1" y="1310.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.08%)</title><rect x="1075.1" y="1283.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.1" y="1294.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.08%)</title><rect x="1075.1" y="1267.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1078.1" y="1278.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.08%)</title><rect x="1075.1" y="1251.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.1" y="1262.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.08%)</title><rect x="1075.1" y="1235.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.1" y="1246.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1075.1" y="1219.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.1" y="1230.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.08%)</title><rect x="1075.1" y="1203.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.1" y="1214.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.08%)</title><rect x="1075.1" y="1187.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.1" y="1198.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.08%)</title><rect x="1075.1" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.1" y="1182.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.08%)</title><rect x="1075.1" y="1155.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.1" y="1166.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1075.1" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.1" y="1150.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.08%)</title><rect x="1075.1" y="1123.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.1" y="1134.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.08%)</title><rect x="1075.1" y="1107.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.1" y="1118.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.08%)</title><rect x="1075.1" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.1" y="1102.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.08%)</title><rect x="1075.1" y="1075.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1078.1" y="1086.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1075.1" y="1059.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.1" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1075.1" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.1" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1075.1" y="1027.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.1" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1075.1" y="1011.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.1" y="1022.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1075.1" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1078.1" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1075.1" y="979.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1078.1" y="990.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1075.1" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.1" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1075.1" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1078.1" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1075.1" y="931.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1078.1" y="942.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.08%)</title><rect x="1075.1" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.08%)</title><rect x="1076.1" y="1299.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.1" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.08%)</title><rect x="1076.1" y="1283.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.1" y="1294.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.08%)</title><rect x="1076.1" y="1267.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.1" y="1278.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.08%)</title><rect x="1076.1" y="1251.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.1" y="1262.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.08%)</title><rect x="1076.1" y="1235.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.1" y="1246.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.08%)</title><rect x="1076.1" y="1219.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.1" y="1230.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1076.1" y="1203.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.1" y="1214.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.08%)</title><rect x="1076.1" y="1187.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.1" y="1198.0"></text>
</g>
<g>
<title>ciMethodData::update_escape_info() (1 samples, 0.08%)</title><rect x="1076.1" y="1171.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1077.0" y="1299.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1078.0" y="1299.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1078.0" y="1283.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.08%)</title><rect x="1078.0" y="1267.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1081.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1078.9" y="1299.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.9" y="1310.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1078.9" y="1283.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.9" y="1294.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1078.9" y="1267.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.9" y="1278.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1078.9" y="1251.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.9" y="1262.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1078.9" y="1235.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.9" y="1246.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.16%)</title><rect x="1079.9" y="1331.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.9" y="1342.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1080.8" y="1315.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.8" y="1326.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1080.8" y="1299.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.8" y="1310.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.16%)</title><rect x="1081.8" y="1331.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.8" y="1342.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.16%)</title><rect x="1081.8" y="1315.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.8" y="1326.0"></text>
</g>
<g>
<title>IfNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1081.8" y="1299.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1084.8" y="1310.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.08%)</title><rect x="1082.7" y="1299.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1085.7" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (73 samples, 5.87%)</title><rect x="1083.7" y="1331.0" width="69.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.7" y="1342.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.40%)</title><rect x="1083.7" y="1315.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1086.7" y="1326.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.24%)</title><rect x="1085.6" y="1299.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1088.6" y="1310.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1087.5" y="1283.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.5" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.24%)</title><rect x="1088.4" y="1315.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.4" y="1326.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1090.3" y="1299.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (55 samples, 4.42%)</title><rect x="1091.3" y="1315.0" width="52.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.3" y="1326.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (53 samples, 4.26%)</title><rect x="1093.2" y="1299.0" width="50.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.2" y="1310.0">Phase..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.08%)</title><rect x="1097.0" y="1283.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.0" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.40%)</title><rect x="1097.9" y="1283.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.9" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (43 samples, 3.46%)</title><rect x="1102.7" y="1283.0" width="40.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.7" y="1294.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.48%)</title><rect x="1137.8" y="1267.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.8" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (5 samples, 0.40%)</title><rect x="1143.5" y="1315.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (3 samples, 0.24%)</title><rect x="1145.4" y="1299.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::sort(IdealLoopTree*, IdealLoopTree*) (1 samples, 0.08%)</title><rect x="1147.3" y="1283.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.3" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.32%)</title><rect x="1148.2" y="1315.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.2" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.08%)</title><rect x="1150.1" y="1299.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.1" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.08%)</title><rect x="1150.1" y="1283.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.1" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.08%)</title><rect x="1151.1" y="1299.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.1" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1151.1" y="1283.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.1" y="1294.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1152.0" y="1315.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1155.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (18 samples, 1.45%)</title><rect x="1153.0" y="1331.0" width="17.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.0" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (18 samples, 1.45%)</title><rect x="1153.0" y="1315.0" width="17.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.0" y="1326.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1154.9" y="1299.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.9" y="1310.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1155.8" y="1299.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.8" y="1310.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1155.8" y="1283.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.8" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1156.8" y="1283.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.8" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1156.8" y="1267.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.8" y="1278.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1156.8" y="1251.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.8" y="1262.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (2 samples, 0.16%)</title><rect x="1157.7" y="1299.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.7" y="1310.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (2 samples, 0.16%)</title><rect x="1157.7" y="1283.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.7" y="1294.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1158.7" y="1267.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.7" y="1278.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1158.7" y="1251.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.7" y="1262.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1158.7" y="1235.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.7" y="1246.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1158.7" y="1219.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.7" y="1230.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1159.6" y="1299.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.6" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.24%)</title><rect x="1160.6" y="1299.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.6" y="1310.0"></text>
</g>
<g>
<title>MultiNode::hash() const (1 samples, 0.08%)</title><rect x="1162.5" y="1283.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.5" y="1294.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1163.4" y="1299.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.4" y="1310.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1163.4" y="1283.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.4" y="1294.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1164.4" y="1299.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.4" y="1310.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.3" y="1299.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1165.3" y="1283.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.3" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1165.3" y="1267.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.3" y="1278.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1165.3" y="1251.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.3" y="1262.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.32%)</title><rect x="1166.3" y="1299.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.3" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (4 samples, 0.32%)</title><rect x="1166.3" y="1283.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.3" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.32%)</title><rect x="1166.3" y="1267.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.3" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.32%)</title><rect x="1166.3" y="1251.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.3" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.32%)</title><rect x="1166.3" y="1235.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.3" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.32%)</title><rect x="1166.3" y="1219.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.3" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.32%)</title><rect x="1166.3" y="1203.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.3" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.24%)</title><rect x="1166.3" y="1187.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.3" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.24%)</title><rect x="1166.3" y="1171.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.3" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1166.3" y="1155.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.3" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1166.3" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.3" y="1150.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1166.3" y="1123.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.3" y="1134.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1166.3" y="1107.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.3" y="1118.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.2" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.2" y="1150.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1167.2" y="1123.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.2" y="1134.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.2" y="1155.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.2" y="1166.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1168.2" y="1139.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="1150.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1169.1" y="1187.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="1198.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1169.1" y="1171.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.1" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1170.1" y="1331.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.1" y="1342.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1170.1" y="1315.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.1" y="1326.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1170.1" y="1299.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.1" y="1310.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_card_mark(Node*) (1 samples, 0.08%)</title><rect x="1170.1" y="1283.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.1" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.1" y="1267.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.1" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1170.1" y="1251.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.1" y="1262.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.1" y="1235.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.1" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.24%)</title><rect x="1171.0" y="1331.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.0" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.24%)</title><rect x="1171.0" y="1315.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.16%)</title><rect x="1172.0" y="1299.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.0" y="1310.0"></text>
</g>
<g>
<title>ClearArrayNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.0" y="1283.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="1294.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.0" y="1267.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.0" y="1278.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.9" y="1283.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.9" y="1294.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.9" y="1267.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.9" y="1278.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.08%)</title><rect x="1172.9" y="1251.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.9" y="1262.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1172.9" y="1235.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.9" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.97%)</title><rect x="1173.9" y="1347.0" width="11.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.97%)</title><rect x="1173.9" y="1331.0" width="11.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.97%)</title><rect x="1173.9" y="1315.0" width="11.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.97%)</title><rect x="1173.9" y="1299.0" width="11.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.97%)</title><rect x="1173.9" y="1283.0" width="11.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.97%)</title><rect x="1173.9" y="1267.0" width="11.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.80%)</title><rect x="1173.9" y="1251.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.80%)</title><rect x="1173.9" y="1235.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.80%)</title><rect x="1173.9" y="1219.0" width="9.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.80%)</title><rect x="1173.9" y="1203.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.80%)</title><rect x="1173.9" y="1187.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.80%)</title><rect x="1173.9" y="1171.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.48%)</title><rect x="1173.9" y="1155.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.48%)</title><rect x="1173.9" y="1139.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="1150.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1173.9" y="1123.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="1134.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1173.9" y="1107.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="1118.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1173.9" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="1102.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1173.9" y="1075.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1173.9" y="1059.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1173.9" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1173.9" y="1027.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1176.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.40%)</title><rect x="1174.8" y="1123.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.40%)</title><rect x="1174.8" y="1107.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.40%)</title><rect x="1174.8" y="1091.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.40%)</title><rect x="1174.8" y="1075.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1174.8" y="1059.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1174.8" y="1043.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1174.8" y="1027.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1174.8" y="1011.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1174.8" y="995.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1174.8" y="979.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.8" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.8" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.8" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.8" y="931.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.8" y="915.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.8" y="899.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.8" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.8" y="867.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.8" y="851.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.8" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.8" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.8" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.8" y="787.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.8" y="771.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.8" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.8" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.8" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.8" y="707.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.8" y="691.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1174.8" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1174.8" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1174.8" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="654.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1174.8" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="638.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1174.8" y="611.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.8" y="622.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1174.8" y="595.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.8" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1174.8" y="579.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.8" y="590.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1174.8" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.8" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.08%)</title><rect x="1174.8" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.08%)</title><rect x="1174.8" y="531.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1175.8" y="963.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1175.8" y="947.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1175.8" y="931.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1175.8" y="915.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1175.8" y="899.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1175.8" y="883.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1175.8" y="867.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1175.8" y="851.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1175.8" y="835.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1175.8" y="819.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1175.8" y="803.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1175.8" y="787.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1175.8" y="771.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.8" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1175.8" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1175.8" y="739.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1175.8" y="723.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1175.8" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1175.8" y="691.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1175.8" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1175.8" y="659.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1175.8" y="643.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1175.8" y="627.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.8" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.08%)</title><rect x="1175.8" y="611.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.8" y="595.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.8" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.8" y="579.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1175.8" y="563.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1175.8" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="558.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.08%)</title><rect x="1175.8" y="531.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.8" y="542.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.08%)</title><rect x="1175.8" y="515.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.8" y="526.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.08%)</title><rect x="1175.8" y="499.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.7" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.7" y="739.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.7" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.7" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.7" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1176.7" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1176.7" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1176.7" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.7" y="1059.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.7" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.7" y="1043.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.7" y="1027.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.7" y="1011.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.7" y="995.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.7" y="979.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.7" y="963.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.7" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.7" y="947.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.7" y="931.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.7" y="915.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.7" y="899.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.7" y="883.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.7" y="867.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.7" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.7" y="851.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.7" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1177.7" y="835.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1177.7" y="819.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1177.7" y="803.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1177.7" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.7" y="771.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.7" y="755.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.7" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1177.7" y="739.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1177.7" y="723.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1177.7" y="707.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.7" y="691.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.7" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1177.7" y="659.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="670.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (1 samples, 0.08%)</title><rect x="1177.7" y="643.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.6" y="851.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.6" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.6" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.6" y="803.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.6" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1178.6" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1178.6" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="766.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.08%)</title><rect x="1178.6" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1178.6" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1178.6" y="707.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.6" y="718.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1178.6" y="691.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="702.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1178.6" y="675.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="686.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.08%)</title><rect x="1178.6" y="659.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="670.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.08%)</title><rect x="1178.6" y="643.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1179.6" y="1155.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1179.6" y="1139.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.32%)</title><rect x="1179.6" y="1123.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.32%)</title><rect x="1179.6" y="1107.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.32%)</title><rect x="1179.6" y="1091.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.32%)</title><rect x="1179.6" y="1075.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.32%)</title><rect x="1179.6" y="1059.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1179.6" y="1043.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.32%)</title><rect x="1179.6" y="1027.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.32%)</title><rect x="1179.6" y="1011.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.32%)</title><rect x="1179.6" y="995.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.32%)</title><rect x="1179.6" y="979.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.32%)</title><rect x="1179.6" y="963.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1179.6" y="947.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.32%)</title><rect x="1179.6" y="931.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.32%)</title><rect x="1179.6" y="915.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.32%)</title><rect x="1179.6" y="899.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.32%)</title><rect x="1179.6" y="883.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.32%)</title><rect x="1179.6" y="867.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1179.6" y="851.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1179.6" y="835.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1179.6" y="819.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1179.6" y="803.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1179.6" y="787.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1179.6" y="771.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1179.6" y="755.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1179.6" y="739.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1179.6" y="723.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1179.6" y="707.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1179.6" y="691.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1179.6" y="675.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.6" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.6" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.6" y="627.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.6" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.6" y="595.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.6" y="579.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.6" y="563.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.6" y="547.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.6" y="531.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.6" y="515.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.6" y="499.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.6" y="483.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.6" y="467.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.6" y="451.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.6" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.6" y="419.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.6" y="403.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.6" y="387.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.6" y="371.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.6" y="355.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.6" y="339.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.6" y="323.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.6" y="307.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1179.6" y="291.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="302.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.6" y="275.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="286.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1179.6" y="259.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="270.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.08%)</title><rect x="1179.6" y="243.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.5" y="659.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.5" y="643.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1180.5" y="627.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1180.5" y="611.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1180.5" y="595.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1180.5" y="579.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1180.5" y="563.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.5" y="547.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1180.5" y="531.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1180.5" y="515.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1180.5" y="499.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1180.5" y="483.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1180.5" y="467.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="478.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1180.5" y="451.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="462.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1180.5" y="435.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.5" y="446.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1180.5" y="419.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="430.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1180.5" y="403.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="414.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.08%)</title><rect x="1180.5" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.5" y="451.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.5" y="435.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.5" y="419.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.5" y="403.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.5" y="387.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.5" y="371.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.5" y="355.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.5" y="339.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.5" y="323.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.5" y="307.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.5" y="291.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.5" y="275.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="286.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.5" y="259.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="270.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1181.5" y="243.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.5" y="254.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1181.5" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1181.5" y="211.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.5" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1181.5" y="195.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1181.5" y="179.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1181.5" y="163.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1181.5" y="147.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1181.5" y="131.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="142.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1181.5" y="115.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="126.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1181.5" y="99.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="110.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1181.5" y="83.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="94.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.08%)</title><rect x="1181.5" y="67.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.08%)</title><rect x="1181.5" y="51.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="62.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::push(Metadata* const&amp;) (1 samples, 0.08%)</title><rect x="1181.5" y="35.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.4" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.4" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.4" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.4" y="819.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.4" y="803.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.4" y="814.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1182.4" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.4" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1182.4" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.4" y="782.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1182.4" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.4" y="766.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1182.4" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.4" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1183.4" y="1251.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1183.4" y="1235.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1183.4" y="1219.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1183.4" y="1203.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1183.4" y="1187.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1183.4" y="1171.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1183.4" y="1155.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1183.4" y="1139.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1183.4" y="1123.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1183.4" y="1107.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1183.4" y="1091.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1183.4" y="1075.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1183.4" y="1059.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="1070.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1183.4" y="1043.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="1054.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1183.4" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="1038.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1183.4" y="1011.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1183.4" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1183.4" y="979.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1183.4" y="963.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.4" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1183.4" y="947.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1183.4" y="931.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1183.4" y="915.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1183.4" y="899.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.4" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1183.4" y="883.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1183.4" y="867.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="878.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1183.4" y="851.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="862.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1183.4" y="835.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.4" y="846.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1183.4" y="819.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1183.4" y="803.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="1043.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.3" y="1027.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.3" y="1011.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.3" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.3" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.3" y="963.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.3" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.3" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.3" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.3" y="899.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.3" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.3" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="851.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.3" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.3" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.3" y="803.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.3" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.3" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.3" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.3" y="707.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.3" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.3" y="675.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.3" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="643.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.3" y="627.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.3" y="611.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.3" y="595.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.3" y="579.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1184.3" y="563.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.3" y="574.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1184.3" y="547.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.3" y="558.0"></text>
</g>
<g>
<title>GraphKit::clean_stack(int) (1 samples, 0.08%)</title><rect x="1184.3" y="531.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="542.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.16%)</title><rect x="1185.3" y="1347.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.3" y="1358.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.16%)</title><rect x="1185.3" y="1331.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.3" y="1342.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.08%)</title><rect x="1187.2" y="1379.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.2" y="1390.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.08%)</title><rect x="1187.2" y="1363.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.2" y="1374.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="1443.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.1" y="1454.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="1427.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.1" y="1438.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.16%)</title><rect x="1188.1" y="1411.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.1" y="1422.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.16%)</title><rect x="1188.1" y="1395.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.1" y="1406.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.16%)</title><rect x="1188.1" y="1379.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.1" y="1390.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.16%)</title><rect x="1188.1" y="1363.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.1" y="1374.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.1" y="1347.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.1" y="1358.0"></text>
</g>
<g>
<title>DerivedPointerTable::update_pointers() (1 samples, 0.08%)</title><rect x="1188.1" y="1331.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.1" y="1342.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.1" y="1347.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.1" y="1358.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="1189.1" y="1331.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1192.1" y="1342.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="1189.1" y="1315.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1192.1" y="1326.0"></text>
</g>
</g>
</svg>
