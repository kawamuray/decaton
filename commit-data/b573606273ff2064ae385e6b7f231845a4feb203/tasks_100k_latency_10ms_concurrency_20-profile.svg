<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (287 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>__GI___mprotect (1 samples, 0.35%)</title><rect x="10.0" y="1251.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 7.32%)</title><rect x="14.1" y="1251.0" width="86.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.1" y="1262.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 7.32%)</title><rect x="14.1" y="1235.0" width="86.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.1" y="1246.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.35%)</title><rect x="14.1" y="1219.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.1" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.35%)</title><rect x="14.1" y="1203.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1231602494.accept (1 samples, 0.35%)</title><rect x="14.1" y="1187.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.35%)</title><rect x="14.1" y="1171.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.35%)</title><rect x="14.1" y="1155.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.1" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.35%)</title><rect x="14.1" y="1139.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.79%)</title><rect x="18.2" y="1219.0" width="32.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.2" y="1230.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/425729114.accept (7 samples, 2.44%)</title><rect x="18.2" y="1203.0" width="28.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="1214.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (7 samples, 2.44%)</title><rect x="18.2" y="1187.0" width="28.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.2" y="1198.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (6 samples, 2.09%)</title><rect x="18.2" y="1171.0" width="24.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.2" y="1182.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (6 samples, 2.09%)</title><rect x="18.2" y="1155.0" width="24.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.2" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (6 samples, 2.09%)</title><rect x="18.2" y="1139.0" width="24.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.2" y="1150.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (6 samples, 2.09%)</title><rect x="18.2" y="1123.0" width="24.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.2" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 2.09%)</title><rect x="18.2" y="1107.0" width="24.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.2" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (6 samples, 2.09%)</title><rect x="18.2" y="1091.0" width="24.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.2" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 2.09%)</title><rect x="18.2" y="1075.0" width="24.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.09%)</title><rect x="18.2" y="1059.0" width="24.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.2" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (6 samples, 2.09%)</title><rect x="18.2" y="1043.0" width="24.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.2" y="1054.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.35%)</title><rect x="42.9" y="1171.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="45.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.35%)</title><rect x="42.9" y="1155.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.9" y="1166.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.35%)</title><rect x="47.0" y="1203.0" width="4.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="50.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.18%)</title><rect x="51.1" y="1219.0" width="49.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.1" y="1230.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.18%)</title><rect x="51.1" y="1203.0" width="49.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.1" y="1214.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.44%)</title><rect x="51.1" y="1187.0" width="28.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.1" y="1198.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.35%)</title><rect x="51.1" y="1171.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.1" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.35%)</title><rect x="51.1" y="1155.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="54.1" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.35%)</title><rect x="51.1" y="1139.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="54.1" y="1150.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.35%)</title><rect x="51.1" y="1123.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="54.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.39%)</title><rect x="55.2" y="1171.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.39%)</title><rect x="55.2" y="1155.0" width="16.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.05%)</title><rect x="55.2" y="1139.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.70%)</title><rect x="55.2" y="1123.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.70%)</title><rect x="55.2" y="1107.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="58.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 0.70%)</title><rect x="55.2" y="1091.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 0.70%)</title><rect x="55.2" y="1075.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.35%)</title><rect x="55.2" y="1059.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.35%)</title><rect x="55.2" y="1043.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.35%)</title><rect x="55.2" y="1027.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.35%)</title><rect x="55.2" y="1011.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.read (1 samples, 0.35%)</title><rect x="59.3" y="1059.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getShort (1 samples, 0.35%)</title><rect x="59.3" y="1043.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="63.4" y="1123.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="63.4" y="1107.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="63.4" y="1091.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.35%)</title><rect x="63.4" y="1075.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.35%)</title><rect x="63.4" y="1059.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.35%)</title><rect x="63.4" y="1043.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.35%)</title><rect x="63.4" y="1027.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.35%)</title><rect x="63.4" y="1011.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/923783218.shouldBlock (1 samples, 0.35%)</title><rect x="67.6" y="1139.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.35%)</title><rect x="67.6" y="1123.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.35%)</title><rect x="67.6" y="1107.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.35%)</title><rect x="67.6" y="1091.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.35%)</title><rect x="67.6" y="1075.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="70.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.70%)</title><rect x="71.7" y="1171.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.70%)</title><rect x="71.7" y="1155.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.70%)</title><rect x="71.7" y="1139.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.70%)</title><rect x="71.7" y="1123.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.35%)</title><rect x="71.7" y="1107.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.35%)</title><rect x="71.7" y="1091.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="74.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.35%)</title><rect x="71.7" y="1075.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.35%)</title><rect x="71.7" y="1059.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="74.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.35%)</title><rect x="75.8" y="1107.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.35%)</title><rect x="75.8" y="1091.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.35%)</title><rect x="75.8" y="1075.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.8" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.35%)</title><rect x="75.8" y="1059.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.toArray (1 samples, 0.35%)</title><rect x="75.8" y="1043.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.8" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="75.8" y="1027.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="78.8" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="75.8" y="1011.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="78.8" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="75.8" y="995.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="78.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="75.8" y="979.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="78.8" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.35%)</title><rect x="75.8" y="963.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="78.8" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.35%)</title><rect x="75.8" y="947.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="78.8" y="958.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.35%)</title><rect x="75.8" y="931.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="78.8" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.35%)</title><rect x="75.8" y="915.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="78.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.35%)</title><rect x="75.8" y="899.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="78.8" y="910.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.35%)</title><rect x="75.8" y="883.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="78.8" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="75.8" y="867.0" width="4.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="78.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.35%)</title><rect x="79.9" y="1187.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.35%)</title><rect x="79.9" y="1171.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.35%)</title><rect x="79.9" y="1155.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="82.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.35%)</title><rect x="84.0" y="1187.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="87.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="84.0" y="1171.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="84.0" y="1155.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.35%)</title><rect x="84.0" y="1139.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="87.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.35%)</title><rect x="84.0" y="1123.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.35%)</title><rect x="84.0" y="1107.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.35%)</title><rect x="84.0" y="1091.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 1.05%)</title><rect x="88.1" y="1187.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 1.05%)</title><rect x="88.1" y="1171.0" width="12.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="91.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 1.05%)</title><rect x="88.1" y="1155.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.35%)</title><rect x="92.2" y="1139.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.35%)</title><rect x="92.2" y="1123.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.35%)</title><rect x="96.3" y="1139.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.35%)</title><rect x="96.3" y="1123.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.3" y="1134.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.35%)</title><rect x="96.3" y="1107.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.3" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.spliterator (1 samples, 0.35%)</title><rect x="96.3" y="1091.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (1 samples, 0.35%)</title><rect x="96.3" y="1075.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (162 samples, 56.45%)</title><rect x="100.5" y="1251.0" width="666.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.5" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (162 samples, 56.45%)</title><rect x="100.5" y="1235.0" width="666.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.5" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (162 samples, 56.45%)</title><rect x="100.5" y="1219.0" width="666.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.5" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/235062141.run (158 samples, 55.05%)</title><rect x="100.5" y="1203.0" width="649.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.5" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/235062141.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (158 samples, 55.05%)</title><rect x="100.5" y="1187.0" width="649.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.5" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (158 samples, 55.05%)</title><rect x="100.5" y="1171.0" width="649.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="103.5" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (156 samples, 54.36%)</title><rect x="100.5" y="1155.0" width="641.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="103.5" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (31 samples, 10.80%)</title><rect x="112.8" y="1139.0" width="127.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.8" y="1150.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (31 samples, 10.80%)</title><rect x="112.8" y="1123.0" width="127.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.8" y="1134.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (31 samples, 10.80%)</title><rect x="112.8" y="1107.0" width="127.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="115.8" y="1118.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 10.80%)</title><rect x="112.8" y="1091.0" width="127.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.8" y="1102.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 10.80%)</title><rect x="112.8" y="1075.0" width="127.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="115.8" y="1086.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (31 samples, 10.80%)</title><rect x="112.8" y="1059.0" width="127.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.8" y="1070.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (13 samples, 4.53%)</title><rect x="112.8" y="1043.0" width="53.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.8" y="1054.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 1.05%)</title><rect x="125.1" y="1027.0" width="12.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="128.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 1.05%)</title><rect x="125.1" y="1011.0" width="12.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="128.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 1.05%)</title><rect x="125.1" y="995.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.05%)</title><rect x="125.1" y="979.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.1" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.05%)</title><rect x="125.1" y="963.0" width="12.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.05%)</title><rect x="125.1" y="947.0" width="12.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.44%)</title><rect x="137.5" y="1027.0" width="28.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.5" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.35%)</title><rect x="162.1" y="1011.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.35%)</title><rect x="162.1" y="995.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="165.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.35%)</title><rect x="162.1" y="979.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="165.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.35%)</title><rect x="162.1" y="963.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.1" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="162.1" y="947.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="165.1" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="162.1" y="931.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="165.1" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="162.1" y="915.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="165.1" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="162.1" y="899.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="165.1" y="910.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.35%)</title><rect x="162.1" y="883.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="165.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (17 samples, 5.92%)</title><rect x="166.2" y="1043.0" width="69.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="169.2" y="1054.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.70%)</title><rect x="166.2" y="1027.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.35%)</title><rect x="174.5" y="1027.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.35%)</title><rect x="178.6" y="1027.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="181.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.35%)</title><rect x="178.6" y="1011.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="181.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.70%)</title><rect x="182.7" y="1027.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="185.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.70%)</title><rect x="182.7" y="1011.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.70%)</title><rect x="182.7" y="995.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.70%)</title><rect x="182.7" y="979.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.70%)</title><rect x="182.7" y="963.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="185.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 3.14%)</title><rect x="190.9" y="1027.0" width="37.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.9" y="1038.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="190.9" y="1011.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.35%)</title><rect x="190.9" y="995.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.35%)</title><rect x="190.9" y="979.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="193.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.35%)</title><rect x="190.9" y="963.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="193.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.35%)</title><rect x="195.0" y="1011.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="198.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.44%)</title><rect x="199.1" y="1011.0" width="28.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.1" y="1022.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.44%)</title><rect x="199.1" y="995.0" width="28.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.1" y="1006.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 2.44%)</title><rect x="199.1" y="979.0" width="28.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.1" y="990.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.70%)</title><rect x="199.1" y="963.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.35%)</title><rect x="199.1" y="947.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.35%)</title><rect x="199.1" y="931.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.35%)</title><rect x="199.1" y="915.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="202.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.35%)</title><rect x="203.2" y="947.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.35%)</title><rect x="203.2" y="931.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.05%)</title><rect x="207.4" y="963.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.70%)</title><rect x="211.5" y="947.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.70%)</title><rect x="211.5" y="931.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.70%)</title><rect x="211.5" y="915.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.5" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.70%)</title><rect x="211.5" y="899.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.70%)</title><rect x="219.7" y="963.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.70%)</title><rect x="219.7" y="947.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.70%)</title><rect x="219.7" y="931.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.70%)</title><rect x="219.7" y="915.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.7" y="926.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.70%)</title><rect x="219.7" y="899.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.35%)</title><rect x="227.9" y="1027.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.35%)</title><rect x="232.0" y="1027.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.35%)</title><rect x="236.1" y="1043.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.35%)</title><rect x="236.1" y="1027.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (116 samples, 40.42%)</title><rect x="240.2" y="1139.0" width="477.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.2" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (24 samples, 8.36%)</title><rect x="240.2" y="1123.0" width="98.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="243.2" y="1134.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (24 samples, 8.36%)</title><rect x="240.2" y="1107.0" width="98.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.2" y="1118.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (19 samples, 6.62%)</title><rect x="260.8" y="1091.0" width="78.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.8" y="1102.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 3.14%)</title><rect x="260.8" y="1075.0" width="37.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.8" y="1086.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 2.44%)</title><rect x="269.0" y="1059.0" width="28.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.0" y="1070.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 2.44%)</title><rect x="269.0" y="1043.0" width="28.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="272.0" y="1054.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 2.44%)</title><rect x="269.0" y="1027.0" width="28.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.0" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 3.48%)</title><rect x="297.8" y="1075.0" width="41.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.8" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 3.48%)</title><rect x="297.8" y="1059.0" width="41.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.8" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 3.48%)</title><rect x="297.8" y="1043.0" width="41.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="300.8" y="1054.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (32 samples, 11.15%)</title><rect x="338.9" y="1123.0" width="131.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.9" y="1134.0">com/linecorp/dec..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.05%)</title><rect x="338.9" y="1107.0" width="12.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="341.9" y="1118.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.70%)</title><rect x="343.0" y="1091.0" width="8.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="346.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (29 samples, 10.10%)</title><rect x="351.3" y="1107.0" width="119.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.3" y="1118.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 3.48%)</title><rect x="351.3" y="1091.0" width="41.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="354.3" y="1102.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 3.14%)</title><rect x="351.3" y="1075.0" width="37.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="354.3" y="1086.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 2.44%)</title><rect x="355.4" y="1059.0" width="28.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.4" y="1070.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 2.09%)</title><rect x="359.5" y="1043.0" width="24.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="362.5" y="1054.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 2.09%)</title><rect x="359.5" y="1027.0" width="24.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.5" y="1038.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 2.09%)</title><rect x="359.5" y="1011.0" width="24.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="362.5" y="1022.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.39%)</title><rect x="367.7" y="995.0" width="16.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="370.7" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="367.7" y="979.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="370.7" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.70%)</title><rect x="371.8" y="979.0" width="8.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="374.8" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.70%)</title><rect x="371.8" y="963.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="374.8" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.35%)</title><rect x="371.8" y="947.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="374.8" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.35%)</title><rect x="371.8" y="931.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="374.8" y="942.0"></text>
</g>
<g>
<title>Thread::is_VM_thread() const (1 samples, 0.35%)</title><rect x="371.8" y="915.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="374.8" y="926.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.35%)</title><rect x="375.9" y="947.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="378.9" y="958.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.35%)</title><rect x="380.0" y="979.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="383.0" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="384.1" y="1059.0" width="4.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="387.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.35%)</title><rect x="388.3" y="1075.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="388.3" y="1059.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="391.3" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="388.3" y="1043.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="391.3" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.35%)</title><rect x="388.3" y="1027.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="391.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 1.05%)</title><rect x="392.4" y="1091.0" width="12.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 1.05%)</title><rect x="392.4" y="1075.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="395.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 1.05%)</title><rect x="392.4" y="1059.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="395.4" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (16 samples, 5.57%)</title><rect x="404.7" y="1091.0" width="65.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.7" y="1102.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (15 samples, 5.23%)</title><rect x="408.8" y="1075.0" width="61.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.8" y="1086.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.05%)</title><rect x="408.8" y="1059.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="411.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.35%)</title><rect x="417.0" y="1043.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.35%)</title><rect x="417.0" y="1027.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.35%)</title><rect x="417.0" y="1011.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.0" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 4.18%)</title><rect x="421.1" y="1059.0" width="49.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="424.1" y="1070.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.83%)</title><rect x="425.3" y="1043.0" width="45.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="428.3" y="1054.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 3.83%)</title><rect x="425.3" y="1027.0" width="45.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="428.3" y="1038.0">java..</text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.39%)</title><rect x="445.8" y="1011.0" width="16.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="448.8" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="458.2" y="995.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="461.2" y="1006.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.70%)</title><rect x="462.3" y="1011.0" width="8.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="465.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (52 samples, 18.12%)</title><rect x="470.5" y="1123.0" width="213.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="473.5" y="1134.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (52 samples, 18.12%)</title><rect x="470.5" y="1107.0" width="213.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="473.5" y="1118.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/770306532.process (45 samples, 15.68%)</title><rect x="470.5" y="1091.0" width="185.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="473.5" y="1102.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (45 samples, 15.68%)</title><rect x="470.5" y="1075.0" width="185.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="473.5" y="1086.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (45 samples, 15.68%)</title><rect x="470.5" y="1059.0" width="185.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="473.5" y="1070.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.35%)</title><rect x="474.6" y="1043.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="477.6" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.35%)</title><rect x="474.6" y="1027.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.6" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.35%)</title><rect x="474.6" y="1011.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="477.6" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.35%)</title><rect x="474.6" y="995.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="477.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (42 samples, 14.63%)</title><rect x="478.7" y="1043.0" width="172.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="481.7" y="1054.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>java/lang/Thread.sleep (40 samples, 13.94%)</title><rect x="486.9" y="1027.0" width="164.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.9" y="1038.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (36 samples, 12.54%)</title><rect x="491.0" y="1011.0" width="148.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="494.0" y="1022.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.70%)</title><rect x="503.4" y="995.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="506.4" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="511.6" y="995.0" width="4.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="514.6" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 2.44%)</title><rect x="515.7" y="995.0" width="28.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="518.7" y="1006.0">__..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.70%)</title><rect x="536.3" y="979.0" width="8.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="539.3" y="990.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (23 samples, 8.01%)</title><rect x="544.5" y="995.0" width="94.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="547.5" y="1006.0">os::sleep(T..</text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.05%)</title><rect x="573.3" y="979.0" width="12.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="576.3" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.70%)</title><rect x="585.6" y="979.0" width="8.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="588.6" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 3.14%)</title><rect x="593.8" y="979.0" width="37.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="596.8" y="990.0">__p..</text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.70%)</title><rect x="630.8" y="979.0" width="8.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="633.8" y="990.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.35%)</title><rect x="639.1" y="1011.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="642.1" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.70%)</title><rect x="643.2" y="1011.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="646.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.35%)</title><rect x="651.4" y="1043.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="654.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.05%)</title><rect x="655.5" y="1091.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.5" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 1.05%)</title><rect x="655.5" y="1075.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 1.05%)</title><rect x="667.8" y="1091.0" width="12.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="670.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 1.05%)</title><rect x="667.8" y="1075.0" width="12.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="670.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/414664907.get$Lambda (3 samples, 1.05%)</title><rect x="667.8" y="1059.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/414664907.&lt;init&gt; (3 samples, 1.05%)</title><rect x="667.8" y="1043.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.35%)</title><rect x="680.2" y="1091.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="683.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.79%)</title><rect x="684.3" y="1123.0" width="32.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="687.3" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 2.79%)</title><rect x="684.3" y="1107.0" width="32.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="687.3" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.35%)</title><rect x="713.1" y="1091.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="716.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/649455046.accept (1 samples, 0.35%)</title><rect x="713.1" y="1075.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="716.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.35%)</title><rect x="713.1" y="1059.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="716.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.35%)</title><rect x="713.1" y="1043.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="716.1" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.35%)</title><rect x="713.1" y="1027.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="716.1" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.35%)</title><rect x="713.1" y="1011.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="716.1" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="713.1" y="995.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="716.1" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="713.1" y="979.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="716.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.09%)</title><rect x="717.2" y="1139.0" width="24.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="720.2" y="1150.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.09%)</title><rect x="717.2" y="1123.0" width="24.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="720.2" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.39%)</title><rect x="725.4" y="1107.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="728.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/649455046.accept (4 samples, 1.39%)</title><rect x="725.4" y="1091.0" width="16.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="728.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (4 samples, 1.39%)</title><rect x="725.4" y="1075.0" width="16.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="728.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 1.39%)</title><rect x="725.4" y="1059.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="728.4" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 1.39%)</title><rect x="725.4" y="1043.0" width="16.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="728.4" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 1.39%)</title><rect x="725.4" y="1027.0" width="16.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="728.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.70%)</title><rect x="741.8" y="1155.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="744.8" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="746.0" y="1139.0" width="4.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="749.0" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="746.0" y="1123.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="749.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.35%)</title><rect x="750.1" y="1203.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="753.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.35%)</title><rect x="750.1" y="1187.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="753.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.35%)</title><rect x="750.1" y="1171.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="753.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.35%)</title><rect x="750.1" y="1155.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="753.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.05%)</title><rect x="754.2" y="1203.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="757.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.05%)</title><rect x="754.2" y="1187.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="757.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.70%)</title><rect x="754.2" y="1171.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="757.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.70%)</title><rect x="754.2" y="1155.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="757.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.70%)</title><rect x="754.2" y="1139.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="757.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.70%)</title><rect x="754.2" y="1123.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="757.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.70%)</title><rect x="754.2" y="1107.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="757.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.35%)</title><rect x="762.4" y="1171.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="765.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.35%)</title><rect x="762.4" y="1155.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="765.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.35%)</title><rect x="762.4" y="1139.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="765.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.70%)</title><rect x="766.5" y="1251.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="769.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.35%)</title><rect x="766.5" y="1235.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="769.5" y="1246.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.35%)</title><rect x="766.5" y="1219.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="769.5" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.35%)</title><rect x="766.5" y="1203.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="769.5" y="1214.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.35%)</title><rect x="766.5" y="1187.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="769.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.35%)</title><rect x="770.6" y="1235.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="773.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="770.6" y="1219.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="773.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="770.6" y="1203.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="773.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="770.6" y="1187.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="773.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.35%)</title><rect x="770.6" y="1171.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="773.6" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.35%)</title><rect x="770.6" y="1155.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="773.6" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.35%)</title><rect x="770.6" y="1139.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="773.6" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.35%)</title><rect x="770.6" y="1123.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.6" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.35%)</title><rect x="770.6" y="1107.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.6" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.35%)</title><rect x="770.6" y="1091.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="773.6" y="1102.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.35%)</title><rect x="770.6" y="1075.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="773.6" y="1086.0"></text>
</g>
<g>
<title>start_thread (101 samples, 35.19%)</title><rect x="774.7" y="1251.0" width="415.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="777.7" y="1262.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (101 samples, 35.19%)</title><rect x="774.7" y="1235.0" width="415.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="777.7" y="1246.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 2.79%)</title><rect x="774.7" y="1219.0" width="32.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="777.7" y="1230.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.35%)</title><rect x="774.7" y="1203.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="777.7" y="1214.0"></text>
</g>
<g>
<title>G1ParCopyHelper::G1ParCopyHelper(G1CollectedHeap*, G1ParScanThreadState*) (1 samples, 0.35%)</title><rect x="774.7" y="1187.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="777.7" y="1198.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 2.44%)</title><rect x="778.9" y="1203.0" width="28.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="781.9" y="1214.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 2.44%)</title><rect x="778.9" y="1187.0" width="28.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="781.9" y="1198.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.09%)</title><rect x="778.9" y="1171.0" width="24.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="781.9" y="1182.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.39%)</title><rect x="783.0" y="1155.0" width="16.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="786.0" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.35%)</title><rect x="795.3" y="1139.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="798.3" y="1150.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="799.4" y="1155.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="802.4" y="1166.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.35%)</title><rect x="803.5" y="1171.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="806.5" y="1182.0"></text>
</g>
<g>
<title>JavaThread::run() (93 samples, 32.40%)</title><rect x="807.6" y="1219.0" width="382.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="810.6" y="1230.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (93 samples, 32.40%)</title><rect x="807.6" y="1203.0" width="382.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="810.6" y="1214.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (93 samples, 32.40%)</title><rect x="807.6" y="1187.0" width="382.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="810.6" y="1198.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (92 samples, 32.06%)</title><rect x="807.6" y="1171.0" width="378.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="810.6" y="1182.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (89 samples, 31.01%)</title><rect x="807.6" y="1155.0" width="366.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="810.6" y="1166.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (89 samples, 31.01%)</title><rect x="807.6" y="1139.0" width="366.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="810.6" y="1150.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 17.07%)</title><rect x="807.6" y="1123.0" width="201.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="810.6" y="1134.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.35%)</title><rect x="807.6" y="1107.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="810.6" y="1118.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.35%)</title><rect x="807.6" y="1091.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="810.6" y="1102.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.35%)</title><rect x="807.6" y="1075.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="810.6" y="1086.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.05%)</title><rect x="811.7" y="1107.0" width="12.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="814.7" y="1118.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.35%)</title><rect x="811.7" y="1091.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="814.7" y="1102.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.35%)</title><rect x="815.9" y="1091.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="818.9" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.35%)</title><rect x="815.9" y="1075.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="818.9" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.35%)</title><rect x="815.9" y="1059.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="818.9" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.35%)</title><rect x="820.0" y="1091.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="823.0" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.35%)</title><rect x="820.0" y="1075.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="823.0" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.09%)</title><rect x="824.1" y="1107.0" width="24.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="827.1" y="1118.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.70%)</title><rect x="824.1" y="1091.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="827.1" y="1102.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.35%)</title><rect x="828.2" y="1075.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="831.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.05%)</title><rect x="832.3" y="1091.0" width="12.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="835.3" y="1102.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.70%)</title><rect x="832.3" y="1075.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="835.3" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.35%)</title><rect x="840.5" y="1075.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="843.5" y="1086.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.35%)</title><rect x="840.5" y="1059.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="843.5" y="1070.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.35%)</title><rect x="840.5" y="1043.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="843.5" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.35%)</title><rect x="840.5" y="1027.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="843.5" y="1038.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.35%)</title><rect x="844.6" y="1091.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="847.6" y="1102.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.35%)</title><rect x="848.7" y="1107.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="851.7" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.70%)</title><rect x="852.9" y="1107.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.9" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.70%)</title><rect x="852.9" y="1091.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="855.9" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="852.9" y="1075.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="855.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="857.0" y="1075.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="860.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.35%)</title><rect x="861.1" y="1107.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="864.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 12.20%)</title><rect x="865.2" y="1107.0" width="143.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="868.2" y="1118.0">PhaseChaitin::Regi..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.35%)</title><rect x="865.2" y="1091.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="868.2" y="1102.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.70%)</title><rect x="869.3" y="1091.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="872.3" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.35%)</title><rect x="873.4" y="1075.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="876.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.05%)</title><rect x="877.5" y="1091.0" width="12.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="880.5" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.35%)</title><rect x="881.6" y="1075.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="884.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.35%)</title><rect x="885.7" y="1075.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.7" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="885.7" y="1059.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.70%)</title><rect x="889.9" y="1091.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="892.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.35%)</title><rect x="894.0" y="1075.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="897.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.05%)</title><rect x="898.1" y="1091.0" width="12.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="901.1" y="1102.0"></text>
</g>
<g>
<title>MachSpillCopyNode::MachSpillCopyNode(Node*, RegMask const&amp;, RegMask const&amp;) (1 samples, 0.35%)</title><rect x="906.3" y="1075.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="909.3" y="1086.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.35%)</title><rect x="906.3" y="1059.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="909.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 3.14%)</title><rect x="910.4" y="1091.0" width="37.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="913.4" y="1102.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="922.8" y="1075.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="925.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.39%)</title><rect x="926.9" y="1075.0" width="16.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="929.9" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.70%)</title><rect x="935.1" y="1059.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="938.1" y="1070.0"></text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.35%)</title><rect x="943.3" y="1075.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.35%)</title><rect x="947.4" y="1091.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="950.4" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.35%)</title><rect x="947.4" y="1075.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="950.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.39%)</title><rect x="951.5" y="1091.0" width="16.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="954.5" y="1102.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.70%)</title><rect x="959.8" y="1075.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="962.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.70%)</title><rect x="968.0" y="1091.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.0" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.70%)</title><rect x="968.0" y="1075.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 2.09%)</title><rect x="976.2" y="1091.0" width="24.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="979.2" y="1102.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 2.09%)</title><rect x="976.2" y="1075.0" width="24.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="979.2" y="1086.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 2.09%)</title><rect x="976.2" y="1059.0" width="24.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.2" y="1070.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.35%)</title><rect x="976.2" y="1043.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.2" y="1054.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.35%)</title><rect x="976.2" y="1027.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.2" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.39%)</title><rect x="980.3" y="1043.0" width="16.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="983.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.35%)</title><rect x="996.8" y="1043.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="999.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.35%)</title><rect x="1000.9" y="1091.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1003.9" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="1000.9" y="1075.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1003.9" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.35%)</title><rect x="1005.0" y="1091.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1008.0" y="1102.0"></text>
</g>
<g>
<title>Compile::Optimize() (33 samples, 11.50%)</title><rect x="1009.1" y="1123.0" width="135.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1012.1" y="1134.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.35%)</title><rect x="1009.1" y="1107.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1012.1" y="1118.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.35%)</title><rect x="1009.1" y="1091.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1012.1" y="1102.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="1009.1" y="1075.0" width="4.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1012.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.35%)</title><rect x="1013.2" y="1107.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1016.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.35%)</title><rect x="1013.2" y="1091.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.35%)</title><rect x="1013.2" y="1075.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.35%)</title><rect x="1013.2" y="1059.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1016.2" y="1070.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.35%)</title><rect x="1013.2" y="1043.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1016.2" y="1054.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.35%)</title><rect x="1013.2" y="1027.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.2" y="1038.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.35%)</title><rect x="1013.2" y="1011.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.2" y="1022.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.35%)</title><rect x="1013.2" y="995.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1016.2" y="1006.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1013.2" y="979.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1016.2" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1013.2" y="963.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1016.2" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1013.2" y="947.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1016.2" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1013.2" y="931.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.2" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1013.2" y="915.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.2" y="926.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.35%)</title><rect x="1017.3" y="1107.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1020.3" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1017.3" y="1091.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.3" y="1102.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1017.3" y="1075.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.3" y="1086.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.35%)</title><rect x="1017.3" y="1059.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.3" y="1070.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.35%)</title><rect x="1017.3" y="1043.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1020.3" y="1054.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.35%)</title><rect x="1017.3" y="1027.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.35%)</title><rect x="1021.4" y="1107.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1024.4" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="1021.4" y="1091.0" width="4.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1024.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (24 samples, 8.36%)</title><rect x="1025.5" y="1107.0" width="98.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.5" y="1118.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.70%)</title><rect x="1025.5" y="1091.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.70%)</title><rect x="1033.8" y="1091.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.8" y="1102.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.35%)</title><rect x="1037.9" y="1075.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 6.62%)</title><rect x="1042.0" y="1091.0" width="78.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.0" y="1102.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (19 samples, 6.62%)</title><rect x="1042.0" y="1075.0" width="78.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1045.0" y="1086.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (18 samples, 6.27%)</title><rect x="1046.1" y="1059.0" width="74.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.1" y="1070.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.70%)</title><rect x="1111.9" y="1043.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="1120.1" y="1091.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="1120.1" y="1075.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.1" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1120.1" y="1059.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1120.1" y="1043.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.74%)</title><rect x="1124.2" y="1107.0" width="20.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.39%)</title><rect x="1128.3" y="1091.0" width="16.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.3" y="1102.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1128.3" y="1075.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.3" y="1086.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1128.3" y="1059.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="1070.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.35%)</title><rect x="1128.3" y="1043.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.3" y="1054.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.35%)</title><rect x="1128.3" y="1027.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.3" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1128.3" y="1011.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.3" y="1022.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1128.3" y="995.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.3" y="1006.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1128.3" y="979.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.35%)</title><rect x="1128.3" y="963.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.3" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1132.4" y="1075.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.35%)</title><rect x="1132.4" y="1059.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.4" y="1070.0"></text>
</g>
<g>
<title>VectorSet::operator[](unsigned int) const (1 samples, 0.35%)</title><rect x="1132.4" y="1043.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.4" y="1054.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.35%)</title><rect x="1136.6" y="1075.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.6" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1140.7" y="1075.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1140.7" y="1059.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.35%)</title><rect x="1140.7" y="1043.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.7" y="1054.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.35%)</title><rect x="1140.7" y="1027.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.7" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.74%)</title><rect x="1144.8" y="1123.0" width="20.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.8" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.74%)</title><rect x="1144.8" y="1107.0" width="20.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.74%)</title><rect x="1144.8" y="1091.0" width="20.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.74%)</title><rect x="1144.8" y="1075.0" width="20.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.74%)</title><rect x="1144.8" y="1059.0" width="20.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.74%)</title><rect x="1144.8" y="1043.0" width="20.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.8" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.39%)</title><rect x="1144.8" y="1027.0" width="16.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.8" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.39%)</title><rect x="1144.8" y="1011.0" width="16.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.05%)</title><rect x="1144.8" y="995.0" width="12.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.05%)</title><rect x="1144.8" y="979.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.05%)</title><rect x="1144.8" y="963.0" width="12.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.05%)</title><rect x="1144.8" y="947.0" width="12.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.8" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1144.8" y="931.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.8" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1144.8" y="915.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1144.8" y="899.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1144.8" y="883.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1144.8" y="867.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1144.8" y="851.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.8" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1144.8" y="835.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.8" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1144.8" y="819.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1144.8" y="803.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1144.8" y="787.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1144.8" y="771.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1144.8" y="755.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1144.8" y="739.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1144.8" y="723.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1144.8" y="707.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1144.8" y="691.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1144.8" y="675.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1144.8" y="659.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.8" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1144.8" y="643.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1144.8" y="627.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1144.8" y="611.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.8" y="622.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.35%)</title><rect x="1144.8" y="595.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.8" y="606.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.35%)</title><rect x="1144.8" y="579.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.8" y="590.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="1144.8" y="563.0" width="4.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1147.8" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1148.9" y="931.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1148.9" y="915.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1148.9" y="899.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1148.9" y="883.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1148.9" y="867.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1148.9" y="851.0" width="8.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1148.9" y="835.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1148.9" y="819.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1148.9" y="803.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1148.9" y="787.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1148.9" y="771.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1148.9" y="755.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1148.9" y="739.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1148.9" y="723.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1148.9" y="707.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1148.9" y="691.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1148.9" y="675.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1148.9" y="659.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1148.9" y="643.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1148.9" y="627.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1148.9" y="611.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1148.9" y="595.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1148.9" y="579.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1148.9" y="563.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1148.9" y="547.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1148.9" y="531.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1148.9" y="515.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1148.9" y="499.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1148.9" y="483.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1148.9" y="467.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1148.9" y="451.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1148.9" y="435.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1148.9" y="419.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1148.9" y="403.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1148.9" y="387.0" width="8.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1148.9" y="371.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1148.9" y="355.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1148.9" y="339.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1148.9" y="323.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1148.9" y="307.0" width="8.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1148.9" y="291.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1148.9" y="275.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1148.9" y="259.0" width="8.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.9" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1148.9" y="243.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.9" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1148.9" y="227.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.9" y="238.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.35%)</title><rect x="1148.9" y="211.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.9" y="222.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.35%)</title><rect x="1148.9" y="195.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.9" y="206.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.35%)</title><rect x="1148.9" y="179.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.9" y="190.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.35%)</title><rect x="1148.9" y="163.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.9" y="174.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.35%)</title><rect x="1148.9" y="147.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.9" y="158.0"></text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.35%)</title><rect x="1148.9" y="131.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.9" y="142.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1148.9" y="115.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.9" y="126.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1148.9" y="99.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.9" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1148.9" y="83.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.9" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1148.9" y="67.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.9" y="78.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1148.9" y="51.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.9" y="62.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.35%)</title><rect x="1148.9" y="35.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1153.0" y="211.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1153.0" y="195.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.0" y="206.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.35%)</title><rect x="1157.1" y="995.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.1" y="1006.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.35%)</title><rect x="1157.1" y="979.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="990.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long) (1 samples, 0.35%)</title><rect x="1157.1" y="963.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.1" y="974.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1161.2" y="1027.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.2" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1161.2" y="1011.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.2" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1161.2" y="995.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1161.2" y="979.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1161.2" y="963.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1161.2" y="947.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1161.2" y="931.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1161.2" y="915.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.2" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1161.2" y="899.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1161.2" y="883.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1161.2" y="867.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1161.2" y="851.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1161.2" y="835.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1161.2" y="819.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1161.2" y="803.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1161.2" y="787.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1161.2" y="771.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1161.2" y="755.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1161.2" y="739.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.2" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1161.2" y="723.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1161.2" y="707.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.2" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1161.2" y="691.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="702.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1161.2" y="675.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.2" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.35%)</title><rect x="1161.2" y="659.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.2" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.35%)</title><rect x="1161.2" y="643.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.2" y="654.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.35%)</title><rect x="1161.2" y="627.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.2" y="638.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="1161.2" y="611.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.2" y="622.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="1161.2" y="595.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.2" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.35%)</title><rect x="1161.2" y="579.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.2" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.35%)</title><rect x="1161.2" y="563.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="574.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.35%)</title><rect x="1165.3" y="1123.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.3" y="1134.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.35%)</title><rect x="1165.3" y="1107.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.3" y="1118.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.35%)</title><rect x="1169.4" y="1123.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="1134.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.35%)</title><rect x="1169.4" y="1107.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.4" y="1118.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1169.4" y="1091.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.4" y="1102.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.35%)</title><rect x="1169.4" y="1075.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.4" y="1086.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.70%)</title><rect x="1173.6" y="1155.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="1166.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.70%)</title><rect x="1173.6" y="1139.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.6" y="1150.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.70%)</title><rect x="1173.6" y="1123.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="1134.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (2 samples, 0.70%)</title><rect x="1173.6" y="1107.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.6" y="1118.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 0.70%)</title><rect x="1173.6" y="1091.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.6" y="1102.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.70%)</title><rect x="1173.6" y="1075.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="1086.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.35%)</title><rect x="1173.6" y="1059.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.6" y="1070.0"></text>
</g>
<g>
<title>append_oop_references(GrowableArray&lt;oopDesc*&gt;*, Klass*) (1 samples, 0.35%)</title><rect x="1173.6" y="1043.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1176.6" y="1054.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.35%)</title><rect x="1177.7" y="1059.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.35%)</title><rect x="1177.7" y="1043.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="1054.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.35%)</title><rect x="1181.8" y="1155.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="1166.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.35%)</title><rect x="1181.8" y="1139.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="1150.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.35%)</title><rect x="1185.9" y="1171.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="1182.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.35%)</title><rect x="1185.9" y="1155.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.9" y="1166.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.35%)</title><rect x="1185.9" y="1139.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.9" y="1150.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.35%)</title><rect x="1185.9" y="1123.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.9" y="1134.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.35%)</title><rect x="1185.9" y="1107.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="1118.0"></text>
</g>
</g>
</svg>
