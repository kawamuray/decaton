<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (982 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (255 samples, 25.97%)</title><rect x="10.0" y="1027.0" width="306.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (253 samples, 25.76%)</title><rect x="11.2" y="1011.0" width="304.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="1022.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.61%)</title><rect x="11.2" y="995.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.61%)</title><rect x="11.2" y="979.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2050807863.accept (6 samples, 0.61%)</title><rect x="11.2" y="963.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.61%)</title><rect x="11.2" y="947.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.51%)</title><rect x="12.4" y="931.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.4" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.41%)</title><rect x="13.6" y="915.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.6" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.10%)</title><rect x="17.2" y="899.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.2" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="17.2" y="883.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.10%)</title><rect x="17.2" y="867.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="17.2" y="851.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.20%)</title><rect x="18.4" y="995.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.20%)</title><rect x="18.4" y="979.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="18.4" y="963.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="18.4" y="947.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="18.4" y="931.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="19.6" y="963.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="19.6" y="947.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="19.6" y="931.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="19.6" y="915.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="19.6" y="899.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.6" y="910.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="19.6" y="883.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (198 samples, 20.16%)</title><rect x="20.8" y="995.0" width="237.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.8" y="1006.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1219383282.accept (193 samples, 19.65%)</title><rect x="20.8" y="979.0" width="231.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.8" y="990.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$59 (192 samples, 19.55%)</title><rect x="22.0" y="963.0" width="230.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.0" y="974.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (3 samples, 0.31%)</title><rect x="22.0" y="947.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (155 samples, 15.78%)</title><rect x="25.6" y="947.0" width="186.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.6" y="958.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (155 samples, 15.78%)</title><rect x="25.6" y="931.0" width="186.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.6" y="942.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (155 samples, 15.78%)</title><rect x="25.6" y="915.0" width="186.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.6" y="926.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (155 samples, 15.78%)</title><rect x="25.6" y="899.0" width="186.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.6" y="910.0">java/util/concurrent/Exe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (155 samples, 15.78%)</title><rect x="25.6" y="883.0" width="186.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.6" y="894.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (135 samples, 13.75%)</title><rect x="48.5" y="867.0" width="162.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.5" y="878.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (79 samples, 8.04%)</title><rect x="49.7" y="851.0" width="94.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.7" y="862.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 8.04%)</title><rect x="49.7" y="835.0" width="94.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.7" y="846.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 8.04%)</title><rect x="49.7" y="819.0" width="94.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="52.7" y="830.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 8.04%)</title><rect x="49.7" y="803.0" width="94.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.7" y="814.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 8.04%)</title><rect x="49.7" y="787.0" width="94.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.7" y="798.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (66 samples, 6.72%)</title><rect x="65.3" y="771.0" width="79.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="68.3" y="782.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="66.5" y="755.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="69.5" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (56 samples, 5.70%)</title><rect x="68.9" y="755.0" width="67.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="71.9" y="766.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="72.5" y="739.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="75.5" y="750.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.31%)</title><rect x="73.7" y="739.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="76.7" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="77.3" y="739.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="80.3" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (36 samples, 3.67%)</title><rect x="78.5" y="739.0" width="43.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="81.5" y="750.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.20%)</title><rect x="121.8" y="739.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="124.8" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 1.02%)</title><rect x="124.2" y="739.0" width="12.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="127.2" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (7 samples, 0.71%)</title><rect x="136.2" y="755.0" width="8.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="139.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (25 samples, 2.55%)</title><rect x="144.6" y="851.0" width="30.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="147.6" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (25 samples, 2.55%)</title><rect x="144.6" y="835.0" width="30.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.6" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (25 samples, 2.55%)</title><rect x="144.6" y="819.0" width="30.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.6" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 3.05%)</title><rect x="174.6" y="851.0" width="36.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="177.6" y="862.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 3.05%)</title><rect x="174.6" y="835.0" width="36.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.6" y="846.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 3.05%)</title><rect x="174.6" y="819.0" width="36.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="177.6" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (30 samples, 3.05%)</title><rect x="174.6" y="803.0" width="36.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="177.6" y="814.0">jav..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="210.7" y="867.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="213.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.41%)</title><rect x="211.9" y="947.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="214.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.41%)</title><rect x="211.9" y="931.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.20%)</title><rect x="216.7" y="947.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.20%)</title><rect x="216.7" y="931.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.20%)</title><rect x="216.7" y="915.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 2.85%)</title><rect x="219.1" y="947.0" width="33.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.1" y="958.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 2.85%)</title><rect x="219.1" y="931.0" width="33.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="222.1" y="942.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 1.12%)</title><rect x="235.9" y="915.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.9" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.81%)</title><rect x="237.1" y="899.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="240.1" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.81%)</title><rect x="237.1" y="883.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.1" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.81%)</title><rect x="237.1" y="867.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.1" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="244.3" y="851.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="247.3" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.20%)</title><rect x="246.7" y="899.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.7" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.31%)</title><rect x="249.1" y="915.0" width="3.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="252.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.41%)</title><rect x="252.7" y="979.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.41%)</title><rect x="252.7" y="963.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="255.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.41%)</title><rect x="252.7" y="947.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.41%)</title><rect x="252.7" y="931.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="257.5" y="979.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="257.5" y="963.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 4.79%)</title><rect x="258.7" y="995.0" width="56.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.7" y="1006.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 4.79%)</title><rect x="258.7" y="979.0" width="56.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.7" y="990.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 3.46%)</title><rect x="259.9" y="963.0" width="40.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="262.9" y="974.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 3.46%)</title><rect x="259.9" y="947.0" width="40.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.9" y="958.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 3.46%)</title><rect x="259.9" y="931.0" width="40.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.9" y="942.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 3.05%)</title><rect x="259.9" y="915.0" width="36.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.9" y="926.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 3.05%)</title><rect x="259.9" y="899.0" width="36.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.9" y="910.0">org..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.10%)</title><rect x="262.3" y="883.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.3" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.10%)</title><rect x="262.3" y="867.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.3" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.10%)</title><rect x="262.3" y="851.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.3" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.10%)</title><rect x="262.3" y="835.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.3" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="262.3" y="819.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 1.32%)</title><rect x="263.5" y="883.0" width="15.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.10%)</title><rect x="270.8" y="867.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.movePartitionToEnd (1 samples, 0.10%)</title><rect x="270.8" y="851.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.moveToEnd (1 samples, 0.10%)</title><rect x="270.8" y="835.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.10%)</title><rect x="270.8" y="819.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="273.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.10%)</title><rect x="270.8" y="803.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.8" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeRemoval (1 samples, 0.10%)</title><rect x="270.8" y="787.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.8" y="798.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.10%)</title><rect x="270.8" y="771.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="273.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.61%)</title><rect x="272.0" y="867.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.61%)</title><rect x="272.0" y="851.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.61%)</title><rect x="272.0" y="835.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.61%)</title><rect x="272.0" y="819.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.61%)</title><rect x="272.0" y="803.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.61%)</title><rect x="272.0" y="787.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.61%)</title><rect x="272.0" y="771.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.43%)</title><rect x="279.2" y="883.0" width="16.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.43%)</title><rect x="279.2" y="867.0" width="16.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.2" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="279.2" y="851.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="282.2" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="279.2" y="835.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="282.2" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.10%)</title><rect x="279.2" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="282.2" y="830.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.10%)</title><rect x="279.2" y="803.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="282.2" y="814.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.10%)</title><rect x="279.2" y="787.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="282.2" y="798.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.10%)</title><rect x="279.2" y="771.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="282.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.71%)</title><rect x="280.4" y="851.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.4" y="862.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.71%)</title><rect x="280.4" y="835.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.61%)</title><rect x="288.8" y="851.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.8" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.61%)</title><rect x="288.8" y="835.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.8" y="846.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="294.8" y="819.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="297.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.20%)</title><rect x="296.0" y="915.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="299.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.20%)</title><rect x="296.0" y="899.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="296.0" y="883.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="296.0" y="867.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="296.0" y="851.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="297.2" y="883.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="297.2" y="867.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="297.2" y="851.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="297.2" y="835.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.20%)</title><rect x="298.4" y="915.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.71%)</title><rect x="300.8" y="963.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.61%)</title><rect x="300.8" y="947.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.51%)</title><rect x="300.8" y="931.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.8" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.20%)</title><rect x="302.0" y="915.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="305.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.10%)</title><rect x="302.0" y="899.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.0" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="302.0" y="883.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="305.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/311497529.accept (1 samples, 0.10%)</title><rect x="303.2" y="899.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.10%)</title><rect x="303.2" y="883.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="303.2" y="867.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.10%)</title><rect x="303.2" y="851.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="306.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.10%)</title><rect x="303.2" y="835.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="306.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="304.4" y="915.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="307.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="304.4" y="899.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="304.4" y="883.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="304.4" y="867.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="307.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="304.4" y="851.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="307.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="304.4" y="835.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="307.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.10%)</title><rect x="305.6" y="915.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="305.6" y="899.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="305.6" y="883.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="308.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="305.6" y="867.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="305.6" y="851.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="305.6" y="835.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="305.6" y="819.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.6" y="830.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="305.6" y="803.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.6" y="814.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.10%)</title><rect x="305.6" y="787.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="305.6" y="771.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="305.6" y="755.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="308.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.10%)</title><rect x="306.8" y="931.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.10%)</title><rect x="306.8" y="915.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="306.8" y="899.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="306.8" y="883.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="309.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="306.8" y="867.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="306.8" y="851.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.10%)</title><rect x="306.8" y="835.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="308.0" y="947.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.10%)</title><rect x="308.0" y="931.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.10%)</title><rect x="308.0" y="915.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.10%)</title><rect x="309.2" y="963.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.10%)</title><rect x="309.2" y="947.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.10%)</title><rect x="309.2" y="931.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="309.2" y="915.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="309.2" y="899.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="309.2" y="883.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.2" y="894.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="309.2" y="867.0" width="1.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="312.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.31%)</title><rect x="310.4" y="963.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="313.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.20%)</title><rect x="311.6" y="947.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.6" y="958.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="311.6" y="931.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="314.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/733290574.accept (1 samples, 0.10%)</title><rect x="311.6" y="915.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.10%)</title><rect x="311.6" y="899.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="311.6" y="883.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="314.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.10%)</title><rect x="311.6" y="867.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="311.6" y="851.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="311.6" y="835.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="314.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.10%)</title><rect x="312.8" y="931.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="315.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.10%)</title><rect x="312.8" y="915.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.10%)</title><rect x="312.8" y="899.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="315.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="312.8" y="883.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.8" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="312.8" y="867.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="312.8" y="851.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.10%)</title><rect x="314.0" y="963.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="314.0" y="947.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="317.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="314.0" y="931.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="314.0" y="915.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="314.0" y="899.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.0" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.10%)</title><rect x="315.2" y="1011.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="318.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.run (661 samples, 67.31%)</title><rect x="316.4" y="1027.0" width="794.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="319.4" y="1038.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (661 samples, 67.31%)</title><rect x="316.4" y="1011.0" width="794.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.4" y="1022.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (661 samples, 67.31%)</title><rect x="316.4" y="995.0" width="794.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.4" y="1006.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$278/1175055790.run (447 samples, 45.52%)</title><rect x="318.8" y="979.0" width="537.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.8" y="990.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$278/117505579..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (447 samples, 45.52%)</title><rect x="318.8" y="963.0" width="537.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.8" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (446 samples, 45.42%)</title><rect x="320.0" y="947.0" width="535.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.0" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (439 samples, 44.70%)</title><rect x="320.0" y="931.0" width="527.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.0" y="942.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="327.2" y="915.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="330.2" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="327.2" y="899.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="330.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.10%)</title><rect x="328.4" y="915.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="331.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (155 samples, 15.78%)</title><rect x="329.6" y="915.0" width="186.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="332.6" y="926.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (155 samples, 15.78%)</title><rect x="329.6" y="899.0" width="186.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.6" y="910.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (155 samples, 15.78%)</title><rect x="329.6" y="883.0" width="186.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="332.6" y="894.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (155 samples, 15.78%)</title><rect x="329.6" y="867.0" width="186.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.6" y="878.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (155 samples, 15.78%)</title><rect x="329.6" y="851.0" width="186.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="332.6" y="862.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (155 samples, 15.78%)</title><rect x="329.6" y="835.0" width="186.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.6" y="846.0">com/fasterxml/jackson/da..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (48 samples, 4.89%)</title><rect x="329.6" y="819.0" width="57.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="332.6" y="830.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (18 samples, 1.83%)</title><rect x="329.6" y="803.0" width="21.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.6" y="814.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (17 samples, 1.73%)</title><rect x="329.6" y="787.0" width="20.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.6" y="798.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="339.2" y="771.0" width="2.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="342.2" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.41%)</title><rect x="341.6" y="771.0" width="4.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="344.6" y="782.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.31%)</title><rect x="342.9" y="755.0" width="3.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="345.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.10%)</title><rect x="346.5" y="771.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="349.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.10%)</title><rect x="347.7" y="771.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.10%)</title><rect x="347.7" y="755.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.10%)</title><rect x="347.7" y="739.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.10%)</title><rect x="347.7" y="723.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="350.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.10%)</title><rect x="347.7" y="707.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.7" y="718.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="348.9" y="771.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="351.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="350.1" y="787.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.10%)</title><rect x="350.1" y="771.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.1" y="782.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.10%)</title><rect x="350.1" y="755.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="353.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (30 samples, 3.05%)</title><rect x="351.3" y="803.0" width="36.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="354.3" y="814.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="351.3" y="787.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="354.3" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="351.3" y="771.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="354.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="351.3" y="755.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="354.3" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="351.3" y="739.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="354.3" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="351.3" y="723.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="354.3" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="351.3" y="707.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="354.3" y="718.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="351.3" y="691.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="354.3" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="351.3" y="675.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="354.3" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="351.3" y="659.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="354.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (3 samples, 0.31%)</title><rect x="352.5" y="787.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="355.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (26 samples, 2.65%)</title><rect x="356.1" y="787.0" width="31.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="359.1" y="798.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="360.9" y="771.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="363.9" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="360.9" y="755.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="363.9" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="360.9" y="739.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="363.9" y="750.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="360.9" y="723.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="363.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (9 samples, 0.92%)</title><rect x="362.1" y="771.0" width="10.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="365.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (6 samples, 0.61%)</title><rect x="365.7" y="755.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 0.61%)</title><rect x="372.9" y="771.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="375.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.61%)</title><rect x="372.9" y="755.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="375.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.61%)</title><rect x="372.9" y="739.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.61%)</title><rect x="380.1" y="771.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="383.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (96 samples, 9.78%)</title><rect x="387.3" y="819.0" width="115.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.3" y="830.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.61%)</title><rect x="387.3" y="803.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="390.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.61%)</title><rect x="387.3" y="787.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.51%)</title><rect x="387.3" y="771.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.51%)</title><rect x="387.3" y="755.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.10%)</title><rect x="393.3" y="771.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (9 samples, 0.92%)</title><rect x="394.5" y="803.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.92%)</title><rect x="394.5" y="787.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.10%)</title><rect x="401.7" y="771.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.20%)</title><rect x="402.9" y="771.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="405.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 0.51%)</title><rect x="405.3" y="803.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.41%)</title><rect x="406.5" y="787.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="409.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.31%)</title><rect x="406.5" y="771.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.31%)</title><rect x="406.5" y="755.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="408.9" y="739.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="410.1" y="771.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.41%)</title><rect x="411.3" y="803.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="414.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.41%)</title><rect x="411.3" y="787.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="414.3" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="411.3" y="771.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="414.3" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="411.3" y="755.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="414.3" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.20%)</title><rect x="411.3" y="739.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="414.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.20%)</title><rect x="411.3" y="723.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="414.3" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="411.3" y="707.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="414.3" y="718.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="412.5" y="707.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="415.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.20%)</title><rect x="413.7" y="771.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="416.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.20%)</title><rect x="413.7" y="755.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.20%)</title><rect x="413.7" y="739.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (72 samples, 7.33%)</title><rect x="416.2" y="803.0" width="86.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.2" y="814.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.93%)</title><rect x="416.2" y="787.0" width="22.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.2" y="798.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.51%)</title><rect x="418.6" y="771.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="421.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.51%)</title><rect x="418.6" y="755.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.51%)</title><rect x="418.6" y="739.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="421.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 1.12%)</title><rect x="424.6" y="771.0" width="13.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="437.8" y="771.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="440.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="437.8" y="755.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="440.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (53 samples, 5.40%)</title><rect x="439.0" y="787.0" width="63.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.0" y="798.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="441.4" y="771.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="444.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="441.4" y="755.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="444.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="441.4" y="739.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="444.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 5.09%)</title><rect x="442.6" y="771.0" width="60.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="445.6" y="782.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 5.09%)</title><rect x="442.6" y="755.0" width="60.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="445.6" y="766.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.53%)</title><rect x="449.8" y="739.0" width="18.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="452.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.81%)</title><rect x="453.4" y="723.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="456.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.81%)</title><rect x="453.4" y="707.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="456.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.81%)</title><rect x="453.4" y="691.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="456.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.51%)</title><rect x="457.0" y="675.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="460.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.41%)</title><rect x="457.0" y="659.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="460.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.41%)</title><rect x="457.0" y="643.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="460.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.20%)</title><rect x="459.4" y="627.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="462.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.10%)</title><rect x="461.8" y="659.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.20%)</title><rect x="463.0" y="723.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="466.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.20%)</title><rect x="465.4" y="723.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="468.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.20%)</title><rect x="465.4" y="707.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="468.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.20%)</title><rect x="465.4" y="691.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="468.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (11 samples, 1.12%)</title><rect x="467.8" y="739.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="470.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.71%)</title><rect x="472.6" y="723.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="475.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.71%)</title><rect x="472.6" y="707.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.71%)</title><rect x="472.6" y="691.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="475.6" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.71%)</title><rect x="472.6" y="675.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.31%)</title><rect x="481.0" y="739.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.61%)</title><rect x="484.6" y="739.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="487.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.61%)</title><rect x="484.6" y="723.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="487.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.61%)</title><rect x="484.6" y="707.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.61%)</title><rect x="484.6" y="691.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="487.6" y="702.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.61%)</title><rect x="484.6" y="675.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="487.6" y="686.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.61%)</title><rect x="484.6" y="659.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.6" y="670.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (6 samples, 0.61%)</title><rect x="484.6" y="643.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="487.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.51%)</title><rect x="491.9" y="739.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="494.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.51%)</title><rect x="491.9" y="723.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="494.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.51%)</title><rect x="491.9" y="707.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="494.9" y="718.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="496.7" y="691.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="499.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.41%)</title><rect x="497.9" y="739.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="500.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.20%)</title><rect x="500.3" y="723.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 1.12%)</title><rect x="502.7" y="819.0" width="13.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="505.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 1.12%)</title><rect x="502.7" y="803.0" width="13.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="505.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 1.12%)</title><rect x="502.7" y="787.0" width="13.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="505.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.20%)</title><rect x="506.3" y="771.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="509.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.10%)</title><rect x="508.7" y="771.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="511.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (2 samples, 0.20%)</title><rect x="509.9" y="771.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="512.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.31%)</title><rect x="512.3" y="771.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.31%)</title><rect x="512.3" y="755.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (258 samples, 26.27%)</title><rect x="515.9" y="915.0" width="310.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.9" y="926.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (46 samples, 4.68%)</title><rect x="517.1" y="899.0" width="55.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="520.1" y="910.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.10%)</title><rect x="518.3" y="883.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="521.3" y="894.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (44 samples, 4.48%)</title><rect x="519.5" y="883.0" width="52.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.5" y="894.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (41 samples, 4.18%)</title><rect x="523.1" y="867.0" width="49.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="526.1" y="878.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.51%)</title><rect x="525.5" y="851.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="528.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.51%)</title><rect x="525.5" y="835.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="528.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.51%)</title><rect x="525.5" y="819.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="528.5" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.51%)</title><rect x="525.5" y="803.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="528.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="531.5" y="851.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="534.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="531.5" y="835.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="531.5" y="819.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="534.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.10%)</title><rect x="531.5" y="803.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="534.5" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (33 samples, 3.36%)</title><rect x="532.7" y="851.0" width="39.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="535.7" y="862.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 1.02%)</title><rect x="560.3" y="835.0" width="12.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="563.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 1.02%)</title><rect x="560.3" y="819.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.20%)</title><rect x="568.8" y="803.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="571.8" y="814.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="571.2" y="803.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="574.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.81%)</title><rect x="572.4" y="899.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="575.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.51%)</title><rect x="576.0" y="883.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="579.0" y="894.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.51%)</title><rect x="576.0" y="867.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="579.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (141 samples, 14.36%)</title><rect x="582.0" y="899.0" width="169.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="585.0" y="910.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (141 samples, 14.36%)</title><rect x="582.0" y="883.0" width="169.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="585.0" y="894.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.51%)</title><rect x="586.8" y="867.0" width="6.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="589.8" y="878.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.51%)</title><rect x="586.8" y="851.0" width="6.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="589.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (39 samples, 3.97%)</title><rect x="592.8" y="867.0" width="46.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="595.8" y="878.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 3.97%)</title><rect x="592.8" y="851.0" width="46.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="595.8" y="862.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (25 samples, 2.55%)</title><rect x="604.8" y="835.0" width="30.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="607.8" y="846.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (14 samples, 1.43%)</title><rect x="614.4" y="819.0" width="16.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="617.4" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (14 samples, 1.43%)</title><rect x="614.4" y="803.0" width="16.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.4" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 1.43%)</title><rect x="614.4" y="787.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.61%)</title><rect x="620.4" y="771.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="623.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="620.4" y="755.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="623.4" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="620.4" y="739.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="623.4" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="621.6" y="755.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="624.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.20%)</title><rect x="622.8" y="755.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="625.8" y="766.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.20%)</title><rect x="622.8" y="739.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="625.8" y="750.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="624.0" y="723.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="627.0" y="734.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.10%)</title><rect x="625.2" y="755.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="628.2" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="626.4" y="755.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="629.4" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.10%)</title><rect x="626.4" y="739.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="629.4" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.31%)</title><rect x="627.6" y="771.0" width="3.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="630.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.10%)</title><rect x="631.2" y="819.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="634.2" y="830.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="632.4" y="819.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="635.4" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="633.6" y="819.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="636.6" y="830.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="634.8" y="835.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="637.8" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.31%)</title><rect x="636.0" y="835.0" width="3.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="639.0" y="846.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.81%)</title><rect x="639.7" y="867.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="642.7" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.81%)</title><rect x="639.7" y="851.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="642.7" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.81%)</title><rect x="639.7" y="835.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="642.7" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (85 samples, 8.66%)</title><rect x="649.3" y="867.0" width="102.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="652.3" y="878.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (85 samples, 8.66%)</title><rect x="649.3" y="851.0" width="102.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="652.3" y="862.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.31%)</title><rect x="649.3" y="835.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="652.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.31%)</title><rect x="649.3" y="819.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="652.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.31%)</title><rect x="649.3" y="803.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="652.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.31%)</title><rect x="649.3" y="787.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="652.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (82 samples, 8.35%)</title><rect x="652.9" y="835.0" width="98.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="655.9" y="846.0">java/util/Co..</text>
</g>
<g>
<title>java/util/HashMap.put (76 samples, 7.74%)</title><rect x="660.1" y="819.0" width="91.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="663.1" y="830.0">java/util/H..</text>
</g>
<g>
<title>java/util/HashMap.putVal (43 samples, 4.38%)</title><rect x="699.7" y="803.0" width="51.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="702.7" y="814.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.31%)</title><rect x="719.0" y="787.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="722.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (16 samples, 1.63%)</title><rect x="722.6" y="787.0" width="19.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="725.6" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="740.6" y="771.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="743.6" y="782.0"></text>
</g>
<g>
<title>vtable stub (8 samples, 0.81%)</title><rect x="741.8" y="787.0" width="9.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="744.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (46 samples, 4.68%)</title><rect x="751.4" y="899.0" width="55.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="754.4" y="910.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (46 samples, 4.68%)</title><rect x="751.4" y="883.0" width="55.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="754.4" y="894.0">com/l..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="752.6" y="867.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="755.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (19 samples, 1.93%)</title><rect x="753.8" y="867.0" width="22.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="756.8" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (16 samples, 1.63%)</title><rect x="757.4" y="851.0" width="19.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="760.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (14 samples, 1.43%)</title><rect x="757.4" y="835.0" width="16.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="760.4" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="758.6" y="819.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="761.6" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="758.6" y="803.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="761.6" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="758.6" y="787.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="761.6" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="758.6" y="771.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="761.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.10%)</title><rect x="758.6" y="755.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="761.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="758.6" y="739.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="761.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.71%)</title><rect x="759.8" y="819.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="762.8" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.71%)</title><rect x="759.8" y="803.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="762.8" y="814.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.61%)</title><rect x="761.0" y="787.0" width="7.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="764.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.51%)</title><rect x="768.2" y="819.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="771.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.20%)</title><rect x="774.2" y="835.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="777.2" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="775.4" y="819.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="778.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="775.4" y="803.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.4" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="775.4" y="787.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="778.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="776.6" y="867.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="779.6" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.10%)</title><rect x="776.6" y="851.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="779.6" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (10 samples, 1.02%)</title><rect x="777.8" y="867.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="780.8" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (10 samples, 1.02%)</title><rect x="777.8" y="851.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="780.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/785469357.get$Lambda (10 samples, 1.02%)</title><rect x="777.8" y="835.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="780.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/785469357.&lt;init&gt; (10 samples, 1.02%)</title><rect x="777.8" y="819.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="780.8" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.61%)</title><rect x="789.9" y="867.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="792.9" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.41%)</title><rect x="792.3" y="851.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.3" y="862.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.20%)</title><rect x="792.3" y="835.0" width="2.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="795.3" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.20%)</title><rect x="794.7" y="835.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.7" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.31%)</title><rect x="797.1" y="867.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.1" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="799.5" y="851.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="802.5" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.51%)</title><rect x="800.7" y="867.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="803.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.10%)</title><rect x="806.7" y="899.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="809.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="806.7" y="883.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="809.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="806.7" y="867.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="809.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="806.7" y="851.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="809.7" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="806.7" y="835.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="809.7" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="806.7" y="819.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="809.7" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="806.7" y="803.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="809.7" y="814.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="806.7" y="787.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="809.7" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="806.7" y="771.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="809.7" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="806.7" y="755.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="809.7" y="766.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.10%)</title><rect x="806.7" y="739.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="809.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.53%)</title><rect x="807.9" y="899.0" width="18.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="810.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.53%)</title><rect x="807.9" y="883.0" width="18.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.9" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.31%)</title><rect x="811.5" y="867.0" width="3.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="814.5" y="878.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.31%)</title><rect x="811.5" y="851.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="814.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.81%)</title><rect x="815.1" y="867.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="818.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/448128214.accept (8 samples, 0.81%)</title><rect x="815.1" y="851.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="818.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (8 samples, 0.81%)</title><rect x="815.1" y="835.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="818.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.81%)</title><rect x="815.1" y="819.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="818.1" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.81%)</title><rect x="815.1" y="803.0" width="9.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="818.1" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.81%)</title><rect x="815.1" y="787.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="818.1" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.41%)</title><rect x="819.9" y="771.0" width="4.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="822.9" y="782.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.31%)</title><rect x="821.1" y="755.0" width="3.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="824.1" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.10%)</title><rect x="824.7" y="867.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="827.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.32%)</title><rect x="825.9" y="915.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="828.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.32%)</title><rect x="825.9" y="899.0" width="15.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="828.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.10%)</title><rect x="828.3" y="883.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="831.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 1.02%)</title><rect x="829.5" y="883.0" width="12.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="832.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/448128214.accept (10 samples, 1.02%)</title><rect x="829.5" y="867.0" width="12.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="832.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (10 samples, 1.02%)</title><rect x="829.5" y="851.0" width="12.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="832.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (10 samples, 1.02%)</title><rect x="829.5" y="835.0" width="12.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="832.5" y="846.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 1.02%)</title><rect x="829.5" y="819.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="832.5" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 1.02%)</title><rect x="829.5" y="803.0" width="12.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.5" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.51%)</title><rect x="841.5" y="915.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="844.5" y="926.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.51%)</title><rect x="841.5" y="899.0" width="6.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="844.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.71%)</title><rect x="847.5" y="931.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="850.5" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.51%)</title><rect x="848.7" y="915.0" width="6.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="851.7" y="926.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.51%)</title><rect x="848.7" y="899.0" width="6.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="851.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="854.7" y="915.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="857.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.61%)</title><rect x="855.9" y="979.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="858.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.61%)</title><rect x="855.9" y="963.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="858.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.61%)</title><rect x="855.9" y="947.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="858.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.61%)</title><rect x="855.9" y="931.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="858.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (3 samples, 0.31%)</title><rect x="859.6" y="915.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="862.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (206 samples, 20.98%)</title><rect x="863.2" y="979.0" width="247.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="866.2" y="990.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (206 samples, 20.98%)</title><rect x="863.2" y="963.0" width="247.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="866.2" y="974.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (188 samples, 19.14%)</title><rect x="866.8" y="947.0" width="225.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="869.8" y="958.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (22 samples, 2.24%)</title><rect x="871.6" y="931.0" width="26.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.6" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (11 samples, 1.12%)</title><rect x="898.0" y="931.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="901.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 1.12%)</title><rect x="898.0" y="915.0" width="13.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="901.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 1.12%)</title><rect x="898.0" y="899.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="901.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 1.12%)</title><rect x="898.0" y="883.0" width="13.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="901.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (151 samples, 15.38%)</title><rect x="911.2" y="931.0" width="181.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="914.2" y="942.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (151 samples, 15.38%)</title><rect x="911.2" y="915.0" width="181.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="914.2" y="926.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.20%)</title><rect x="914.8" y="899.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="917.8" y="910.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.10%)</title><rect x="917.2" y="899.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="920.2" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="918.4" y="899.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="921.4" y="910.0"></text>
</g>
<g>
<title>Unsafe_Park (139 samples, 14.15%)</title><rect x="919.6" y="899.0" width="167.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="922.6" y="910.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="919.6" y="883.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="922.6" y="894.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.10%)</title><rect x="922.0" y="883.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="925.0" y="894.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 2.44%)</title><rect x="923.2" y="883.0" width="28.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="926.2" y="894.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.81%)</title><rect x="934.1" y="867.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="937.1" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.20%)</title><rect x="937.7" y="851.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="940.7" y="862.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="938.9" y="835.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="941.9" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.20%)</title><rect x="940.1" y="851.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.1" y="862.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="942.5" y="851.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="945.5" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.20%)</title><rect x="943.7" y="867.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.7" y="878.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="946.1" y="867.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="949.1" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.41%)</title><rect x="947.3" y="867.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="950.3" y="878.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="952.1" y="883.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="955.1" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="953.3" y="883.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.3" y="894.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.71%)</title><rect x="954.5" y="883.0" width="8.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="957.5" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.95%)</title><rect x="962.9" y="883.0" width="34.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="965.9" y="894.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (56 samples, 5.70%)</title><rect x="997.7" y="883.0" width="67.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1000.7" y="894.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.31%)</title><rect x="1065.0" y="883.0" width="3.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1068.0" y="894.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.20%)</title><rect x="1068.6" y="883.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1071.6" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.10%)</title><rect x="1071.0" y="883.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1074.0" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.51%)</title><rect x="1072.2" y="883.0" width="6.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1075.2" y="894.0"></text>
</g>
<g>
<title>_init (2 samples, 0.20%)</title><rect x="1078.2" y="883.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1081.2" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1080.7" y="883.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1083.7" y="894.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (4 samples, 0.41%)</title><rect x="1081.9" y="883.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.9" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.41%)</title><rect x="1086.7" y="899.0" width="4.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1089.7" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1091.5" y="899.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 1.53%)</title><rect x="1092.7" y="947.0" width="18.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1095.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.53%)</title><rect x="1092.7" y="931.0" width="18.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1095.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.53%)</title><rect x="1092.7" y="915.0" width="18.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1095.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.53%)</title><rect x="1092.7" y="899.0" width="18.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1095.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.10%)</title><rect x="1109.5" y="883.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1112.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1110.7" y="1027.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1113.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1110.7" y="1011.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1113.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1110.7" y="995.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1113.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="1110.7" y="979.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1113.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="1110.7" y="963.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1113.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="1110.7" y="947.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1113.7" y="958.0"></text>
</g>
<g>
<title>start_thread (65 samples, 6.62%)</title><rect x="1111.9" y="1027.0" width="78.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1114.9" y="1038.0">start_thr..</text>
</g>
<g>
<title>java_start(Thread*) (65 samples, 6.62%)</title><rect x="1111.9" y="1011.0" width="78.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1114.9" y="1022.0">java_star..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 2.04%)</title><rect x="1111.9" y="995.0" width="24.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.9" y="1006.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.61%)</title><rect x="1111.9" y="979.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.9" y="990.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.61%)</title><rect x="1111.9" y="963.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.9" y="974.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.61%)</title><rect x="1111.9" y="947.0" width="7.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1114.9" y="958.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.43%)</title><rect x="1119.1" y="979.0" width="16.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.1" y="990.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.20%)</title><rect x="1119.1" y="963.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.1" y="974.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1119.1" y="947.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.1" y="958.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.10%)</title><rect x="1120.3" y="947.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1123.3" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.51%)</title><rect x="1121.5" y="963.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.5" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.20%)</title><rect x="1121.5" y="947.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.5" y="958.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1121.5" y="931.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.5" y="942.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1121.5" y="915.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.5" y="926.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.10%)</title><rect x="1121.5" y="899.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.5" y="910.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1122.7" y="931.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.7" y="942.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1122.7" y="915.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.7" y="926.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.10%)</title><rect x="1122.7" y="899.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.7" y="910.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.10%)</title><rect x="1122.7" y="883.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.7" y="894.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.10%)</title><rect x="1122.7" y="867.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.7" y="878.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.10%)</title><rect x="1122.7" y="851.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.7" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.31%)</title><rect x="1123.9" y="947.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.9" y="958.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.31%)</title><rect x="1123.9" y="931.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.9" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.71%)</title><rect x="1127.5" y="963.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.5" y="974.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.71%)</title><rect x="1127.5" y="947.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.5" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.61%)</title><rect x="1127.5" y="931.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.5" y="942.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.61%)</title><rect x="1127.5" y="915.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.5" y="926.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.61%)</title><rect x="1127.5" y="899.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.5" y="910.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.61%)</title><rect x="1127.5" y="883.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.5" y="894.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.51%)</title><rect x="1128.7" y="867.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.7" y="878.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.20%)</title><rect x="1128.7" y="851.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.7" y="862.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.20%)</title><rect x="1128.7" y="835.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.7" y="846.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1129.9" y="819.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.9" y="830.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1131.1" y="851.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.1" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1132.3" y="851.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.3" y="862.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1133.5" y="851.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.5" y="862.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.10%)</title><rect x="1133.5" y="835.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.5" y="846.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.10%)</title><rect x="1134.7" y="931.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.7" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.10%)</title><rect x="1134.7" y="915.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.7" y="926.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.10%)</title><rect x="1134.7" y="899.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.7" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.10%)</title><rect x="1134.7" y="883.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.7" y="894.0"></text>
</g>
<g>
<title>JavaThread::run() (43 samples, 4.38%)</title><rect x="1135.9" y="995.0" width="51.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.9" y="1006.0">JavaT..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (43 samples, 4.38%)</title><rect x="1135.9" y="979.0" width="51.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.9" y="990.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (43 samples, 4.38%)</title><rect x="1135.9" y="963.0" width="51.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.9" y="974.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (42 samples, 4.28%)</title><rect x="1135.9" y="947.0" width="50.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.9" y="958.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (42 samples, 4.28%)</title><rect x="1135.9" y="931.0" width="50.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.9" y="942.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (42 samples, 4.28%)</title><rect x="1135.9" y="915.0" width="50.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.9" y="926.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (23 samples, 2.34%)</title><rect x="1135.9" y="899.0" width="27.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.9" y="910.0">C..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.20%)</title><rect x="1135.9" y="883.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.9" y="894.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="1135.9" y="867.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.9" y="878.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.10%)</title><rect x="1137.1" y="867.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.1" y="878.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="1137.1" y="851.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.1" y="862.0"></text>
</g>
<g>
<title>membar_volatileNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.10%)</title><rect x="1137.1" y="835.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="846.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.20%)</title><rect x="1138.3" y="883.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.3" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="1138.3" y="867.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.3" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="1138.3" y="851.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.3" y="862.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.10%)</title><rect x="1139.5" y="867.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.5" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.20%)</title><rect x="1140.7" y="883.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.7" y="894.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.20%)</title><rect x="1140.7" y="867.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.7" y="878.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.20%)</title><rect x="1140.7" y="851.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.7" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1140.7" y="835.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.7" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1140.7" y="819.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.7" y="830.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.10%)</title><rect x="1140.7" y="803.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.7" y="814.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1140.7" y="787.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.7" y="798.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="1141.9" y="835.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.9" y="846.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.10%)</title><rect x="1141.9" y="819.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.9" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.10%)</title><rect x="1143.1" y="883.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.1" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.10%)</title><rect x="1143.1" y="867.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1143.1" y="851.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.1" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 1.63%)</title><rect x="1144.3" y="883.0" width="19.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.3" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1144.3" y="867.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.3" y="878.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.10%)</title><rect x="1145.5" y="867.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.51%)</title><rect x="1146.7" y="867.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.7" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.20%)</title><rect x="1152.7" y="867.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.7" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1154.0" y="851.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.0" y="862.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.10%)</title><rect x="1154.0" y="835.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.10%)</title><rect x="1155.2" y="867.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.20%)</title><rect x="1156.4" y="867.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1157.6" y="851.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.6" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1158.8" y="867.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.8" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1158.8" y="851.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.8" y="862.0"></text>
</g>
<g>
<title>IndexSet::swap(IndexSet*) (1 samples, 0.10%)</title><rect x="1158.8" y="835.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.8" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.10%)</title><rect x="1160.0" y="867.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.0" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1160.0" y="851.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.0" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.20%)</title><rect x="1161.2" y="867.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.2" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1162.4" y="851.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.4" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 1.53%)</title><rect x="1163.6" y="899.0" width="18.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.6" y="910.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1163.6" y="883.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.6" y="894.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1163.6" y="867.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1164.8" y="883.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1164.8" y="867.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1164.8" y="851.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1164.8" y="835.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1164.8" y="819.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1164.8" y="803.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1164.8" y="787.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1164.8" y="771.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1164.8" y="755.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.8" y="766.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.10%)</title><rect x="1164.8" y="739.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.8" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1166.0" y="883.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.0" y="894.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1166.0" y="867.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.0" y="878.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.10%)</title><rect x="1166.0" y="851.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.0" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.10%)</title><rect x="1167.2" y="883.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.2" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.10%)</title><rect x="1167.2" y="867.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (6 samples, 0.61%)</title><rect x="1168.4" y="883.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1168.4" y="867.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.4" y="878.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.10%)</title><rect x="1169.6" y="851.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.31%)</title><rect x="1170.8" y="867.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.10%)</title><rect x="1173.2" y="851.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.10%)</title><rect x="1173.2" y="835.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1173.2" y="819.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1174.4" y="867.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1174.4" y="851.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.51%)</title><rect x="1175.6" y="883.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.6" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.51%)</title><rect x="1175.6" y="867.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.6" y="878.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1175.6" y="851.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.6" y="862.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1175.6" y="835.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.6" y="846.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1175.6" y="819.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.6" y="830.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1176.8" y="851.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.8" y="862.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1176.8" y="835.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="846.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1178.0" y="851.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="862.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1179.2" y="851.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="862.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1180.4" y="851.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.41%)</title><rect x="1181.6" y="899.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.41%)</title><rect x="1181.6" y="883.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.41%)</title><rect x="1181.6" y="867.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.41%)</title><rect x="1181.6" y="851.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.41%)</title><rect x="1181.6" y="835.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.41%)</title><rect x="1181.6" y="819.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.41%)</title><rect x="1181.6" y="803.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.41%)</title><rect x="1181.6" y="787.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.41%)</title><rect x="1181.6" y="771.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.41%)</title><rect x="1181.6" y="755.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.41%)</title><rect x="1181.6" y="739.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.31%)</title><rect x="1181.6" y="723.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.31%)</title><rect x="1181.6" y="707.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.31%)</title><rect x="1181.6" y="691.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.31%)</title><rect x="1181.6" y="675.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.31%)</title><rect x="1181.6" y="659.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.31%)</title><rect x="1181.6" y="643.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1181.6" y="627.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1181.6" y="611.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1181.6" y="595.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1181.6" y="579.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1181.6" y="563.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1181.6" y="547.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1181.6" y="531.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.6" y="542.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.6" y="515.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="526.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.6" y="499.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.6" y="510.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1181.6" y="483.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1181.6" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1181.6" y="451.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.6" y="435.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.6" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.6" y="419.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.6" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1181.6" y="403.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.6" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1181.6" y="387.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="398.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1181.6" y="371.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.6" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1181.6" y="355.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1181.6" y="339.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="350.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1181.6" y="323.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="334.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1181.6" y="307.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.6" y="318.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1181.6" y="291.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.8" y="515.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.8" y="499.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.8" y="483.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.8" y="467.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.8" y="451.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.8" y="435.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.8" y="419.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.8" y="403.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.8" y="387.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.8" y="371.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.8" y="355.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.8" y="339.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.8" y="323.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.8" y="307.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.8" y="291.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.8" y="275.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.8" y="259.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.8" y="243.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.8" y="227.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.8" y="211.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.8" y="195.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.8" y="179.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.8" y="163.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1182.8" y="147.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1182.8" y="131.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1182.8" y="115.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="126.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.10%)</title><rect x="1182.8" y="99.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="110.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1182.8" y="83.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="94.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.10%)</title><rect x="1182.8" y="67.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="78.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.10%)</title><rect x="1182.8" y="51.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="62.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1182.8" y="35.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1185.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.10%)</title><rect x="1184.0" y="627.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="638.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.10%)</title><rect x="1184.0" y="611.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="622.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.10%)</title><rect x="1184.0" y="595.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="606.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1184.0" y="579.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="590.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.10%)</title><rect x="1184.0" y="563.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1185.2" y="723.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1185.2" y="707.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.2" y="718.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.10%)</title><rect x="1185.2" y="691.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.2" y="702.0"></text>
</g>
<g>
<title>LoadUBNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1185.2" y="675.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="686.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.10%)</title><rect x="1186.4" y="947.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.4" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.10%)</title><rect x="1186.4" y="931.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.4" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.10%)</title><rect x="1186.4" y="915.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.4" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.10%)</title><rect x="1186.4" y="899.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.4" y="910.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.10%)</title><rect x="1186.4" y="883.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.4" y="894.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.20%)</title><rect x="1187.6" y="995.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.6" y="1006.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.20%)</title><rect x="1187.6" y="979.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.6" y="990.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.10%)</title><rect x="1187.6" y="963.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.6" y="974.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.10%)</title><rect x="1187.6" y="947.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.6" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.10%)</title><rect x="1187.6" y="931.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.6" y="942.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1187.6" y="915.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.6" y="926.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1187.6" y="899.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.6" y="910.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1187.6" y="883.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.6" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1187.6" y="867.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.6" y="878.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.8" y="963.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="974.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="947.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.8" y="958.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="931.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="915.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.10%)</title><rect x="1188.8" y="899.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.8" y="910.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (1 samples, 0.10%)</title><rect x="1188.8" y="883.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="894.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics() (1 samples, 0.10%)</title><rect x="1188.8" y="867.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="878.0"></text>
</g>
</g>
</svg>
