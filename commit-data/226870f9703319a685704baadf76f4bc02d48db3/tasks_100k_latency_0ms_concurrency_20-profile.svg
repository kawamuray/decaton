<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="741"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="741"> </text>
<g id="frames">
<g>
<title>all (130 samples, 100.00%)</title><rect x="10.0" y="707.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="718.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (31 samples, 23.85%)</title><rect x="10.0" y="691.0" width="281.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="702.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (31 samples, 23.85%)</title><rect x="10.0" y="675.0" width="281.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="686.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.77%)</title><rect x="10.0" y="659.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.77%)</title><rect x="10.0" y="643.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1986793876.accept (1 samples, 0.77%)</title><rect x="10.0" y="627.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.77%)</title><rect x="10.0" y="611.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.77%)</title><rect x="10.0" y="595.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.77%)</title><rect x="10.0" y="579.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 1.54%)</title><rect x="19.1" y="659.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 1.54%)</title><rect x="19.1" y="643.0" width="18.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.1" y="654.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.77%)</title><rect x="19.1" y="627.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.77%)</title><rect x="19.1" y="611.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.77%)</title><rect x="19.1" y="595.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.77%)</title><rect x="19.1" y="579.0" width="9.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="22.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.77%)</title><rect x="28.2" y="627.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.77%)</title><rect x="28.2" y="611.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.77%)</title><rect x="28.2" y="595.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.77%)</title><rect x="28.2" y="579.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.77%)</title><rect x="28.2" y="563.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.2" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.77%)</title><rect x="28.2" y="547.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (16 samples, 12.31%)</title><rect x="37.2" y="659.0" width="145.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.2" y="670.0">java/lang/Iterable..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1612081961.accept (16 samples, 12.31%)</title><rect x="37.2" y="643.0" width="145.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.2" y="654.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (16 samples, 12.31%)</title><rect x="37.2" y="627.0" width="145.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.2" y="638.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (12 samples, 9.23%)</title><rect x="37.2" y="611.0" width="109.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.2" y="622.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (12 samples, 9.23%)</title><rect x="37.2" y="595.0" width="109.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.2" y="606.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (12 samples, 9.23%)</title><rect x="37.2" y="579.0" width="109.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.2" y="590.0">com/linecorp/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (12 samples, 9.23%)</title><rect x="37.2" y="563.0" width="109.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.2" y="574.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 9.23%)</title><rect x="37.2" y="547.0" width="109.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.2" y="558.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 9.23%)</title><rect x="37.2" y="531.0" width="109.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.2" y="542.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 6.92%)</title><rect x="37.2" y="515.0" width="81.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.2" y="526.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.77%)</title><rect x="37.2" y="499.0" width="9.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.77%)</title><rect x="37.2" y="483.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 6.15%)</title><rect x="46.3" y="499.0" width="72.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.3" y="510.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 6.15%)</title><rect x="46.3" y="483.0" width="72.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.3" y="494.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 6.15%)</title><rect x="46.3" y="467.0" width="72.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.3" y="478.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 6.15%)</title><rect x="46.3" y="451.0" width="72.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.3" y="462.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (8 samples, 6.15%)</title><rect x="46.3" y="435.0" width="72.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.3" y="446.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 5.38%)</title><rect x="46.3" y="419.0" width="63.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="49.3" y="430.0">Unsafe_..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.77%)</title><rect x="46.3" y="403.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="49.3" y="414.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 2.31%)</title><rect x="55.4" y="403.0" width="27.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="58.4" y="414.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 2.31%)</title><rect x="82.6" y="403.0" width="27.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="85.6" y="414.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.77%)</title><rect x="109.8" y="419.0" width="9.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="112.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 2.31%)</title><rect x="118.9" y="515.0" width="27.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.9" y="526.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 2.31%)</title><rect x="118.9" y="499.0" width="27.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="121.9" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 2.31%)</title><rect x="118.9" y="483.0" width="27.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="121.9" y="494.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 3.08%)</title><rect x="146.2" y="611.0" width="36.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.2" y="622.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 3.08%)</title><rect x="146.2" y="595.0" width="36.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.2" y="606.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.77%)</title><rect x="173.4" y="579.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.4" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.77%)</title><rect x="173.4" y="563.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.4" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.77%)</title><rect x="173.4" y="547.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 9.23%)</title><rect x="182.5" y="659.0" width="108.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.5" y="670.0">org/apache/ka..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 9.23%)</title><rect x="182.5" y="643.0" width="108.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="185.5" y="654.0">org/apache/ka..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 6.92%)</title><rect x="182.5" y="627.0" width="81.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.5" y="638.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.77%)</title><rect x="182.5" y="611.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.77%)</title><rect x="182.5" y="595.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.77%)</title><rect x="182.5" y="579.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.77%)</title><rect x="182.5" y="563.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="185.5" y="574.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.77%)</title><rect x="182.5" y="547.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/1051268123.get (1 samples, 0.77%)</title><rect x="182.5" y="531.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (8 samples, 6.15%)</title><rect x="191.5" y="611.0" width="72.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="194.5" y="622.0">org/apac..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.77%)</title><rect x="191.5" y="595.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="194.5" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.77%)</title><rect x="191.5" y="579.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.77%)</title><rect x="191.5" y="563.0" width="9.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="194.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 5.38%)</title><rect x="200.6" y="595.0" width="63.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="203.6" y="606.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 4.62%)</title><rect x="200.6" y="579.0" width="54.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.6" y="590.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 4.62%)</title><rect x="200.6" y="563.0" width="54.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.6" y="574.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (5 samples, 3.85%)</title><rect x="200.6" y="547.0" width="45.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.6" y="558.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.77%)</title><rect x="200.6" y="531.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.77%)</title><rect x="200.6" y="515.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.77%)</title><rect x="200.6" y="499.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.77%)</title><rect x="200.6" y="483.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="203.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.77%)</title><rect x="200.6" y="467.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.77%)</title><rect x="200.6" y="451.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.77%)</title><rect x="200.6" y="435.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 1.54%)</title><rect x="209.7" y="531.0" width="18.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 1.54%)</title><rect x="209.7" y="515.0" width="18.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="212.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (2 samples, 1.54%)</title><rect x="227.8" y="531.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.77%)</title><rect x="227.8" y="515.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.77%)</title><rect x="227.8" y="499.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.compressionType (1 samples, 0.77%)</title><rect x="227.8" y="483.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.8" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getShort (1 samples, 0.77%)</title><rect x="227.8" y="467.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.77%)</title><rect x="236.9" y="515.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.77%)</title><rect x="236.9" y="499.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.77%)</title><rect x="236.9" y="483.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.77%)</title><rect x="246.0" y="547.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.77%)</title><rect x="246.0" y="531.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.77%)</title><rect x="246.0" y="515.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.0" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.77%)</title><rect x="246.0" y="499.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.0" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.77%)</title><rect x="246.0" y="483.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.0" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.77%)</title><rect x="246.0" y="467.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="249.0" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.77%)</title><rect x="246.0" y="451.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.77%)</title><rect x="246.0" y="435.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.77%)</title><rect x="255.1" y="579.0" width="9.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.77%)</title><rect x="255.1" y="563.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.77%)</title><rect x="255.1" y="547.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.77%)</title><rect x="255.1" y="531.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.54%)</title><rect x="264.2" y="627.0" width="18.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.54%)</title><rect x="264.2" y="611.0" width="18.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.54%)</title><rect x="264.2" y="595.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 1.54%)</title><rect x="264.2" y="579.0" width="18.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="267.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 1.54%)</title><rect x="264.2" y="563.0" width="18.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 1.54%)</title><rect x="264.2" y="547.0" width="18.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 1.54%)</title><rect x="264.2" y="531.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 1.54%)</title><rect x="264.2" y="515.0" width="18.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 1.54%)</title><rect x="264.2" y="499.0" width="18.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 1.54%)</title><rect x="264.2" y="483.0" width="18.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 1.54%)</title><rect x="264.2" y="467.0" width="18.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="267.2" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.77%)</title><rect x="264.2" y="451.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.2" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.77%)</title><rect x="264.2" y="435.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.2" y="446.0"></text>
</g>
<g>
<title>java/nio/Bits.copyToArray (1 samples, 0.77%)</title><rect x="264.2" y="419.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.77%)</title><rect x="273.2" y="451.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.2" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.77%)</title><rect x="273.2" y="435.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.2" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.77%)</title><rect x="273.2" y="419.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.77%)</title><rect x="273.2" y="403.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.2" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.77%)</title><rect x="282.3" y="627.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.77%)</title><rect x="282.3" y="611.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.77%)</title><rect x="282.3" y="595.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="285.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.77%)</title><rect x="282.3" y="579.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.77%)</title><rect x="282.3" y="563.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.77%)</title><rect x="282.3" y="547.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.77%)</title><rect x="282.3" y="531.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.3" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.run (51 samples, 39.23%)</title><rect x="291.4" y="691.0" width="462.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.4" y="702.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (51 samples, 39.23%)</title><rect x="291.4" y="675.0" width="462.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.4" y="686.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (51 samples, 39.23%)</title><rect x="291.4" y="659.0" width="462.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.4" y="670.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.77%)</title><rect x="309.5" y="643.0" width="9.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="312.5" y="654.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.77%)</title><rect x="309.5" y="627.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="312.5" y="638.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.77%)</title><rect x="309.5" y="611.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="312.5" y="622.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_back_branch_event(methodHandle, methodHandle, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.77%)</title><rect x="309.5" y="595.0" width="9.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="312.5" y="606.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) [clone .part.149] (1 samples, 0.77%)</title><rect x="309.5" y="579.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="312.5" y="590.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle, int) (1 samples, 0.77%)</title><rect x="309.5" y="563.0" width="9.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="312.5" y="574.0"></text>
</g>
<g>
<title>AbstractInterpreter::method_kind(methodHandle) (1 samples, 0.77%)</title><rect x="309.5" y="547.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="312.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2038354488.run (28 samples, 21.54%)</title><rect x="318.6" y="643.0" width="254.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.6" y="654.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (28 samples, 21.54%)</title><rect x="318.6" y="627.0" width="254.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="321.6" y="638.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (28 samples, 21.54%)</title><rect x="318.6" y="611.0" width="254.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.6" y="622.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (28 samples, 21.54%)</title><rect x="318.6" y="595.0" width="254.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="321.6" y="606.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (4 samples, 3.08%)</title><rect x="318.6" y="579.0" width="36.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="321.6" y="590.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (4 samples, 3.08%)</title><rect x="318.6" y="563.0" width="36.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="321.6" y="574.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (4 samples, 3.08%)</title><rect x="318.6" y="547.0" width="36.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.6" y="558.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (3 samples, 2.31%)</title><rect x="327.7" y="531.0" width="27.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.7" y="542.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (3 samples, 2.31%)</title><rect x="327.7" y="515.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.7" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (3 samples, 2.31%)</title><rect x="327.7" y="499.0" width="27.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="330.7" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (2 samples, 1.54%)</title><rect x="327.7" y="483.0" width="18.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="330.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.77%)</title><rect x="327.7" y="467.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="330.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.77%)</title><rect x="327.7" y="451.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.77%)</title><rect x="327.7" y="435.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="330.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.77%)</title><rect x="327.7" y="419.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="330.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (1 samples, 0.77%)</title><rect x="336.8" y="467.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.77%)</title><rect x="336.8" y="451.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.77%)</title><rect x="336.8" y="435.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.77%)</title><rect x="336.8" y="419.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.77%)</title><rect x="345.8" y="483.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.77%)</title><rect x="345.8" y="467.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.77%)</title><rect x="345.8" y="451.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="348.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.77%)</title><rect x="345.8" y="435.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="348.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.77%)</title><rect x="345.8" y="419.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.8" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (23 samples, 17.69%)</title><rect x="354.9" y="579.0" width="208.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.9" y="590.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.77%)</title><rect x="364.0" y="563.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 3.08%)</title><rect x="373.1" y="563.0" width="36.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="376.1" y="574.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 3.08%)</title><rect x="373.1" y="547.0" width="36.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="376.1" y="558.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 3.08%)</title><rect x="373.1" y="531.0" width="36.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="376.1" y="542.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.77%)</title><rect x="373.1" y="515.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="376.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.77%)</title><rect x="373.1" y="499.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="376.1" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.77%)</title><rect x="373.1" y="483.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="376.1" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 2.31%)</title><rect x="382.2" y="515.0" width="27.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="385.2" y="526.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.77%)</title><rect x="409.4" y="563.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="412.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.77%)</title><rect x="409.4" y="547.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.4" y="558.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.77%)</title><rect x="409.4" y="531.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="412.4" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (9 samples, 6.92%)</title><rect x="418.5" y="563.0" width="81.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="421.5" y="574.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (9 samples, 6.92%)</title><rect x="418.5" y="547.0" width="81.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="421.5" y="558.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 2.31%)</title><rect x="418.5" y="531.0" width="27.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="421.5" y="542.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 2.31%)</title><rect x="418.5" y="515.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="421.5" y="526.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 2.31%)</title><rect x="418.5" y="499.0" width="27.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="421.5" y="510.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 2.31%)</title><rect x="418.5" y="483.0" width="27.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="421.5" y="494.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 2.31%)</title><rect x="418.5" y="467.0" width="27.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="421.5" y="478.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.77%)</title><rect x="436.6" y="451.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="439.6" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.77%)</title><rect x="436.6" y="435.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="439.6" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.77%)</title><rect x="436.6" y="419.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="439.6" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.77%)</title><rect x="436.6" y="403.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="439.6" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.77%)</title><rect x="436.6" y="387.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="439.6" y="398.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.77%)</title><rect x="436.6" y="371.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="439.6" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.77%)</title><rect x="436.6" y="355.0" width="9.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="439.6" y="366.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.77%)</title><rect x="436.6" y="339.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="439.6" y="350.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 4.62%)</title><rect x="445.7" y="531.0" width="54.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.7" y="542.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 4.62%)</title><rect x="445.7" y="515.0" width="54.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.7" y="526.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 2.31%)</title><rect x="445.7" y="499.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="448.7" y="510.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 2.31%)</title><rect x="445.7" y="483.0" width="27.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="448.7" y="494.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 2.31%)</title><rect x="445.7" y="467.0" width="27.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="448.7" y="478.0">j..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 2.31%)</title><rect x="472.9" y="499.0" width="27.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.9" y="510.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.54%)</title><rect x="482.0" y="483.0" width="18.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.0" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.77%)</title><rect x="491.1" y="467.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="494.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.77%)</title><rect x="491.1" y="451.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="494.1" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 3.08%)</title><rect x="500.2" y="563.0" width="36.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.2" y="574.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 3.08%)</title><rect x="500.2" y="547.0" width="36.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="503.2" y="558.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/117397272.process (2 samples, 1.54%)</title><rect x="500.2" y="531.0" width="18.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="503.2" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.54%)</title><rect x="500.2" y="515.0" width="18.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.2" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.54%)</title><rect x="500.2" y="499.0" width="18.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="503.2" y="510.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.54%)</title><rect x="500.2" y="483.0" width="18.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="503.2" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.77%)</title><rect x="518.3" y="531.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="521.3" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.77%)</title><rect x="518.3" y="515.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="521.3" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.77%)</title><rect x="518.3" y="499.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="521.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.&lt;init&gt; (1 samples, 0.77%)</title><rect x="527.4" y="531.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="530.4" y="542.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.77%)</title><rect x="527.4" y="515.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="530.4" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/823919400.linkToTargetMethod (1 samples, 0.77%)</title><rect x="536.5" y="563.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="539.5" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.77%)</title><rect x="536.5" y="547.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="539.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/64993425.get$Lambda (1 samples, 0.77%)</title><rect x="536.5" y="531.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="539.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.77%)</title><rect x="545.5" y="563.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="548.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.77%)</title><rect x="545.5" y="547.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="548.5" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.77%)</title><rect x="545.5" y="531.0" width="9.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="548.5" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.77%)</title><rect x="545.5" y="515.0" width="9.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="548.5" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.77%)</title><rect x="554.6" y="563.0" width="9.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="557.6" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.77%)</title><rect x="563.7" y="579.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="566.7" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.77%)</title><rect x="563.7" y="563.0" width="9.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="566.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.77%)</title><rect x="572.8" y="643.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="575.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 3.85%)</title><rect x="581.8" y="643.0" width="45.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.8" y="654.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.77%)</title><rect x="618.2" y="627.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="621.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.77%)</title><rect x="618.2" y="611.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="621.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.77%)</title><rect x="618.2" y="595.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.77%)</title><rect x="618.2" y="579.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="621.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 10.77%)</title><rect x="627.2" y="643.0" width="127.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="630.2" y="654.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (14 samples, 10.77%)</title><rect x="627.2" y="627.0" width="127.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="630.2" y="638.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 9.23%)</title><rect x="645.4" y="611.0" width="108.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="648.4" y="622.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.77%)</title><rect x="654.5" y="595.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="657.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.77%)</title><rect x="654.5" y="579.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="657.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 7.69%)</title><rect x="663.5" y="595.0" width="90.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.5" y="606.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (10 samples, 7.69%)</title><rect x="663.5" y="579.0" width="90.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="666.5" y="590.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Park (9 samples, 6.92%)</title><rect x="672.6" y="563.0" width="81.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="675.6" y="574.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.77%)</title><rect x="672.6" y="547.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="675.6" y="558.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.77%)</title><rect x="672.6" y="531.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="675.6" y="542.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.77%)</title><rect x="672.6" y="515.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="675.6" y="526.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.77%)</title><rect x="681.7" y="547.0" width="9.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="684.7" y="558.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.77%)</title><rect x="690.8" y="547.0" width="9.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="693.8" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 3.85%)</title><rect x="699.8" y="547.0" width="45.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="702.8" y="558.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.77%)</title><rect x="745.2" y="547.0" width="9.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="748.2" y="558.0"></text>
</g>
<g>
<title>start_thread (48 samples, 36.92%)</title><rect x="754.3" y="691.0" width="435.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="757.3" y="702.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (48 samples, 36.92%)</title><rect x="754.3" y="675.0" width="435.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="757.3" y="686.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 10.00%)</title><rect x="754.3" y="659.0" width="118.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="757.3" y="670.0">GangWorker::lo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 2.31%)</title><rect x="754.3" y="643.0" width="27.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="757.3" y="654.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 2.31%)</title><rect x="754.3" y="627.0" width="27.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="757.3" y="638.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.77%)</title><rect x="754.3" y="611.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="757.3" y="622.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.54%)</title><rect x="763.4" y="611.0" width="18.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="766.4" y="622.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 7.69%)</title><rect x="781.5" y="643.0" width="90.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.5" y="654.0">G1ParTask:..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 6.15%)</title><rect x="781.5" y="627.0" width="72.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.5" y="638.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 3.08%)</title><rect x="790.6" y="611.0" width="36.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="793.6" y="622.0">G1P..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.77%)</title><rect x="808.8" y="595.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="811.8" y="606.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.77%)</title><rect x="817.8" y="595.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="820.8" y="606.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.77%)</title><rect x="826.9" y="611.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="829.9" y="622.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.77%)</title><rect x="836.0" y="611.0" width="9.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="839.0" y="622.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.77%)</title><rect x="845.1" y="611.0" width="9.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="848.1" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.77%)</title><rect x="854.2" y="627.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="857.2" y="638.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.77%)</title><rect x="854.2" y="611.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="857.2" y="622.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.77%)</title><rect x="854.2" y="595.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.2" y="606.0"></text>
</g>
<g>
<title>frame::interpreter_frame_monitor_begin() const (1 samples, 0.77%)</title><rect x="854.2" y="579.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="857.2" y="590.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.77%)</title><rect x="863.2" y="627.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="866.2" y="638.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.77%)</title><rect x="863.2" y="611.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="866.2" y="622.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.77%)</title><rect x="863.2" y="595.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="866.2" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.77%)</title><rect x="863.2" y="579.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="866.2" y="590.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.77%)</title><rect x="863.2" y="563.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="866.2" y="574.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.77%)</title><rect x="863.2" y="547.0" width="9.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="866.2" y="558.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.77%)</title><rect x="863.2" y="531.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.2" y="542.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (35 samples, 26.92%)</title><rect x="872.3" y="659.0" width="317.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.3" y="670.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (35 samples, 26.92%)</title><rect x="872.3" y="643.0" width="317.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="875.3" y="654.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (35 samples, 26.92%)</title><rect x="872.3" y="627.0" width="317.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.3" y="638.0">CompileBroker::invoke_compiler_on_method(Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (31 samples, 23.85%)</title><rect x="872.3" y="611.0" width="281.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="875.3" y="622.0">C2Compiler::compile_method(ciEnv*, ciM..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (31 samples, 23.85%)</title><rect x="872.3" y="595.0" width="281.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="875.3" y="606.0">Compile::Compile(ciEnv*, C2Compiler*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (19 samples, 14.62%)</title><rect x="872.3" y="579.0" width="172.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.3" y="590.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.77%)</title><rect x="872.3" y="563.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="875.3" y="574.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.77%)</title><rect x="872.3" y="547.0" width="9.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="875.3" y="558.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.77%)</title><rect x="872.3" y="531.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="875.3" y="542.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.77%)</title><rect x="872.3" y="515.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.3" y="526.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.77%)</title><rect x="872.3" y="499.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.3" y="510.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.77%)</title><rect x="872.3" y="483.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="875.3" y="494.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.77%)</title><rect x="872.3" y="467.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="875.3" y="478.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.77%)</title><rect x="881.4" y="563.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="884.4" y="574.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.77%)</title><rect x="881.4" y="547.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="884.4" y="558.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.77%)</title><rect x="881.4" y="531.0" width="9.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="884.4" y="542.0"></text>
</g>
<g>
<title>new_loc_value(PhaseRegAlloc*, int, Location::Type) (1 samples, 0.77%)</title><rect x="881.4" y="515.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="884.4" y="526.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.77%)</title><rect x="881.4" y="499.0" width="9.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="884.4" y="510.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 3.08%)</title><rect x="890.5" y="563.0" width="36.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.5" y="574.0">Mat..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 3.08%)</title><rect x="890.5" y="547.0" width="36.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="893.5" y="558.0">Mat..</text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.77%)</title><rect x="899.5" y="531.0" width="9.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="902.5" y="542.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.54%)</title><rect x="908.6" y="531.0" width="18.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="911.6" y="542.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.77%)</title><rect x="908.6" y="515.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="911.6" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.77%)</title><rect x="908.6" y="499.0" width="9.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="911.6" y="510.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.77%)</title><rect x="917.7" y="515.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.7" y="526.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.77%)</title><rect x="917.7" y="499.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="920.7" y="510.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.77%)</title><rect x="917.7" y="483.0" width="9.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="920.7" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.77%)</title><rect x="926.8" y="563.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.8" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.77%)</title><rect x="926.8" y="547.0" width="9.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="929.8" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.77%)</title><rect x="926.8" y="531.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="929.8" y="542.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.77%)</title><rect x="926.8" y="515.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="929.8" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (12 samples, 9.23%)</title><rect x="935.8" y="563.0" width="109.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="938.8" y="574.0">PhaseChaitin:..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.77%)</title><rect x="935.8" y="547.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="938.8" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 3.08%)</title><rect x="944.9" y="547.0" width="36.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.9" y="558.0">Pha..</text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 1.54%)</title><rect x="963.1" y="531.0" width="18.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="966.1" y="542.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.77%)</title><rect x="963.1" y="515.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="966.1" y="526.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.77%)</title><rect x="972.2" y="515.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="975.2" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 2.31%)</title><rect x="981.2" y="547.0" width="27.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.2" y="558.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.77%)</title><rect x="999.4" y="531.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1002.4" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.54%)</title><rect x="1008.5" y="547.0" width="18.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.5" y="558.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.77%)</title><rect x="1026.6" y="547.0" width="9.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.6" y="558.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.77%)</title><rect x="1035.7" y="547.0" width="9.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1038.7" y="558.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 5.38%)</title><rect x="1044.8" y="579.0" width="63.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1047.8" y="590.0">Compile..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.77%)</title><rect x="1044.8" y="563.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.77%)</title><rect x="1044.8" y="547.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.8" y="558.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.77%)</title><rect x="1053.8" y="563.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.8" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 3.85%)</title><rect x="1062.9" y="563.0" width="45.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1065.9" y="574.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.77%)</title><rect x="1062.9" y="547.0" width="9.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1065.9" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 2.31%)</title><rect x="1072.0" y="547.0" width="27.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1075.0" y="558.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.54%)</title><rect x="1081.1" y="531.0" width="18.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.1" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.77%)</title><rect x="1090.2" y="515.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.2" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.77%)</title><rect x="1090.2" y="499.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.2" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.77%)</title><rect x="1099.2" y="547.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.2" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.77%)</title><rect x="1099.2" y="531.0" width="9.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.2" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.77%)</title><rect x="1099.2" y="515.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.2" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.77%)</title><rect x="1099.2" y="499.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.2" y="510.0"></text>
</g>
<g>
<title>IfNode::bottom_type() const (1 samples, 0.77%)</title><rect x="1099.2" y="483.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.85%)</title><rect x="1108.3" y="579.0" width="45.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.3" y="590.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.85%)</title><rect x="1108.3" y="563.0" width="45.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.3" y="574.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.85%)</title><rect x="1108.3" y="547.0" width="45.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.3" y="558.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.85%)</title><rect x="1108.3" y="531.0" width="45.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.3" y="542.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.85%)</title><rect x="1108.3" y="515.0" width="45.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.3" y="526.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.85%)</title><rect x="1108.3" y="499.0" width="45.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.3" y="510.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 3.08%)</title><rect x="1108.3" y="483.0" width="36.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.3" y="494.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 3.08%)</title><rect x="1108.3" y="467.0" width="36.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.3" y="478.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 3.08%)</title><rect x="1108.3" y="451.0" width="36.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.3" y="462.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 3.08%)</title><rect x="1108.3" y="435.0" width="36.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.3" y="446.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 3.08%)</title><rect x="1108.3" y="419.0" width="36.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.3" y="430.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 3.08%)</title><rect x="1108.3" y="403.0" width="36.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.3" y="414.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.77%)</title><rect x="1108.3" y="387.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.3" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.77%)</title><rect x="1108.3" y="371.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.3" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.77%)</title><rect x="1108.3" y="355.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.3" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.77%)</title><rect x="1108.3" y="339.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.3" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.77%)</title><rect x="1108.3" y="323.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.3" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.77%)</title><rect x="1108.3" y="307.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.3" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.77%)</title><rect x="1108.3" y="291.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.3" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.77%)</title><rect x="1108.3" y="275.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.3" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.77%)</title><rect x="1108.3" y="259.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.3" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.77%)</title><rect x="1108.3" y="243.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.3" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.77%)</title><rect x="1108.3" y="227.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.3" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.77%)</title><rect x="1108.3" y="211.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.3" y="222.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.77%)</title><rect x="1108.3" y="195.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.3" y="206.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.77%)</title><rect x="1108.3" y="179.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.3" y="190.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.77%)</title><rect x="1108.3" y="163.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.3" y="174.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.77%)</title><rect x="1108.3" y="147.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.3" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.77%)</title><rect x="1108.3" y="131.0" width="9.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.3" y="142.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.77%)</title><rect x="1108.3" y="115.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.3" y="126.0"></text>
</g>
<g>
<title>FieldType::get_array_info(Symbol*, FieldArrayInfo&amp;, Thread*) (1 samples, 0.77%)</title><rect x="1108.3" y="99.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.3" y="110.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.77%)</title><rect x="1108.3" y="83.0" width="9.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.3" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.31%)</title><rect x="1117.4" y="387.0" width="27.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.4" y="398.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.31%)</title><rect x="1117.4" y="371.0" width="27.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.4" y="382.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.31%)</title><rect x="1117.4" y="355.0" width="27.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.4" y="366.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.31%)</title><rect x="1117.4" y="339.0" width="27.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.4" y="350.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.31%)</title><rect x="1117.4" y="323.0" width="27.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.4" y="334.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.54%)</title><rect x="1117.4" y="307.0" width="18.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.4" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.54%)</title><rect x="1117.4" y="291.0" width="18.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.4" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.54%)</title><rect x="1117.4" y="275.0" width="18.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.54%)</title><rect x="1117.4" y="259.0" width="18.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.54%)</title><rect x="1117.4" y="243.0" width="18.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.54%)</title><rect x="1117.4" y="227.0" width="18.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.54%)</title><rect x="1117.4" y="211.0" width="18.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.4" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.54%)</title><rect x="1117.4" y="195.0" width="18.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.4" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.54%)</title><rect x="1117.4" y="179.0" width="18.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.54%)</title><rect x="1117.4" y="163.0" width="18.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.54%)</title><rect x="1117.4" y="147.0" width="18.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.54%)</title><rect x="1117.4" y="131.0" width="18.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.54%)</title><rect x="1117.4" y="115.0" width="18.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.4" y="126.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.77%)</title><rect x="1117.4" y="99.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.4" y="110.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.77%)</title><rect x="1117.4" y="83.0" width="9.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.4" y="94.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_current_thread(Node*&amp;) (1 samples, 0.77%)</title><rect x="1117.4" y="67.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.4" y="78.0"></text>
</g>
<g>
<title>TypeRawPtr::add_offset(long) const (1 samples, 0.77%)</title><rect x="1117.4" y="51.0" width="9.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.4" y="62.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.77%)</title><rect x="1126.5" y="99.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.5" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.77%)</title><rect x="1126.5" y="83.0" width="9.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.5" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.77%)</title><rect x="1126.5" y="67.0" width="9.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.5" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.77%)</title><rect x="1126.5" y="51.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.5" y="62.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.77%)</title><rect x="1126.5" y="35.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.77%)</title><rect x="1135.5" y="307.0" width="9.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.77%)</title><rect x="1135.5" y="291.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.5" y="302.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.77%)</title><rect x="1135.5" y="275.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.5" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.77%)</title><rect x="1135.5" y="259.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.5" y="270.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.77%)</title><rect x="1135.5" y="243.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.5" y="254.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.77%)</title><rect x="1135.5" y="227.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.5" y="238.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.77%)</title><rect x="1135.5" y="211.0" width="9.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.5" y="222.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.77%)</title><rect x="1135.5" y="195.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.5" y="206.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.77%)</title><rect x="1135.5" y="179.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.5" y="190.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.77%)</title><rect x="1135.5" y="163.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.5" y="174.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.77%)</title><rect x="1135.5" y="147.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.5" y="158.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.77%)</title><rect x="1135.5" y="131.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.5" y="142.0"></text>
</g>
<g>
<title>TypeOopPtr::eq_speculative(TypeOopPtr const*) const (1 samples, 0.77%)</title><rect x="1135.5" y="115.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.5" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.77%)</title><rect x="1144.6" y="483.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.77%)</title><rect x="1144.6" y="467.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.77%)</title><rect x="1144.6" y="451.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.77%)</title><rect x="1144.6" y="435.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.77%)</title><rect x="1144.6" y="419.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.77%)</title><rect x="1144.6" y="403.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.77%)</title><rect x="1144.6" y="387.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.77%)</title><rect x="1144.6" y="371.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.77%)</title><rect x="1144.6" y="355.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.77%)</title><rect x="1144.6" y="339.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.77%)</title><rect x="1144.6" y="323.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.77%)</title><rect x="1144.6" y="307.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.77%)</title><rect x="1144.6" y="291.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.6" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.77%)</title><rect x="1144.6" y="275.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.6" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.77%)</title><rect x="1144.6" y="259.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.6" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.77%)</title><rect x="1144.6" y="243.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.6" y="254.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.77%)</title><rect x="1144.6" y="227.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.6" y="238.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.77%)</title><rect x="1144.6" y="211.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.6" y="222.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.77%)</title><rect x="1144.6" y="195.0" width="9.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.6" y="206.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.77%)</title><rect x="1144.6" y="179.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.6" y="190.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.77%)</title><rect x="1144.6" y="163.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.6" y="174.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.77%)</title><rect x="1144.6" y="147.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.6" y="158.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.77%)</title><rect x="1144.6" y="131.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.6" y="142.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.54%)</title><rect x="1153.7" y="611.0" width="18.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.7" y="622.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.54%)</title><rect x="1153.7" y="595.0" width="18.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.7" y="606.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.54%)</title><rect x="1153.7" y="579.0" width="18.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.7" y="590.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.54%)</title><rect x="1153.7" y="563.0" width="18.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.7" y="574.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.77%)</title><rect x="1153.7" y="547.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.7" y="558.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.77%)</title><rect x="1153.7" y="531.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.7" y="542.0"></text>
</g>
<g>
<title>ImplicitNullCheckStub::emit_code(LIR_Assembler*) (1 samples, 0.77%)</title><rect x="1153.7" y="515.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.7" y="526.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.77%)</title><rect x="1153.7" y="499.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.7" y="510.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.77%)</title><rect x="1153.7" y="483.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.7" y="494.0"></text>
</g>
<g>
<title>OopMap::deep_copy() (1 samples, 0.77%)</title><rect x="1153.7" y="467.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.7" y="478.0"></text>
</g>
<g>
<title>OopMap::OopMap(OopMap::DeepCopyToken, OopMap*) (1 samples, 0.77%)</title><rect x="1153.7" y="451.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.7" y="462.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.77%)</title><rect x="1162.8" y="547.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.8" y="558.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.77%)</title><rect x="1162.8" y="531.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.8" y="542.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.77%)</title><rect x="1162.8" y="515.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.8" y="526.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.77%)</title><rect x="1162.8" y="499.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.8" y="510.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.77%)</title><rect x="1162.8" y="483.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.8" y="494.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.77%)</title><rect x="1162.8" y="467.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="478.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (1 samples, 0.77%)</title><rect x="1162.8" y="451.0" width="9.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.8" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.77%)</title><rect x="1171.8" y="611.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.8" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.77%)</title><rect x="1171.8" y="595.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.8" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.77%)</title><rect x="1171.8" y="579.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="590.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.77%)</title><rect x="1171.8" y="563.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.8" y="574.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.77%)</title><rect x="1171.8" y="547.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.8" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.77%)</title><rect x="1171.8" y="531.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="542.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.77%)</title><rect x="1180.9" y="611.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="622.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.77%)</title><rect x="1180.9" y="595.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="606.0"></text>
</g>
</g>
</svg>
