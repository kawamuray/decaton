<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1125"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1125"> </text>
<g id="frames">
<g>
<title>all (188 samples, 100.00%)</title><rect x="10.0" y="1091.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 13.83%)</title><rect x="10.0" y="1075.0" width="163.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (26 samples, 13.83%)</title><rect x="10.0" y="1059.0" width="163.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1070.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (18 samples, 9.57%)</title><rect x="10.0" y="1043.0" width="113.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1054.0">java/lang/Iter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/858260503.accept (17 samples, 9.04%)</title><rect x="10.0" y="1027.0" width="106.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 9.04%)</title><rect x="10.0" y="1011.0" width="106.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1022.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (11 samples, 5.85%)</title><rect x="10.0" y="995.0" width="69.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1006.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (11 samples, 5.85%)</title><rect x="10.0" y="979.0" width="69.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (11 samples, 5.85%)</title><rect x="10.0" y="963.0" width="69.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/lin..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (11 samples, 5.85%)</title><rect x="10.0" y="947.0" width="69.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="958.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 5.85%)</title><rect x="10.0" y="931.0" width="69.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="942.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (11 samples, 5.85%)</title><rect x="10.0" y="915.0" width="69.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="926.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 4.26%)</title><rect x="10.0" y="899.0" width="50.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="910.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.53%)</title><rect x="10.0" y="883.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.53%)</title><rect x="10.0" y="867.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.53%)</title><rect x="10.0" y="851.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.53%)</title><rect x="10.0" y="835.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 3.72%)</title><rect x="16.3" y="883.0" width="43.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.3" y="894.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 3.72%)</title><rect x="16.3" y="867.0" width="43.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.3" y="878.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 3.72%)</title><rect x="16.3" y="851.0" width="43.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="862.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 3.72%)</title><rect x="16.3" y="835.0" width="43.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.3" y="846.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 3.72%)</title><rect x="16.3" y="819.0" width="43.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.3" y="830.0">sun/..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 3.72%)</title><rect x="16.3" y="803.0" width="43.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.3" y="814.0">Unsa..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.13%)</title><rect x="22.6" y="787.0" width="25.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="25.6" y="798.0">_..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.53%)</title><rect x="47.7" y="787.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="50.7" y="798.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.53%)</title><rect x="53.9" y="787.0" width="6.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="56.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.60%)</title><rect x="60.2" y="899.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="63.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.60%)</title><rect x="60.2" y="883.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="63.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.60%)</title><rect x="60.2" y="867.0" width="18.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.53%)</title><rect x="79.0" y="995.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.53%)</title><rect x="79.0" y="979.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 2.66%)</title><rect x="85.3" y="995.0" width="31.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.3" y="1006.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.66%)</title><rect x="85.3" y="979.0" width="31.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.3" y="990.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.53%)</title><rect x="110.4" y="963.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.4" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.53%)</title><rect x="110.4" y="947.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="113.4" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.53%)</title><rect x="110.4" y="931.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="113.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.53%)</title><rect x="116.7" y="1027.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="119.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.53%)</title><rect x="116.7" y="1011.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.53%)</title><rect x="116.7" y="995.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.53%)</title><rect x="116.7" y="979.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.53%)</title><rect x="116.7" y="963.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.53%)</title><rect x="116.7" y="947.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.26%)</title><rect x="123.0" y="1043.0" width="50.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.0" y="1054.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.26%)</title><rect x="123.0" y="1027.0" width="50.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.0" y="1038.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.66%)</title><rect x="123.0" y="1011.0" width="31.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.0" y="1022.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 2.66%)</title><rect x="123.0" y="995.0" width="31.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.0" y="1006.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.66%)</title><rect x="123.0" y="979.0" width="31.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="126.0" y="990.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.60%)</title><rect x="123.0" y="963.0" width="18.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="126.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.60%)</title><rect x="123.0" y="947.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="126.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.06%)</title><rect x="129.3" y="931.0" width="12.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.53%)</title><rect x="129.3" y="915.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.53%)</title><rect x="129.3" y="899.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.53%)</title><rect x="129.3" y="883.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.53%)</title><rect x="129.3" y="867.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.53%)</title><rect x="135.5" y="915.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="138.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.53%)</title><rect x="135.5" y="899.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="138.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.53%)</title><rect x="135.5" y="883.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.53%)</title><rect x="135.5" y="867.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="138.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.53%)</title><rect x="135.5" y="851.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="138.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.53%)</title><rect x="135.5" y="835.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.53%)</title><rect x="141.8" y="963.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.53%)</title><rect x="141.8" y="947.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.53%)</title><rect x="141.8" y="931.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.8" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.53%)</title><rect x="141.8" y="915.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.8" y="926.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.53%)</title><rect x="141.8" y="899.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.53%)</title><rect x="141.8" y="883.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="144.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.53%)</title><rect x="141.8" y="867.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="144.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$FetchStates$2.hasValidPosition (1 samples, 0.53%)</title><rect x="148.1" y="963.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.06%)</title><rect x="154.4" y="1011.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.06%)</title><rect x="154.4" y="995.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.53%)</title><rect x="154.4" y="979.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.53%)</title><rect x="154.4" y="963.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="157.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.53%)</title><rect x="160.6" y="979.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.53%)</title><rect x="160.6" y="963.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.53%)</title><rect x="160.6" y="947.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.53%)</title><rect x="160.6" y="931.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.53%)</title><rect x="160.6" y="915.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="163.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.53%)</title><rect x="160.6" y="899.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.53%)</title><rect x="160.6" y="883.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.53%)</title><rect x="160.6" y="867.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="163.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.53%)</title><rect x="160.6" y="851.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.6" y="862.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.53%)</title><rect x="160.6" y="835.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.53%)</title><rect x="160.6" y="819.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.53%)</title><rect x="160.6" y="803.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$223/650040584.test (1 samples, 0.53%)</title><rect x="160.6" y="787.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$hasAllFetchPositions$4 (1 samples, 0.53%)</title><rect x="160.6" y="771.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="163.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.53%)</title><rect x="166.9" y="1011.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.53%)</title><rect x="166.9" y="995.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="169.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.53%)</title><rect x="166.9" y="979.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="169.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.53%)</title><rect x="166.9" y="963.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.53%)</title><rect x="166.9" y="947.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.9" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.53%)</title><rect x="166.9" y="931.0" width="6.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="169.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (50 samples, 26.60%)</title><rect x="173.2" y="1075.0" width="313.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.2" y="1086.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (50 samples, 26.60%)</title><rect x="173.2" y="1059.0" width="313.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="176.2" y="1070.0">java/util/concurrent/ThreadPoolExecutor$Wo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (50 samples, 26.60%)</title><rect x="173.2" y="1043.0" width="313.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.2" y="1054.0">java/util/concurrent/ThreadPoolExecutor.ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/150235977.run (24 samples, 12.77%)</title><rect x="179.5" y="1027.0" width="150.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.5" y="1038.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (24 samples, 12.77%)</title><rect x="179.5" y="1011.0" width="150.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="182.5" y="1022.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (24 samples, 12.77%)</title><rect x="179.5" y="995.0" width="150.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="182.5" y="1006.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (24 samples, 12.77%)</title><rect x="179.5" y="979.0" width="150.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.5" y="990.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.53%)</title><rect x="179.5" y="963.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.53%)</title><rect x="179.5" y="947.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="182.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$195/1428611395.get (1 samples, 0.53%)</title><rect x="179.5" y="931.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.5" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.53%)</title><rect x="179.5" y="915.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.5" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.53%)</title><rect x="179.5" y="899.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="182.5" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.53%)</title><rect x="179.5" y="883.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="182.5" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.53%)</title><rect x="179.5" y="867.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="182.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (5 samples, 2.66%)</title><rect x="185.7" y="963.0" width="31.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.7" y="974.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (5 samples, 2.66%)</title><rect x="185.7" y="947.0" width="31.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="188.7" y="958.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (5 samples, 2.66%)</title><rect x="185.7" y="931.0" width="31.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="188.7" y="942.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (5 samples, 2.66%)</title><rect x="185.7" y="915.0" width="31.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.7" y="926.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (5 samples, 2.66%)</title><rect x="185.7" y="899.0" width="31.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.7" y="910.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (5 samples, 2.66%)</title><rect x="185.7" y="883.0" width="31.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.7" y="894.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.53%)</title><rect x="185.7" y="867.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.53%)</title><rect x="185.7" y="851.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.53%)</title><rect x="185.7" y="835.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="188.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.53%)</title><rect x="185.7" y="819.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.53%)</title><rect x="185.7" y="803.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="188.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.53%)</title><rect x="185.7" y="787.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="188.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 2.13%)</title><rect x="192.0" y="867.0" width="25.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.0" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.53%)</title><rect x="192.0" y="851.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.53%)</title><rect x="192.0" y="835.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.53%)</title><rect x="198.3" y="851.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="201.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (2 samples, 1.06%)</title><rect x="204.6" y="851.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.53%)</title><rect x="204.6" y="835.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.53%)</title><rect x="204.6" y="819.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.53%)</title><rect x="204.6" y="803.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.53%)</title><rect x="210.9" y="835.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.53%)</title><rect x="210.9" y="819.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.53%)</title><rect x="210.9" y="803.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.53%)</title><rect x="210.9" y="787.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (17 samples, 9.04%)</title><rect x="217.1" y="963.0" width="106.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.1" y="974.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.53%)</title><rect x="217.1" y="947.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.1" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.53%)</title><rect x="217.1" y="931.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.1" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.53%)</title><rect x="217.1" y="915.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="220.1" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.53%)</title><rect x="217.1" y="899.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (13 samples, 6.91%)</title><rect x="223.4" y="947.0" width="81.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.4" y="958.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (13 samples, 6.91%)</title><rect x="223.4" y="931.0" width="81.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.4" y="942.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.13%)</title><rect x="248.5" y="915.0" width="25.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="251.5" y="926.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.06%)</title><rect x="261.1" y="899.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.1" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.53%)</title><rect x="261.1" y="883.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.1" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.53%)</title><rect x="261.1" y="867.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.1" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.53%)</title><rect x="261.1" y="851.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="264.1" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.53%)</title><rect x="267.3" y="883.0" width="6.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="270.3" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.53%)</title><rect x="273.6" y="915.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.6" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 2.13%)</title><rect x="279.9" y="915.0" width="25.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.9" y="926.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.60%)</title><rect x="286.2" y="899.0" width="18.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.2" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.60%)</title><rect x="286.2" y="883.0" width="18.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="289.2" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.06%)</title><rect x="292.4" y="867.0" width="12.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 1.60%)</title><rect x="305.0" y="947.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 1.60%)</title><rect x="305.0" y="931.0" width="18.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.53%)</title><rect x="305.0" y="915.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.0" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.53%)</title><rect x="311.3" y="915.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.3" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.53%)</title><rect x="311.3" y="899.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.3" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.53%)</title><rect x="311.3" y="883.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.3" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.53%)</title><rect x="317.6" y="915.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="320.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.53%)</title><rect x="317.6" y="899.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.6" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.53%)</title><rect x="317.6" y="883.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.6" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.rangeCheck (1 samples, 0.53%)</title><rect x="317.6" y="867.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.6" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.53%)</title><rect x="317.6" y="851.0" width="6.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="320.6" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.53%)</title><rect x="323.8" y="963.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="326.8" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.53%)</title><rect x="323.8" y="947.0" width="6.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="326.8" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.06%)</title><rect x="330.1" y="1027.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 1.06%)</title><rect x="330.1" y="1011.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.1" y="1022.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 1.06%)</title><rect x="330.1" y="995.0" width="12.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="333.1" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.272] (2 samples, 1.06%)</title><rect x="330.1" y="979.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="333.1" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.53%)</title><rect x="342.7" y="1027.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.53%)</title><rect x="342.7" y="1011.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="345.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.06%)</title><rect x="348.9" y="1027.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="351.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.53%)</title><rect x="355.2" y="1011.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="358.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.06%)</title><rect x="361.5" y="1027.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="364.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (18 samples, 9.57%)</title><rect x="374.0" y="1027.0" width="113.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="377.0" y="1038.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (18 samples, 9.57%)</title><rect x="374.0" y="1011.0" width="113.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.0" y="1022.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 7.98%)</title><rect x="374.0" y="995.0" width="94.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="377.0" y="1006.0">java/util/c..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.06%)</title><rect x="386.6" y="979.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 5.85%)</title><rect x="399.1" y="979.0" width="69.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="402.1" y="990.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 5.85%)</title><rect x="399.1" y="963.0" width="69.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.1" y="974.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 5.32%)</title><rect x="399.1" y="947.0" width="62.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="402.1" y="958.0">Unsafe..</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.06%)</title><rect x="405.4" y="931.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="408.4" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.53%)</title><rect x="411.7" y="915.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="414.7" y="926.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.53%)</title><rect x="411.7" y="899.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="414.7" y="910.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.53%)</title><rect x="418.0" y="931.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="421.0" y="942.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 1.06%)</title><rect x="424.3" y="931.0" width="12.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="427.3" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.53%)</title><rect x="436.8" y="931.0" width="6.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="439.8" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.60%)</title><rect x="443.1" y="931.0" width="18.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="446.1" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.53%)</title><rect x="461.9" y="947.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="464.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 1.60%)</title><rect x="468.2" y="995.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="471.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 1.60%)</title><rect x="468.2" y="979.0" width="18.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="471.2" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.53%)</title><rect x="468.2" y="963.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.2" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.53%)</title><rect x="468.2" y="947.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.2" y="958.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.53%)</title><rect x="468.2" y="931.0" width="6.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="471.2" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.272] (1 samples, 0.53%)</title><rect x="468.2" y="915.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="471.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 1.06%)</title><rect x="474.5" y="963.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="477.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 1.06%)</title><rect x="474.5" y="947.0" width="12.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="477.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 1.06%)</title><rect x="474.5" y="931.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="477.5" y="942.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.53%)</title><rect x="487.0" y="1075.0" width="6.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="490.0" y="1086.0"></text>
</g>
<g>
<title>start_thread (111 samples, 59.04%)</title><rect x="493.3" y="1075.0" width="696.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="496.3" y="1086.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (111 samples, 59.04%)</title><rect x="493.3" y="1059.0" width="696.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="496.3" y="1070.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 7.98%)</title><rect x="493.3" y="1043.0" width="94.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="496.3" y="1054.0">GangWorker:..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 2.13%)</title><rect x="493.3" y="1027.0" width="25.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="496.3" y="1038.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.13%)</title><rect x="493.3" y="1011.0" width="25.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="496.3" y="1022.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.06%)</title><rect x="493.3" y="995.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="496.3" y="1006.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.06%)</title><rect x="505.9" y="995.0" width="12.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="508.9" y="1006.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (11 samples, 5.85%)</title><rect x="518.4" y="1027.0" width="69.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="521.4" y="1038.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 4.26%)</title><rect x="518.4" y="1011.0" width="50.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="521.4" y="1022.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.60%)</title><rect x="518.4" y="995.0" width="18.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="521.4" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.60%)</title><rect x="518.4" y="979.0" width="18.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="521.4" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.53%)</title><rect x="518.4" y="963.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="521.4" y="974.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.53%)</title><rect x="518.4" y="947.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="521.4" y="958.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 1.06%)</title><rect x="524.7" y="963.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="527.7" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.53%)</title><rect x="531.0" y="947.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="534.0" y="958.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.53%)</title><rect x="531.0" y="931.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="534.0" y="942.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 2.13%)</title><rect x="537.2" y="995.0" width="25.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="540.2" y="1006.0">G..</text>
</g>
<g>
<title>SpinPause (1 samples, 0.53%)</title><rect x="562.3" y="995.0" width="6.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="565.3" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.06%)</title><rect x="568.6" y="1011.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="571.6" y="1022.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.53%)</title><rect x="568.6" y="995.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="571.6" y="1006.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.53%)</title><rect x="568.6" y="979.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="571.6" y="990.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.53%)</title><rect x="568.6" y="963.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="571.6" y="974.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.53%)</title><rect x="568.6" y="947.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="571.6" y="958.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.53%)</title><rect x="568.6" y="931.0" width="6.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="571.6" y="942.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.53%)</title><rect x="574.9" y="995.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="577.9" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.53%)</title><rect x="581.2" y="1011.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="584.2" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.53%)</title><rect x="581.2" y="995.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="584.2" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.53%)</title><rect x="581.2" y="979.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="584.2" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.53%)</title><rect x="581.2" y="963.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="584.2" y="974.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.53%)</title><rect x="581.2" y="947.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="584.2" y="958.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.53%)</title><rect x="581.2" y="931.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="584.2" y="942.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.53%)</title><rect x="581.2" y="915.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="584.2" y="926.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.53%)</title><rect x="581.2" y="899.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="584.2" y="910.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.53%)</title><rect x="581.2" y="883.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="584.2" y="894.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (96 samples, 51.06%)</title><rect x="587.4" y="1043.0" width="602.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="590.4" y="1054.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (95 samples, 50.53%)</title><rect x="587.4" y="1027.0" width="596.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="590.4" y="1038.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (95 samples, 50.53%)</title><rect x="587.4" y="1011.0" width="596.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="590.4" y="1022.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (92 samples, 48.94%)</title><rect x="587.4" y="995.0" width="577.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="590.4" y="1006.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (92 samples, 48.94%)</title><rect x="587.4" y="979.0" width="577.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="590.4" y="990.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.53%)</title><rect x="587.4" y="963.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="590.4" y="974.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.53%)</title><rect x="587.4" y="947.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="590.4" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.53%)</title><rect x="587.4" y="931.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="590.4" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.53%)</title><rect x="587.4" y="915.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="590.4" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.53%)</title><rect x="587.4" y="899.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="590.4" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.53%)</title><rect x="587.4" y="883.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="590.4" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.53%)</title><rect x="587.4" y="867.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="590.4" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.53%)</title><rect x="587.4" y="851.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="590.4" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.53%)</title><rect x="587.4" y="835.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="590.4" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.53%)</title><rect x="587.4" y="819.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="590.4" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.53%)</title><rect x="587.4" y="803.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="590.4" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.53%)</title><rect x="587.4" y="787.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="590.4" y="798.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.53%)</title><rect x="587.4" y="771.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="590.4" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="587.4" y="755.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="590.4" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="587.4" y="739.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="590.4" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.53%)</title><rect x="587.4" y="723.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="590.4" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.53%)</title><rect x="587.4" y="707.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="590.4" y="718.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 26.06%)</title><rect x="593.7" y="963.0" width="307.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="596.7" y="974.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.06%)</title><rect x="593.7" y="947.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="596.7" y="958.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.53%)</title><rect x="593.7" y="931.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="596.7" y="942.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.53%)</title><rect x="593.7" y="915.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="596.7" y="926.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.53%)</title><rect x="593.7" y="899.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="596.7" y="910.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.53%)</title><rect x="593.7" y="883.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="596.7" y="894.0"></text>
</g>
<g>
<title>MacroAssembler::int3() (1 samples, 0.53%)</title><rect x="593.7" y="867.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="596.7" y="878.0"></text>
</g>
<g>
<title>MacroAssembler::call(AddressLiteral) (1 samples, 0.53%)</title><rect x="593.7" y="851.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="596.7" y="862.0"></text>
</g>
<g>
<title>runtime_call_Relocation::type() (1 samples, 0.53%)</title><rect x="593.7" y="835.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="596.7" y="846.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.53%)</title><rect x="600.0" y="931.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="603.0" y="942.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.53%)</title><rect x="606.3" y="947.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.3" y="958.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.53%)</title><rect x="606.3" y="931.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="609.3" y="942.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.53%)</title><rect x="612.6" y="947.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="615.6" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 3.19%)</title><rect x="618.8" y="947.0" width="37.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="621.8" y="958.0">Mat..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.53%)</title><rect x="618.8" y="931.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="621.8" y="942.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 1.06%)</title><rect x="625.1" y="931.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="628.1" y="942.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.60%)</title><rect x="637.7" y="931.0" width="18.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="640.7" y="942.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.53%)</title><rect x="637.7" y="915.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="640.7" y="926.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.53%)</title><rect x="643.9" y="915.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="646.9" y="926.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.53%)</title><rect x="643.9" y="899.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="646.9" y="910.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.53%)</title><rect x="643.9" y="883.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="646.9" y="894.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.53%)</title><rect x="650.2" y="915.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="653.2" y="926.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.53%)</title><rect x="650.2" y="899.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="653.2" y="910.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.53%)</title><rect x="650.2" y="883.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="653.2" y="894.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.53%)</title><rect x="650.2" y="867.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="653.2" y="878.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.53%)</title><rect x="650.2" y="851.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="653.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.06%)</title><rect x="656.5" y="947.0" width="12.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="659.5" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.06%)</title><rect x="656.5" y="931.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="659.5" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 1.06%)</title><rect x="656.5" y="915.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="659.5" y="926.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.53%)</title><rect x="662.8" y="899.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="665.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (37 samples, 19.68%)</title><rect x="669.0" y="947.0" width="232.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="672.0" y="958.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.53%)</title><rect x="669.0" y="931.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="672.0" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.60%)</title><rect x="675.3" y="931.0" width="18.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="678.3" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.06%)</title><rect x="681.6" y="915.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="684.6" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="687.9" y="899.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="690.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 3.72%)</title><rect x="694.1" y="931.0" width="44.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="697.1" y="942.0">Phas..</text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.53%)</title><rect x="731.8" y="915.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="734.8" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 3.19%)</title><rect x="738.1" y="931.0" width="37.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="741.1" y="942.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="750.6" y="915.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="753.6" y="926.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.53%)</title><rect x="756.9" y="915.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="759.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.06%)</title><rect x="763.2" y="915.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="766.2" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="769.5" y="899.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="772.5" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 1.06%)</title><rect x="775.7" y="931.0" width="12.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="778.7" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.06%)</title><rect x="775.7" y="915.0" width="12.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="778.7" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.53%)</title><rect x="788.3" y="931.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="791.3" y="942.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.53%)</title><rect x="788.3" y="915.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="791.3" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 2.13%)</title><rect x="794.6" y="931.0" width="25.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="797.6" y="942.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 1.06%)</title><rect x="807.1" y="915.0" width="12.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="810.1" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.53%)</title><rect x="819.7" y="931.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="822.7" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.13%)</title><rect x="826.0" y="931.0" width="25.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="829.0" y="942.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.60%)</title><rect x="832.2" y="915.0" width="18.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="835.2" y="926.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.53%)</title><rect x="851.1" y="931.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="854.1" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.53%)</title><rect x="851.1" y="915.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="854.1" y="926.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.53%)</title><rect x="851.1" y="899.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="854.1" y="910.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.53%)</title><rect x="851.1" y="883.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="854.1" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.53%)</title><rect x="857.3" y="931.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="860.3" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="857.3" y="915.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="860.3" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.53%)</title><rect x="863.6" y="931.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="866.6" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="863.6" y="915.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="866.6" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.13%)</title><rect x="869.9" y="931.0" width="25.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="872.9" y="942.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.06%)</title><rect x="882.4" y="915.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="885.4" y="926.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.53%)</title><rect x="888.7" y="899.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.7" y="910.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.53%)</title><rect x="895.0" y="931.0" width="6.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="898.0" y="942.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 17.02%)</title><rect x="901.3" y="963.0" width="200.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="904.3" y="974.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.53%)</title><rect x="901.3" y="947.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="904.3" y="958.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.53%)</title><rect x="901.3" y="931.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="904.3" y="942.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.53%)</title><rect x="901.3" y="915.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="904.3" y="926.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.53%)</title><rect x="901.3" y="899.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="904.3" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.53%)</title><rect x="901.3" y="883.0" width="6.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="904.3" y="894.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.53%)</title><rect x="907.6" y="947.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="910.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.53%)</title><rect x="913.8" y="947.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="916.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.53%)</title><rect x="913.8" y="931.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.53%)</title><rect x="913.8" y="915.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="916.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.53%)</title><rect x="913.8" y="899.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.8" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.53%)</title><rect x="913.8" y="883.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="916.8" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.53%)</title><rect x="913.8" y="867.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="916.8" y="878.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 0.53%)</title><rect x="913.8" y="851.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.8" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.53%)</title><rect x="913.8" y="835.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="916.8" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.53%)</title><rect x="920.1" y="947.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="923.1" y="958.0"></text>
</g>
<g>
<title>BoolNode::Value(PhaseTransform*) const (1 samples, 0.53%)</title><rect x="920.1" y="931.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="923.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 10.64%)</title><rect x="926.4" y="947.0" width="125.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="929.4" y="958.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="926.4" y="931.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="929.4" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="926.4" y="915.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="929.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.53%)</title><rect x="926.4" y="899.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="929.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.53%)</title><rect x="926.4" y="883.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="929.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.53%)</title><rect x="932.7" y="931.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="935.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.13%)</title><rect x="938.9" y="931.0" width="25.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.9" y="942.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 1.06%)</title><rect x="951.5" y="915.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="954.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 6.91%)</title><rect x="964.0" y="931.0" width="81.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="967.0" y="942.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (12 samples, 6.38%)</title><rect x="970.3" y="915.0" width="75.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="973.3" y="926.0">PhaseIde..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.53%)</title><rect x="970.3" y="899.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 5.85%)</title><rect x="976.6" y="899.0" width="69.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.6" y="910.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.53%)</title><rect x="982.9" y="883.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.53%)</title><rect x="982.9" y="867.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.53%)</title><rect x="989.1" y="883.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="992.1" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.53%)</title><rect x="989.1" y="867.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (8 samples, 4.26%)</title><rect x="995.4" y="883.0" width="50.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.4" y="894.0">Phase..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.53%)</title><rect x="1045.6" y="931.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.6" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.53%)</title><rect x="1045.6" y="915.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1048.6" y="926.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.53%)</title><rect x="1045.6" y="899.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.6" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.53%)</title><rect x="1045.6" y="883.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1048.6" y="894.0"></text>
</g>
<g>
<title>ConLNode::Opcode() const (1 samples, 0.53%)</title><rect x="1045.6" y="867.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.6" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 3.19%)</title><rect x="1051.9" y="947.0" width="37.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1054.9" y="958.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 3.19%)</title><rect x="1051.9" y="931.0" width="37.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.9" y="942.0">Pha..</text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1051.9" y="915.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.9" y="926.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.53%)</title><rect x="1051.9" y="899.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1054.9" y="910.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.53%)</title><rect x="1051.9" y="883.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1054.9" y="894.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.53%)</title><rect x="1051.9" y="867.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.9" y="878.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1058.2" y="915.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.2" y="926.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1064.5" y="915.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1067.5" y="926.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.53%)</title><rect x="1064.5" y="899.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1067.5" y="910.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.53%)</title><rect x="1070.7" y="915.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.7" y="926.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 1.06%)</title><rect x="1077.0" y="915.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.0" y="926.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 1.06%)</title><rect x="1077.0" y="899.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.0" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.06%)</title><rect x="1077.0" y="883.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.0" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.06%)</title><rect x="1077.0" y="867.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.0" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.06%)</title><rect x="1077.0" y="851.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.0" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.06%)</title><rect x="1077.0" y="835.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1080.0" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.06%)</title><rect x="1077.0" y="819.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.0" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.06%)</title><rect x="1077.0" y="803.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.0" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.06%)</title><rect x="1077.0" y="787.0" width="12.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.0" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1077.0" y="771.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.0" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1077.0" y="755.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.0" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1077.0" y="739.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1080.0" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1077.0" y="723.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1080.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1077.0" y="707.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1080.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1077.0" y="691.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1080.0" y="702.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.53%)</title><rect x="1077.0" y="675.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.0" y="686.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1077.0" y="659.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.0" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.53%)</title><rect x="1083.3" y="771.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.3" y="782.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1083.3" y="755.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1086.3" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.53%)</title><rect x="1089.6" y="947.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.6" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.53%)</title><rect x="1089.6" y="931.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1092.6" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1089.6" y="915.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.6" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.53%)</title><rect x="1089.6" y="899.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.6" y="910.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.53%)</title><rect x="1089.6" y="883.0" width="6.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1092.6" y="894.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.53%)</title><rect x="1089.6" y="867.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.6" y="878.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.53%)</title><rect x="1089.6" y="851.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.6" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.53%)</title><rect x="1095.9" y="947.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.9" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.53%)</title><rect x="1095.9" y="931.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1098.9" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.53%)</title><rect x="1095.9" y="915.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.9" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.53%)</title><rect x="1095.9" y="899.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.9" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 5.32%)</title><rect x="1102.1" y="963.0" width="62.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.1" y="974.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 5.32%)</title><rect x="1102.1" y="947.0" width="62.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.1" y="958.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 5.32%)</title><rect x="1102.1" y="931.0" width="62.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.1" y="942.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 5.32%)</title><rect x="1102.1" y="915.0" width="62.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.1" y="926.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 5.32%)</title><rect x="1102.1" y="899.0" width="62.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.1" y="910.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 4.79%)</title><rect x="1102.1" y="883.0" width="56.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.1" y="894.0">Parse:..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.19%)</title><rect x="1102.1" y="867.0" width="37.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.1" y="878.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.19%)</title><rect x="1102.1" y="851.0" width="37.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.1" y="862.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.19%)</title><rect x="1102.1" y="835.0" width="37.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.1" y="846.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.19%)</title><rect x="1102.1" y="819.0" width="37.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.1" y="830.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.19%)</title><rect x="1102.1" y="803.0" width="37.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.1" y="814.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.19%)</title><rect x="1102.1" y="787.0" width="37.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.1" y="798.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.19%)</title><rect x="1102.1" y="771.0" width="37.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.1" y="782.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.19%)</title><rect x="1102.1" y="755.0" width="37.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.1" y="766.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.19%)</title><rect x="1102.1" y="739.0" width="37.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.1" y="750.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.19%)</title><rect x="1102.1" y="723.0" width="37.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.1" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.19%)</title><rect x="1102.1" y="707.0" width="37.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.1" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.19%)</title><rect x="1102.1" y="691.0" width="37.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.1" y="702.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.13%)</title><rect x="1102.1" y="675.0" width="25.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.1" y="686.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.13%)</title><rect x="1102.1" y="659.0" width="25.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.1" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.13%)</title><rect x="1102.1" y="643.0" width="25.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.1" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.13%)</title><rect x="1102.1" y="627.0" width="25.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.1" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.13%)</title><rect x="1102.1" y="611.0" width="25.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.1" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.60%)</title><rect x="1102.1" y="595.0" width="18.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.60%)</title><rect x="1102.1" y="579.0" width="18.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.60%)</title><rect x="1102.1" y="563.0" width="18.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.60%)</title><rect x="1102.1" y="547.0" width="18.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.60%)</title><rect x="1102.1" y="531.0" width="18.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.60%)</title><rect x="1102.1" y="515.0" width="18.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1102.1" y="499.0" width="12.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.1" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.06%)</title><rect x="1102.1" y="483.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.1" y="494.0"></text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.53%)</title><rect x="1102.1" y="467.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.1" y="478.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.53%)</title><rect x="1102.1" y="451.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.1" y="462.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.53%)</title><rect x="1102.1" y="435.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.1" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.53%)</title><rect x="1108.4" y="467.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.4" y="478.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.53%)</title><rect x="1108.4" y="451.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.4" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.53%)</title><rect x="1108.4" y="435.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.4" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.53%)</title><rect x="1108.4" y="419.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.4" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.53%)</title><rect x="1108.4" y="403.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.53%)</title><rect x="1114.7" y="499.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.53%)</title><rect x="1114.7" y="483.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.53%)</title><rect x="1114.7" y="467.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="478.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.53%)</title><rect x="1114.7" y="451.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.7" y="462.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.53%)</title><rect x="1114.7" y="435.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.7" y="446.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.53%)</title><rect x="1114.7" y="419.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.7" y="430.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.53%)</title><rect x="1114.7" y="403.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.53%)</title><rect x="1121.0" y="595.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.53%)</title><rect x="1121.0" y="579.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.0" y="590.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.53%)</title><rect x="1121.0" y="563.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.0" y="574.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.53%)</title><rect x="1121.0" y="547.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.0" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1127.2" y="675.0" width="12.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1127.2" y="659.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1127.2" y="643.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1127.2" y="627.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1127.2" y="611.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1127.2" y="595.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1127.2" y="579.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1127.2" y="563.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1127.2" y="547.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1127.2" y="531.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1127.2" y="515.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1127.2" y="499.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1127.2" y="483.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1127.2" y="467.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1127.2" y="451.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1127.2" y="435.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1127.2" y="419.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1127.2" y="403.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1127.2" y="387.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1127.2" y="371.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1127.2" y="355.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1127.2" y="339.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1127.2" y="323.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1127.2" y="307.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1127.2" y="291.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1127.2" y="275.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1127.2" y="259.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1127.2" y="243.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1127.2" y="227.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1127.2" y="211.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.53%)</title><rect x="1127.2" y="195.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.53%)</title><rect x="1127.2" y="179.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.2" y="190.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.53%)</title><rect x="1127.2" y="163.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="174.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.53%)</title><rect x="1127.2" y="147.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.2" y="158.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.53%)</title><rect x="1127.2" y="131.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.2" y="142.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.53%)</title><rect x="1127.2" y="115.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.2" y="126.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.53%)</title><rect x="1127.2" y="99.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.53%)</title><rect x="1127.2" y="83.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.2" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.53%)</title><rect x="1127.2" y="67.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="78.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.53%)</title><rect x="1127.2" y="51.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.2" y="62.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.53%)</title><rect x="1127.2" y="35.0" width="6.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1130.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1133.5" y="659.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1133.5" y="643.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1133.5" y="627.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1133.5" y="611.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1133.5" y="595.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1133.5" y="579.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1133.5" y="563.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1133.5" y="547.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1133.5" y="531.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1133.5" y="515.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1133.5" y="499.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1133.5" y="483.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1133.5" y="467.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1133.5" y="451.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1133.5" y="435.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1133.5" y="419.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1133.5" y="403.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1133.5" y="387.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1133.5" y="371.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1133.5" y="355.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1133.5" y="339.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1133.5" y="323.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1133.5" y="307.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1133.5" y="291.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1133.5" y="275.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.5" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1133.5" y="259.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.5" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1133.5" y="243.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1133.5" y="227.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.5" y="238.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.53%)</title><rect x="1133.5" y="211.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.5" y="222.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.53%)</title><rect x="1133.5" y="195.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.5" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.53%)</title><rect x="1133.5" y="179.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.5" y="190.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.53%)</title><rect x="1133.5" y="163.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.5" y="174.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.53%)</title><rect x="1133.5" y="147.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.5" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.60%)</title><rect x="1139.8" y="867.0" width="18.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.60%)</title><rect x="1139.8" y="851.0" width="18.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.60%)</title><rect x="1139.8" y="835.0" width="18.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1139.8" y="819.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1139.8" y="803.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1139.8" y="787.0" width="12.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1139.8" y="771.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1139.8" y="755.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1139.8" y="739.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1139.8" y="723.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1139.8" y="707.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1139.8" y="691.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1139.8" y="675.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1139.8" y="659.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1139.8" y="643.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1139.8" y="627.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1139.8" y="611.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1139.8" y="595.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1139.8" y="579.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.8" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.53%)</title><rect x="1139.8" y="563.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.8" y="574.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.53%)</title><rect x="1139.8" y="547.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.53%)</title><rect x="1139.8" y="531.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.8" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.53%)</title><rect x="1139.8" y="515.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.8" y="526.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1139.8" y="499.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.8" y="510.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.53%)</title><rect x="1139.8" y="483.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.53%)</title><rect x="1139.8" y="467.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.8" y="478.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.53%)</title><rect x="1139.8" y="451.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.8" y="462.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.53%)</title><rect x="1139.8" y="435.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.8" y="446.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::non_reflection_class_loader(oopDesc*) (1 samples, 0.53%)</title><rect x="1139.8" y="419.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.8" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1146.1" y="755.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.1" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1146.1" y="739.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.1" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.53%)</title><rect x="1146.1" y="723.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.1" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.53%)</title><rect x="1146.1" y="707.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.1" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1146.1" y="691.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.1" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1146.1" y="675.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.1" y="686.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.53%)</title><rect x="1146.1" y="659.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.1" y="670.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.53%)</title><rect x="1146.1" y="643.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.1" y="654.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (1 samples, 0.53%)</title><rect x="1146.1" y="627.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.53%)</title><rect x="1152.3" y="819.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.3" y="830.0"></text>
</g>
<g>
<title>GraphKit::use_exception_state(SafePointNode*) (1 samples, 0.53%)</title><rect x="1152.3" y="803.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.3" y="814.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.53%)</title><rect x="1152.3" y="787.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.53%)</title><rect x="1152.3" y="771.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.3" y="782.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.53%)</title><rect x="1152.3" y="755.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.3" y="766.0"></text>
</g>
<g>
<title>ciSignature::return_type() const (1 samples, 0.53%)</title><rect x="1158.6" y="883.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.6" y="894.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.60%)</title><rect x="1164.9" y="995.0" width="18.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.9" y="1006.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.60%)</title><rect x="1164.9" y="979.0" width="18.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.9" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.60%)</title><rect x="1164.9" y="963.0" width="18.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.9" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.60%)</title><rect x="1164.9" y="947.0" width="18.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="958.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.53%)</title><rect x="1164.9" y="931.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.9" y="942.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.53%)</title><rect x="1164.9" y="915.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="926.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.53%)</title><rect x="1164.9" y="899.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.9" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.53%)</title><rect x="1164.9" y="883.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.53%)</title><rect x="1164.9" y="867.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.9" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.53%)</title><rect x="1164.9" y="851.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.9" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.53%)</title><rect x="1164.9" y="835.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.9" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.53%)</title><rect x="1164.9" y="819.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.53%)</title><rect x="1164.9" y="803.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.53%)</title><rect x="1164.9" y="787.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="798.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.53%)</title><rect x="1164.9" y="771.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="782.0"></text>
</g>
<g>
<title>BlockListBuilder::set_entries(int) (1 samples, 0.53%)</title><rect x="1164.9" y="755.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.53%)</title><rect x="1171.2" y="931.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.53%)</title><rect x="1171.2" y="915.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.2" y="926.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.53%)</title><rect x="1171.2" y="899.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="910.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.53%)</title><rect x="1171.2" y="883.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="894.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.53%)</title><rect x="1171.2" y="867.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.2" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.53%)</title><rect x="1171.2" y="851.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.2" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.53%)</title><rect x="1171.2" y="835.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.2" y="846.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.53%)</title><rect x="1177.4" y="931.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="942.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.53%)</title><rect x="1177.4" y="915.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="926.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.53%)</title><rect x="1177.4" y="899.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="910.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.53%)</title><rect x="1177.4" y="883.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="894.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.53%)</title><rect x="1177.4" y="867.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="878.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.53%)</title><rect x="1177.4" y="851.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="862.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (1 samples, 0.53%)</title><rect x="1177.4" y="835.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="846.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.53%)</title><rect x="1183.7" y="1027.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="1038.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.53%)</title><rect x="1183.7" y="1011.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.7" y="1022.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.53%)</title><rect x="1183.7" y="995.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.7" y="1006.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.53%)</title><rect x="1183.7" y="979.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="990.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.53%)</title><rect x="1183.7" y="963.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="974.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.53%)</title><rect x="1183.7" y="947.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.7" y="958.0"></text>
</g>
</g>
</svg>
