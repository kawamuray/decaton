<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (255 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.39%)</title><rect x="10.0" y="1299.0" width="4.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.39%)</title><rect x="10.0" y="1283.0" width="4.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 7.84%)</title><rect x="14.6" y="1299.0" width="92.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.6" y="1310.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 7.84%)</title><rect x="14.6" y="1283.0" width="92.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.6" y="1294.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.78%)</title><rect x="14.6" y="1267.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.6" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.39%)</title><rect x="14.6" y="1251.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.6" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.39%)</title><rect x="14.6" y="1235.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.6" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.39%)</title><rect x="14.6" y="1219.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.39%)</title><rect x="14.6" y="1203.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.39%)</title><rect x="14.6" y="1187.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.39%)</title><rect x="14.6" y="1171.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.6" y="1182.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.39%)</title><rect x="14.6" y="1155.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.6" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.39%)</title><rect x="14.6" y="1139.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.39%)</title><rect x="19.3" y="1251.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.39%)</title><rect x="19.3" y="1235.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.78%)</title><rect x="23.9" y="1267.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.9" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.39%)</title><rect x="23.9" y="1251.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.9" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.39%)</title><rect x="23.9" y="1235.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.9" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.39%)</title><rect x="23.9" y="1219.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.39%)</title><rect x="23.9" y="1203.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.39%)</title><rect x="23.9" y="1187.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.39%)</title><rect x="23.9" y="1171.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.39%)</title><rect x="23.9" y="1155.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.39%)</title><rect x="23.9" y="1139.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$252/1930602943.test (1 samples, 0.39%)</title><rect x="23.9" y="1123.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.39%)</title><rect x="28.5" y="1251.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.5" y="1262.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.39%)</title><rect x="28.5" y="1235.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.5" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.57%)</title><rect x="33.1" y="1267.0" width="18.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1513289811.accept (4 samples, 1.57%)</title><rect x="33.1" y="1251.0" width="18.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$41 (4 samples, 1.57%)</title><rect x="33.1" y="1235.0" width="18.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.18%)</title><rect x="33.1" y="1219.0" width="13.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.18%)</title><rect x="33.1" y="1203.0" width="13.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.18%)</title><rect x="33.1" y="1187.0" width="13.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.18%)</title><rect x="33.1" y="1171.0" width="13.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.18%)</title><rect x="33.1" y="1155.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.18%)</title><rect x="33.1" y="1139.0" width="13.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="36.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.39%)</title><rect x="42.4" y="1123.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.39%)</title><rect x="42.4" y="1107.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.39%)</title><rect x="42.4" y="1091.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.39%)</title><rect x="47.0" y="1219.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.39%)</title><rect x="47.0" y="1203.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.39%)</title><rect x="47.0" y="1187.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.39%)</title><rect x="47.0" y="1171.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.71%)</title><rect x="51.6" y="1267.0" width="55.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.6" y="1278.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.71%)</title><rect x="51.6" y="1251.0" width="55.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.6" y="1262.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 3.14%)</title><rect x="51.6" y="1235.0" width="37.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.6" y="1246.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.96%)</title><rect x="51.6" y="1219.0" width="23.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.6" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.96%)</title><rect x="51.6" y="1203.0" width="23.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.6" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.78%)</title><rect x="51.6" y="1187.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.78%)</title><rect x="51.6" y="1171.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.39%)</title><rect x="51.6" y="1155.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1394396476.linkToTargetMethod (1 samples, 0.39%)</title><rect x="51.6" y="1139.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="54.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1897280590.invokeStatic_JJ_L (1 samples, 0.39%)</title><rect x="51.6" y="1123.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$$Lambda$84/1402368087.get$Lambda (1 samples, 0.39%)</title><rect x="51.6" y="1107.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.39%)</title><rect x="56.3" y="1155.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.3" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.39%)</title><rect x="56.3" y="1139.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.3" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.39%)</title><rect x="56.3" y="1123.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="59.3" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.39%)</title><rect x="56.3" y="1107.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.3" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.39%)</title><rect x="56.3" y="1091.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.39%)</title><rect x="56.3" y="1075.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.39%)</title><rect x="56.3" y="1059.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.3" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.39%)</title><rect x="56.3" y="1043.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/19299320.shouldBlock (1 samples, 0.39%)</title><rect x="60.9" y="1187.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.39%)</title><rect x="60.9" y="1171.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.39%)</title><rect x="60.9" y="1155.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.39%)</title><rect x="60.9" y="1139.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="63.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.39%)</title><rect x="60.9" y="1123.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.9" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.39%)</title><rect x="60.9" y="1107.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.9" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.39%)</title><rect x="60.9" y="1091.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.39%)</title><rect x="60.9" y="1075.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.39%)</title><rect x="60.9" y="1059.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.39%)</title><rect x="60.9" y="1043.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.39%)</title><rect x="60.9" y="1027.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.39%)</title><rect x="60.9" y="1011.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.39%)</title><rect x="60.9" y="995.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="63.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$223/1113689090.test (1 samples, 0.39%)</title><rect x="60.9" y="979.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$hasAllFetchPositions$4 (1 samples, 0.39%)</title><rect x="60.9" y="963.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2400 (1 samples, 0.39%)</title><rect x="60.9" y="947.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.39%)</title><rect x="60.9" y="931.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.9" y="942.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.39%)</title><rect x="60.9" y="915.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.39%)</title><rect x="65.5" y="1187.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.39%)</title><rect x="65.5" y="1171.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.39%)</title><rect x="65.5" y="1155.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.39%)</title><rect x="65.5" y="1139.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.39%)</title><rect x="65.5" y="1123.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.39%)</title><rect x="65.5" y="1107.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.39%)</title><rect x="65.5" y="1091.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.39%)</title><rect x="70.2" y="1187.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.18%)</title><rect x="74.8" y="1219.0" width="13.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.78%)</title><rect x="74.8" y="1203.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.78%)</title><rect x="74.8" y="1187.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.78%)</title><rect x="74.8" y="1171.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.78%)</title><rect x="74.8" y="1155.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="77.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.39%)</title><rect x="74.8" y="1139.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.39%)</title><rect x="74.8" y="1123.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.39%)</title><rect x="74.8" y="1107.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.39%)</title><rect x="74.8" y="1091.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.39%)</title><rect x="74.8" y="1075.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.39%)</title><rect x="74.8" y="1059.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.39%)</title><rect x="74.8" y="1043.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.39%)</title><rect x="79.4" y="1139.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.39%)</title><rect x="79.4" y="1123.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.39%)</title><rect x="79.4" y="1107.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.39%)</title><rect x="84.0" y="1203.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.39%)</title><rect x="84.0" y="1187.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.18%)</title><rect x="88.7" y="1235.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.78%)</title><rect x="88.7" y="1219.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.78%)</title><rect x="88.7" y="1203.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="91.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.39%)</title><rect x="88.7" y="1187.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.7" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.39%)</title><rect x="88.7" y="1171.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1306252674.accept (1 samples, 0.39%)</title><rect x="88.7" y="1155.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.39%)</title><rect x="93.3" y="1187.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.3" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.39%)</title><rect x="93.3" y="1171.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.3" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.39%)</title><rect x="93.3" y="1155.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.3" y="1166.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.39%)</title><rect x="93.3" y="1139.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.3" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.39%)</title><rect x="93.3" y="1123.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="96.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.39%)</title><rect x="97.9" y="1219.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.39%)</title><rect x="97.9" y="1203.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.39%)</title><rect x="102.5" y="1235.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.39%)</title><rect x="102.5" y="1219.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.39%)</title><rect x="102.5" y="1203.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.5" y="1214.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.39%)</title><rect x="102.5" y="1187.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.5" y="1198.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.39%)</title><rect x="102.5" y="1171.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="105.5" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.39%)</title><rect x="102.5" y="1155.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="105.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.39%)</title><rect x="102.5" y="1139.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.run (139 samples, 54.51%)</title><rect x="107.2" y="1299.0" width="643.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.2" y="1310.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (139 samples, 54.51%)</title><rect x="107.2" y="1283.0" width="643.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.2" y="1294.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (139 samples, 54.51%)</title><rect x="107.2" y="1267.0" width="643.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.2" y="1278.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1779265537.run (131 samples, 51.37%)</title><rect x="107.2" y="1251.0" width="606.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.2" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1779265537.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$39 (131 samples, 51.37%)</title><rect x="107.2" y="1235.0" width="606.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.2" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$39</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (131 samples, 51.37%)</title><rect x="107.2" y="1219.0" width="606.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.2" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (131 samples, 51.37%)</title><rect x="107.2" y="1203.0" width="606.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.2" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (26 samples, 10.20%)</title><rect x="125.7" y="1187.0" width="120.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="128.7" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (26 samples, 10.20%)</title><rect x="125.7" y="1171.0" width="120.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.7" y="1182.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (26 samples, 10.20%)</title><rect x="125.7" y="1155.0" width="120.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="128.7" y="1166.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 10.20%)</title><rect x="125.7" y="1139.0" width="120.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.7" y="1150.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 10.20%)</title><rect x="125.7" y="1123.0" width="120.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="128.7" y="1134.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (26 samples, 10.20%)</title><rect x="125.7" y="1107.0" width="120.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.7" y="1118.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 3.53%)</title><rect x="125.7" y="1091.0" width="41.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.7" y="1102.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.57%)</title><rect x="148.8" y="1075.0" width="18.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 1.18%)</title><rect x="148.8" y="1059.0" width="13.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="151.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.78%)</title><rect x="153.5" y="1043.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.78%)</title><rect x="153.5" y="1027.0" width="9.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.78%)</title><rect x="153.5" y="1011.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="156.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.78%)</title><rect x="153.5" y="995.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.39%)</title><rect x="162.7" y="1059.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="165.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (16 samples, 6.27%)</title><rect x="167.3" y="1091.0" width="74.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.3" y="1102.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.39%)</title><rect x="167.3" y="1075.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.18%)</title><rect x="172.0" y="1075.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.18%)</title><rect x="172.0" y="1059.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="175.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.78%)</title><rect x="176.6" y="1043.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.39%)</title><rect x="181.2" y="1027.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.2" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.39%)</title><rect x="181.2" y="1011.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="184.2" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.39%)</title><rect x="181.2" y="995.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="184.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.39%)</title><rect x="181.2" y="979.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="184.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.39%)</title><rect x="181.2" y="963.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="184.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 4.71%)</title><rect x="185.8" y="1075.0" width="55.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.8" y="1086.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.35%)</title><rect x="185.8" y="1059.0" width="27.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.8" y="1070.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.78%)</title><rect x="190.5" y="1043.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.78%)</title><rect x="190.5" y="1027.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.78%)</title><rect x="190.5" y="1011.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.18%)</title><rect x="199.7" y="1043.0" width="13.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.39%)</title><rect x="213.6" y="1059.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.96%)</title><rect x="218.2" y="1059.0" width="23.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.2" y="1070.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.96%)</title><rect x="218.2" y="1043.0" width="23.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.2" y="1054.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.96%)</title><rect x="218.2" y="1027.0" width="23.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.2" y="1038.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.78%)</title><rect x="218.2" y="1011.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.39%)</title><rect x="218.2" y="995.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.39%)</title><rect x="218.2" y="979.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.39%)</title><rect x="218.2" y="963.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.39%)</title><rect x="218.2" y="947.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.39%)</title><rect x="218.2" y="931.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="221.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.39%)</title><rect x="222.9" y="995.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.39%)</title><rect x="222.9" y="979.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.39%)</title><rect x="227.5" y="1011.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.39%)</title><rect x="227.5" y="995.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.39%)</title><rect x="227.5" y="979.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.39%)</title><rect x="227.5" y="963.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.5" y="974.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.39%)</title><rect x="227.5" y="947.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.78%)</title><rect x="232.1" y="1011.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.1" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.78%)</title><rect x="232.1" y="995.0" width="9.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.78%)</title><rect x="232.1" y="979.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.39%)</title><rect x="241.4" y="1091.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.39%)</title><rect x="241.4" y="1075.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.39%)</title><rect x="241.4" y="1059.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.39%)</title><rect x="241.4" y="1043.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="244.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.39%)</title><rect x="241.4" y="1027.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (98 samples, 38.43%)</title><rect x="246.0" y="1187.0" width="453.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.0" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (15 samples, 5.88%)</title><rect x="246.0" y="1171.0" width="69.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="1182.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.39%)</title><rect x="246.0" y="1155.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 5.49%)</title><rect x="250.6" y="1155.0" width="64.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.6" y="1166.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (14 samples, 5.49%)</title><rect x="250.6" y="1139.0" width="64.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.6" y="1150.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 4.71%)</title><rect x="250.6" y="1123.0" width="55.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.6" y="1134.0">ch/qo..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 4.71%)</title><rect x="250.6" y="1107.0" width="55.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.6" y="1118.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 4.71%)</title><rect x="250.6" y="1091.0" width="55.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.6" y="1102.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 4.71%)</title><rect x="250.6" y="1075.0" width="55.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.6" y="1086.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (12 samples, 4.71%)</title><rect x="250.6" y="1059.0" width="55.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.6" y="1070.0">java/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.78%)</title><rect x="306.2" y="1123.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="309.2" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.39%)</title><rect x="310.8" y="1107.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.39%)</title><rect x="310.8" y="1091.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.18%)</title><rect x="315.4" y="1171.0" width="13.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="318.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.18%)</title><rect x="315.4" y="1155.0" width="13.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="318.4" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 1.18%)</title><rect x="315.4" y="1139.0" width="13.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="318.4" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.39%)</title><rect x="324.7" y="1123.0" width="4.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="327.7" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.39%)</title><rect x="324.7" y="1107.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="327.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (30 samples, 11.76%)</title><rect x="329.3" y="1171.0" width="138.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.3" y="1182.0">com/linecorp/deca..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.39%)</title><rect x="329.3" y="1155.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="332.3" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.39%)</title><rect x="329.3" y="1139.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="332.3" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.39%)</title><rect x="329.3" y="1123.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="332.3" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.39%)</title><rect x="329.3" y="1107.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="332.3" y="1118.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.39%)</title><rect x="329.3" y="1091.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="332.3" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.39%)</title><rect x="329.3" y="1075.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="332.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (29 samples, 11.37%)</title><rect x="333.9" y="1155.0" width="134.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.9" y="1166.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (13 samples, 5.10%)</title><rect x="338.5" y="1139.0" width="60.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="341.5" y="1150.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (12 samples, 4.71%)</title><rect x="343.2" y="1123.0" width="55.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.2" y="1134.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 3.92%)</title><rect x="347.8" y="1107.0" width="46.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.8" y="1118.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 3.53%)</title><rect x="352.4" y="1091.0" width="41.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="355.4" y="1102.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 3.53%)</title><rect x="352.4" y="1075.0" width="41.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="355.4" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 3.53%)</title><rect x="352.4" y="1059.0" width="41.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="355.4" y="1070.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 1.96%)</title><rect x="366.3" y="1043.0" width="23.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="369.3" y="1054.0">O..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.39%)</title><rect x="366.3" y="1027.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="369.3" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.39%)</title><rect x="366.3" y="1011.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="369.3" y="1022.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.39%)</title><rect x="366.3" y="995.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="369.3" y="1006.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.39%)</title><rect x="366.3" y="979.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="369.3" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 1.57%)</title><rect x="370.9" y="1027.0" width="18.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="373.9" y="1038.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.39%)</title><rect x="370.9" y="1011.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="373.9" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.78%)</title><rect x="375.6" y="1011.0" width="9.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="378.6" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.39%)</title><rect x="375.6" y="995.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="378.6" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.39%)</title><rect x="375.6" y="979.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="378.6" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.39%)</title><rect x="375.6" y="963.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="378.6" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.39%)</title><rect x="375.6" y="947.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="378.6" y="958.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.39%)</title><rect x="375.6" y="931.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="378.6" y="942.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.39%)</title><rect x="375.6" y="915.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="378.6" y="926.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.39%)</title><rect x="380.2" y="995.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="383.2" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.39%)</title><rect x="384.8" y="1011.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="387.8" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.39%)</title><rect x="389.5" y="1043.0" width="4.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="392.5" y="1054.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.39%)</title><rect x="394.1" y="1107.0" width="4.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="397.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.78%)</title><rect x="398.7" y="1139.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="401.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.39%)</title><rect x="398.7" y="1123.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="401.7" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.39%)</title><rect x="398.7" y="1107.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="401.7" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.39%)</title><rect x="398.7" y="1091.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="401.7" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.39%)</title><rect x="398.7" y="1075.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="401.7" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.39%)</title><rect x="398.7" y="1059.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="401.7" y="1070.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.39%)</title><rect x="398.7" y="1043.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="401.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.39%)</title><rect x="403.3" y="1123.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.39%)</title><rect x="403.3" y="1107.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.3" y="1118.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 5.10%)</title><rect x="408.0" y="1139.0" width="60.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="411.0" y="1150.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 5.10%)</title><rect x="408.0" y="1123.0" width="60.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="411.0" y="1134.0">ch/qos..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 5.10%)</title><rect x="408.0" y="1107.0" width="60.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.0" y="1118.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 4.71%)</title><rect x="412.6" y="1091.0" width="55.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.6" y="1102.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 2.75%)</title><rect x="435.7" y="1075.0" width="32.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.7" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.39%)</title><rect x="463.5" y="1059.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="466.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (47 samples, 18.43%)</title><rect x="468.1" y="1171.0" width="217.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="471.1" y="1182.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (47 samples, 18.43%)</title><rect x="468.1" y="1155.0" width="217.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="471.1" y="1166.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/2045927707.process (40 samples, 15.69%)</title><rect x="477.4" y="1139.0" width="185.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="480.4" y="1150.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (40 samples, 15.69%)</title><rect x="477.4" y="1123.0" width="185.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.4" y="1134.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (40 samples, 15.69%)</title><rect x="477.4" y="1107.0" width="185.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.4" y="1118.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (38 samples, 14.90%)</title><rect x="477.4" y="1091.0" width="175.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.4" y="1102.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>java/lang/Thread.sleep (38 samples, 14.90%)</title><rect x="477.4" y="1075.0" width="175.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.4" y="1086.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.39%)</title><rect x="500.5" y="1059.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="503.5" y="1070.0"></text>
</g>
<g>
<title>JVM_Sleep (32 samples, 12.55%)</title><rect x="505.1" y="1059.0" width="148.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="508.1" y="1070.0">JVM_Sleep</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.39%)</title><rect x="528.3" y="1043.0" width="4.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="531.3" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="528.3" y="1027.0" width="4.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="531.3" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.39%)</title><rect x="532.9" y="1043.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="535.9" y="1054.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (25 samples, 9.80%)</title><rect x="537.5" y="1043.0" width="115.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="540.5" y="1054.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.78%)</title><rect x="551.4" y="1027.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="554.4" y="1038.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.39%)</title><rect x="556.0" y="1011.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="559.0" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.96%)</title><rect x="560.7" y="1027.0" width="23.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="563.7" y="1038.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 4.31%)</title><rect x="583.8" y="1027.0" width="50.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="586.8" y="1038.0">__pth..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.39%)</title><rect x="634.7" y="1027.0" width="4.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="637.7" y="1038.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.78%)</title><rect x="639.3" y="1027.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="642.3" y="1038.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.39%)</title><rect x="648.6" y="1027.0" width="4.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="651.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.78%)</title><rect x="653.2" y="1091.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.39%)</title><rect x="657.8" y="1075.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="660.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.39%)</title><rect x="657.8" y="1059.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="660.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.78%)</title><rect x="662.5" y="1139.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="665.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 1.18%)</title><rect x="671.7" y="1139.0" width="13.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="674.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.18%)</title><rect x="685.6" y="1171.0" width="13.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="688.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.18%)</title><rect x="685.6" y="1155.0" width="13.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.6" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.78%)</title><rect x="690.2" y="1139.0" width="9.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="693.2" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.78%)</title><rect x="690.2" y="1123.0" width="9.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="693.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.18%)</title><rect x="699.5" y="1187.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.18%)</title><rect x="699.5" y="1171.0" width="13.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="702.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.39%)</title><rect x="708.7" y="1155.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="711.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$265/1309091393.accept (1 samples, 0.39%)</title><rect x="708.7" y="1139.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.39%)</title><rect x="708.7" y="1123.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="711.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.39%)</title><rect x="708.7" y="1107.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="711.7" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.39%)</title><rect x="708.7" y="1091.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="711.7" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.39%)</title><rect x="708.7" y="1075.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="711.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.78%)</title><rect x="713.4" y="1251.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="716.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.78%)</title><rect x="713.4" y="1235.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.78%)</title><rect x="713.4" y="1219.0" width="9.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="716.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.78%)</title><rect x="713.4" y="1203.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="716.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.35%)</title><rect x="722.6" y="1251.0" width="27.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="725.6" y="1262.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.18%)</title><rect x="722.6" y="1235.0" width="13.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="725.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.78%)</title><rect x="727.3" y="1219.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.78%)</title><rect x="727.3" y="1203.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.78%)</title><rect x="727.3" y="1187.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.78%)</title><rect x="727.3" y="1171.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.78%)</title><rect x="727.3" y="1155.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="730.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.39%)</title><rect x="736.5" y="1235.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.78%)</title><rect x="741.1" y="1235.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="744.1" y="1246.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.39%)</title><rect x="750.4" y="1299.0" width="4.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="753.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.39%)</title><rect x="755.0" y="1299.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.39%)</title><rect x="755.0" y="1283.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="758.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.39%)</title><rect x="755.0" y="1267.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.39%)</title><rect x="755.0" y="1251.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="758.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.39%)</title><rect x="755.0" y="1235.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="758.0" y="1246.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.39%)</title><rect x="755.0" y="1219.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$83/249106423.get (1 samples, 0.39%)</title><rect x="755.0" y="1203.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="758.0" y="1214.0"></text>
</g>
<g>
<title>start_thread (93 samples, 36.47%)</title><rect x="759.6" y="1299.0" width="430.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="762.6" y="1310.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (93 samples, 36.47%)</title><rect x="759.6" y="1283.0" width="430.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="762.6" y="1294.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 3.14%)</title><rect x="759.6" y="1267.0" width="37.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="762.6" y="1278.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 3.14%)</title><rect x="759.6" y="1251.0" width="37.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="762.6" y="1262.0">G1P..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.39%)</title><rect x="759.6" y="1235.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="762.6" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.39%)</title><rect x="759.6" y="1219.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="762.6" y="1230.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.39%)</title><rect x="759.6" y="1203.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="762.6" y="1214.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.39%)</title><rect x="759.6" y="1187.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="762.6" y="1198.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.39%)</title><rect x="759.6" y="1171.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="762.6" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 2.75%)</title><rect x="764.3" y="1235.0" width="32.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="767.3" y="1246.0">G1..</text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 2.75%)</title><rect x="764.3" y="1219.0" width="32.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="767.3" y="1230.0">G1..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 2.75%)</title><rect x="764.3" y="1203.0" width="32.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="767.3" y="1214.0">G1..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 2.75%)</title><rect x="764.3" y="1187.0" width="32.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="767.3" y="1198.0">Di..</text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 2.75%)</title><rect x="764.3" y="1171.0" width="32.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="767.3" y="1182.0">Re..</text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 2.75%)</title><rect x="764.3" y="1155.0" width="32.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="767.3" y="1166.0">G1..</text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 2.35%)</title><rect x="768.9" y="1139.0" width="27.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="771.9" y="1150.0">H..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.39%)</title><rect x="768.9" y="1123.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="771.9" y="1134.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.39%)</title><rect x="768.9" y="1107.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="771.9" y="1118.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.39%)</title><rect x="773.5" y="1123.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.5" y="1134.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.39%)</title><rect x="778.2" y="1123.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="781.2" y="1134.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.39%)</title><rect x="778.2" y="1107.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="781.2" y="1118.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (3 samples, 1.18%)</title><rect x="782.8" y="1123.0" width="13.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="785.8" y="1134.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (2 samples, 0.78%)</title><rect x="787.4" y="1107.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="790.4" y="1118.0"></text>
</g>
<g>
<title>JavaThread::run() (85 samples, 33.33%)</title><rect x="796.7" y="1267.0" width="393.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.7" y="1278.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (85 samples, 33.33%)</title><rect x="796.7" y="1251.0" width="393.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="799.7" y="1262.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (85 samples, 33.33%)</title><rect x="796.7" y="1235.0" width="393.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="799.7" y="1246.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (85 samples, 33.33%)</title><rect x="796.7" y="1219.0" width="393.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="799.7" y="1230.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (82 samples, 32.16%)</title><rect x="796.7" y="1203.0" width="379.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="799.7" y="1214.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (82 samples, 32.16%)</title><rect x="796.7" y="1187.0" width="379.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="799.7" y="1198.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int..</text>
</g>
<g>
<title>Compile::Code_Gen() (47 samples, 18.43%)</title><rect x="796.7" y="1171.0" width="217.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="799.7" y="1182.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.18%)</title><rect x="796.7" y="1155.0" width="13.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="799.7" y="1166.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.78%)</title><rect x="801.3" y="1139.0" width="9.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="804.3" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.39%)</title><rect x="801.3" y="1123.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="804.3" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.39%)</title><rect x="801.3" y="1107.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="804.3" y="1118.0"></text>
</g>
<g>
<title>MachCallNode::returns_pointer() const (1 samples, 0.39%)</title><rect x="805.9" y="1123.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="808.9" y="1134.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.18%)</title><rect x="810.5" y="1155.0" width="13.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="813.5" y="1166.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.18%)</title><rect x="810.5" y="1139.0" width="13.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="813.5" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.78%)</title><rect x="815.2" y="1123.0" width="9.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="818.2" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.39%)</title><rect x="819.8" y="1107.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="822.8" y="1118.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.39%)</title><rect x="824.4" y="1155.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="827.4" y="1166.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.39%)</title><rect x="824.4" y="1139.0" width="4.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="827.4" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.18%)</title><rect x="829.1" y="1155.0" width="13.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="832.1" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.18%)</title><rect x="829.1" y="1139.0" width="13.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="832.1" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.39%)</title><rect x="829.1" y="1123.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="832.1" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.39%)</title><rect x="833.7" y="1123.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="836.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.39%)</title><rect x="833.7" y="1107.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="836.7" y="1118.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.39%)</title><rect x="833.7" y="1091.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="836.7" y="1102.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.39%)</title><rect x="833.7" y="1075.0" width="4.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="836.7" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.39%)</title><rect x="838.3" y="1123.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="841.3" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.39%)</title><rect x="838.3" y="1107.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="841.3" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.39%)</title><rect x="842.9" y="1155.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="845.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (36 samples, 14.12%)</title><rect x="847.6" y="1155.0" width="166.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="850.6" y="1166.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.39%)</title><rect x="852.2" y="1139.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="855.2" y="1150.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.39%)</title><rect x="856.8" y="1139.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="859.8" y="1150.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.39%)</title><rect x="861.5" y="1139.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="864.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.39%)</title><rect x="866.1" y="1139.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="869.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.39%)</title><rect x="866.1" y="1123.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="869.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.78%)</title><rect x="870.7" y="1139.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="873.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.78%)</title><rect x="870.7" y="1123.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="873.7" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="875.3" y="1107.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="878.3" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.96%)</title><rect x="880.0" y="1139.0" width="23.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="883.0" y="1150.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.96%)</title><rect x="903.1" y="1139.0" width="23.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="906.1" y="1150.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.78%)</title><rect x="912.4" y="1123.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="915.4" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="917.0" y="1107.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="920.0" y="1118.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.39%)</title><rect x="921.6" y="1123.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="924.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.39%)</title><rect x="926.2" y="1139.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="929.2" y="1150.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.39%)</title><rect x="926.2" y="1123.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="929.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.18%)</title><rect x="930.9" y="1139.0" width="13.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="933.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.39%)</title><rect x="940.1" y="1123.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="943.1" y="1134.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (9 samples, 3.53%)</title><rect x="944.7" y="1139.0" width="41.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="947.7" y="1150.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (9 samples, 3.53%)</title><rect x="944.7" y="1123.0" width="41.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="947.7" y="1134.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 3.53%)</title><rect x="944.7" y="1107.0" width="41.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="947.7" y="1118.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.39%)</title><rect x="949.4" y="1091.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="952.4" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.57%)</title><rect x="954.0" y="1091.0" width="18.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="957.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (3 samples, 1.18%)</title><rect x="972.5" y="1091.0" width="13.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="975.5" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="981.8" y="1075.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="984.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.39%)</title><rect x="986.4" y="1139.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="989.4" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="986.4" y="1123.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="989.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.39%)</title><rect x="991.0" y="1139.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="994.0" y="1150.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.39%)</title><rect x="991.0" y="1123.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="994.0" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.57%)</title><rect x="995.6" y="1139.0" width="18.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.6" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.39%)</title><rect x="1009.5" y="1123.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1012.5" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 10.59%)</title><rect x="1014.2" y="1171.0" width="124.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.2" y="1182.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.39%)</title><rect x="1014.2" y="1155.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1017.2" y="1166.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.39%)</title><rect x="1014.2" y="1139.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1017.2" y="1150.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.39%)</title><rect x="1014.2" y="1123.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1017.2" y="1134.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.39%)</title><rect x="1018.8" y="1155.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1021.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.39%)</title><rect x="1023.4" y="1155.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1026.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.39%)</title><rect x="1023.4" y="1139.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1026.4" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.39%)</title><rect x="1028.0" y="1155.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1031.0" y="1166.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.39%)</title><rect x="1028.0" y="1139.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.0" y="1150.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.39%)</title><rect x="1028.0" y="1123.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.0" y="1134.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.39%)</title><rect x="1028.0" y="1107.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.0" y="1118.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.39%)</title><rect x="1028.0" y="1091.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.0" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.39%)</title><rect x="1028.0" y="1075.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1031.0" y="1086.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.39%)</title><rect x="1028.0" y="1059.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 7.84%)</title><rect x="1032.7" y="1155.0" width="92.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1035.7" y="1166.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.39%)</title><rect x="1032.7" y="1139.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.78%)</title><rect x="1037.3" y="1139.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 6.27%)</title><rect x="1046.5" y="1139.0" width="74.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1049.5" y="1150.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 5.88%)</title><rect x="1051.2" y="1123.0" width="69.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.2" y="1134.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.78%)</title><rect x="1051.2" y="1107.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1054.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 5.10%)</title><rect x="1060.4" y="1107.0" width="60.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.4" y="1118.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.39%)</title><rect x="1116.0" y="1091.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.39%)</title><rect x="1120.6" y="1139.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.39%)</title><rect x="1120.6" y="1123.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.39%)</title><rect x="1120.6" y="1107.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.18%)</title><rect x="1125.2" y="1155.0" width="13.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.18%)</title><rect x="1125.2" y="1139.0" width="13.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.2" y="1150.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.39%)</title><rect x="1125.2" y="1123.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.2" y="1134.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.39%)</title><rect x="1129.8" y="1123.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.8" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.39%)</title><rect x="1134.5" y="1123.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.39%)</title><rect x="1134.5" y="1107.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.39%)</title><rect x="1134.5" y="1091.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.5" y="1102.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.39%)</title><rect x="1134.5" y="1075.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.96%)</title><rect x="1139.1" y="1171.0" width="23.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.1" y="1182.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.96%)</title><rect x="1139.1" y="1155.0" width="23.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.1" y="1166.0">P..</text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.39%)</title><rect x="1139.1" y="1139.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.1" y="1150.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.39%)</title><rect x="1139.1" y="1123.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.1" y="1134.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.39%)</title><rect x="1139.1" y="1107.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.57%)</title><rect x="1143.7" y="1139.0" width="18.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.57%)</title><rect x="1143.7" y="1123.0" width="18.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.57%)</title><rect x="1143.7" y="1107.0" width="18.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.18%)</title><rect x="1143.7" y="1091.0" width="13.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.7" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.18%)</title><rect x="1143.7" y="1075.0" width="13.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.7" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.18%)</title><rect x="1143.7" y="1059.0" width="13.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.18%)</title><rect x="1143.7" y="1043.0" width="13.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.18%)</title><rect x="1143.7" y="1027.0" width="13.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.18%)</title><rect x="1143.7" y="1011.0" width="13.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.18%)</title><rect x="1143.7" y="995.0" width="13.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.7" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1143.7" y="979.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.7" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1143.7" y="963.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1143.7" y="947.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1143.7" y="931.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1143.7" y="915.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1143.7" y="899.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1143.7" y="883.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1143.7" y="867.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1143.7" y="851.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1143.7" y="835.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1143.7" y="819.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1143.7" y="803.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.7" y="814.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1143.7" y="787.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.7" y="798.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.39%)</title><rect x="1143.7" y="771.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.7" y="782.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.39%)</title><rect x="1143.7" y="755.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.7" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1143.7" y="739.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.7" y="750.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.39%)</title><rect x="1143.7" y="723.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.7" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.78%)</title><rect x="1148.4" y="979.0" width="9.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.4" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.78%)</title><rect x="1148.4" y="963.0" width="9.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.4" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.78%)</title><rect x="1148.4" y="947.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.78%)</title><rect x="1148.4" y="931.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.78%)</title><rect x="1148.4" y="915.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.78%)</title><rect x="1148.4" y="899.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.78%)</title><rect x="1148.4" y="883.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.4" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.78%)</title><rect x="1148.4" y="867.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.4" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.78%)</title><rect x="1148.4" y="851.0" width="9.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.78%)</title><rect x="1148.4" y="835.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.78%)</title><rect x="1148.4" y="819.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.78%)</title><rect x="1148.4" y="803.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.78%)</title><rect x="1148.4" y="787.0" width="9.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.78%)</title><rect x="1148.4" y="771.0" width="9.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.78%)</title><rect x="1148.4" y="755.0" width="9.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.78%)</title><rect x="1148.4" y="739.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.78%)</title><rect x="1148.4" y="723.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.78%)</title><rect x="1148.4" y="707.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.78%)</title><rect x="1148.4" y="691.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.78%)</title><rect x="1148.4" y="675.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.78%)</title><rect x="1148.4" y="659.0" width="9.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.78%)</title><rect x="1148.4" y="643.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.78%)</title><rect x="1148.4" y="627.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.78%)</title><rect x="1148.4" y="611.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.78%)</title><rect x="1148.4" y="595.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.78%)</title><rect x="1148.4" y="579.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.78%)</title><rect x="1148.4" y="563.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.78%)</title><rect x="1148.4" y="547.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.78%)</title><rect x="1148.4" y="531.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.78%)</title><rect x="1148.4" y="515.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.78%)</title><rect x="1148.4" y="499.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.78%)</title><rect x="1148.4" y="483.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.78%)</title><rect x="1148.4" y="467.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.78%)</title><rect x="1148.4" y="451.0" width="9.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.78%)</title><rect x="1148.4" y="435.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.78%)</title><rect x="1148.4" y="419.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.78%)</title><rect x="1148.4" y="403.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1148.4" y="387.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1148.4" y="371.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1148.4" y="355.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1148.4" y="339.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1148.4" y="323.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1148.4" y="307.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.4" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1148.4" y="291.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.4" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1148.4" y="275.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1148.4" y="259.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1148.4" y="243.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1148.4" y="227.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1148.4" y="211.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.4" y="222.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.39%)</title><rect x="1148.4" y="195.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.4" y="206.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.39%)</title><rect x="1148.4" y="179.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.4" y="190.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.39%)</title><rect x="1148.4" y="163.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.4" y="174.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.39%)</title><rect x="1148.4" y="147.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.4" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1153.0" y="387.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1153.0" y="371.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1153.0" y="355.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1153.0" y="339.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1153.0" y="323.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1153.0" y="307.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1153.0" y="291.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1153.0" y="275.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1153.0" y="259.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1153.0" y="243.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1153.0" y="227.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1153.0" y="211.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1153.0" y="195.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1153.0" y="179.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1153.0" y="163.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1153.0" y="147.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1153.0" y="131.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1153.0" y="115.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.39%)</title><rect x="1153.0" y="99.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.0" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1153.0" y="83.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.0" y="94.0"></text>
</g>
<g>
<title>BoolNode::Value(PhaseTransform*) const (1 samples, 0.39%)</title><rect x="1153.0" y="67.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.0" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.39%)</title><rect x="1153.0" y="51.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.0" y="62.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.39%)</title><rect x="1153.0" y="35.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.39%)</title><rect x="1157.6" y="1091.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.6" y="1102.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.39%)</title><rect x="1157.6" y="1075.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.6" y="1086.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1157.6" y="1059.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.6" y="1070.0"></text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.39%)</title><rect x="1157.6" y="1043.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.6" y="1054.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1162.2" y="1171.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.2" y="1182.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.39%)</title><rect x="1162.2" y="1155.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.2" y="1166.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.39%)</title><rect x="1166.9" y="1171.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.9" y="1182.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.39%)</title><rect x="1166.9" y="1155.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.9" y="1166.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.39%)</title><rect x="1171.5" y="1171.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.5" y="1182.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.39%)</title><rect x="1171.5" y="1155.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.5" y="1166.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.39%)</title><rect x="1171.5" y="1139.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.5" y="1150.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.39%)</title><rect x="1171.5" y="1123.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.5" y="1134.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.39%)</title><rect x="1171.5" y="1107.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.5" y="1118.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.39%)</title><rect x="1171.5" y="1091.0" width="4.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1174.5" y="1102.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.18%)</title><rect x="1176.1" y="1203.0" width="13.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="1214.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.18%)</title><rect x="1176.1" y="1187.0" width="13.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.18%)</title><rect x="1176.1" y="1171.0" width="13.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.1" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.78%)</title><rect x="1176.1" y="1155.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.1" y="1166.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.39%)</title><rect x="1176.1" y="1139.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="1150.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (1 samples, 0.39%)</title><rect x="1176.1" y="1123.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.1" y="1134.0"></text>
</g>
<g>
<title>BlockList::iterate_backward(BlockClosure*) (1 samples, 0.39%)</title><rect x="1176.1" y="1107.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="1118.0"></text>
</g>
<g>
<title>UseCountComputer::block_do(BlockBegin*) (1 samples, 0.39%)</title><rect x="1176.1" y="1091.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="1102.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.39%)</title><rect x="1176.1" y="1075.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="1086.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.39%)</title><rect x="1180.7" y="1139.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="1150.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.39%)</title><rect x="1180.7" y="1123.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="1134.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.39%)</title><rect x="1180.7" y="1107.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.7" y="1118.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.39%)</title><rect x="1180.7" y="1091.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1102.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.39%)</title><rect x="1180.7" y="1075.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.7" y="1086.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.39%)</title><rect x="1180.7" y="1059.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="1070.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.39%)</title><rect x="1185.4" y="1155.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.4" y="1166.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.39%)</title><rect x="1185.4" y="1139.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="1150.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.39%)</title><rect x="1185.4" y="1123.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.4" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.39%)</title><rect x="1185.4" y="1107.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="1118.0"></text>
</g>
</g>
</svg>
