<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (993 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (279 samples, 28.10%)</title><rect x="10.0" y="787.0" width="331.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="798.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (278 samples, 28.00%)</title><rect x="11.2" y="771.0" width="330.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="782.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.50%)</title><rect x="11.2" y="755.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.50%)</title><rect x="11.2" y="739.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="11.2" y="723.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.2" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="11.2" y="707.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="14.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/890854712.accept (4 samples, 0.40%)</title><rect x="12.4" y="723.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.40%)</title><rect x="12.4" y="707.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.40%)</title><rect x="12.4" y="691.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.4" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.30%)</title><rect x="13.6" y="675.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.30%)</title><rect x="17.1" y="755.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.30%)</title><rect x="17.1" y="739.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.30%)</title><rect x="17.1" y="723.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="17.1" y="707.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="18.3" y="691.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="18.3" y="675.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="18.3" y="659.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.3" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="18.3" y="643.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="21.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="19.5" y="643.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (225 samples, 22.66%)</title><rect x="20.7" y="755.0" width="267.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.7" y="766.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/13179718.accept (216 samples, 21.75%)</title><rect x="20.7" y="739.0" width="256.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.7" y="750.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$41 (216 samples, 21.75%)</title><rect x="20.7" y="723.0" width="256.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.7" y="734.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.20%)</title><rect x="26.6" y="707.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (168 samples, 16.92%)</title><rect x="29.0" y="707.0" width="199.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.0" y="718.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (168 samples, 16.92%)</title><rect x="29.0" y="691.0" width="199.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.0" y="702.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (168 samples, 16.92%)</title><rect x="29.0" y="675.0" width="199.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.0" y="686.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (168 samples, 16.92%)</title><rect x="29.0" y="659.0" width="199.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.0" y="670.0">java/util/concurrent/Execu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (168 samples, 16.92%)</title><rect x="29.0" y="643.0" width="199.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.0" y="654.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (168 samples, 16.92%)</title><rect x="29.0" y="627.0" width="199.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.0" y="638.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (126 samples, 12.69%)</title><rect x="29.0" y="611.0" width="149.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.0" y="622.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 2.72%)</title><rect x="29.0" y="595.0" width="32.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.0" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 2.72%)</title><rect x="29.0" y="579.0" width="32.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.0" y="590.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (20 samples, 2.01%)</title><rect x="37.3" y="563.0" width="23.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.3" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (20 samples, 2.01%)</title><rect x="37.3" y="547.0" width="23.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.3" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 1.31%)</title><rect x="61.1" y="595.0" width="15.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (13 samples, 1.31%)</title><rect x="61.1" y="579.0" width="15.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="64.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.50%)</title><rect x="64.7" y="563.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.7" y="574.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (5 samples, 0.50%)</title><rect x="64.7" y="547.0" width="5.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="67.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.50%)</title><rect x="70.6" y="563.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="73.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (86 samples, 8.66%)</title><rect x="76.5" y="595.0" width="102.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.5" y="606.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (86 samples, 8.66%)</title><rect x="76.5" y="579.0" width="102.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.5" y="590.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (86 samples, 8.66%)</title><rect x="76.5" y="563.0" width="102.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.5" y="574.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (85 samples, 8.56%)</title><rect x="77.7" y="547.0" width="101.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.7" y="558.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (85 samples, 8.56%)</title><rect x="77.7" y="531.0" width="101.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.7" y="542.0">sun/misc/Uns..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="80.1" y="515.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="83.1" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark (74 samples, 7.45%)</title><rect x="81.3" y="515.0" width="87.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="84.3" y="526.0">Unsafe_Unp..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.30%)</title><rect x="81.3" y="499.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="84.3" y="510.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.20%)</title><rect x="84.9" y="499.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="87.9" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 4.53%)</title><rect x="87.2" y="499.0" width="53.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="90.2" y="510.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.30%)</title><rect x="140.7" y="499.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="143.7" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_lock (21 samples, 2.11%)</title><rect x="144.3" y="499.0" width="24.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="147.3" y="510.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.50%)</title><rect x="169.2" y="515.0" width="6.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="172.2" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.30%)</title><rect x="175.2" y="515.0" width="3.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="178.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (35 samples, 3.52%)</title><rect x="178.7" y="611.0" width="41.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.7" y="622.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (35 samples, 3.52%)</title><rect x="178.7" y="595.0" width="41.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.7" y="606.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (35 samples, 3.52%)</title><rect x="178.7" y="579.0" width="41.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.7" y="590.0">jav..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="219.1" y="563.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="222.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.20%)</title><rect x="220.3" y="611.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.20%)</title><rect x="220.3" y="595.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.20%)</title><rect x="220.3" y="579.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="221.5" y="563.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.50%)</title><rect x="222.7" y="611.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.50%)</title><rect x="222.7" y="595.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.20%)</title><rect x="222.7" y="579.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.30%)</title><rect x="225.1" y="579.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.20%)</title><rect x="225.1" y="563.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.10%)</title><rect x="227.5" y="563.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.40%)</title><rect x="228.7" y="707.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="231.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.40%)</title><rect x="228.7" y="691.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.30%)</title><rect x="233.4" y="707.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.30%)</title><rect x="233.4" y="691.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.30%)</title><rect x="233.4" y="675.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (32 samples, 3.22%)</title><rect x="237.0" y="707.0" width="38.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.0" y="718.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (32 samples, 3.22%)</title><rect x="237.0" y="691.0" width="38.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.0" y="702.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 1.01%)</title><rect x="260.7" y="675.0" width="11.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.7" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.20%)</title><rect x="263.1" y="659.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.1" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.20%)</title><rect x="263.1" y="643.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.1" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.20%)</title><rect x="263.1" y="627.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.1" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="263.1" y="611.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="266.1" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.20%)</title><rect x="263.1" y="595.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="266.1" y="606.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.10%)</title><rect x="263.1" y="579.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="266.1" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="264.3" y="579.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="267.3" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.20%)</title><rect x="265.5" y="659.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.5" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.40%)</title><rect x="267.9" y="659.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.9" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="272.6" y="675.0" width="2.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="275.6" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="275.0" y="707.0" width="2.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="278.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.10%)</title><rect x="277.4" y="739.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="277.4" y="723.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.10%)</title><rect x="278.6" y="739.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.10%)</title><rect x="278.6" y="723.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.70%)</title><rect x="279.7" y="739.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.70%)</title><rect x="279.7" y="723.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.70%)</title><rect x="279.7" y="707.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.70%)</title><rect x="279.7" y="691.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.10%)</title><rect x="286.9" y="675.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.9" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="286.9" y="659.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="289.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (45 samples, 4.53%)</title><rect x="288.1" y="755.0" width="53.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.1" y="766.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (45 samples, 4.53%)</title><rect x="288.1" y="739.0" width="53.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.1" y="750.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.10%)</title><rect x="288.1" y="723.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (27 samples, 2.72%)</title><rect x="289.3" y="723.0" width="32.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.3" y="734.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.10%)</title><rect x="290.4" y="707.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.4" y="718.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.10%)</title><rect x="290.4" y="691.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="293.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (25 samples, 2.52%)</title><rect x="291.6" y="707.0" width="29.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.6" y="718.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (25 samples, 2.52%)</title><rect x="291.6" y="691.0" width="29.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.6" y="702.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (22 samples, 2.22%)</title><rect x="291.6" y="675.0" width="26.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.6" y="686.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (22 samples, 2.22%)</title><rect x="291.6" y="659.0" width="26.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.6" y="670.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.21%)</title><rect x="294.0" y="643.0" width="14.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="297.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.30%)</title><rect x="302.3" y="627.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="305.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.30%)</title><rect x="302.3" y="611.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="305.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.30%)</title><rect x="302.3" y="595.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="305.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.30%)</title><rect x="302.3" y="579.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="305.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.30%)</title><rect x="302.3" y="563.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.30%)</title><rect x="302.3" y="547.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.30%)</title><rect x="302.3" y="531.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (2 samples, 0.20%)</title><rect x="305.9" y="627.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.10%)</title><rect x="307.1" y="611.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.10%)</title><rect x="307.1" y="595.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (8 samples, 0.81%)</title><rect x="308.3" y="643.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.10%)</title><rect x="308.3" y="627.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.70%)</title><rect x="309.5" y="627.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (7 samples, 0.70%)</title><rect x="309.5" y="611.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.5" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.70%)</title><rect x="309.5" y="595.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.5" y="606.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (4 samples, 0.40%)</title><rect x="313.0" y="579.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (4 samples, 0.40%)</title><rect x="313.0" y="563.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="316.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (4 samples, 0.40%)</title><rect x="313.0" y="547.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="316.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.40%)</title><rect x="313.0" y="531.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.10%)</title><rect x="317.8" y="675.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="320.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.10%)</title><rect x="317.8" y="659.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="317.8" y="643.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="320.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="317.8" y="627.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="320.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="317.8" y="611.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="317.8" y="595.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.20%)</title><rect x="319.0" y="675.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="322.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.20%)</title><rect x="319.0" y="659.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="319.0" y="643.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="322.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="319.0" y="627.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="322.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="319.0" y="611.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="322.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="319.0" y="595.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.10%)</title><rect x="319.0" y="579.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="322.0" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="320.2" y="611.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="323.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.91%)</title><rect x="321.3" y="723.0" width="10.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="324.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.81%)</title><rect x="321.3" y="707.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.50%)</title><rect x="321.3" y="691.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="324.3" y="702.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.20%)</title><rect x="322.5" y="675.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="325.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.20%)</title><rect x="322.5" y="659.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.10%)</title><rect x="324.9" y="675.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="327.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.10%)</title><rect x="324.9" y="659.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="324.9" y="643.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="324.9" y="627.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.9" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="324.9" y="611.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.9" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="324.9" y="595.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="324.9" y="579.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.9" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="324.9" y="563.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$220/1344597119.get (1 samples, 0.10%)</title><rect x="324.9" y="547.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.10%)</title><rect x="326.1" y="675.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="326.1" y="659.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="326.1" y="643.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="329.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="326.1" y="627.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="329.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="326.1" y="611.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="329.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="326.1" y="595.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="326.1" y="579.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.1" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="326.1" y="563.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="329.1" y="574.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.10%)</title><rect x="326.1" y="547.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.1" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="326.1" y="531.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="329.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/1813179736.apply (1 samples, 0.10%)</title><rect x="326.1" y="515.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="329.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.30%)</title><rect x="327.3" y="691.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.30%)</title><rect x="327.3" y="675.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="330.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="327.3" y="659.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.30%)</title><rect x="327.3" y="643.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="330.3" y="654.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.30%)</title><rect x="327.3" y="627.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="327.3" y="611.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="327.3" y="595.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="330.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.10%)</title><rect x="327.3" y="579.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.10%)</title><rect x="327.3" y="563.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.3" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.10%)</title><rect x="327.3" y="547.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="327.3" y="531.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.10%)</title><rect x="327.3" y="515.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="330.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$223/732843956.test (1 samples, 0.10%)</title><rect x="327.3" y="499.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$hasAllFetchPositions$4 (1 samples, 0.10%)</title><rect x="327.3" y="483.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2400 (1 samples, 0.10%)</title><rect x="327.3" y="467.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.10%)</title><rect x="327.3" y="451.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="330.3" y="462.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/2131952342.get (2 samples, 0.20%)</title><rect x="328.5" y="611.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.5" y="622.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.lambda$makeRef$237 (1 samples, 0.10%)</title><rect x="329.7" y="595.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.&lt;init&gt; (1 samples, 0.10%)</title><rect x="329.7" y="579.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$BooleanTerminalSink.&lt;init&gt; (1 samples, 0.10%)</title><rect x="329.7" y="563.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="332.7" y="574.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.10%)</title><rect x="329.7" y="547.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="332.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="330.8" y="707.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.10%)</title><rect x="330.8" y="691.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="333.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.10%)</title><rect x="330.8" y="675.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.30%)</title><rect x="332.0" y="723.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="335.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.30%)</title><rect x="332.0" y="707.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.10%)</title><rect x="332.0" y="691.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.10%)</title><rect x="332.0" y="675.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="335.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.10%)</title><rect x="332.0" y="659.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="335.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="332.0" y="643.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.10%)</title><rect x="332.0" y="627.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="332.0" y="611.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="332.0" y="595.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.10%)</title><rect x="332.0" y="579.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="332.0" y="563.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="335.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="332.0" y="547.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.0" y="558.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="332.0" y="531.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.20%)</title><rect x="333.2" y="691.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="336.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.10%)</title><rect x="333.2" y="675.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.10%)</title><rect x="333.2" y="659.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="336.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="333.2" y="643.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.10%)</title><rect x="333.2" y="627.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="334.4" y="675.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.4" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="334.4" y="659.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.4" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.10%)</title><rect x="334.4" y="643.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="337.4" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.10%)</title><rect x="334.4" y="627.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.4" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.10%)</title><rect x="334.4" y="611.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.10%)</title><rect x="334.4" y="595.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.4" y="606.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.10%)</title><rect x="334.4" y="579.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="337.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.40%)</title><rect x="335.6" y="723.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.40%)</title><rect x="335.6" y="707.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="335.6" y="691.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="338.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1379280123.accept (1 samples, 0.10%)</title><rect x="335.6" y="675.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="338.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.10%)</title><rect x="335.6" y="659.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="335.6" y="643.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="338.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="336.8" y="691.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="336.8" y="675.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="339.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="336.8" y="659.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="338.0" y="691.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="339.2" y="691.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="342.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.10%)</title><rect x="340.4" y="723.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="343.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="340.4" y="707.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="343.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (658 samples, 66.26%)</title><rect x="341.5" y="787.0" width="782.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="344.5" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (658 samples, 66.26%)</title><rect x="341.5" y="771.0" width="782.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.5" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (657 samples, 66.16%)</title><rect x="341.5" y="755.0" width="780.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="344.5" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1142478461.run (452 samples, 45.52%)</title><rect x="368.9" y="739.0" width="537.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.9" y="750.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/114247846..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$39 (452 samples, 45.52%)</title><rect x="368.9" y="723.0" width="537.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="371.9" y="734.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$39</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (452 samples, 45.52%)</title><rect x="368.9" y="707.0" width="537.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.9" y="718.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (447 samples, 45.02%)</title><rect x="368.9" y="691.0" width="531.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.9" y="702.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.10%)</title><rect x="377.2" y="675.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (149 samples, 15.01%)</title><rect x="378.4" y="675.0" width="177.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="381.4" y="686.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (149 samples, 15.01%)</title><rect x="378.4" y="659.0" width="177.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.4" y="670.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (149 samples, 15.01%)</title><rect x="378.4" y="643.0" width="177.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="381.4" y="654.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="378.4" y="627.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="381.4" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="378.4" y="611.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="381.4" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="378.4" y="595.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="381.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (148 samples, 14.90%)</title><rect x="379.6" y="627.0" width="175.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.6" y="638.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (148 samples, 14.90%)</title><rect x="379.6" y="611.0" width="175.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.6" y="622.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (148 samples, 14.90%)</title><rect x="379.6" y="595.0" width="175.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.6" y="606.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (42 samples, 4.23%)</title><rect x="379.6" y="579.0" width="49.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="382.6" y="590.0">com/f..</text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="399.8" y="563.0" width="3.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="402.8" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.81%)</title><rect x="403.3" y="563.0" width="9.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="406.3" y="574.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.70%)</title><rect x="404.5" y="547.0" width="8.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="407.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.40%)</title><rect x="412.8" y="563.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.30%)</title><rect x="414.0" y="547.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.30%)</title><rect x="414.0" y="531.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.0" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.30%)</title><rect x="414.0" y="515.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="417.0" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.30%)</title><rect x="414.0" y="499.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.0" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.30%)</title><rect x="414.0" y="483.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (10 samples, 1.01%)</title><rect x="417.6" y="563.0" width="11.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.20%)</title><rect x="427.1" y="547.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="430.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.20%)</title><rect x="427.1" y="531.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="430.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.20%)</title><rect x="427.1" y="515.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.20%)</title><rect x="427.1" y="499.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="430.1" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="427.1" y="483.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="430.1" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="427.1" y="467.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="430.1" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.20%)</title><rect x="427.1" y="451.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="430.1" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.20%)</title><rect x="427.1" y="435.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="430.1" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="427.1" y="419.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="430.1" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="427.1" y="403.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="430.1" y="414.0"></text>
</g>
<g>
<title>Thread::is_VM_thread() const (1 samples, 0.10%)</title><rect x="427.1" y="387.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="430.1" y="398.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="428.3" y="419.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="431.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (95 samples, 9.57%)</title><rect x="429.5" y="579.0" width="112.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.5" y="590.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.20%)</title><rect x="433.0" y="563.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="436.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.10%)</title><rect x="435.4" y="563.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.30%)</title><rect x="436.6" y="563.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="439.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.30%)</title><rect x="436.6" y="547.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="439.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 1.21%)</title><rect x="440.2" y="563.0" width="14.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.11%)</title><rect x="441.4" y="547.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="444.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.91%)</title><rect x="442.5" y="531.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="445.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.70%)</title><rect x="444.9" y="515.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (5 samples, 0.50%)</title><rect x="447.3" y="499.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="450.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="453.2" y="531.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="456.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.50%)</title><rect x="454.4" y="563.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="457.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.50%)</title><rect x="454.4" y="547.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="457.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (64 samples, 6.45%)</title><rect x="460.4" y="563.0" width="76.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="463.4" y="574.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 2.11%)</title><rect x="461.6" y="547.0" width="24.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.6" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.60%)</title><rect x="468.7" y="531.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.60%)</title><rect x="468.7" y="515.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="471.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.60%)</title><rect x="468.7" y="499.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="471.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="475.8" y="531.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="478.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="475.8" y="515.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="478.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (8 samples, 0.81%)</title><rect x="477.0" y="531.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.30%)</title><rect x="486.5" y="547.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="489.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (39 samples, 3.93%)</title><rect x="490.1" y="547.0" width="46.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="493.1" y="558.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (39 samples, 3.93%)</title><rect x="490.1" y="531.0" width="46.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="493.1" y="542.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (39 samples, 3.93%)</title><rect x="490.1" y="515.0" width="46.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="493.1" y="526.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.31%)</title><rect x="492.5" y="499.0" width="15.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="495.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.60%)</title><rect x="499.6" y="483.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="502.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.60%)</title><rect x="499.6" y="467.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="502.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.60%)</title><rect x="499.6" y="451.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="502.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.40%)</title><rect x="502.0" y="435.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="505.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="506.7" y="483.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="509.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="506.7" y="467.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="509.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.60%)</title><rect x="507.9" y="499.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="510.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.30%)</title><rect x="511.5" y="483.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="514.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.30%)</title><rect x="511.5" y="467.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="514.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.30%)</title><rect x="511.5" y="451.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="514.5" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.30%)</title><rect x="511.5" y="435.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.10%)</title><rect x="515.0" y="499.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="518.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.81%)</title><rect x="516.2" y="499.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="519.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.81%)</title><rect x="516.2" y="483.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="519.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.81%)</title><rect x="516.2" y="467.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.81%)</title><rect x="516.2" y="451.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.2" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.81%)</title><rect x="516.2" y="435.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="519.2" y="446.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.60%)</title><rect x="518.6" y="419.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="521.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="523.4" y="403.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="526.4" y="414.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (1 samples, 0.10%)</title><rect x="524.5" y="403.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="527.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.40%)</title><rect x="525.7" y="499.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="528.7" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.40%)</title><rect x="525.7" y="483.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="528.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.40%)</title><rect x="525.7" y="467.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="529.3" y="451.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="532.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.50%)</title><rect x="530.5" y="499.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="535.2" y="483.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="538.2" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="535.2" y="467.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="538.2" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="535.2" y="451.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="538.2" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="535.2" y="435.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="538.2" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="535.2" y="419.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="538.2" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="535.2" y="403.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="538.2" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="535.2" y="387.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="538.2" y="398.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="535.2" y="371.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="538.2" y="382.0"></text>
</g>
<g>
<title>G1CollectorPolicy::is_young_list_full() (1 samples, 0.10%)</title><rect x="535.2" y="355.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="538.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.50%)</title><rect x="536.4" y="563.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="539.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 1.11%)</title><rect x="542.4" y="579.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="545.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.10%)</title><rect x="542.4" y="563.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="545.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 1.01%)</title><rect x="543.6" y="563.0" width="11.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="546.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 1.01%)</title><rect x="543.6" y="547.0" width="11.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 1.01%)</title><rect x="543.6" y="531.0" width="11.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="546.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 1.01%)</title><rect x="543.6" y="515.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="546.6" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (260 samples, 26.18%)</title><rect x="555.4" y="675.0" width="309.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="558.4" y="686.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (50 samples, 5.04%)</title><rect x="555.4" y="659.0" width="59.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="558.4" y="670.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.10%)</title><rect x="555.4" y="643.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="558.4" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (49 samples, 4.93%)</title><rect x="556.6" y="643.0" width="58.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="559.6" y="654.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (47 samples, 4.73%)</title><rect x="559.0" y="627.0" width="55.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="562.0" y="638.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.40%)</title><rect x="561.4" y="611.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="564.4" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.40%)</title><rect x="561.4" y="595.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="564.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.40%)</title><rect x="561.4" y="579.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="564.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.40%)</title><rect x="561.4" y="563.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="564.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.20%)</title><rect x="563.8" y="547.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="566.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.20%)</title><rect x="563.8" y="531.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="566.8" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (41 samples, 4.13%)</title><rect x="566.1" y="611.0" width="48.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="569.1" y="622.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (33 samples, 3.32%)</title><rect x="575.6" y="595.0" width="39.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="578.6" y="606.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.91%)</title><rect x="604.2" y="579.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="607.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.60%)</title><rect x="614.9" y="659.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="617.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.50%)</title><rect x="616.0" y="643.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="619.0" y="654.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.50%)</title><rect x="616.0" y="627.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="619.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (149 samples, 15.01%)</title><rect x="622.0" y="659.0" width="177.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="625.0" y="670.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (149 samples, 15.01%)</title><rect x="622.0" y="643.0" width="177.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="625.0" y="654.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="630.3" y="627.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="633.3" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.91%)</title><rect x="631.5" y="627.0" width="10.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="634.5" y="638.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.91%)</title><rect x="631.5" y="611.0" width="10.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="634.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (54 samples, 5.44%)</title><rect x="642.2" y="627.0" width="64.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="645.2" y="638.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (41 samples, 4.13%)</title><rect x="650.5" y="611.0" width="48.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.5" y="622.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (31 samples, 3.12%)</title><rect x="656.4" y="595.0" width="36.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="659.4" y="606.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (15 samples, 1.51%)</title><rect x="667.1" y="579.0" width="17.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="670.1" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (15 samples, 1.51%)</title><rect x="667.1" y="563.0" width="17.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="670.1" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 1.51%)</title><rect x="667.1" y="547.0" width="17.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="670.1" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (13 samples, 1.31%)</title><rect x="669.5" y="531.0" width="15.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="672.5" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="669.5" y="515.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="672.5" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="670.7" y="515.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="673.7" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="670.7" y="499.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="673.7" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (8 samples, 0.81%)</title><rect x="671.9" y="515.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="674.9" y="526.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.20%)</title><rect x="671.9" y="499.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="674.9" y="510.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="674.3" y="499.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="677.3" y="510.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="675.5" y="499.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="678.5" y="510.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.40%)</title><rect x="676.6" y="499.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="679.6" y="510.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.40%)</title><rect x="676.6" y="483.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="679.6" y="494.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (4 samples, 0.40%)</title><rect x="676.6" y="467.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="679.6" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.30%)</title><rect x="681.4" y="515.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="684.4" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.30%)</title><rect x="681.4" y="499.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="684.4" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="681.4" y="483.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="684.4" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="681.4" y="467.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="684.4" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.10%)</title><rect x="681.4" y="451.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="684.4" y="462.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="682.6" y="483.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="685.6" y="494.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="683.8" y="483.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="686.8" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="683.8" y="467.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="686.8" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="685.0" y="579.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="688.0" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.40%)</title><rect x="688.5" y="579.0" width="4.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="691.5" y="590.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="693.3" y="595.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="696.3" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.40%)</title><rect x="694.5" y="595.0" width="4.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="697.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.20%)</title><rect x="699.2" y="611.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="702.2" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="699.2" y="595.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="702.2" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="699.2" y="579.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="702.2" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="699.2" y="563.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="702.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="699.2" y="547.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="702.2" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="699.2" y="531.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="702.2" y="542.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.10%)</title><rect x="699.2" y="515.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="702.2" y="526.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="699.2" y="499.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="702.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.10%)</title><rect x="700.4" y="595.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="703.4" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.10%)</title><rect x="700.4" y="579.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="703.4" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="700.4" y="563.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="703.4" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="700.4" y="547.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="703.4" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="700.4" y="531.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="703.4" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.40%)</title><rect x="701.6" y="611.0" width="4.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="704.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.60%)</title><rect x="706.4" y="627.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="709.4" y="638.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.60%)</title><rect x="706.4" y="611.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="709.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.60%)</title><rect x="706.4" y="595.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="709.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.40%)</title><rect x="708.7" y="579.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="711.7" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (72 samples, 7.25%)</title><rect x="713.5" y="627.0" width="85.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.5" y="638.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (71 samples, 7.15%)</title><rect x="714.7" y="611.0" width="84.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="717.7" y="622.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.81%)</title><rect x="714.7" y="595.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.7" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.81%)</title><rect x="714.7" y="579.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="717.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.81%)</title><rect x="714.7" y="563.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.81%)</title><rect x="714.7" y="547.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="717.7" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.20%)</title><rect x="721.8" y="531.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="724.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.20%)</title><rect x="721.8" y="515.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.8" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (63 samples, 6.34%)</title><rect x="724.2" y="595.0" width="74.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="727.2" y="606.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (55 samples, 5.54%)</title><rect x="733.7" y="579.0" width="65.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="736.7" y="590.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 3.52%)</title><rect x="757.5" y="563.0" width="41.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="760.5" y="574.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.30%)</title><rect x="776.5" y="547.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (14 samples, 1.41%)</title><rect x="780.0" y="547.0" width="16.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="783.0" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.30%)</title><rect x="791.9" y="531.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="794.9" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.30%)</title><rect x="791.9" y="515.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="794.9" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.30%)</title><rect x="791.9" y="499.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="794.9" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.20%)</title><rect x="791.9" y="483.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.9" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="791.9" y="467.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="794.9" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="791.9" y="451.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="794.9" y="462.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="791.9" y="435.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="794.9" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="791.9" y="419.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="794.9" y="430.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="791.9" y="403.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="794.9" y="414.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.10%)</title><rect x="791.9" y="387.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="794.9" y="398.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="793.1" y="467.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="796.1" y="478.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.10%)</title><rect x="794.3" y="483.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="797.3" y="494.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.10%)</title><rect x="795.5" y="531.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="798.5" y="542.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.20%)</title><rect x="796.7" y="547.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="799.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (38 samples, 3.83%)</title><rect x="799.0" y="659.0" width="45.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="802.0" y="670.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (38 samples, 3.83%)</title><rect x="799.0" y="643.0" width="45.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.0" y="654.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1750831039.process (15 samples, 1.51%)</title><rect x="800.2" y="627.0" width="17.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="803.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (15 samples, 1.51%)</title><rect x="800.2" y="611.0" width="17.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="803.2" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (12 samples, 1.21%)</title><rect x="801.4" y="595.0" width="14.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="804.4" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.20%)</title><rect x="802.6" y="579.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="805.6" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.20%)</title><rect x="802.6" y="563.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="805.6" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="803.8" y="547.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="806.8" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="803.8" y="531.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="806.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.40%)</title><rect x="805.0" y="579.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="808.0" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.30%)</title><rect x="806.2" y="563.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="809.2" y="574.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="806.2" y="547.0" width="3.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="809.2" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.50%)</title><rect x="809.7" y="579.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="812.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.20%)</title><rect x="815.7" y="595.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="818.7" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.20%)</title><rect x="815.7" y="579.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="818.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.20%)</title><rect x="815.7" y="563.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="818.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.20%)</title><rect x="815.7" y="547.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="818.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.30%)</title><rect x="818.1" y="627.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="821.1" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.30%)</title><rect x="818.1" y="611.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="821.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.70%)</title><rect x="821.6" y="627.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="824.6" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.50%)</title><rect x="824.0" y="611.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="827.0" y="622.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.20%)</title><rect x="825.2" y="595.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="828.2" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.20%)</title><rect x="827.6" y="595.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="830.6" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (8 samples, 0.81%)</title><rect x="829.9" y="627.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="832.9" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (8 samples, 0.81%)</title><rect x="829.9" y="611.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="832.9" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.40%)</title><rect x="839.4" y="627.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="842.4" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.20%)</title><rect x="841.8" y="611.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.71%)</title><rect x="844.2" y="659.0" width="20.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="847.2" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.40%)</title><rect x="851.3" y="643.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="854.3" y="654.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.40%)</title><rect x="851.3" y="627.0" width="4.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="854.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.60%)</title><rect x="856.1" y="643.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="859.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.50%)</title><rect x="857.3" y="627.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="860.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1521296149.accept (4 samples, 0.40%)</title><rect x="857.3" y="611.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="860.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (4 samples, 0.40%)</title><rect x="857.3" y="595.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="860.3" y="606.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 0.40%)</title><rect x="857.3" y="579.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="860.3" y="590.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 0.40%)</title><rect x="857.3" y="563.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="860.3" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.20%)</title><rect x="859.6" y="547.0" width="2.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="862.6" y="558.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="859.6" y="531.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="862.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/243372130.accept (1 samples, 0.10%)</title><rect x="862.0" y="611.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="865.0" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.10%)</title><rect x="862.0" y="595.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="865.0" y="606.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="863.2" y="643.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="866.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.81%)</title><rect x="864.4" y="675.0" width="21.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="867.4" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.71%)</title><rect x="865.6" y="659.0" width="20.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="868.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.21%)</title><rect x="870.3" y="643.0" width="14.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="873.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1521296149.accept (2 samples, 0.20%)</title><rect x="870.3" y="627.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="873.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.20%)</title><rect x="870.3" y="611.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="873.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.20%)</title><rect x="870.3" y="595.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="873.3" y="606.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.20%)</title><rect x="870.3" y="579.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="873.3" y="590.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.20%)</title><rect x="870.3" y="563.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="873.3" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="870.3" y="547.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="873.3" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="870.3" y="531.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="873.3" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.20%)</title><rect x="870.3" y="515.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="873.3" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.20%)</title><rect x="870.3" y="499.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="873.3" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="870.3" y="483.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="873.3" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="870.3" y="467.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="873.3" y="478.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="870.3" y="451.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="873.3" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="870.3" y="435.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="873.3" y="446.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="870.3" y="419.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="873.3" y="430.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.10%)</title><rect x="870.3" y="403.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="873.3" y="414.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::used() const (1 samples, 0.10%)</title><rect x="870.3" y="387.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="873.3" y="398.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="871.5" y="483.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="874.5" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/243372130.accept (10 samples, 1.01%)</title><rect x="872.7" y="627.0" width="11.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="875.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (10 samples, 1.01%)</title><rect x="872.7" y="611.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="875.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/1629883820.complete (10 samples, 1.01%)</title><rect x="872.7" y="595.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="875.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (10 samples, 1.01%)</title><rect x="872.7" y="579.0" width="11.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="875.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (10 samples, 1.01%)</title><rect x="872.7" y="563.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="875.7" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 1.01%)</title><rect x="872.7" y="547.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="875.7" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 1.01%)</title><rect x="872.7" y="531.0" width="11.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="875.7" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (10 samples, 1.01%)</title><rect x="872.7" y="515.0" width="11.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="875.7" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (10 samples, 1.01%)</title><rect x="872.7" y="499.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="875.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.10%)</title><rect x="884.6" y="643.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="887.6" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 1.21%)</title><rect x="885.8" y="675.0" width="14.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="888.8" y="686.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 1.11%)</title><rect x="887.0" y="659.0" width="13.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="890.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.50%)</title><rect x="900.1" y="691.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="903.1" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.50%)</title><rect x="900.1" y="675.0" width="5.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="903.1" y="686.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.50%)</title><rect x="900.1" y="659.0" width="5.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="903.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.20%)</title><rect x="906.0" y="739.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="909.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="906.0" y="723.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="909.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.20%)</title><rect x="906.0" y="707.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="909.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.20%)</title><rect x="906.0" y="691.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="909.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (180 samples, 18.13%)</title><rect x="908.4" y="739.0" width="213.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.4" y="750.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (180 samples, 18.13%)</title><rect x="908.4" y="723.0" width="213.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="911.4" y="734.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (179 samples, 18.03%)</title><rect x="909.6" y="707.0" width="212.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="912.6" y="718.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (19 samples, 1.91%)</title><rect x="914.3" y="691.0" width="22.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="917.3" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 1.91%)</title><rect x="914.3" y="675.0" width="22.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="917.3" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 1.91%)</title><rect x="914.3" y="659.0" width="22.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="917.3" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 1.91%)</title><rect x="914.3" y="643.0" width="22.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="917.3" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (154 samples, 15.51%)</title><rect x="936.9" y="691.0" width="183.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="939.9" y="702.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (145 samples, 14.60%)</title><rect x="947.6" y="675.0" width="172.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="950.6" y="686.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="948.8" y="659.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="951.8" y="670.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="950.0" y="659.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="953.0" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.20%)</title><rect x="951.1" y="659.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.1" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park (134 samples, 13.49%)</title><rect x="953.5" y="659.0" width="159.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="956.5" y="670.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.40%)</title><rect x="957.1" y="643.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.1" y="654.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="961.8" y="643.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="964.8" y="654.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.72%)</title><rect x="963.0" y="643.0" width="32.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.0" y="654.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.50%)</title><rect x="973.7" y="627.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.7" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.20%)</title><rect x="974.9" y="611.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="977.9" y="622.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.20%)</title><rect x="974.9" y="595.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="977.9" y="606.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.20%)</title><rect x="977.3" y="611.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="980.3" y="622.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.20%)</title><rect x="979.7" y="627.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="982.7" y="638.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="982.0" y="627.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.0" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.91%)</title><rect x="983.2" y="627.0" width="10.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.2" y="638.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="993.9" y="627.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="996.9" y="638.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.20%)</title><rect x="995.1" y="643.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="998.1" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="997.5" y="643.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.5" y="654.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.40%)</title><rect x="998.7" y="643.0" width="4.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1001.7" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 3.02%)</title><rect x="1003.4" y="643.0" width="35.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1006.4" y="654.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 5.14%)</title><rect x="1039.1" y="643.0" width="60.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1042.1" y="654.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.40%)</title><rect x="1099.7" y="643.0" width="4.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1102.7" y="654.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1104.4" y="643.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1107.4" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="1105.6" y="643.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1108.6" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.20%)</title><rect x="1106.8" y="643.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1109.8" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.20%)</title><rect x="1109.2" y="643.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1112.2" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1111.6" y="643.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.6" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.40%)</title><rect x="1112.8" y="659.0" width="4.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1115.8" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.10%)</title><rect x="1117.5" y="659.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.5" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1118.7" y="659.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.7" y="670.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (2 samples, 0.20%)</title><rect x="1119.9" y="691.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1122.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.10%)</title><rect x="1122.3" y="755.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1125.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.10%)</title><rect x="1122.3" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1125.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="1122.3" y="723.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1125.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="1122.3" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1125.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="1122.3" y="691.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1125.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1123.5" y="787.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1126.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1123.5" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1126.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1123.5" y="755.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1126.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="1123.5" y="739.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1126.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="1123.5" y="723.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1126.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="1123.5" y="707.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1126.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="1123.5" y="691.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1126.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1123.5" y="675.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1126.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1123.5" y="659.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="1123.5" y="643.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1126.5" y="654.0"></text>
</g>
<g>
<title>start_thread (55 samples, 5.54%)</title><rect x="1124.6" y="787.0" width="65.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1127.6" y="798.0">start_t..</text>
</g>
<g>
<title>java_start(Thread*) (55 samples, 5.54%)</title><rect x="1124.6" y="771.0" width="65.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1127.6" y="782.0">java_st..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 2.11%)</title><rect x="1124.6" y="755.0" width="25.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.6" y="766.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.50%)</title><rect x="1124.6" y="739.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.6" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.50%)</title><rect x="1124.6" y="723.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.6" y="734.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1124.6" y="707.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.6" y="718.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.40%)</title><rect x="1125.8" y="707.0" width="4.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1128.8" y="718.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.61%)</title><rect x="1130.6" y="739.0" width="19.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.6" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.60%)</title><rect x="1130.6" y="723.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.6" y="734.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.20%)</title><rect x="1130.6" y="707.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.6" y="718.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.40%)</title><rect x="1133.0" y="707.0" width="4.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1136.0" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.60%)</title><rect x="1137.7" y="723.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.7" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1137.7" y="707.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.7" y="718.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1137.7" y="691.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.7" y="702.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1137.7" y="675.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.7" y="686.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.10%)</title><rect x="1137.7" y="659.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.7" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.50%)</title><rect x="1138.9" y="707.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.9" y="718.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.50%)</title><rect x="1138.9" y="691.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.9" y="702.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1143.7" y="675.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.7" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.40%)</title><rect x="1144.8" y="723.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.8" y="734.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.40%)</title><rect x="1144.8" y="707.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.8" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.40%)</title><rect x="1144.8" y="691.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.8" y="702.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.40%)</title><rect x="1144.8" y="675.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.8" y="686.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.40%)</title><rect x="1144.8" y="659.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.8" y="670.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.40%)</title><rect x="1144.8" y="643.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.8" y="654.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.40%)</title><rect x="1144.8" y="627.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.8" y="638.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.10%)</title><rect x="1147.2" y="611.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.2" y="622.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1147.2" y="595.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.2" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1148.4" y="611.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.4" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (32 samples, 3.22%)</title><rect x="1149.6" y="755.0" width="38.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.6" y="766.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (32 samples, 3.22%)</title><rect x="1149.6" y="739.0" width="38.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.6" y="750.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (32 samples, 3.22%)</title><rect x="1149.6" y="723.0" width="38.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.6" y="734.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (32 samples, 3.22%)</title><rect x="1149.6" y="707.0" width="38.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.6" y="718.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (32 samples, 3.22%)</title><rect x="1149.6" y="691.0" width="38.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.6" y="702.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (32 samples, 3.22%)</title><rect x="1149.6" y="675.0" width="38.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.6" y="686.0">Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 1.41%)</title><rect x="1149.6" y="659.0" width="16.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.6" y="670.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.20%)</title><rect x="1149.6" y="643.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.6" y="654.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.20%)</title><rect x="1149.6" y="627.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.6" y="638.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1149.6" y="611.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.6" y="622.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.10%)</title><rect x="1150.8" y="611.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="622.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1150.8" y="595.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="606.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.10%)</title><rect x="1150.8" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.8" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (12 samples, 1.21%)</title><rect x="1152.0" y="643.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.0" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.20%)</title><rect x="1152.0" y="627.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.0" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.20%)</title><rect x="1152.0" y="611.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.0" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1153.2" y="595.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.10%)</title><rect x="1154.4" y="627.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.4" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.10%)</title><rect x="1154.4" y="611.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.4" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.10%)</title><rect x="1154.4" y="595.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.4" y="606.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.10%)</title><rect x="1154.4" y="579.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.50%)</title><rect x="1155.5" y="627.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.20%)</title><rect x="1157.9" y="611.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.9" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1159.1" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.1" y="606.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.10%)</title><rect x="1160.3" y="611.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.3" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.10%)</title><rect x="1161.5" y="627.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1161.5" y="611.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.20%)</title><rect x="1162.7" y="627.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.7" y="638.0"></text>
</g>
<g>
<title>MachNode::cisc_RegMask() const (1 samples, 0.10%)</title><rect x="1163.9" y="611.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.9" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.10%)</title><rect x="1165.0" y="627.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.0" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 1.31%)</title><rect x="1166.2" y="659.0" width="15.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 1.11%)</title><rect x="1166.2" y="643.0" width="13.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.2" y="654.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.10%)</title><rect x="1166.2" y="627.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1167.4" y="627.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.4" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1167.4" y="611.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.4" y="622.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.10%)</title><rect x="1168.6" y="611.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.6" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.30%)</title><rect x="1169.8" y="627.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.8" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.30%)</title><rect x="1169.8" y="611.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.30%)</title><rect x="1169.8" y="595.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.10%)</title><rect x="1171.0" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1171.0" y="563.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1172.2" y="579.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.10%)</title><rect x="1173.4" y="627.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.4" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1174.6" y="627.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.6" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.20%)</title><rect x="1174.6" y="611.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.6" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.10%)</title><rect x="1174.6" y="595.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.6" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1174.6" y="579.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.10%)</title><rect x="1175.7" y="595.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.7" y="606.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1175.7" y="579.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1175.7" y="563.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1176.9" y="627.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="638.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.10%)</title><rect x="1176.9" y="611.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="622.0"></text>
</g>
<g>
<title>SuperWord::SuperWord(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1178.1" y="627.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.1" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1179.3" y="643.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="654.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1180.5" y="643.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1183.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.40%)</title><rect x="1181.7" y="659.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.40%)</title><rect x="1181.7" y="643.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.40%)</title><rect x="1181.7" y="627.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.40%)</title><rect x="1181.7" y="611.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.40%)</title><rect x="1181.7" y="595.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.40%)</title><rect x="1181.7" y="579.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1181.7" y="563.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1181.7" y="547.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1181.7" y="531.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1181.7" y="515.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1181.7" y="499.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1181.7" y="483.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="494.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.7" y="467.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="478.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.7" y="451.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="462.0"></text>
</g>
<g>
<title>pass_initial_checks(ciMethod*, int, ciMethod*) (1 samples, 0.10%)</title><rect x="1181.7" y="435.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1184.7" y="446.0"></text>
</g>
<g>
<title>ciMethod::should_exclude() (1 samples, 0.10%)</title><rect x="1181.7" y="419.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="430.0"></text>
</g>
<g>
<title>CompilerOracle::should_exclude(methodHandle, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.7" y="403.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1182.9" y="467.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1182.9" y="451.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="462.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.10%)</title><rect x="1182.9" y="435.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="446.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1182.9" y="419.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="430.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.10%)</title><rect x="1182.9" y="403.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="414.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.10%)</title><rect x="1182.9" y="387.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.1" y="435.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.1" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.1" y="403.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.1" y="387.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.1" y="371.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.1" y="355.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.1" y="339.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.1" y="323.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.1" y="307.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.1" y="291.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.1" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.1" y="259.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.1" y="243.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.1" y="227.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.1" y="211.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.1" y="195.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.1" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.1" y="179.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.1" y="163.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.1" y="147.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.1" y="131.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.1" y="115.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.1" y="99.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="110.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="83.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.1" y="94.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1184.1" y="67.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="78.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.10%)</title><rect x="1184.1" y="51.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.1" y="62.0"></text>
</g>
<g>
<title>JVMState::JVMState(ciMethod*, JVMState*) (1 samples, 0.10%)</title><rect x="1184.1" y="35.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1185.2" y="563.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1185.2" y="547.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1185.2" y="531.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.2" y="542.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.10%)</title><rect x="1185.2" y="515.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="526.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.10%)</title><rect x="1186.4" y="659.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.4" y="670.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.10%)</title><rect x="1186.4" y="643.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.4" y="654.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.10%)</title><rect x="1186.4" y="627.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.4" y="638.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="1186.4" y="611.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.4" y="622.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.20%)</title><rect x="1187.6" y="755.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.6" y="766.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.20%)</title><rect x="1187.6" y="739.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.6" y="750.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.10%)</title><rect x="1187.6" y="723.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.6" y="734.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.10%)</title><rect x="1187.6" y="707.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.6" y="718.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_idle_monitors() (1 samples, 0.10%)</title><rect x="1187.6" y="691.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.6" y="702.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
</g>
</svg>
