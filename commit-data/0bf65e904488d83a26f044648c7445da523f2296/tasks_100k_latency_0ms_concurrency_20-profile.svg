<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1029"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1029"> </text>
<g id="frames">
<g>
<title>all (227 samples, 100.00%)</title><rect x="10.0" y="995.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1006.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (99 samples, 43.61%)</title><rect x="10.0" y="979.0" width="514.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (99 samples, 43.61%)</title><rect x="10.0" y="963.0" width="514.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce</text>
</g>
<g>
<title>java/lang/Iterable.forEach (90 samples, 39.65%)</title><rect x="10.0" y="947.0" width="467.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="958.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/155185504.accept (90 samples, 39.65%)</title><rect x="10.0" y="931.0" width="467.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription$$La..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (90 samples, 39.65%)</title><rect x="10.0" y="915.0" width="467.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.44%)</title><rect x="10.0" y="899.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (82 samples, 36.12%)</title><rect x="15.2" y="899.0" width="426.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.2" y="910.0">com/linecorp/decaton/processor/runtime/PartitionContext.ad..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (82 samples, 36.12%)</title><rect x="15.2" y="883.0" width="426.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.2" y="894.0">com/linecorp/decaton/processor/runtime/PartitionProcessor...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (82 samples, 36.12%)</title><rect x="15.2" y="867.0" width="426.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.2" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (82 samples, 36.12%)</title><rect x="15.2" y="851.0" width="426.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.2" y="862.0">java/util/concurrent/Executors$DelegatedExecutorService.ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (82 samples, 36.12%)</title><rect x="15.2" y="835.0" width="426.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.2" y="846.0">java/util/concurrent/ThreadPoolExecutor.execute</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (79 samples, 34.80%)</title><rect x="30.8" y="819.0" width="410.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.8" y="830.0">java/util/concurrent/LinkedBlockingQueue.offer</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (78 samples, 34.36%)</title><rect x="30.8" y="803.0" width="405.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.8" y="814.0">java/util/concurrent/LinkedBlockingQueue.signalNotEmpty</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (78 samples, 34.36%)</title><rect x="30.8" y="787.0" width="405.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.8" y="798.0">java/util/concurrent/locks/ReentrantLock.unlock</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (78 samples, 34.36%)</title><rect x="30.8" y="771.0" width="405.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.8" y="782.0">java/util/concurrent/locks/AbstractQueuedSynchronizer.r..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (78 samples, 34.36%)</title><rect x="30.8" y="755.0" width="405.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.8" y="766.0">java/util/concurrent/locks/AbstractQueuedSynchronizer.u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (78 samples, 34.36%)</title><rect x="30.8" y="739.0" width="405.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.8" y="750.0">java/util/concurrent/locks/LockSupport.unpark</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (78 samples, 34.36%)</title><rect x="30.8" y="723.0" width="405.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="33.8" y="734.0">sun/misc/Unsafe.unpark</text>
</g>
<g>
<title>Unsafe_Unpark (76 samples, 33.48%)</title><rect x="41.2" y="707.0" width="395.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="44.2" y="718.0">Unsafe_Unpark</text>
</g>
<g>
<title>Parker::unpark() (38 samples, 16.74%)</title><rect x="41.2" y="691.0" width="197.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="44.2" y="702.0">Parker::unpark()</text>
</g>
<g>
<title>__psynch_cvsignal (38 samples, 16.74%)</title><rect x="41.2" y="675.0" width="197.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="44.2" y="686.0">__psynch_cvsignal</text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (35 samples, 15.42%)</title><rect x="238.7" y="691.0" width="182.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="241.7" y="702.0">_pthread_mutex_firstfit..</text>
</g>
<g>
<title>__psynch_mutexdrop (35 samples, 15.42%)</title><rect x="238.7" y="675.0" width="182.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="241.7" y="686.0">__psynch_mutexdrop</text>
</g>
<g>
<title>_pthread_mutex_firstfit_wake (1 samples, 0.44%)</title><rect x="420.7" y="691.0" width="5.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="423.7" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.44%)</title><rect x="425.9" y="691.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="428.9" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.44%)</title><rect x="431.1" y="691.0" width="5.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="434.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.44%)</title><rect x="436.3" y="803.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.44%)</title><rect x="436.3" y="787.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="439.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.44%)</title><rect x="436.3" y="771.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="439.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.44%)</title><rect x="441.5" y="899.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="444.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.44%)</title><rect x="441.5" y="883.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="444.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.44%)</title><rect x="441.5" y="867.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="444.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (6 samples, 2.64%)</title><rect x="446.7" y="899.0" width="31.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="449.7" y="910.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.64%)</title><rect x="446.7" y="883.0" width="31.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="449.7" y="894.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.32%)</title><rect x="462.2" y="867.0" width="15.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.2" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.44%)</title><rect x="472.6" y="851.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="475.6" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.44%)</title><rect x="472.6" y="835.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.96%)</title><rect x="477.8" y="947.0" width="46.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="480.8" y="958.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.96%)</title><rect x="477.8" y="931.0" width="46.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.8" y="942.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 0.88%)</title><rect x="477.8" y="915.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.88%)</title><rect x="477.8" y="899.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="480.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.88%)</title><rect x="477.8" y="883.0" width="10.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.44%)</title><rect x="477.8" y="867.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.44%)</title><rect x="477.8" y="851.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.44%)</title><rect x="477.8" y="835.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.44%)</title><rect x="477.8" y="819.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="480.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.44%)</title><rect x="483.0" y="867.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="486.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.44%)</title><rect x="483.0" y="851.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="486.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.44%)</title><rect x="483.0" y="835.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="486.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.44%)</title><rect x="483.0" y="819.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="486.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.44%)</title><rect x="483.0" y="803.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="486.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.32%)</title><rect x="488.2" y="915.0" width="15.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="491.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.88%)</title><rect x="488.2" y="899.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="491.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.44%)</title><rect x="488.2" y="883.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.44%)</title><rect x="488.2" y="867.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.44%)</title><rect x="488.2" y="851.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.2" y="862.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.44%)</title><rect x="488.2" y="835.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.2" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.44%)</title><rect x="488.2" y="819.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="491.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.44%)</title><rect x="488.2" y="803.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="491.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.44%)</title><rect x="488.2" y="787.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="491.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.44%)</title><rect x="488.2" y="771.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="491.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.44%)</title><rect x="493.4" y="883.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.44%)</title><rect x="493.4" y="867.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.44%)</title><rect x="493.4" y="851.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.44%)</title><rect x="493.4" y="835.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.44%)</title><rect x="493.4" y="819.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="496.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.44%)</title><rect x="493.4" y="803.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.44%)</title><rect x="493.4" y="787.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="496.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.44%)</title><rect x="493.4" y="771.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.44%)</title><rect x="493.4" y="755.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.44%)</title><rect x="493.4" y="739.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="496.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.44%)</title><rect x="498.6" y="899.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="501.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.44%)</title><rect x="498.6" y="883.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.44%)</title><rect x="503.8" y="915.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="506.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.44%)</title><rect x="503.8" y="899.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="506.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.44%)</title><rect x="503.8" y="883.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="506.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.88%)</title><rect x="509.0" y="915.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="512.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.88%)</title><rect x="509.0" y="899.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="512.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.44%)</title><rect x="509.0" y="883.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.44%)</title><rect x="509.0" y="867.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="512.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.next (1 samples, 0.44%)</title><rect x="509.0" y="851.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="512.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.next (1 samples, 0.44%)</title><rect x="509.0" y="835.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="512.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.44%)</title><rect x="509.0" y="819.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.44%)</title><rect x="514.2" y="883.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.44%)</title><rect x="514.2" y="867.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="517.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.44%)</title><rect x="514.2" y="851.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="517.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.44%)</title><rect x="514.2" y="835.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="517.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.44%)</title><rect x="514.2" y="819.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="517.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.44%)</title><rect x="514.2" y="803.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.44%)</title><rect x="514.2" y="787.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="517.2" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.44%)</title><rect x="514.2" y="771.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="517.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.44%)</title><rect x="514.2" y="755.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="517.2" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.44%)</title><rect x="514.2" y="739.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="517.2" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.44%)</title><rect x="514.2" y="723.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="517.2" y="734.0"></text>
</g>
<g>
<title>java/nio/Bits.copyToArray (1 samples, 0.44%)</title><rect x="514.2" y="707.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="517.2" y="718.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.44%)</title><rect x="514.2" y="691.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="517.2" y="702.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory2 (1 samples, 0.44%)</title><rect x="514.2" y="675.0" width="5.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="517.2" y="686.0"></text>
</g>
<g>
<title>Copy::conjoint_memory_atomic(void*, void*, unsigned long) (1 samples, 0.44%)</title><rect x="514.2" y="659.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="517.2" y="670.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.44%)</title><rect x="514.2" y="643.0" width="5.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="517.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.44%)</title><rect x="519.4" y="915.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="522.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.44%)</title><rect x="519.4" y="899.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="522.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.44%)</title><rect x="519.4" y="883.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="522.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.44%)</title><rect x="519.4" y="867.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="522.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (1 samples, 0.44%)</title><rect x="519.4" y="851.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="522.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.44%)</title><rect x="519.4" y="835.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.4" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (58 samples, 25.55%)</title><rect x="524.6" y="979.0" width="301.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="527.6" y="990.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (58 samples, 25.55%)</title><rect x="524.6" y="963.0" width="301.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="527.6" y="974.0">java/util/concurrent/ThreadPoolExecutor$W..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (58 samples, 25.55%)</title><rect x="524.6" y="947.0" width="301.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="527.6" y="958.0">java/util/concurrent/ThreadPoolExecutor.r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/405225669.run (16 samples, 7.05%)</title><rect x="529.8" y="931.0" width="83.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.8" y="942.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (16 samples, 7.05%)</title><rect x="529.8" y="915.0" width="83.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="532.8" y="926.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (16 samples, 7.05%)</title><rect x="529.8" y="899.0" width="83.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="532.8" y="910.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (16 samples, 7.05%)</title><rect x="529.8" y="883.0" width="83.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="532.8" y="894.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (6 samples, 2.64%)</title><rect x="529.8" y="867.0" width="31.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="532.8" y="878.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (6 samples, 2.64%)</title><rect x="529.8" y="851.0" width="31.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="532.8" y="862.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (6 samples, 2.64%)</title><rect x="529.8" y="835.0" width="31.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="532.8" y="846.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 2.64%)</title><rect x="529.8" y="819.0" width="31.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="532.8" y="830.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 2.64%)</title><rect x="529.8" y="803.0" width="31.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="532.8" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (6 samples, 2.64%)</title><rect x="529.8" y="787.0" width="31.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="532.8" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.44%)</title><rect x="529.8" y="771.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="532.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.44%)</title><rect x="529.8" y="755.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="532.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.20%)</title><rect x="535.0" y="771.0" width="26.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="538.0" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.20%)</title><rect x="535.0" y="755.0" width="26.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="538.0" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.20%)</title><rect x="535.0" y="739.0" width="26.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="538.0" y="750.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.20%)</title><rect x="535.0" y="723.0" width="26.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="538.0" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.20%)</title><rect x="535.0" y="707.0" width="26.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="538.0" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.44%)</title><rect x="535.0" y="691.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="538.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.44%)</title><rect x="535.0" y="675.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="538.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.44%)</title><rect x="535.0" y="659.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="538.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.44%)</title><rect x="535.0" y="643.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="538.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.44%)</title><rect x="535.0" y="627.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="538.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.88%)</title><rect x="540.2" y="691.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="543.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.88%)</title><rect x="540.2" y="675.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="543.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.88%)</title><rect x="540.2" y="659.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="543.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.88%)</title><rect x="540.2" y="643.0" width="10.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.2" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.88%)</title><rect x="540.2" y="627.0" width="10.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.88%)</title><rect x="550.6" y="691.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.88%)</title><rect x="550.6" y="675.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="553.6" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.88%)</title><rect x="550.6" y="659.0" width="10.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="553.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (9 samples, 3.96%)</title><rect x="561.0" y="867.0" width="46.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="564.0" y="878.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.32%)</title><rect x="561.0" y="851.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="564.0" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.32%)</title><rect x="561.0" y="835.0" width="15.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="564.0" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.32%)</title><rect x="561.0" y="819.0" width="15.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="564.0" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.88%)</title><rect x="561.0" y="803.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="564.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.44%)</title><rect x="566.2" y="787.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="569.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.44%)</title><rect x="566.2" y="771.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="569.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.44%)</title><rect x="566.2" y="755.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="569.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.44%)</title><rect x="571.4" y="803.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="574.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (5 samples, 2.20%)</title><rect x="576.6" y="851.0" width="26.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="579.6" y="862.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.44%)</title><rect x="576.6" y="835.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="579.6" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.44%)</title><rect x="576.6" y="819.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.6" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(KlassHandle, int, Thread*) (1 samples, 0.44%)</title><rect x="576.6" y="803.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="579.6" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.44%)</title><rect x="576.6" y="787.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="579.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.44%)</title><rect x="576.6" y="771.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="579.6" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.44%)</title><rect x="576.6" y="755.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="579.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.44%)</title><rect x="576.6" y="739.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="579.6" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.44%)</title><rect x="576.6" y="723.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="579.6" y="734.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.44%)</title><rect x="576.6" y="707.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="579.6" y="718.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.44%)</title><rect x="576.6" y="691.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="579.6" y="702.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.44%)</title><rect x="576.6" y="675.0" width="5.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="579.6" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.44%)</title><rect x="576.6" y="659.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="579.6" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.44%)</title><rect x="576.6" y="643.0" width="5.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="579.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (4 samples, 1.76%)</title><rect x="581.8" y="835.0" width="20.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="584.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.32%)</title><rect x="581.8" y="819.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="584.8" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.32%)</title><rect x="581.8" y="803.0" width="15.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="584.8" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.32%)</title><rect x="581.8" y="787.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="584.8" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.88%)</title><rect x="587.0" y="771.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="590.0" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.88%)</title><rect x="587.0" y="755.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="590.0" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.44%)</title><rect x="592.2" y="739.0" width="5.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="595.2" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.44%)</title><rect x="597.4" y="819.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="600.4" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.44%)</title><rect x="597.4" y="803.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="600.4" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.44%)</title><rect x="597.4" y="787.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="600.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.44%)</title><rect x="597.4" y="771.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="600.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.44%)</title><rect x="597.4" y="755.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="600.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.44%)</title><rect x="597.4" y="739.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="600.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.44%)</title><rect x="597.4" y="723.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="600.4" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.44%)</title><rect x="597.4" y="707.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="600.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(KlassHandle, int, Thread*) (1 samples, 0.44%)</title><rect x="597.4" y="691.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="600.4" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.44%)</title><rect x="597.4" y="675.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="600.4" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.44%)</title><rect x="597.4" y="659.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="600.4" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.44%)</title><rect x="597.4" y="643.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="600.4" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.44%)</title><rect x="597.4" y="627.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="600.4" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.44%)</title><rect x="597.4" y="611.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="600.4" y="622.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.44%)</title><rect x="597.4" y="595.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="600.4" y="606.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.44%)</title><rect x="597.4" y="579.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="600.4" y="590.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.44%)</title><rect x="597.4" y="563.0" width="5.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="600.4" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.44%)</title><rect x="597.4" y="547.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="600.4" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.44%)</title><rect x="597.4" y="531.0" width="5.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="600.4" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (1 samples, 0.44%)</title><rect x="602.6" y="851.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="605.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.44%)</title><rect x="602.6" y="835.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="605.6" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.44%)</title><rect x="602.6" y="819.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="605.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.44%)</title><rect x="607.8" y="867.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="610.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.44%)</title><rect x="607.8" y="851.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="610.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (41 samples, 18.06%)</title><rect x="613.0" y="931.0" width="213.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.0" y="942.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (41 samples, 18.06%)</title><rect x="613.0" y="915.0" width="213.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="616.0" y="926.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (1 samples, 0.44%)</title><rect x="613.0" y="899.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="616.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (40 samples, 17.62%)</title><rect x="618.2" y="899.0" width="207.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="621.2" y="910.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.44%)</title><rect x="618.2" y="883.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="621.2" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.44%)</title><rect x="618.2" y="867.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="621.2" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.44%)</title><rect x="618.2" y="851.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="621.2" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(KlassHandle, int, Thread*) (1 samples, 0.44%)</title><rect x="618.2" y="835.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="621.2" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.44%)</title><rect x="618.2" y="819.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="621.2" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.44%)</title><rect x="618.2" y="803.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="621.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (39 samples, 17.18%)</title><rect x="623.4" y="883.0" width="202.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="626.4" y="894.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (39 samples, 17.18%)</title><rect x="623.4" y="867.0" width="202.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="626.4" y="878.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (37 samples, 16.30%)</title><rect x="633.8" y="851.0" width="192.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="636.8" y="862.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.44%)</title><rect x="633.8" y="835.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="636.8" y="846.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::~JavaThreadStatusChanger() (1 samples, 0.44%)</title><rect x="639.0" y="835.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="642.0" y="846.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (35 samples, 15.42%)</title><rect x="644.2" y="835.0" width="181.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="647.2" y="846.0">Parker::park(bool, long)</text>
</g>
<g>
<title>__psynch_cvwait (30 samples, 13.22%)</title><rect x="644.2" y="819.0" width="155.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="647.2" y="830.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (5 samples, 2.20%)</title><rect x="800.1" y="819.0" width="26.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="803.1" y="830.0">_..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (5 samples, 2.20%)</title><rect x="800.1" y="803.0" width="26.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="803.1" y="814.0">_..</text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 2.20%)</title><rect x="800.1" y="787.0" width="26.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="803.1" y="798.0">_..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.44%)</title><rect x="826.1" y="979.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="829.1" y="990.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.44%)</title><rect x="826.1" y="963.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="829.1" y="974.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.44%)</title><rect x="826.1" y="947.0" width="5.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="829.1" y="958.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.44%)</title><rect x="826.1" y="931.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="829.1" y="942.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.44%)</title><rect x="826.1" y="915.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="829.1" y="926.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.44%)</title><rect x="826.1" y="899.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="829.1" y="910.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.44%)</title><rect x="826.1" y="883.0" width="5.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="829.1" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.44%)</title><rect x="831.3" y="979.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="834.3" y="990.0"></text>
</g>
<g>
<title>thread_start (68 samples, 29.96%)</title><rect x="836.5" y="979.0" width="353.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="839.5" y="990.0">thread_start</text>
</g>
<g>
<title>_pthread_start (68 samples, 29.96%)</title><rect x="836.5" y="963.0" width="353.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="839.5" y="974.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (68 samples, 29.96%)</title><rect x="836.5" y="947.0" width="353.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="839.5" y="958.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (68 samples, 29.96%)</title><rect x="836.5" y="931.0" width="353.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="839.5" y="942.0">java_start(Thread*)</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (1 samples, 0.44%)</title><rect x="836.5" y="915.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="839.5" y="926.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (1 samples, 0.44%)</title><rect x="836.5" y="899.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="839.5" y="910.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::sample_young_list_rs_lengths() (1 samples, 0.44%)</title><rect x="836.5" y="883.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="839.5" y="894.0"></text>
</g>
<g>
<title>YoungList::rs_length_sampling_next() (1 samples, 0.44%)</title><rect x="836.5" y="867.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="839.5" y="878.0"></text>
</g>
<g>
<title>HeapRegionRemSet::occupied() (1 samples, 0.44%)</title><rect x="836.5" y="851.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.5" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.44%)</title><rect x="836.5" y="835.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="839.5" y="846.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.44%)</title><rect x="836.5" y="819.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="839.5" y="830.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.44%)</title><rect x="836.5" y="803.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="839.5" y="814.0"></text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 3.52%)</title><rect x="841.7" y="915.0" width="41.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="844.7" y="926.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 3.52%)</title><rect x="841.7" y="899.0" width="41.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="844.7" y="910.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.64%)</title><rect x="841.7" y="883.0" width="31.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="844.7" y="894.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;*) (3 samples, 1.32%)</title><rect x="841.7" y="867.0" width="15.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="844.7" y="878.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal(unsigned int, int*, StarTask&amp;) (2 samples, 0.88%)</title><rect x="841.7" y="851.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="844.7" y="862.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.44%)</title><rect x="846.9" y="835.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="849.9" y="846.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::update_rs&lt;unsigned int&gt;(HeapRegion*, unsigned int*, int) (1 samples, 0.44%)</title><rect x="852.1" y="851.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="855.1" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.32%)</title><rect x="857.3" y="867.0" width="15.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="860.3" y="878.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_range_nv(oopDesc*, G1ParScanClosure*, int, int) (1 samples, 0.44%)</title><rect x="862.5" y="851.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="865.5" y="862.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::push_on_queue&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.44%)</title><rect x="862.5" y="835.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="865.5" y="846.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*, HeapRegion*) (1 samples, 0.44%)</title><rect x="867.7" y="851.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="870.7" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.44%)</title><rect x="867.7" y="835.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="870.7" y="846.0"></text>
</g>
<g>
<title>G1ParGCAllocator::plab_allocate(InCSetState, unsigned long, unsigned char) (1 samples, 0.44%)</title><rect x="867.7" y="819.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="870.7" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.88%)</title><rect x="872.9" y="883.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="875.9" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.88%)</title><rect x="872.9" y="867.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="875.9" y="878.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.88%)</title><rect x="872.9" y="851.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.9" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.88%)</title><rect x="872.9" y="835.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.9" y="846.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 0.88%)</title><rect x="872.9" y="819.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="875.9" y="830.0"></text>
</g>
<g>
<title>ScanRSClosure::scan_strong_code_roots(HeapRegion*) (2 samples, 0.88%)</title><rect x="872.9" y="803.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="875.9" y="814.0"></text>
</g>
<g>
<title>CodeRootSetTable::nmethods_do(CodeBlobClosure*) (2 samples, 0.88%)</title><rect x="872.9" y="787.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="875.9" y="798.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.44%)</title><rect x="878.1" y="771.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="881.1" y="782.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.44%)</title><rect x="878.1" y="755.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="881.1" y="766.0"></text>
</g>
<g>
<title>JavaThread::run() (54 samples, 23.79%)</title><rect x="883.3" y="915.0" width="280.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="886.3" y="926.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (54 samples, 23.79%)</title><rect x="883.3" y="899.0" width="280.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="886.3" y="910.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (50 samples, 22.03%)</title><rect x="883.3" y="883.0" width="259.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="886.3" y="894.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (46 samples, 20.26%)</title><rect x="883.3" y="867.0" width="239.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="886.3" y="878.0">CompileBroker::invoke_compiler_o..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (43 samples, 18.94%)</title><rect x="888.5" y="851.0" width="223.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.5" y="862.0">C2Compiler::compile_method(ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (43 samples, 18.94%)</title><rect x="888.5" y="835.0" width="223.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="891.5" y="846.0">Compile::Compile(ciEnv*, C2Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 11.45%)</title><rect x="888.5" y="819.0" width="135.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="891.5" y="830.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.32%)</title><rect x="888.5" y="803.0" width="15.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.5" y="814.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.44%)</title><rect x="888.5" y="787.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.5" y="798.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.88%)</title><rect x="893.7" y="787.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="896.7" y="798.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.44%)</title><rect x="893.7" y="771.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="896.7" y="782.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.44%)</title><rect x="893.7" y="755.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="896.7" y="766.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.44%)</title><rect x="893.7" y="739.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="896.7" y="750.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.44%)</title><rect x="893.7" y="723.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="896.7" y="734.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.44%)</title><rect x="893.7" y="707.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="896.7" y="718.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.44%)</title><rect x="898.9" y="771.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="901.9" y="782.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.44%)</title><rect x="898.9" y="755.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="901.9" y="766.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.44%)</title><rect x="898.9" y="739.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="901.9" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.88%)</title><rect x="904.1" y="803.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="907.1" y="814.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (2 samples, 0.88%)</title><rect x="904.1" y="787.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.1" y="798.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.44%)</title><rect x="904.1" y="771.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="907.1" y="782.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.44%)</title><rect x="909.3" y="771.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.3" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.44%)</title><rect x="909.3" y="755.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.3" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.44%)</title><rect x="909.3" y="739.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="912.3" y="750.0"></text>
</g>
<g>
<title>DIR_Chunk::find_match(GrowableArray&lt;DIR_Chunk*&gt;*, int, DebugInformationRecorder*) (1 samples, 0.44%)</title><rect x="909.3" y="723.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="912.3" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.88%)</title><rect x="914.5" y="803.0" width="10.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.5" y="814.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.44%)</title><rect x="914.5" y="787.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="917.5" y="798.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.44%)</title><rect x="919.7" y="787.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="922.7" y="798.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.44%)</title><rect x="919.7" y="771.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="922.7" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.44%)</title><rect x="919.7" y="755.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="922.7" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.44%)</title><rect x="919.7" y="739.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="922.7" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.44%)</title><rect x="919.7" y="723.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.7" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.44%)</title><rect x="919.7" y="707.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="922.7" y="718.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.44%)</title><rect x="924.9" y="803.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="927.9" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.32%)</title><rect x="930.1" y="803.0" width="15.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.1" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.32%)</title><rect x="930.1" y="787.0" width="15.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="933.1" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.88%)</title><rect x="930.1" y="771.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.1" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.44%)</title><rect x="930.1" y="755.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="933.1" y="766.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::at_grow(int, unsigned int const&amp;) (1 samples, 0.44%)</title><rect x="930.1" y="739.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.1" y="750.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::grow(int) (1 samples, 0.44%)</title><rect x="930.1" y="723.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.1" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.44%)</title><rect x="935.3" y="755.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.3" y="766.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.44%)</title><rect x="935.3" y="739.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="938.3" y="750.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.44%)</title><rect x="935.3" y="723.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="938.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.44%)</title><rect x="940.5" y="771.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="943.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (15 samples, 6.61%)</title><rect x="945.7" y="803.0" width="78.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="948.7" y="814.0">PhaseChai..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.44%)</title><rect x="945.7" y="787.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.7" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.44%)</title><rect x="945.7" y="771.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="948.7" y="782.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (1 samples, 0.44%)</title><rect x="945.7" y="755.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.64%)</title><rect x="950.9" y="787.0" width="31.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="953.9" y="798.0">Ph..</text>
</g>
<g>
<title>Block::end_idx() const (1 samples, 0.44%)</title><rect x="966.5" y="771.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="969.5" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.44%)</title><rect x="971.7" y="771.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.7" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.44%)</title><rect x="976.9" y="771.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.44%)</title><rect x="982.1" y="787.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.1" y="798.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.44%)</title><rect x="982.1" y="771.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.1" y="782.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.44%)</title><rect x="982.1" y="755.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.32%)</title><rect x="987.3" y="787.0" width="15.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="990.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.44%)</title><rect x="997.7" y="771.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.7" y="782.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.44%)</title><rect x="1002.9" y="787.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1005.9" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.44%)</title><rect x="1002.9" y="771.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1005.9" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.44%)</title><rect x="1002.9" y="755.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1005.9" y="766.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.44%)</title><rect x="1002.9" y="739.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1005.9" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.44%)</title><rect x="1002.9" y="723.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.9" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.44%)</title><rect x="1008.1" y="787.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1011.1" y="798.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.44%)</title><rect x="1008.1" y="771.0" width="5.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1011.1" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.88%)</title><rect x="1013.3" y="787.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1016.3" y="798.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.44%)</title><rect x="1013.3" y="771.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.3" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.44%)</title><rect x="1018.5" y="771.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1021.5" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.44%)</title><rect x="1018.5" y="755.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1021.5" y="766.0"></text>
</g>
<g>
<title>Compile::Optimize() (12 samples, 5.29%)</title><rect x="1023.7" y="819.0" width="62.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1026.7" y="830.0">Compil..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.44%)</title><rect x="1023.7" y="803.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.7" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.44%)</title><rect x="1023.7" y="787.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.7" y="798.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.44%)</title><rect x="1023.7" y="771.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1026.7" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.88%)</title><rect x="1028.9" y="803.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.9" y="814.0"></text>
</g>
<g>
<title>CmpLNode::sub(Type const*, Type const*) const (1 samples, 0.44%)</title><rect x="1028.9" y="787.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.9" y="798.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.44%)</title><rect x="1034.1" y="787.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1037.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (6 samples, 2.64%)</title><rect x="1039.3" y="803.0" width="31.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1042.3" y="814.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.44%)</title><rect x="1039.3" y="787.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1042.3" y="798.0"></text>
</g>
<g>
<title>NTarjan::EVAL() (1 samples, 0.44%)</title><rect x="1039.3" y="771.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1042.3" y="782.0"></text>
</g>
<g>
<title>NTarjan::COMPRESS() (1 samples, 0.44%)</title><rect x="1039.3" y="755.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.44%)</title><rect x="1044.4" y="787.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.44%)</title><rect x="1044.4" y="771.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1047.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (1 samples, 0.44%)</title><rect x="1044.4" y="755.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::init_dom_lca_tags() (2 samples, 0.88%)</title><rect x="1049.6" y="787.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1052.6" y="798.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.88%)</title><rect x="1049.6" y="771.0" width="10.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1052.6" y="782.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.88%)</title><rect x="1049.6" y="755.0" width="10.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1052.6" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.88%)</title><rect x="1060.0" y="787.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1063.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.44%)</title><rect x="1060.0" y="771.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1063.0" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.44%)</title><rect x="1060.0" y="755.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1063.0" y="766.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.44%)</title><rect x="1060.0" y="739.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1063.0" y="750.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.44%)</title><rect x="1060.0" y="723.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1063.0" y="734.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.44%)</title><rect x="1060.0" y="707.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1063.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.44%)</title><rect x="1065.2" y="771.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1068.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.44%)</title><rect x="1065.2" y="755.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.44%)</title><rect x="1065.2" y="739.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.44%)</title><rect x="1070.4" y="803.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.4" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.44%)</title><rect x="1070.4" y="787.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1073.4" y="798.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.44%)</title><rect x="1070.4" y="771.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1073.4" y="782.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.44%)</title><rect x="1070.4" y="755.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.4" y="766.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.44%)</title><rect x="1070.4" y="739.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.4" y="750.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.44%)</title><rect x="1070.4" y="723.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.4" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.44%)</title><rect x="1075.6" y="803.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1078.6" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.44%)</title><rect x="1075.6" y="787.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.6" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.44%)</title><rect x="1075.6" y="771.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.6" y="782.0"></text>
</g>
<g>
<title>InitializeNode::complete_stores(Node*, Node*, Node*, long, Node*, PhaseGVN*) (1 samples, 0.44%)</title><rect x="1075.6" y="755.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1078.6" y="766.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.44%)</title><rect x="1075.6" y="739.0" width="5.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1078.6" y="750.0"></text>
</g>
<g>
<title>StoreLNode::Opcode() const (1 samples, 0.44%)</title><rect x="1080.8" y="803.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.8" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.20%)</title><rect x="1086.0" y="819.0" width="26.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.0" y="830.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.20%)</title><rect x="1086.0" y="803.0" width="26.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1089.0" y="814.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.20%)</title><rect x="1086.0" y="787.0" width="26.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.0" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.20%)</title><rect x="1086.0" y="771.0" width="26.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.0" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.20%)</title><rect x="1086.0" y="755.0" width="26.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.0" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.20%)</title><rect x="1086.0" y="739.0" width="26.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.0" y="750.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.44%)</title><rect x="1086.0" y="723.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1089.0" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.44%)</title><rect x="1086.0" y="707.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.0" y="718.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.44%)</title><rect x="1086.0" y="691.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1089.0" y="702.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.44%)</title><rect x="1086.0" y="675.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1089.0" y="686.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.44%)</title><rect x="1086.0" y="659.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.0" y="670.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.44%)</title><rect x="1086.0" y="643.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.0" y="654.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.44%)</title><rect x="1086.0" y="627.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.0" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.44%)</title><rect x="1086.0" y="611.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1089.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.76%)</title><rect x="1091.2" y="723.0" width="20.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.76%)</title><rect x="1091.2" y="707.0" width="20.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.2" y="718.0"></text>
</g>
<g>
<title>Dependencies::assert_common_1(Dependencies::DepType, ciBaseObject*) (1 samples, 0.44%)</title><rect x="1091.2" y="691.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.2" y="702.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciBaseObject*&gt;::append(ciBaseObject* const&amp;) (1 samples, 0.44%)</title><rect x="1091.2" y="675.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.2" y="686.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciBaseObject*&gt;::grow(int) (1 samples, 0.44%)</title><rect x="1091.2" y="659.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.32%)</title><rect x="1096.4" y="691.0" width="15.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.32%)</title><rect x="1096.4" y="675.0" width="15.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.32%)</title><rect x="1096.4" y="659.0" width="15.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.32%)</title><rect x="1096.4" y="643.0" width="15.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.32%)</title><rect x="1096.4" y="627.0" width="15.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.32%)</title><rect x="1096.4" y="611.0" width="15.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.4" y="622.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.44%)</title><rect x="1096.4" y="595.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.4" y="606.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.44%)</title><rect x="1096.4" y="579.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.4" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.44%)</title><rect x="1096.4" y="563.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.4" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.44%)</title><rect x="1096.4" y="547.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.4" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1096.4" y="531.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.4" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1096.4" y="515.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.4" y="526.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.44%)</title><rect x="1096.4" y="499.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.4" y="510.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.44%)</title><rect x="1096.4" y="483.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.4" y="494.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, Handle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.44%)</title><rect x="1096.4" y="467.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1099.4" y="478.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.44%)</title><rect x="1096.4" y="451.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.4" y="462.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.44%)</title><rect x="1096.4" y="435.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.88%)</title><rect x="1101.6" y="595.0" width="10.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.88%)</title><rect x="1101.6" y="579.0" width="10.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.88%)</title><rect x="1101.6" y="563.0" width="10.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.88%)</title><rect x="1101.6" y="547.0" width="10.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.88%)</title><rect x="1101.6" y="531.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.88%)</title><rect x="1101.6" y="515.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.88%)</title><rect x="1101.6" y="499.0" width="10.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.88%)</title><rect x="1101.6" y="483.0" width="10.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.88%)</title><rect x="1101.6" y="467.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1101.6" y="451.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1101.6" y="435.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1101.6" y="419.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1101.6" y="403.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1101.6" y="387.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1101.6" y="371.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1101.6" y="355.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1101.6" y="339.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1101.6" y="323.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1101.6" y="307.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1101.6" y="291.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1101.6" y="275.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1101.6" y="259.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1101.6" y="243.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1101.6" y="227.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1101.6" y="211.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1101.6" y="195.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1101.6" y="179.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.44%)</title><rect x="1101.6" y="163.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.44%)</title><rect x="1101.6" y="147.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.6" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.44%)</title><rect x="1101.6" y="131.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.6" y="142.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.44%)</title><rect x="1101.6" y="115.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.6" y="126.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.44%)</title><rect x="1101.6" y="99.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.6" y="110.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.44%)</title><rect x="1101.6" y="83.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.6" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.44%)</title><rect x="1101.6" y="67.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.6" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.44%)</title><rect x="1101.6" y="51.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.6" y="62.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.44%)</title><rect x="1101.6" y="35.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.6" y="46.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.44%)</title><rect x="1106.8" y="451.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.8" y="462.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.44%)</title><rect x="1106.8" y="435.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1109.8" y="446.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.88%)</title><rect x="1112.0" y="851.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.0" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.88%)</title><rect x="1112.0" y="835.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.0" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.88%)</title><rect x="1112.0" y="819.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.0" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.44%)</title><rect x="1112.0" y="803.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.0" y="814.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.44%)</title><rect x="1112.0" y="787.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.0" y="798.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.44%)</title><rect x="1112.0" y="771.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.0" y="782.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.44%)</title><rect x="1112.0" y="755.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.0" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.44%)</title><rect x="1112.0" y="739.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.0" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.44%)</title><rect x="1112.0" y="723.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.0" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.44%)</title><rect x="1112.0" y="707.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.0" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.44%)</title><rect x="1112.0" y="691.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.0" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.44%)</title><rect x="1112.0" y="675.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1115.0" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.44%)</title><rect x="1112.0" y="659.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.0" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.44%)</title><rect x="1112.0" y="643.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.0" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.44%)</title><rect x="1112.0" y="627.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.0" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.44%)</title><rect x="1112.0" y="611.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.0" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.44%)</title><rect x="1112.0" y="595.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.0" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1112.0" y="579.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.0" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1112.0" y="563.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.0" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.44%)</title><rect x="1112.0" y="547.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.0" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.44%)</title><rect x="1112.0" y="531.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.0" y="542.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1112.0" y="515.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1115.0" y="526.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.44%)</title><rect x="1112.0" y="499.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.0" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.44%)</title><rect x="1112.0" y="483.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.0" y="494.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.44%)</title><rect x="1112.0" y="467.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1115.0" y="478.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.44%)</title><rect x="1112.0" y="451.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.0" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.44%)</title><rect x="1112.0" y="435.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1115.0" y="446.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.44%)</title><rect x="1117.2" y="803.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.2" y="814.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.44%)</title><rect x="1117.2" y="787.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.2" y="798.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.44%)</title><rect x="1117.2" y="771.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.2" y="782.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.44%)</title><rect x="1117.2" y="755.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.2" y="766.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.44%)</title><rect x="1117.2" y="739.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.2" y="750.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.44%)</title><rect x="1117.2" y="723.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.2" y="734.0"></text>
</g>
<g>
<title>CompileQueue::get() (4 samples, 1.76%)</title><rect x="1122.4" y="867.0" width="20.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.4" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 1.32%)</title><rect x="1122.4" y="851.0" width="15.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.4" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 1.32%)</title><rect x="1122.4" y="835.0" width="15.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.4" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.32%)</title><rect x="1122.4" y="819.0" width="15.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.4" y="830.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 1.32%)</title><rect x="1122.4" y="803.0" width="15.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1125.4" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.44%)</title><rect x="1138.0" y="851.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.0" y="862.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 1.32%)</title><rect x="1143.2" y="883.0" width="15.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.2" y="894.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.44%)</title><rect x="1143.2" y="867.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.2" y="878.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.44%)</title><rect x="1143.2" y="851.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.2" y="862.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.44%)</title><rect x="1143.2" y="835.0" width="5.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1146.2" y="846.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.44%)</title><rect x="1143.2" y="819.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.2" y="830.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.44%)</title><rect x="1143.2" y="803.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.2" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.88%)</title><rect x="1148.4" y="867.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.4" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.88%)</title><rect x="1148.4" y="851.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.4" y="862.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (2 samples, 0.88%)</title><rect x="1148.4" y="835.0" width="10.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1151.4" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.88%)</title><rect x="1148.4" y="819.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.4" y="830.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.88%)</title><rect x="1148.4" y="803.0" width="10.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1151.4" y="814.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.44%)</title><rect x="1158.8" y="883.0" width="5.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1161.8" y="894.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.44%)</title><rect x="1158.8" y="867.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.8" y="878.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.44%)</title><rect x="1158.8" y="851.0" width="5.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1161.8" y="862.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.44%)</title><rect x="1158.8" y="835.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.8" y="846.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.44%)</title><rect x="1158.8" y="819.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.8" y="830.0"></text>
</g>
<g>
<title>Profiler::start(Arguments&amp;, bool) (1 samples, 0.44%)</title><rect x="1158.8" y="803.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.8" y="814.0"></text>
</g>
<g>
<title>Profiler::bindNativeLibraryLoad(JNIEnv_*, unsigned char (*)(JNIEnv_*, _jobject*, _jstring*, unsigned char)) (1 samples, 0.44%)</title><rect x="1158.8" y="787.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.8" y="798.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.44%)</title><rect x="1158.8" y="771.0" width="5.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1161.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.44%)</title><rect x="1158.8" y="755.0" width="5.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1161.8" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.44%)</title><rect x="1158.8" y="739.0" width="5.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1161.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.44%)</title><rect x="1158.8" y="723.0" width="5.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1161.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.44%)</title><rect x="1158.8" y="707.0" width="5.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1161.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.44%)</title><rect x="1158.8" y="691.0" width="5.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1161.8" y="702.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.44%)</title><rect x="1164.0" y="915.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.0" y="926.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.44%)</title><rect x="1164.0" y="899.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="910.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.44%)</title><rect x="1164.0" y="883.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.0" y="894.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.44%)</title><rect x="1164.0" y="867.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.0" y="878.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.44%)</title><rect x="1164.0" y="851.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.44%)</title><rect x="1164.0" y="835.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.0" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.44%)</title><rect x="1164.0" y="819.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="830.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.44%)</title><rect x="1164.0" y="803.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.0" y="814.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 1.76%)</title><rect x="1169.2" y="915.0" width="20.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.2" y="926.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.44%)</title><rect x="1169.2" y="899.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.2" y="910.0"></text>
</g>
<g>
<title>ChunkPool::free_all_but(unsigned long) (1 samples, 0.44%)</title><rect x="1169.2" y="883.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.2" y="894.0"></text>
</g>
<g>
<title>small_free_list_add_ptr (1 samples, 0.44%)</title><rect x="1169.2" y="867.0" width="5.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1172.2" y="878.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (3 samples, 1.32%)</title><rect x="1174.4" y="899.0" width="15.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="910.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 1.32%)</title><rect x="1174.4" y="883.0" width="15.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="894.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 1.32%)</title><rect x="1174.4" y="867.0" width="15.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.32%)</title><rect x="1174.4" y="851.0" width="15.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="862.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 1.32%)</title><rect x="1174.4" y="835.0" width="15.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1177.4" y="846.0"></text>
</g>
</g>
</svg>
