<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="757"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="757"> </text>
<g id="frames">
<g>
<title>all (118 samples, 100.00%)</title><rect x="10.0" y="723.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="734.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (7 samples, 5.93%)</title><rect x="10.0" y="707.0" width="70.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="718.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (7 samples, 5.93%)</title><rect x="10.0" y="691.0" width="70.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="702.0">com/line..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 5.93%)</title><rect x="10.0" y="675.0" width="70.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="686.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 5.93%)</title><rect x="10.0" y="659.0" width="70.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="670.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 4.24%)</title><rect x="10.0" y="643.0" width="50.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="654.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 2.54%)</title><rect x="10.0" y="627.0" width="30.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 2.54%)</title><rect x="10.0" y="611.0" width="30.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="622.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 2.54%)</title><rect x="10.0" y="595.0" width="30.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="606.0">or..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 2.54%)</title><rect x="10.0" y="579.0" width="30.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="590.0">or..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (3 samples, 2.54%)</title><rect x="10.0" y="563.0" width="30.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="574.0">or..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (3 samples, 2.54%)</title><rect x="10.0" y="547.0" width="30.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="558.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (3 samples, 2.54%)</title><rect x="10.0" y="531.0" width="30.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="542.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (3 samples, 2.54%)</title><rect x="10.0" y="515.0" width="30.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="526.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (3 samples, 2.54%)</title><rect x="10.0" y="499.0" width="30.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="510.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (3 samples, 2.54%)</title><rect x="10.0" y="483.0" width="30.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="494.0">su..</text>
</g>
<g>
<title>kevent (3 samples, 2.54%)</title><rect x="10.0" y="467.0" width="30.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="13.0" y="478.0">ke..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.85%)</title><rect x="40.0" y="627.0" width="10.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.85%)</title><rect x="40.0" y="611.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="43.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.85%)</title><rect x="40.0" y="595.0" width="10.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.85%)</title><rect x="40.0" y="579.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.85%)</title><rect x="40.0" y="563.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="43.0" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.85%)</title><rect x="40.0" y="547.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="43.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.85%)</title><rect x="40.0" y="531.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.85%)</title><rect x="40.0" y="515.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.0" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.85%)</title><rect x="40.0" y="499.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.85%)</title><rect x="40.0" y="483.0" width="10.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.0" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.85%)</title><rect x="40.0" y="467.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.85%)</title><rect x="50.0" y="627.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.85%)</title><rect x="50.0" y="611.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.85%)</title><rect x="50.0" y="595.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.85%)</title><rect x="60.0" y="643.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.85%)</title><rect x="60.0" y="627.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.85%)</title><rect x="60.0" y="611.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.85%)</title><rect x="60.0" y="595.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1191118380.accept (1 samples, 0.85%)</title><rect x="60.0" y="579.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="63.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.85%)</title><rect x="60.0" y="563.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="63.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.85%)</title><rect x="60.0" y="547.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.85%)</title><rect x="60.0" y="531.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.85%)</title><rect x="60.0" y="515.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.0" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.85%)</title><rect x="60.0" y="499.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.85%)</title><rect x="60.0" y="483.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.85%)</title><rect x="70.0" y="643.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="73.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.85%)</title><rect x="70.0" y="627.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.85%)</title><rect x="70.0" y="611.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.85%)</title><rect x="70.0" y="595.0" width="10.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.85%)</title><rect x="70.0" y="579.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="73.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.85%)</title><rect x="70.0" y="563.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.85%)</title><rect x="70.0" y="547.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.85%)</title><rect x="70.0" y="531.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.85%)</title><rect x="70.0" y="515.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.85%)</title><rect x="70.0" y="499.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="73.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.85%)</title><rect x="70.0" y="483.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.85%)</title><rect x="70.0" y="467.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.85%)</title><rect x="70.0" y="451.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.0" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.85%)</title><rect x="70.0" y="435.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.0" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.85%)</title><rect x="70.0" y="419.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="73.0" y="430.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.reset (1 samples, 0.85%)</title><rect x="70.0" y="403.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.run (80 samples, 67.80%)</title><rect x="80.0" y="707.0" width="800.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.0" y="718.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (80 samples, 67.80%)</title><rect x="80.0" y="691.0" width="800.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.0" y="702.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (80 samples, 67.80%)</title><rect x="80.0" y="675.0" width="800.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.0" y="686.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1172077137.run (80 samples, 67.80%)</title><rect x="80.0" y="659.0" width="800.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.0" y="670.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1172077137.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (80 samples, 67.80%)</title><rect x="80.0" y="643.0" width="800.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.0" y="654.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (80 samples, 67.80%)</title><rect x="80.0" y="627.0" width="800.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="83.0" y="638.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (80 samples, 67.80%)</title><rect x="80.0" y="611.0" width="800.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.0" y="622.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (2 samples, 1.69%)</title><rect x="100.0" y="595.0" width="20.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (2 samples, 1.69%)</title><rect x="100.0" y="579.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (2 samples, 1.69%)</title><rect x="100.0" y="563.0" width="20.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (2 samples, 1.69%)</title><rect x="100.0" y="547.0" width="20.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (2 samples, 1.69%)</title><rect x="100.0" y="531.0" width="20.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (2 samples, 1.69%)</title><rect x="100.0" y="515.0" width="20.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.69%)</title><rect x="100.0" y="499.0" width="20.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.85%)</title><rect x="100.0" y="483.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.85%)</title><rect x="100.0" y="467.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.85%)</title><rect x="100.0" y="451.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.0" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.85%)</title><rect x="100.0" y="435.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.0" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.85%)</title><rect x="100.0" y="419.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.85%)</title><rect x="110.0" y="483.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="113.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.85%)</title><rect x="110.0" y="467.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.85%)</title><rect x="110.0" y="451.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="113.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.85%)</title><rect x="110.0" y="435.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.85%)</title><rect x="110.0" y="419.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="113.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (76 samples, 64.41%)</title><rect x="120.0" y="595.0" width="760.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="123.0" y="606.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (2 samples, 1.69%)</title><rect x="120.0" y="579.0" width="20.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="123.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 1.69%)</title><rect x="120.0" y="563.0" width="20.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.85%)</title><rect x="120.0" y="547.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.0" y="558.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.85%)</title><rect x="120.0" y="531.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.0" y="542.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.85%)</title><rect x="130.0" y="547.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="133.0" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.85%)</title><rect x="130.0" y="531.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.0" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.85%)</title><rect x="130.0" y="515.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (74 samples, 62.71%)</title><rect x="140.0" y="579.0" width="740.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.0" y="590.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (74 samples, 62.71%)</title><rect x="140.0" y="563.0" width="740.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="143.0" y="574.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1419027151.process (72 samples, 61.02%)</title><rect x="150.0" y="547.0" width="720.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.0" y="558.0">com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1419027151.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (72 samples, 61.02%)</title><rect x="150.0" y="531.0" width="720.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.0" y="542.0">com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (72 samples, 61.02%)</title><rect x="150.0" y="515.0" width="720.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="153.0" y="526.0">com/linecorp/decaton/benchmark/Recording.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (72 samples, 61.02%)</title><rect x="150.0" y="499.0" width="720.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="153.0" y="510.0">com/linecorp/decaton/benchmark/Recording$ChildRecording.process</text>
</g>
<g>
<title>java/lang/Thread.sleep (72 samples, 61.02%)</title><rect x="150.0" y="483.0" width="720.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.0" y="494.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (71 samples, 60.17%)</title><rect x="160.0" y="467.0" width="710.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="163.0" y="478.0">JVM_Sleep</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (71 samples, 60.17%)</title><rect x="160.0" y="451.0" width="710.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="163.0" y="462.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (71 samples, 60.17%)</title><rect x="160.0" y="435.0" width="710.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="163.0" y="446.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.85%)</title><rect x="160.0" y="419.0" width="10.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="163.0" y="430.0"></text>
</g>
<g>
<title>__psynch_cvwait (69 samples, 58.47%)</title><rect x="170.0" y="419.0" width="690.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="173.0" y="430.0">__psynch_cvwait</text>
</g>
<g>
<title>svcudp_op (1 samples, 0.85%)</title><rect x="860.0" y="419.0" width="10.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="863.0" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/148912029.linkToTargetMethod (1 samples, 0.85%)</title><rect x="870.0" y="547.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="873.0" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/733957003.invokeStatic_L_L (1 samples, 0.85%)</title><rect x="870.0" y="531.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="873.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/652144740.get$Lambda (1 samples, 0.85%)</title><rect x="870.0" y="515.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="873.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (3 samples, 2.54%)</title><rect x="880.0" y="707.0" width="30.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="883.0" y="718.0">or..</text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.85%)</title><rect x="890.0" y="691.0" width="10.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="893.0" y="702.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.85%)</title><rect x="890.0" y="675.0" width="10.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="893.0" y="686.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.85%)</title><rect x="890.0" y="659.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="893.0" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.85%)</title><rect x="890.0" y="643.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="893.0" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.85%)</title><rect x="890.0" y="627.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="893.0" y="638.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.85%)</title><rect x="890.0" y="611.0" width="10.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="893.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.85%)</title><rect x="900.0" y="691.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="903.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.85%)</title><rect x="900.0" y="675.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="903.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.85%)</title><rect x="900.0" y="659.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="903.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.85%)</title><rect x="900.0" y="643.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="903.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.85%)</title><rect x="900.0" y="627.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="903.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.85%)</title><rect x="900.0" y="611.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="903.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.85%)</title><rect x="900.0" y="595.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="903.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.85%)</title><rect x="900.0" y="579.0" width="10.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="903.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.85%)</title><rect x="900.0" y="563.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="903.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.85%)</title><rect x="900.0" y="547.0" width="10.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="903.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.85%)</title><rect x="900.0" y="531.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="903.0" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.85%)</title><rect x="900.0" y="515.0" width="10.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="903.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.85%)</title><rect x="900.0" y="499.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="903.0" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.85%)</title><rect x="900.0" y="483.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="903.0" y="494.0"></text>
</g>
<g>
<title>thread_start (28 samples, 23.73%)</title><rect x="910.0" y="707.0" width="280.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="913.0" y="718.0">thread_start</text>
</g>
<g>
<title>_pthread_start (28 samples, 23.73%)</title><rect x="910.0" y="691.0" width="280.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="913.0" y="702.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (28 samples, 23.73%)</title><rect x="910.0" y="675.0" width="280.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="913.0" y="686.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (28 samples, 23.73%)</title><rect x="910.0" y="659.0" width="280.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="913.0" y="670.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::run() (26 samples, 22.03%)</title><rect x="910.0" y="643.0" width="260.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="913.0" y="654.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (26 samples, 22.03%)</title><rect x="910.0" y="627.0" width="260.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="913.0" y="638.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (24 samples, 20.34%)</title><rect x="910.0" y="611.0" width="240.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="913.0" y="622.0">CompileBroker::compiler_thread_l..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (22 samples, 18.64%)</title><rect x="910.0" y="595.0" width="220.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="913.0" y="606.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (21 samples, 17.80%)</title><rect x="910.0" y="579.0" width="210.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="913.0" y="590.0">C2Compiler::compile_method(c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (21 samples, 17.80%)</title><rect x="910.0" y="563.0" width="210.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="913.0" y="574.0">Compile::Compile(ciEnv*, C2C..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (3 samples, 2.54%)</title><rect x="910.0" y="547.0" width="30.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="913.0" y="558.0">Ca..</text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (3 samples, 2.54%)</title><rect x="910.0" y="531.0" width="30.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="913.0" y="542.0">In..</text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (3 samples, 2.54%)</title><rect x="910.0" y="515.0" width="30.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="913.0" y="526.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::do_flow() (3 samples, 2.54%)</title><rect x="910.0" y="499.0" width="30.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="913.0" y="510.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::flow_types() (3 samples, 2.54%)</title><rect x="910.0" y="483.0" width="30.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="913.0" y="494.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 2.54%)</title><rect x="910.0" y="467.0" width="30.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="913.0" y="478.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.69%)</title><rect x="920.0" y="451.0" width="20.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="923.0" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 1.69%)</title><rect x="920.0" y="435.0" width="20.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="923.0" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 1.69%)</title><rect x="920.0" y="419.0" width="20.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="923.0" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 1.69%)</title><rect x="920.0" y="403.0" width="20.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="923.0" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 1.69%)</title><rect x="920.0" y="387.0" width="20.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="923.0" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 1.69%)</title><rect x="920.0" y="371.0" width="20.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="923.0" y="382.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 1.69%)</title><rect x="920.0" y="355.0" width="20.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="923.0" y="366.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.85%)</title><rect x="920.0" y="339.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="923.0" y="350.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.85%)</title><rect x="920.0" y="323.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="923.0" y="334.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.85%)</title><rect x="920.0" y="307.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="923.0" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.85%)</title><rect x="920.0" y="291.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.0" y="302.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.85%)</title><rect x="920.0" y="275.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="923.0" y="286.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.85%)</title><rect x="920.0" y="259.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="923.0" y="270.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.85%)</title><rect x="920.0" y="243.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="923.0" y="254.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.85%)</title><rect x="920.0" y="227.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="923.0" y="238.0"></text>
</g>
<g>
<title>Dictionary::get_entry(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.85%)</title><rect x="920.0" y="211.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="923.0" y="222.0"></text>
</g>
<g>
<title>ciObjectFactory::find(Metadata*, GrowableArray&lt;ciMetadata*&gt;*) (1 samples, 0.85%)</title><rect x="930.0" y="339.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="933.0" y="350.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (9 samples, 7.63%)</title><rect x="940.0" y="547.0" width="90.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="943.0" y="558.0">Compile::C..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 2.54%)</title><rect x="940.0" y="531.0" width="30.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="943.0" y="542.0">Co..</text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.85%)</title><rect x="940.0" y="515.0" width="10.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="943.0" y="526.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.85%)</title><rect x="950.0" y="515.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="953.0" y="526.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.85%)</title><rect x="950.0" y="499.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="953.0" y="510.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.85%)</title><rect x="950.0" y="483.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="953.0" y="494.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.85%)</title><rect x="960.0" y="515.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="963.0" y="526.0"></text>
</g>
<g>
<title>MacroAssembler::decode_heap_oop_not_null(RegisterImpl*, RegisterImpl*) (1 samples, 0.85%)</title><rect x="960.0" y="499.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="963.0" y="510.0"></text>
</g>
<g>
<title>Assembler::leaq(RegisterImpl*, Address) (1 samples, 0.85%)</title><rect x="960.0" y="483.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.0" y="494.0"></text>
</g>
<g>
<title>Assembler::prefixq(Address, RegisterImpl*) (1 samples, 0.85%)</title><rect x="960.0" y="467.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="963.0" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (6 samples, 5.08%)</title><rect x="970.0" y="531.0" width="60.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.0" y="542.0">PhaseC..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.85%)</title><rect x="970.0" y="515.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="973.0" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.85%)</title><rect x="970.0" y="499.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.0" y="510.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.85%)</title><rect x="970.0" y="483.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="973.0" y="494.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.85%)</title><rect x="970.0" y="467.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.0" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.85%)</title><rect x="980.0" y="515.0" width="10.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="983.0" y="526.0"></text>
</g>
<g>
<title>RegMask::find_last_elem() const (1 samples, 0.85%)</title><rect x="980.0" y="499.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="983.0" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.85%)</title><rect x="990.0" y="515.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="993.0" y="526.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.85%)</title><rect x="990.0" y="499.0" width="10.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.0" y="510.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.85%)</title><rect x="990.0" y="483.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="993.0" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.85%)</title><rect x="1000.0" y="515.0" width="10.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1003.0" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.85%)</title><rect x="1010.0" y="515.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1013.0" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.85%)</title><rect x="1010.0" y="499.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.0" y="510.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.85%)</title><rect x="1020.0" y="515.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1023.0" y="526.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.85%)</title><rect x="1020.0" y="499.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1023.0" y="510.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.85%)</title><rect x="1020.0" y="483.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1023.0" y="494.0"></text>
</g>
<g>
<title>Compile::Optimize() (5 samples, 4.24%)</title><rect x="1030.0" y="547.0" width="50.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1033.0" y="558.0">Compi..</text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.85%)</title><rect x="1030.0" y="531.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1033.0" y="542.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.85%)</title><rect x="1030.0" y="515.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1033.0" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (2 samples, 1.69%)</title><rect x="1040.0" y="531.0" width="20.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1043.0" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.85%)</title><rect x="1040.0" y="515.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1043.0" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.85%)</title><rect x="1050.0" y="515.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.0" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.85%)</title><rect x="1050.0" y="499.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.0" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.85%)</title><rect x="1050.0" y="483.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.0" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.85%)</title><rect x="1050.0" y="467.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1053.0" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.85%)</title><rect x="1050.0" y="451.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1053.0" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.85%)</title><rect x="1060.0" y="531.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1063.0" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.85%)</title><rect x="1060.0" y="515.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.0" y="526.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.85%)</title><rect x="1060.0" y="499.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.0" y="510.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.85%)</title><rect x="1070.0" y="531.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.0" y="542.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.85%)</title><rect x="1070.0" y="515.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.0" y="526.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_slow_call(CallNode*, TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*) (1 samples, 0.85%)</title><rect x="1070.0" y="499.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.0" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.85%)</title><rect x="1070.0" y="483.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.0" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.85%)</title><rect x="1070.0" y="467.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.0" y="478.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.85%)</title><rect x="1070.0" y="451.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.0" y="462.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.85%)</title><rect x="1070.0" y="435.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.0" y="446.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.85%)</title><rect x="1070.0" y="419.0" width="10.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 3.39%)</title><rect x="1080.0" y="547.0" width="40.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.0" y="558.0">Par..</text>
</g>
<g>
<title>GraphKit::GraphKit(JVMState*) (1 samples, 0.85%)</title><rect x="1080.0" y="531.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.54%)</title><rect x="1090.0" y="531.0" width="30.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.0" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.54%)</title><rect x="1090.0" y="515.0" width="30.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.0" y="526.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.54%)</title><rect x="1090.0" y="499.0" width="30.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.0" y="510.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.54%)</title><rect x="1090.0" y="483.0" width="30.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.0" y="494.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.54%)</title><rect x="1090.0" y="467.0" width="30.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.0" y="478.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.69%)</title><rect x="1090.0" y="451.0" width="20.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.69%)</title><rect x="1090.0" y="435.0" width="20.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.69%)</title><rect x="1090.0" y="419.0" width="20.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.69%)</title><rect x="1090.0" y="403.0" width="20.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.69%)</title><rect x="1090.0" y="387.0" width="20.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.69%)</title><rect x="1090.0" y="371.0" width="20.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.69%)</title><rect x="1090.0" y="355.0" width="20.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.69%)</title><rect x="1090.0" y="339.0" width="20.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.69%)</title><rect x="1090.0" y="323.0" width="20.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.69%)</title><rect x="1090.0" y="307.0" width="20.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.69%)</title><rect x="1090.0" y="291.0" width="20.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.85%)</title><rect x="1090.0" y="275.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.85%)</title><rect x="1090.0" y="259.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.85%)</title><rect x="1090.0" y="243.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.85%)</title><rect x="1090.0" y="227.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.85%)</title><rect x="1090.0" y="211.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.85%)</title><rect x="1090.0" y="195.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.85%)</title><rect x="1090.0" y="179.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.0" y="190.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.85%)</title><rect x="1090.0" y="163.0" width="10.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.0" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.85%)</title><rect x="1090.0" y="147.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.0" y="158.0"></text>
</g>
<g>
<title>Node::raise_bottom_type(Type const*) (1 samples, 0.85%)</title><rect x="1090.0" y="131.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.85%)</title><rect x="1100.0" y="275.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.0" y="286.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.85%)</title><rect x="1100.0" y="259.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.0" y="270.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.85%)</title><rect x="1100.0" y="243.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.0" y="254.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.85%)</title><rect x="1100.0" y="227.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.0" y="238.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.85%)</title><rect x="1100.0" y="211.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.0" y="222.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.85%)</title><rect x="1100.0" y="195.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.0" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.85%)</title><rect x="1100.0" y="179.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.0" y="190.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.85%)</title><rect x="1100.0" y="163.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.0" y="174.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.85%)</title><rect x="1100.0" y="147.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.0" y="158.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.85%)</title><rect x="1100.0" y="131.0" width="10.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.0" y="142.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.85%)</title><rect x="1100.0" y="115.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.0" y="126.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.85%)</title><rect x="1100.0" y="99.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.0" y="110.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.85%)</title><rect x="1100.0" y="83.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.0" y="94.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.85%)</title><rect x="1100.0" y="67.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.0" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.85%)</title><rect x="1110.0" y="451.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.85%)</title><rect x="1110.0" y="435.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.85%)</title><rect x="1110.0" y="419.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.85%)</title><rect x="1110.0" y="403.0" width="10.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.85%)</title><rect x="1110.0" y="387.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.85%)</title><rect x="1110.0" y="371.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.85%)</title><rect x="1110.0" y="355.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.85%)</title><rect x="1110.0" y="339.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.85%)</title><rect x="1110.0" y="323.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.85%)</title><rect x="1110.0" y="307.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.85%)</title><rect x="1110.0" y="291.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.85%)</title><rect x="1110.0" y="275.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.85%)</title><rect x="1110.0" y="259.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.0" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.85%)</title><rect x="1110.0" y="243.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.0" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.85%)</title><rect x="1110.0" y="227.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.85%)</title><rect x="1110.0" y="211.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.85%)</title><rect x="1110.0" y="195.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.85%)</title><rect x="1110.0" y="179.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.85%)</title><rect x="1110.0" y="163.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.0" y="174.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.85%)</title><rect x="1110.0" y="147.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.0" y="158.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.85%)</title><rect x="1110.0" y="131.0" width="10.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.0" y="142.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.85%)</title><rect x="1110.0" y="115.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.0" y="126.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.85%)</title><rect x="1110.0" y="99.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.85%)</title><rect x="1110.0" y="83.0" width="10.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.85%)</title><rect x="1110.0" y="67.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.0" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.85%)</title><rect x="1110.0" y="51.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.0" y="62.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.85%)</title><rect x="1110.0" y="35.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.0" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.85%)</title><rect x="1120.0" y="579.0" width="10.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.0" y="590.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.85%)</title><rect x="1120.0" y="563.0" width="10.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.0" y="574.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.85%)</title><rect x="1120.0" y="547.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.0" y="558.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.85%)</title><rect x="1120.0" y="531.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.0" y="542.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.85%)</title><rect x="1120.0" y="515.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.0" y="526.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.85%)</title><rect x="1120.0" y="499.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.0" y="510.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.85%)</title><rect x="1120.0" y="483.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.0" y="494.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.85%)</title><rect x="1120.0" y="467.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.0" y="478.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.85%)</title><rect x="1120.0" y="451.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.0" y="462.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 1.69%)</title><rect x="1130.0" y="595.0" width="20.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.0" y="606.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 1.69%)</title><rect x="1130.0" y="579.0" width="20.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.0" y="590.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 1.69%)</title><rect x="1130.0" y="563.0" width="20.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.0" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 1.69%)</title><rect x="1130.0" y="547.0" width="20.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.0" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 1.69%)</title><rect x="1130.0" y="531.0" width="20.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1133.0" y="542.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.85%)</title><rect x="1150.0" y="611.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.0" y="622.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.85%)</title><rect x="1150.0" y="595.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.0" y="606.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.85%)</title><rect x="1150.0" y="579.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.0" y="590.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.85%)</title><rect x="1150.0" y="563.0" width="10.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1153.0" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.85%)</title><rect x="1150.0" y="547.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.0" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.85%)</title><rect x="1150.0" y="531.0" width="10.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1153.0" y="542.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.85%)</title><rect x="1160.0" y="611.0" width="10.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1163.0" y="622.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.85%)</title><rect x="1160.0" y="595.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.0" y="606.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.85%)</title><rect x="1160.0" y="579.0" width="10.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1163.0" y="590.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.85%)</title><rect x="1160.0" y="563.0" width="10.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.0" y="574.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.85%)</title><rect x="1160.0" y="547.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.0" y="558.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::flush() (1 samples, 0.85%)</title><rect x="1160.0" y="531.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.0" y="542.0"></text>
</g>
<g>
<title>std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sync() (1 samples, 0.85%)</title><rect x="1160.0" y="515.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.0" y="526.0"></text>
</g>
<g>
<title>fflush (1 samples, 0.85%)</title><rect x="1160.0" y="499.0" width="10.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1163.0" y="510.0"></text>
</g>
<g>
<title>__sflush (1 samples, 0.85%)</title><rect x="1160.0" y="483.0" width="10.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1163.0" y="494.0"></text>
</g>
<g>
<title>write$NOCANCEL (1 samples, 0.85%)</title><rect x="1160.0" y="467.0" width="10.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1163.0" y="478.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 1.69%)</title><rect x="1170.0" y="643.0" width="20.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.0" y="654.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 1.69%)</title><rect x="1170.0" y="627.0" width="20.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.0" y="638.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 1.69%)</title><rect x="1170.0" y="611.0" width="20.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.0" y="622.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 1.69%)</title><rect x="1170.0" y="595.0" width="20.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.0" y="606.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 1.69%)</title><rect x="1170.0" y="579.0" width="20.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.0" y="590.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 1.69%)</title><rect x="1170.0" y="563.0" width="20.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1173.0" y="574.0"></text>
</g>
</g>
</svg>
