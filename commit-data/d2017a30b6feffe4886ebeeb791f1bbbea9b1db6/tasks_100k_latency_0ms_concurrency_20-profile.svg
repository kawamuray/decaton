<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (161 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.62%)</title><rect x="10.0" y="915.0" width="7.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>monitorexit_nofpu Runtime1 stub (1 samples, 0.62%)</title><rect x="10.0" y="899.0" width="7.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 15.53%)</title><rect x="17.3" y="915.0" width="183.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.3" y="926.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.62%)</title><rect x="17.3" y="899.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.62%)</title><rect x="17.3" y="883.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.62%)</title><rect x="17.3" y="867.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.62%)</title><rect x="17.3" y="851.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.62%)</title><rect x="17.3" y="835.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.62%)</title><rect x="17.3" y="819.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.62%)</title><rect x="17.3" y="803.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (1 samples, 0.62%)</title><rect x="17.3" y="787.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.62%)</title><rect x="17.3" y="771.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.hashCode (1 samples, 0.62%)</title><rect x="17.3" y="755.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (24 samples, 14.91%)</title><rect x="24.7" y="899.0" width="175.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.7" y="910.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.62%)</title><rect x="24.7" y="883.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.62%)</title><rect x="24.7" y="867.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.pausingAllProcessing (1 samples, 0.62%)</title><rect x="24.7" y="851.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.7" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (16 samples, 9.94%)</title><rect x="32.0" y="883.0" width="117.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.0" y="894.0">java/lang/Iter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1655493094.accept (16 samples, 9.94%)</title><rect x="32.0" y="867.0" width="117.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.0" y="878.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (16 samples, 9.94%)</title><rect x="32.0" y="851.0" width="117.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.0" y="862.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 8.70%)</title><rect x="32.0" y="835.0" width="102.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.0" y="846.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 8.70%)</title><rect x="32.0" y="819.0" width="102.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.0" y="830.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 8.70%)</title><rect x="32.0" y="803.0" width="102.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.0" y="814.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (14 samples, 8.70%)</title><rect x="32.0" y="787.0" width="102.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.0" y="798.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 8.70%)</title><rect x="32.0" y="771.0" width="102.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.0" y="782.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 8.07%)</title><rect x="39.3" y="755.0" width="95.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.3" y="766.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (13 samples, 8.07%)</title><rect x="39.3" y="739.0" width="95.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.3" y="750.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.86%)</title><rect x="39.3" y="723.0" width="22.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.3" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.86%)</title><rect x="39.3" y="707.0" width="22.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.3" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.86%)</title><rect x="39.3" y="691.0" width="22.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.3" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 6.21%)</title><rect x="61.3" y="723.0" width="73.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.3" y="734.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 6.21%)</title><rect x="61.3" y="707.0" width="73.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="64.3" y="718.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 6.21%)</title><rect x="61.3" y="691.0" width="73.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.3" y="702.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 6.21%)</title><rect x="61.3" y="675.0" width="73.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.3" y="686.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (10 samples, 6.21%)</title><rect x="61.3" y="659.0" width="73.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.3" y="670.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 6.21%)</title><rect x="61.3" y="643.0" width="73.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="64.3" y="654.0">Unsafe_U..</text>
</g>
<g>
<title>__pthread_cond_signal (9 samples, 5.59%)</title><rect x="61.3" y="627.0" width="66.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="64.3" y="638.0">__pthre..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.62%)</title><rect x="127.3" y="627.0" width="7.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="130.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 1.24%)</title><rect x="134.6" y="835.0" width="14.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.6" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.62%)</title><rect x="141.9" y="819.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.9" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.62%)</title><rect x="141.9" y="803.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.9" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.62%)</title><rect x="141.9" y="787.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="144.9" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.62%)</title><rect x="141.9" y="771.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.35%)</title><rect x="149.3" y="883.0" width="51.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.3" y="894.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.35%)</title><rect x="149.3" y="867.0" width="51.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.3" y="878.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 3.11%)</title><rect x="149.3" y="851.0" width="36.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.3" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 3.11%)</title><rect x="149.3" y="835.0" width="36.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.3" y="846.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 3.11%)</title><rect x="149.3" y="819.0" width="36.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.3" y="830.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 2.48%)</title><rect x="149.3" y="803.0" width="29.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="152.3" y="814.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 2.48%)</title><rect x="149.3" y="787.0" width="29.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.3" y="798.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.86%)</title><rect x="149.3" y="771.0" width="21.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.3" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.62%)</title><rect x="149.3" y="755.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="152.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.62%)</title><rect x="149.3" y="739.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.62%)</title><rect x="149.3" y="723.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.62%)</title><rect x="149.3" y="707.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.62%)</title><rect x="149.3" y="691.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.62%)</title><rect x="149.3" y="675.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="152.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.62%)</title><rect x="149.3" y="659.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (2 samples, 1.24%)</title><rect x="156.6" y="755.0" width="14.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (2 samples, 1.24%)</title><rect x="156.6" y="739.0" width="14.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="159.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (2 samples, 1.24%)</title><rect x="156.6" y="723.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="159.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (2 samples, 1.24%)</title><rect x="156.6" y="707.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.baseOffset (2 samples, 1.24%)</title><rect x="156.6" y="691.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="159.6" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (2 samples, 1.24%)</title><rect x="156.6" y="675.0" width="14.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="159.6" y="686.0"></text>
</g>
<g>
<title>java/nio/Bits.getLong (1 samples, 0.62%)</title><rect x="163.9" y="659.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="166.9" y="670.0"></text>
</g>
<g>
<title>java/nio/Bits.getLongB (1 samples, 0.62%)</title><rect x="163.9" y="643.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.9" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer._get (1 samples, 0.62%)</title><rect x="163.9" y="627.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.62%)</title><rect x="171.2" y="771.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.62%)</title><rect x="171.2" y="755.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.62%)</title><rect x="171.2" y="739.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.2" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.62%)</title><rect x="171.2" y="723.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="174.2" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.62%)</title><rect x="171.2" y="707.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="174.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.62%)</title><rect x="171.2" y="691.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="174.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.62%)</title><rect x="171.2" y="675.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="174.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.62%)</title><rect x="171.2" y="659.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="174.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.62%)</title><rect x="178.6" y="803.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.62%)</title><rect x="178.6" y="787.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.62%)</title><rect x="178.6" y="771.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.62%)</title><rect x="178.6" y="755.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.62%)</title><rect x="178.6" y="739.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.62%)</title><rect x="185.9" y="851.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.62%)</title><rect x="185.9" y="835.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.62%)</title><rect x="185.9" y="819.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.62%)</title><rect x="193.2" y="851.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.62%)</title><rect x="193.2" y="835.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.62%)</title><rect x="193.2" y="819.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.62%)</title><rect x="193.2" y="803.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.throttleDelayMs (1 samples, 0.62%)</title><rect x="193.2" y="787.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.62%)</title><rect x="193.2" y="771.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.62%)</title><rect x="193.2" y="755.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (57 samples, 35.40%)</title><rect x="200.6" y="915.0" width="417.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.6" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (57 samples, 35.40%)</title><rect x="200.6" y="899.0" width="417.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.6" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (57 samples, 35.40%)</title><rect x="200.6" y="883.0" width="417.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.6" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1191129490.run (33 samples, 20.50%)</title><rect x="207.9" y="867.0" width="241.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.9" y="878.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (33 samples, 20.50%)</title><rect x="207.9" y="851.0" width="241.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.9" y="862.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (33 samples, 20.50%)</title><rect x="207.9" y="835.0" width="241.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.9" y="846.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (33 samples, 20.50%)</title><rect x="207.9" y="819.0" width="241.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.9" y="830.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.62%)</title><rect x="222.5" y="803.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (13 samples, 8.07%)</title><rect x="229.9" y="803.0" width="95.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.9" y="814.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (13 samples, 8.07%)</title><rect x="229.9" y="787.0" width="95.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.9" y="798.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (13 samples, 8.07%)</title><rect x="229.9" y="771.0" width="95.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.9" y="782.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 8.07%)</title><rect x="229.9" y="755.0" width="95.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.9" y="766.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 8.07%)</title><rect x="229.9" y="739.0" width="95.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.9" y="750.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (13 samples, 8.07%)</title><rect x="229.9" y="723.0" width="95.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.9" y="734.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 4.97%)</title><rect x="229.9" y="707.0" width="58.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.9" y="718.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 2.48%)</title><rect x="229.9" y="691.0" width="29.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.9" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 2.48%)</title><rect x="229.9" y="675.0" width="29.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="232.9" y="686.0">co..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.62%)</title><rect x="251.9" y="659.0" width="7.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="254.9" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.62%)</title><rect x="251.9" y="643.0" width="7.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="254.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 2.48%)</title><rect x="259.2" y="691.0" width="29.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="262.2" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 2.48%)</title><rect x="259.2" y="675.0" width="29.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.2" y="686.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.24%)</title><rect x="266.5" y="659.0" width="14.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 1.24%)</title><rect x="266.5" y="643.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 1.24%)</title><rect x="266.5" y="627.0" width="14.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.62%)</title><rect x="281.2" y="659.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.2" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.62%)</title><rect x="281.2" y="643.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="284.2" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.62%)</title><rect x="281.2" y="627.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="284.2" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.62%)</title><rect x="281.2" y="611.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="284.2" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.62%)</title><rect x="281.2" y="595.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="284.2" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.62%)</title><rect x="281.2" y="579.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="284.2" y="590.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.62%)</title><rect x="281.2" y="563.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="284.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 2.48%)</title><rect x="288.5" y="707.0" width="29.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.5" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.62%)</title><rect x="288.5" y="691.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.62%)</title><rect x="288.5" y="675.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.62%)</title><rect x="288.5" y="659.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.62%)</title><rect x="288.5" y="643.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.62%)</title><rect x="295.8" y="691.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="298.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.62%)</title><rect x="295.8" y="675.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.62%)</title><rect x="295.8" y="659.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="298.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.62%)</title><rect x="303.2" y="691.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.62%)</title><rect x="303.2" y="675.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.62%)</title><rect x="303.2" y="659.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (1 samples, 0.62%)</title><rect x="310.5" y="691.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.62%)</title><rect x="310.5" y="675.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.62%)</title><rect x="310.5" y="659.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.62%)</title><rect x="310.5" y="643.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.62%)</title><rect x="310.5" y="627.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="313.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.62%)</title><rect x="317.8" y="707.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.62%)</title><rect x="317.8" y="691.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.62%)</title><rect x="317.8" y="675.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.62%)</title><rect x="317.8" y="659.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="320.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (14 samples, 8.70%)</title><rect x="325.2" y="803.0" width="102.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.2" y="814.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.86%)</title><rect x="325.2" y="787.0" width="21.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="328.2" y="798.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.86%)</title><rect x="325.2" y="771.0" width="21.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.2" y="782.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.86%)</title><rect x="325.2" y="755.0" width="21.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.2" y="766.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.86%)</title><rect x="325.2" y="739.0" width="21.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="328.2" y="750.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.62%)</title><rect x="339.8" y="723.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.62%)</title><rect x="339.8" y="707.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (6 samples, 3.73%)</title><rect x="347.1" y="787.0" width="44.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="350.1" y="798.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (6 samples, 3.73%)</title><rect x="347.1" y="771.0" width="44.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.1" y="782.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.62%)</title><rect x="354.5" y="755.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.62%)</title><rect x="354.5" y="739.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="357.5" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.62%)</title><rect x="354.5" y="723.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="357.5" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.62%)</title><rect x="354.5" y="707.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="357.5" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.62%)</title><rect x="354.5" y="691.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="357.5" y="702.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 2.48%)</title><rect x="361.8" y="755.0" width="29.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.8" y="766.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 2.48%)</title><rect x="361.8" y="739.0" width="29.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.8" y="750.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 2.48%)</title><rect x="361.8" y="723.0" width="29.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="364.8" y="734.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 2.48%)</title><rect x="361.8" y="707.0" width="29.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.8" y="718.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 2.48%)</title><rect x="361.8" y="691.0" width="29.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.8" y="702.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.62%)</title><rect x="383.8" y="675.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="386.8" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.62%)</title><rect x="383.8" y="659.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="386.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 3.11%)</title><rect x="391.1" y="787.0" width="36.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.1" y="798.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 3.11%)</title><rect x="391.1" y="771.0" width="36.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="394.1" y="782.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/773223742.process (1 samples, 0.62%)</title><rect x="391.1" y="755.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="394.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.62%)</title><rect x="391.1" y="739.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.62%)</title><rect x="391.1" y="723.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.1" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.62%)</title><rect x="391.1" y="707.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="394.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.62%)</title><rect x="391.1" y="691.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="394.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.62%)</title><rect x="391.1" y="675.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.1" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.62%)</title><rect x="391.1" y="659.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (2 samples, 1.24%)</title><rect x="398.4" y="755.0" width="14.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="401.4" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.24%)</title><rect x="398.4" y="739.0" width="14.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="401.4" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.24%)</title><rect x="398.4" y="723.0" width="14.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="401.4" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.62%)</title><rect x="413.1" y="755.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="416.1" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.62%)</title><rect x="413.1" y="739.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.1" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.62%)</title><rect x="420.4" y="755.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="423.4" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.62%)</title><rect x="420.4" y="739.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="423.4" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.62%)</title><rect x="420.4" y="723.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="423.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.24%)</title><rect x="427.8" y="803.0" width="14.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="430.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.24%)</title><rect x="427.8" y="787.0" width="14.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="430.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.62%)</title><rect x="435.1" y="771.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="438.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/2096867118.accept (1 samples, 0.62%)</title><rect x="435.1" y="755.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="438.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.62%)</title><rect x="435.1" y="739.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/794352186.complete (1 samples, 0.62%)</title><rect x="435.1" y="723.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.62%)</title><rect x="435.1" y="707.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="438.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.62%)</title><rect x="435.1" y="691.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="438.1" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.62%)</title><rect x="435.1" y="675.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.1" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.62%)</title><rect x="435.1" y="659.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="438.1" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.62%)</title><rect x="435.1" y="643.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="438.1" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.62%)</title><rect x="435.1" y="627.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.1" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.62%)</title><rect x="442.4" y="803.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="445.4" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.62%)</title><rect x="442.4" y="787.0" width="7.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="445.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.62%)</title><rect x="449.8" y="867.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="452.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.62%)</title><rect x="449.8" y="851.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="452.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.62%)</title><rect x="449.8" y="835.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="452.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 2.48%)</title><rect x="457.1" y="867.0" width="29.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="460.1" y="878.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.24%)</title><rect x="471.7" y="851.0" width="14.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 1.24%)</title><rect x="471.7" y="835.0" width="14.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="474.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (18 samples, 11.18%)</title><rect x="486.4" y="867.0" width="131.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="489.4" y="878.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (18 samples, 11.18%)</title><rect x="486.4" y="851.0" width="131.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.4" y="862.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 9.32%)</title><rect x="508.4" y="835.0" width="109.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="511.4" y="846.0">java/util/con..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 1.86%)</title><rect x="515.7" y="819.0" width="22.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="518.7" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 6.83%)</title><rect x="537.7" y="819.0" width="80.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="540.7" y="830.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 6.83%)</title><rect x="537.7" y="803.0" width="80.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="540.7" y="814.0">sun/misc/..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.62%)</title><rect x="537.7" y="787.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="540.7" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park (10 samples, 6.21%)</title><rect x="545.0" y="787.0" width="73.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="548.0" y="798.0">Unsafe_P..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.62%)</title><rect x="552.4" y="771.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="555.4" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 3.11%)</title><rect x="559.7" y="771.0" width="36.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="562.7" y="782.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 1.24%)</title><rect x="596.3" y="771.0" width="14.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="599.3" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.62%)</title><rect x="611.0" y="771.0" width="7.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="614.0" y="782.0"></text>
</g>
<g>
<title>start_thread (78 samples, 48.45%)</title><rect x="618.3" y="915.0" width="571.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="621.3" y="926.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (78 samples, 48.45%)</title><rect x="618.3" y="899.0" width="571.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="621.3" y="910.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 6.83%)</title><rect x="618.3" y="883.0" width="80.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="621.3" y="894.0">GangWorke..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.62%)</title><rect x="618.3" y="867.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="621.3" y="878.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.62%)</title><rect x="618.3" y="851.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="621.3" y="862.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.62%)</title><rect x="618.3" y="835.0" width="7.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="621.3" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 6.21%)</title><rect x="625.7" y="867.0" width="73.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="628.7" y="878.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 5.59%)</title><rect x="625.7" y="851.0" width="65.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="628.7" y="862.0">G1ParEv..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.62%)</title><rect x="625.7" y="835.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="628.7" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.48%)</title><rect x="633.0" y="835.0" width="29.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="636.0" y="846.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.24%)</title><rect x="647.6" y="819.0" width="14.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="650.6" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 1.24%)</title><rect x="647.6" y="803.0" width="14.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="650.6" y="814.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (2 samples, 1.24%)</title><rect x="647.6" y="787.0" width="14.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="650.6" y="798.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.24%)</title><rect x="662.3" y="835.0" width="14.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="665.3" y="846.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.24%)</title><rect x="677.0" y="835.0" width="14.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="680.0" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.62%)</title><rect x="691.6" y="851.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="694.6" y="862.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.62%)</title><rect x="691.6" y="835.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="694.6" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.62%)</title><rect x="691.6" y="819.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="694.6" y="830.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.62%)</title><rect x="691.6" y="803.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="694.6" y="814.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer_helper(CardTableEntryClosure*, unsigned int, BufferNode*) (1 samples, 0.62%)</title><rect x="691.6" y="787.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="694.6" y="798.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.62%)</title><rect x="691.6" y="771.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="694.6" y="782.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) [clone .part.174] (1 samples, 0.62%)</title><rect x="691.6" y="755.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="694.6" y="766.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.62%)</title><rect x="691.6" y="739.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="694.6" y="750.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.62%)</title><rect x="691.6" y="723.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="694.6" y="734.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (67 samples, 41.61%)</title><rect x="698.9" y="883.0" width="491.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="701.9" y="894.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (67 samples, 41.61%)</title><rect x="698.9" y="867.0" width="491.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="701.9" y="878.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (67 samples, 41.61%)</title><rect x="698.9" y="851.0" width="491.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="701.9" y="862.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (64 samples, 39.75%)</title><rect x="698.9" y="835.0" width="469.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="701.9" y="846.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (64 samples, 39.75%)</title><rect x="698.9" y="819.0" width="469.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="701.9" y="830.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool,..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (2 samples, 1.24%)</title><rect x="698.9" y="803.0" width="14.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="701.9" y="814.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 1.24%)</title><rect x="698.9" y="787.0" width="14.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="701.9" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 1.24%)</title><rect x="698.9" y="771.0" width="14.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="701.9" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 1.24%)</title><rect x="698.9" y="755.0" width="14.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="701.9" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 1.24%)</title><rect x="698.9" y="739.0" width="14.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="701.9" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="698.9" y="723.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="701.9" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="698.9" y="707.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="701.9" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.62%)</title><rect x="698.9" y="691.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="701.9" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="706.3" y="723.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="709.3" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_index() const (1 samples, 0.62%)</title><rect x="706.3" y="707.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="709.3" y="718.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (32 samples, 19.88%)</title><rect x="713.6" y="803.0" width="234.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="716.6" y="814.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.24%)</title><rect x="713.6" y="787.0" width="14.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="716.6" y="798.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.62%)</title><rect x="713.6" y="771.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="716.6" y="782.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.62%)</title><rect x="720.9" y="771.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="723.9" y="782.0"></text>
</g>
<g>
<title>MachNode::size(PhaseRegAlloc*) const (1 samples, 0.62%)</title><rect x="720.9" y="755.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="723.9" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.24%)</title><rect x="728.3" y="787.0" width="14.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="731.3" y="798.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 1.24%)</title><rect x="728.3" y="771.0" width="14.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="731.3" y="782.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.62%)</title><rect x="728.3" y="755.0" width="7.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="731.3" y="766.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.62%)</title><rect x="735.6" y="755.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="738.6" y="766.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.48%)</title><rect x="742.9" y="787.0" width="29.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="745.9" y="798.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.62%)</title><rect x="742.9" y="771.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="745.9" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.24%)</title><rect x="750.2" y="771.0" width="14.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="753.2" y="782.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.62%)</title><rect x="750.2" y="755.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="753.2" y="766.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.62%)</title><rect x="757.6" y="755.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="760.6" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.62%)</title><rect x="757.6" y="739.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="760.6" y="750.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.62%)</title><rect x="757.6" y="723.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.6" y="734.0"></text>
</g>
<g>
<title>MemBarStoreStoreNode::Opcode() const (1 samples, 0.62%)</title><rect x="764.9" y="771.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="767.9" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.24%)</title><rect x="772.2" y="787.0" width="14.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="775.2" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.24%)</title><rect x="772.2" y="771.0" width="14.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="775.2" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.62%)</title><rect x="772.2" y="755.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="775.2" y="766.0"></text>
</g>
<g>
<title>storeImmI0Node::ideal_Opcode() const (1 samples, 0.62%)</title><rect x="779.6" y="755.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="782.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 13.66%)</title><rect x="786.9" y="787.0" width="161.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="789.9" y="798.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>MachProjNode::ideal_reg() const (1 samples, 0.62%)</title><rect x="794.2" y="771.0" width="7.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="797.2" y="782.0"></text>
</g>
<g>
<title>MachSpillCopyNode::oper_input_base() const (1 samples, 0.62%)</title><rect x="801.6" y="771.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="804.6" y="782.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.24%)</title><rect x="808.9" y="771.0" width="14.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="811.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.62%)</title><rect x="823.5" y="771.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="826.5" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.62%)</title><rect x="823.5" y="755.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="826.5" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.62%)</title><rect x="823.5" y="739.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="826.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.24%)</title><rect x="830.9" y="771.0" width="14.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="833.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.62%)</title><rect x="838.2" y="755.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="841.2" y="766.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.62%)</title><rect x="838.2" y="739.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="841.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 3.11%)</title><rect x="845.5" y="771.0" width="36.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="848.5" y="782.0">Pha..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.62%)</title><rect x="852.9" y="755.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="855.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.24%)</title><rect x="860.2" y="755.0" width="14.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="863.2" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.62%)</title><rect x="867.5" y="739.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="870.5" y="750.0"></text>
</g>
<g>
<title>xorL_rRegNode::rule() const (1 samples, 0.62%)</title><rect x="874.8" y="755.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="877.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.62%)</title><rect x="882.2" y="771.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="885.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.62%)</title><rect x="889.5" y="771.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="892.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.62%)</title><rect x="896.8" y="771.0" width="7.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="899.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.62%)</title><rect x="904.2" y="771.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="907.2" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.48%)</title><rect x="911.5" y="771.0" width="29.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="914.5" y="782.0">Ph..</text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.62%)</title><rect x="940.8" y="771.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="943.8" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (23 samples, 14.29%)</title><rect x="948.1" y="803.0" width="168.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="951.1" y="814.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.62%)</title><rect x="948.1" y="787.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="951.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.62%)</title><rect x="955.5" y="787.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="958.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.62%)</title><rect x="955.5" y="771.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="958.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.62%)</title><rect x="955.5" y="755.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="958.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.62%)</title><rect x="955.5" y="739.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="958.5" y="750.0"></text>
</g>
<g>
<title>Compile::start() const (1 samples, 0.62%)</title><rect x="955.5" y="723.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="958.5" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 1.24%)</title><rect x="962.8" y="787.0" width="14.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="965.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (15 samples, 9.32%)</title><rect x="977.5" y="787.0" width="109.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.5" y="798.0">PhaseIdealLoo..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.62%)</title><rect x="977.5" y="771.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.5" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.62%)</title><rect x="977.5" y="755.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.5" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.62%)</title><rect x="977.5" y="739.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.62%)</title><rect x="977.5" y="723.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="980.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.62%)</title><rect x="977.5" y="707.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.24%)</title><rect x="984.8" y="771.0" width="14.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 5.59%)</title><rect x="999.4" y="771.0" width="66.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1002.4" y="782.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 4.97%)</title><rect x="1006.8" y="755.0" width="58.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.8" y="766.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 4.97%)</title><rect x="1006.8" y="739.0" width="58.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1009.8" y="750.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 1.24%)</title><rect x="1014.1" y="723.0" width="14.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 1.24%)</title><rect x="1014.1" y="707.0" width="14.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1017.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.62%)</title><rect x="1021.4" y="691.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (5 samples, 3.11%)</title><rect x="1028.8" y="723.0" width="36.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.8" y="734.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.62%)</title><rect x="1065.4" y="771.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.62%)</title><rect x="1072.7" y="771.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.62%)</title><rect x="1072.7" y="755.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.62%)</title><rect x="1072.7" y="739.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.7" y="750.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.62%)</title><rect x="1072.7" y="723.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1075.7" y="734.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.62%)</title><rect x="1080.1" y="771.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.1" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.86%)</title><rect x="1087.4" y="787.0" width="22.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.4" y="798.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.86%)</title><rect x="1087.4" y="771.0" width="22.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.4" y="782.0">P..</text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.62%)</title><rect x="1087.4" y="755.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.4" y="766.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.62%)</title><rect x="1087.4" y="739.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.4" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.62%)</title><rect x="1094.7" y="755.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.7" y="766.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.62%)</title><rect x="1102.0" y="755.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.0" y="766.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.62%)</title><rect x="1102.0" y="739.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.0" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="723.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="707.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="691.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.0" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="675.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.0" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="659.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.0" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="643.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.0" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="627.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.0" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="611.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.0" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="595.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.0" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="579.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.0" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="563.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.0" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="547.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.0" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="531.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.0" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="515.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.0" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="499.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.0" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="483.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.0" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="467.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.0" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="451.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.0" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="435.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.0" y="446.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.62%)</title><rect x="1102.0" y="419.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.0" y="430.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.62%)</title><rect x="1102.0" y="403.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.0" y="414.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.62%)</title><rect x="1109.4" y="787.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.4" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.62%)</title><rect x="1109.4" y="771.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.62%)</title><rect x="1109.4" y="755.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.4" y="766.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.62%)</title><rect x="1109.4" y="739.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.4" y="750.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.62%)</title><rect x="1109.4" y="723.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.4" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.11%)</title><rect x="1116.7" y="803.0" width="36.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.7" y="814.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.11%)</title><rect x="1116.7" y="787.0" width="36.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.7" y="798.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.11%)</title><rect x="1116.7" y="771.0" width="36.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.7" y="782.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.11%)</title><rect x="1116.7" y="755.0" width="36.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.7" y="766.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.11%)</title><rect x="1116.7" y="739.0" width="36.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.7" y="750.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.11%)</title><rect x="1116.7" y="723.0" width="36.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.7" y="734.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1116.7" y="707.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.7" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1116.7" y="691.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.7" y="702.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.62%)</title><rect x="1116.7" y="675.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.7" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.62%)</title><rect x="1116.7" y="659.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.7" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.62%)</title><rect x="1116.7" y="643.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.7" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1116.7" y="627.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.7" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::SuccIter::next() (1 samples, 0.62%)</title><rect x="1116.7" y="611.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.48%)</title><rect x="1124.0" y="707.0" width="29.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.0" y="718.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.48%)</title><rect x="1124.0" y="691.0" width="29.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.0" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.48%)</title><rect x="1124.0" y="675.0" width="29.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.0" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.48%)</title><rect x="1124.0" y="659.0" width="29.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.0" y="670.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.48%)</title><rect x="1124.0" y="643.0" width="29.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.0" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.48%)</title><rect x="1124.0" y="627.0" width="29.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.0" y="638.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1124.0" y="611.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.0" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1124.0" y="595.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.0" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.62%)</title><rect x="1124.0" y="579.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.0" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.62%)</title><rect x="1124.0" y="563.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.0" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.62%)</title><rect x="1124.0" y="547.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.0" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1124.0" y="531.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.0" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1124.0" y="515.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.0" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.62%)</title><rect x="1124.0" y="499.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.86%)</title><rect x="1131.4" y="611.0" width="22.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.4" y="622.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.86%)</title><rect x="1131.4" y="595.0" width="22.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.4" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.86%)</title><rect x="1131.4" y="579.0" width="22.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.4" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.86%)</title><rect x="1131.4" y="563.0" width="22.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.4" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.86%)</title><rect x="1131.4" y="547.0" width="22.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.4" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.86%)</title><rect x="1131.4" y="531.0" width="22.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.4" y="542.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.86%)</title><rect x="1131.4" y="515.0" width="22.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.4" y="526.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.86%)</title><rect x="1131.4" y="499.0" width="22.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.4" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.86%)</title><rect x="1131.4" y="483.0" width="22.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.4" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.86%)</title><rect x="1131.4" y="467.0" width="22.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.4" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.86%)</title><rect x="1131.4" y="451.0" width="22.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.4" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.86%)</title><rect x="1131.4" y="435.0" width="22.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.4" y="446.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1131.4" y="419.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.4" y="430.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1131.4" y="403.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.4" y="414.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.62%)</title><rect x="1131.4" y="387.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.4" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.62%)</title><rect x="1131.4" y="371.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.4" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.62%)</title><rect x="1131.4" y="355.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.4" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1131.4" y="339.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.4" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1131.4" y="323.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.4" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.62%)</title><rect x="1131.4" y="307.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.4" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.62%)</title><rect x="1131.4" y="291.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.4" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.62%)</title><rect x="1131.4" y="275.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.4" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1131.4" y="259.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.4" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1131.4" y="243.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.4" y="254.0"></text>
</g>
<g>
<title>ciInstanceKlass::field_cache() (1 samples, 0.62%)</title><rect x="1131.4" y="227.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.4" y="238.0"></text>
</g>
<g>
<title>ciConstantPoolCache::ciConstantPoolCache(Arena*, int) (1 samples, 0.62%)</title><rect x="1131.4" y="211.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.4" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1138.7" y="419.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1138.7" y="403.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1138.7" y="387.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1138.7" y="371.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1138.7" y="355.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1138.7" y="339.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1138.7" y="323.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1138.7" y="307.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1138.7" y="291.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1138.7" y="275.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1138.7" y="259.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1138.7" y="243.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1138.7" y="227.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1138.7" y="211.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1138.7" y="195.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1138.7" y="179.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1138.7" y="163.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1138.7" y="147.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.7" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1138.7" y="131.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.7" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1138.7" y="115.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1138.7" y="99.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.7" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1138.7" y="83.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1138.7" y="67.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.7" y="78.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.62%)</title><rect x="1138.7" y="51.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.7" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.62%)</title><rect x="1138.7" y="35.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.7" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.62%)</title><rect x="1146.0" y="419.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.0" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1146.0" y="403.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.0" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1146.0" y="387.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.0" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.62%)</title><rect x="1146.0" y="371.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.0" y="382.0"></text>
</g>
<g>
<title>Atomic::inc(short volatile*) (1 samples, 0.62%)</title><rect x="1146.0" y="355.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.0" y="366.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.24%)</title><rect x="1153.4" y="803.0" width="14.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.4" y="814.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 1.24%)</title><rect x="1153.4" y="787.0" width="14.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.4" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.86%)</title><rect x="1168.0" y="835.0" width="22.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="846.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.86%)</title><rect x="1168.0" y="819.0" width="22.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.0" y="830.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.86%)</title><rect x="1168.0" y="803.0" width="22.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.0" y="814.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.62%)</title><rect x="1168.0" y="787.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="798.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.62%)</title><rect x="1168.0" y="771.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.0" y="782.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.62%)</title><rect x="1168.0" y="755.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.62%)</title><rect x="1168.0" y="739.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.0" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.62%)</title><rect x="1168.0" y="723.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="734.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.62%)</title><rect x="1168.0" y="707.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.0" y="718.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 1.24%)</title><rect x="1175.3" y="787.0" width="14.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="798.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 1.24%)</title><rect x="1175.3" y="771.0" width="14.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.62%)</title><rect x="1175.3" y="755.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.62%)</title><rect x="1175.3" y="739.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="750.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.62%)</title><rect x="1175.3" y="723.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.3" y="734.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.62%)</title><rect x="1182.7" y="755.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="766.0"></text>
</g>
</g>
</svg>
