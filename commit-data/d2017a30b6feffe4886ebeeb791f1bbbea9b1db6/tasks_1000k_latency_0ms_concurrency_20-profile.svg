<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1430" onload="init(evt)" viewBox="0 0 1200 1430" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1413"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1413"> </text>
<g id="frames">
<g>
<title>all (1,214 samples, 100.00%)</title><rect x="10.0" y="1379.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1390.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (266 samples, 21.91%)</title><rect x="10.0" y="1363.0" width="258.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1374.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.08%)</title><rect x="10.0" y="1347.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.08%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.08%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="10.0" y="1219.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="10.0" y="1203.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.08%)</title><rect x="10.0" y="1187.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.08%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.08%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (1 samples, 0.08%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (265 samples, 21.83%)</title><rect x="11.0" y="1347.0" width="257.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="1358.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.25%)</title><rect x="11.0" y="1331.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.0" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.25%)</title><rect x="11.0" y="1315.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/369517040.accept (3 samples, 0.25%)</title><rect x="11.0" y="1299.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.25%)</title><rect x="11.0" y="1283.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.25%)</title><rect x="11.0" y="1267.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.0" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.25%)</title><rect x="11.0" y="1251.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.0" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.08%)</title><rect x="12.9" y="1235.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.9" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="12.9" y="1219.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.33%)</title><rect x="13.9" y="1331.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.9" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.33%)</title><rect x="13.9" y="1315.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.9" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.33%)</title><rect x="13.9" y="1299.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.9" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.33%)</title><rect x="13.9" y="1283.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.9" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.25%)</title><rect x="14.9" y="1267.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.9" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.25%)</title><rect x="14.9" y="1251.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.9" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.25%)</title><rect x="14.9" y="1235.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.9" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="14.9" y="1219.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="14.9" y="1203.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="14.9" y="1187.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.9" y="1198.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="14.9" y="1171.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="17.9" y="1182.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.16%)</title><rect x="15.8" y="1219.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.8" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="15.8" y="1203.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.8" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.08%)</title><rect x="16.8" y="1203.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 0.25%)</title><rect x="17.8" y="1331.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.8" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.16%)</title><rect x="18.7" y="1315.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.7" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="18.7" y="1299.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.7" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="18.7" y="1283.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.7" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="18.7" y="1267.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.7" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="18.7" y="1251.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.7" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="18.7" y="1235.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.7" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="18.7" y="1219.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="18.7" y="1203.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="18.7" y="1187.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$251/1474083132.test (1 samples, 0.08%)</title><rect x="18.7" y="1171.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="19.7" y="1187.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (196 samples, 16.14%)</title><rect x="20.7" y="1331.0" width="190.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.7" y="1342.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/828407024.accept (183 samples, 15.07%)</title><rect x="21.7" y="1315.0" width="177.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.7" y="1326.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (181 samples, 14.91%)</title><rect x="23.6" y="1299.0" width="175.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.6" y="1310.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.08%)</title><rect x="23.6" y="1283.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.6" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (149 samples, 12.27%)</title><rect x="24.6" y="1283.0" width="144.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.6" y="1294.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (149 samples, 12.27%)</title><rect x="24.6" y="1267.0" width="144.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.6" y="1278.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (149 samples, 12.27%)</title><rect x="24.6" y="1251.0" width="144.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.6" y="1262.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (149 samples, 12.27%)</title><rect x="24.6" y="1235.0" width="144.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.6" y="1246.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (149 samples, 12.27%)</title><rect x="24.6" y="1219.0" width="144.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.6" y="1230.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (149 samples, 12.27%)</title><rect x="24.6" y="1203.0" width="144.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.6" y="1214.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (87 samples, 7.17%)</title><rect x="24.6" y="1187.0" width="84.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.6" y="1198.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (10 samples, 0.82%)</title><rect x="24.6" y="1171.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (10 samples, 0.82%)</title><rect x="24.6" y="1155.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (8 samples, 0.66%)</title><rect x="26.5" y="1139.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (8 samples, 0.66%)</title><rect x="26.5" y="1123.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.25%)</title><rect x="34.3" y="1171.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (3 samples, 0.25%)</title><rect x="34.3" y="1155.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.16%)</title><rect x="35.3" y="1139.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (74 samples, 6.10%)</title><rect x="37.2" y="1171.0" width="71.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.2" y="1182.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (74 samples, 6.10%)</title><rect x="37.2" y="1155.0" width="71.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.2" y="1166.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (72 samples, 5.93%)</title><rect x="37.2" y="1139.0" width="70.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.2" y="1150.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (72 samples, 5.93%)</title><rect x="37.2" y="1123.0" width="70.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.2" y="1134.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (72 samples, 5.93%)</title><rect x="37.2" y="1107.0" width="70.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.2" y="1118.0">sun/mis..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="38.2" y="1091.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="41.2" y="1102.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="39.2" y="1091.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="42.2" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="40.1" y="1091.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="43.1" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Unpark (61 samples, 5.02%)</title><rect x="41.1" y="1091.0" width="59.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="44.1" y="1102.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="43.0" y="1075.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="46.0" y="1086.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.25%)</title><rect x="44.0" y="1075.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="47.0" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_signal (37 samples, 3.05%)</title><rect x="46.9" y="1075.0" width="36.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="49.9" y="1086.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.25%)</title><rect x="82.9" y="1075.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="85.9" y="1086.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.24%)</title><rect x="85.8" y="1075.0" width="14.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="88.8" y="1086.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.41%)</title><rect x="100.4" y="1091.0" width="4.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="103.4" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="105.3" y="1091.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="108.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.16%)</title><rect x="107.2" y="1139.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="110.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (41 samples, 3.38%)</title><rect x="109.1" y="1187.0" width="39.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.1" y="1198.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (41 samples, 3.38%)</title><rect x="109.1" y="1171.0" width="39.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.1" y="1182.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (41 samples, 3.38%)</title><rect x="109.1" y="1155.0" width="39.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="112.1" y="1166.0">jav..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="145.1" y="1139.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.1" y="1150.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="146.1" y="1139.0" width="2.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="149.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 1.15%)</title><rect x="149.0" y="1187.0" width="13.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (14 samples, 1.15%)</title><rect x="149.0" y="1171.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (14 samples, 1.15%)</title><rect x="149.0" y="1155.0" width="13.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="152.0" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="156.8" y="1139.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="159.8" y="1150.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="156.8" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="159.8" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="156.8" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="159.8" y="1118.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="156.8" y="1091.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="159.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.16%)</title><rect x="157.7" y="1139.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.7" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="159.7" y="1139.0" width="2.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="162.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.58%)</title><rect x="162.6" y="1187.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.58%)</title><rect x="162.6" y="1171.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="162.6" y="1155.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="162.6" y="1139.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (6 samples, 0.49%)</title><rect x="163.6" y="1155.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="166.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="163.6" y="1139.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="166.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (5 samples, 0.41%)</title><rect x="164.5" y="1139.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.33%)</title><rect x="169.4" y="1283.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.4" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.33%)</title><rect x="169.4" y="1267.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="172.4" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.33%)</title><rect x="169.4" y="1251.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.4" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (27 samples, 2.22%)</title><rect x="173.3" y="1283.0" width="26.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.3" y="1294.0">c..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="173.3" y="1267.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="176.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 2.14%)</title><rect x="174.3" y="1267.0" width="25.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="177.3" y="1278.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.41%)</title><rect x="188.8" y="1251.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="191.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="188.8" y="1235.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="191.8" y="1246.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.33%)</title><rect x="189.8" y="1235.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.8" y="1246.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="193.7" y="1251.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="196.7" y="1262.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.41%)</title><rect x="194.7" y="1251.0" width="4.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="197.7" y="1262.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.25%)</title><rect x="199.5" y="1315.0" width="3.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="202.5" y="1326.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="202.5" y="1315.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.5" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="202.5" y="1299.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.5" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="202.5" y="1283.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.5" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="202.5" y="1267.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.5" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="202.5" y="1251.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.49%)</title><rect x="203.4" y="1315.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.49%)</title><rect x="203.4" y="1299.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.49%)</title><rect x="203.4" y="1283.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.49%)</title><rect x="203.4" y="1267.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.4" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (6 samples, 0.49%)</title><rect x="203.4" y="1251.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.4" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (6 samples, 0.49%)</title><rect x="203.4" y="1235.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.16%)</title><rect x="209.3" y="1315.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="210.2" y="1299.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 4.86%)</title><rect x="211.2" y="1331.0" width="57.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.2" y="1342.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 4.86%)</title><rect x="211.2" y="1315.0" width="57.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.2" y="1326.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 2.80%)</title><rect x="211.2" y="1299.0" width="33.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="214.2" y="1310.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (3 samples, 0.25%)</title><rect x="211.2" y="1283.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.2" y="1294.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.08%)</title><rect x="211.2" y="1267.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="214.2" y="1278.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="212.2" y="1267.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="215.2" y="1278.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.08%)</title><rect x="212.2" y="1251.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="215.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="213.1" y="1267.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="213.1" y="1251.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (31 samples, 2.55%)</title><rect x="214.1" y="1283.0" width="30.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="217.1" y="1294.0">or..</text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.16%)</title><rect x="214.1" y="1267.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.1" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="215.1" y="1251.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.1" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.08%)</title><rect x="215.1" y="1235.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (28 samples, 2.31%)</title><rect x="216.1" y="1267.0" width="27.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.1" y="1278.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (23 samples, 1.89%)</title><rect x="216.1" y="1251.0" width="22.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.1" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (23 samples, 1.89%)</title><rect x="216.1" y="1235.0" width="22.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.1" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 1.07%)</title><rect x="216.1" y="1219.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.66%)</title><rect x="216.1" y="1203.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.66%)</title><rect x="216.1" y="1187.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.66%)</title><rect x="216.1" y="1171.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="219.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.66%)</title><rect x="216.1" y="1155.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.66%)</title><rect x="216.1" y="1139.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.66%)</title><rect x="216.1" y="1123.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.66%)</title><rect x="216.1" y="1107.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.33%)</title><rect x="223.8" y="1203.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.33%)</title><rect x="223.8" y="1187.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="227.7" y="1203.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.08%)</title><rect x="227.7" y="1187.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="227.7" y="1171.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="227.7" y="1155.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.7" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="227.7" y="1139.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.82%)</title><rect x="228.7" y="1219.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.82%)</title><rect x="228.7" y="1203.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.41%)</title><rect x="228.7" y="1187.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.7" y="1198.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.41%)</title><rect x="228.7" y="1171.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.7" y="1182.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="232.6" y="1155.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="235.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.33%)</title><rect x="233.6" y="1187.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.6" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.33%)</title><rect x="233.6" y="1171.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="236.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.08%)</title><rect x="237.4" y="1187.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.08%)</title><rect x="237.4" y="1171.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.4" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="237.4" y="1155.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="240.4" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="237.4" y="1139.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="240.4" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="237.4" y="1123.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="240.4" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="237.4" y="1107.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="240.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (5 samples, 0.41%)</title><rect x="238.4" y="1251.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (5 samples, 0.41%)</title><rect x="238.4" y="1235.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (2 samples, 0.16%)</title><rect x="238.4" y="1219.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="241.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="238.4" y="1203.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="238.4" y="1187.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="239.4" y="1203.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="239.4" y="1187.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.08%)</title><rect x="239.4" y="1171.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.4" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="239.4" y="1155.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="242.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="240.4" y="1219.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="240.4" y="1203.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="241.3" y="1219.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="241.3" y="1203.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="241.3" y="1187.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="243.3" y="1267.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="243.3" y="1251.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="243.3" y="1235.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.3" y="1246.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="243.3" y="1219.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.3" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="243.3" y="1203.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (13 samples, 1.07%)</title><rect x="244.3" y="1299.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (13 samples, 1.07%)</title><rect x="244.3" y="1283.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (12 samples, 0.99%)</title><rect x="244.3" y="1267.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="245.2" y="1251.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1800290800.accept (1 samples, 0.08%)</title><rect x="245.2" y="1235.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.08%)</title><rect x="245.2" y="1219.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="245.2" y="1203.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="245.2" y="1187.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="245.2" y="1171.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.2" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="245.2" y="1155.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.2" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="245.2" y="1139.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="246.2" y="1251.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.2" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="246.2" y="1235.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.2" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="247.2" y="1219.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.2" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="247.2" y="1203.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.2" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="247.2" y="1187.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.2" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="247.2" y="1171.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.2" y="1182.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="247.2" y="1155.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="250.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.16%)</title><rect x="248.1" y="1251.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.16%)</title><rect x="248.1" y="1235.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.1" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="249.1" y="1219.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.1" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="249.1" y="1203.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.16%)</title><rect x="250.1" y="1251.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.1" y="1262.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.16%)</title><rect x="250.1" y="1235.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.1" y="1246.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.16%)</title><rect x="250.1" y="1219.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.1" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.08%)</title><rect x="250.1" y="1203.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.1" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="250.1" y="1187.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.1" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.08%)</title><rect x="250.1" y="1171.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.1" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="251.1" y="1203.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.1" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="251.1" y="1187.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.08%)</title><rect x="251.1" y="1171.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="254.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.33%)</title><rect x="252.0" y="1251.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.33%)</title><rect x="252.0" y="1235.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.25%)</title><rect x="253.0" y="1219.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.0" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.25%)</title><rect x="253.0" y="1203.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.0" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.25%)</title><rect x="253.0" y="1187.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.0" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="253.0" y="1171.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.0" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="253.0" y="1155.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.0" y="1166.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="253.0" y="1139.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="253.0" y="1123.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.0" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.08%)</title><rect x="253.0" y="1107.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="254.0" y="1139.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="254.0" y="1123.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="254.0" y="1107.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="254.0" y="1091.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$60/673531157.get (1 samples, 0.08%)</title><rect x="254.0" y="1075.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="254.9" y="1171.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="254.9" y="1155.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="254.9" y="1139.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="255.9" y="1267.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="258.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="255.9" y="1251.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.9" y="1262.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="255.9" y="1235.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.9" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="255.9" y="1219.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="255.9" y="1203.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.16%)</title><rect x="256.9" y="1299.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (2 samples, 0.16%)</title><rect x="256.9" y="1283.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.49%)</title><rect x="258.8" y="1299.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.41%)</title><rect x="258.8" y="1283.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.41%)</title><rect x="258.8" y="1267.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="258.8" y="1251.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.8" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="258.8" y="1235.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.33%)</title><rect x="259.8" y="1251.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.08%)</title><rect x="259.8" y="1235.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.08%)</title><rect x="259.8" y="1219.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.08%)</title><rect x="259.8" y="1203.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.08%)</title><rect x="259.8" y="1187.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="262.8" y="1198.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.08%)</title><rect x="259.8" y="1171.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.8" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.08%)</title><rect x="259.8" y="1155.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.8" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.08%)</title><rect x="259.8" y="1139.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="262.8" y="1150.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.08%)</title><rect x="259.8" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.8" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.08%)</title><rect x="259.8" y="1107.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (3 samples, 0.25%)</title><rect x="260.8" y="1235.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.8" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.25%)</title><rect x="260.8" y="1219.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="263.8" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.25%)</title><rect x="260.8" y="1203.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="263.8" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.08%)</title><rect x="262.7" y="1187.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="265.7" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="262.7" y="1171.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="265.7" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long, unsigned char) (1 samples, 0.08%)</title><rect x="262.7" y="1155.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="265.7" y="1166.0"></text>
</g>
<g>
<title>HeapRegionManager::find_contiguous(unsigned long, bool) (1 samples, 0.08%)</title><rect x="262.7" y="1139.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="265.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="263.7" y="1283.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="263.7" y="1267.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="263.7" y="1251.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="263.7" y="1235.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="263.7" y="1219.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="263.7" y="1203.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="266.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="263.7" y="1187.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.08%)</title><rect x="263.7" y="1171.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.08%)</title><rect x="263.7" y="1155.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$2.sizeOf (1 samples, 0.08%)</title><rect x="263.7" y="1139.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.33%)</title><rect x="264.7" y="1299.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.33%)</title><rect x="264.7" y="1283.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="264.7" y="1267.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.7" y="1278.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="264.7" y="1251.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="267.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="265.6" y="1267.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.6" y="1278.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="265.6" y="1251.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.6" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="265.6" y="1235.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.08%)</title><rect x="265.6" y="1219.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.16%)</title><rect x="266.6" y="1267.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.16%)</title><rect x="266.6" y="1251.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.6" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="266.6" y="1235.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.6" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="266.6" y="1219.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="266.6" y="1203.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="269.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="266.6" y="1187.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="266.6" y="1171.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.6" y="1182.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="266.6" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.6" y="1166.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="266.6" y="1139.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.6" y="1150.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="266.6" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.6" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="266.6" y="1107.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.6" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="266.6" y="1091.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="266.6" y="1075.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.08%)</title><rect x="267.6" y="1171.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="267.6" y="1155.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="270.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="267.6" y="1139.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="267.6" y="1123.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="267.6" y="1107.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="270.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.run (767 samples, 63.18%)</title><rect x="268.6" y="1363.0" width="745.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.6" y="1374.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (767 samples, 63.18%)</title><rect x="268.6" y="1347.0" width="745.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.6" y="1358.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (767 samples, 63.18%)</title><rect x="268.6" y="1331.0" width="745.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.6" y="1342.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1180903529.run (535 samples, 44.07%)</title><rect x="268.6" y="1315.0" width="520.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.6" y="1326.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1180903..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (535 samples, 44.07%)</title><rect x="268.6" y="1299.0" width="520.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.6" y="1310.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (530 samples, 43.66%)</title><rect x="273.4" y="1283.0" width="515.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.4" y="1294.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (523 samples, 43.08%)</title><rect x="273.4" y="1267.0" width="508.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="276.4" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPro..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.08%)</title><rect x="282.2" y="1251.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (177 samples, 14.58%)</title><rect x="283.1" y="1251.0" width="172.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.1" y="1262.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (177 samples, 14.58%)</title><rect x="283.1" y="1235.0" width="172.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.1" y="1246.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (177 samples, 14.58%)</title><rect x="283.1" y="1219.0" width="172.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.1" y="1230.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (177 samples, 14.58%)</title><rect x="283.1" y="1203.0" width="172.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.1" y="1214.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (177 samples, 14.58%)</title><rect x="283.1" y="1187.0" width="172.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.1" y="1198.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (177 samples, 14.58%)</title><rect x="283.1" y="1171.0" width="172.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.1" y="1182.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (65 samples, 5.35%)</title><rect x="283.1" y="1155.0" width="63.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.1" y="1166.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (35 samples, 2.88%)</title><rect x="283.1" y="1139.0" width="34.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.1" y="1150.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (33 samples, 2.72%)</title><rect x="283.1" y="1123.0" width="32.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.1" y="1134.0">co..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="300.6" y="1107.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="303.6" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="300.6" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="303.6" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.74%)</title><rect x="301.6" y="1107.0" width="8.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="304.6" y="1118.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.66%)</title><rect x="302.6" y="1091.0" width="7.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="305.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.41%)</title><rect x="310.3" y="1107.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="310.3" y="1091.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.41%)</title><rect x="310.3" y="1075.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.41%)</title><rect x="310.3" y="1059.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="315.2" y="1123.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="318.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.16%)</title><rect x="315.2" y="1107.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (30 samples, 2.47%)</title><rect x="317.1" y="1139.0" width="29.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.1" y="1150.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (3 samples, 0.25%)</title><rect x="317.1" y="1123.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (27 samples, 2.22%)</title><rect x="320.1" y="1123.0" width="26.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.1" y="1134.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="323.0" y="1107.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="326.0" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="323.0" y="1091.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="326.0" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="323.0" y="1075.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="326.0" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="323.0" y="1059.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="326.0" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="323.0" y="1043.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="326.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.25%)</title><rect x="324.0" y="1107.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.25%)</title><rect x="324.0" y="1091.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="327.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (12 samples, 0.99%)</title><rect x="326.9" y="1107.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="329.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (12 samples, 0.99%)</title><rect x="326.9" y="1091.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (2 samples, 0.16%)</title><rect x="326.9" y="1075.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="329.9" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="326.9" y="1059.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="329.9" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="326.9" y="1043.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="329.9" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="327.8" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="330.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (10 samples, 0.82%)</title><rect x="328.8" y="1075.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (8 samples, 0.66%)</title><rect x="338.5" y="1107.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="341.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="345.3" y="1091.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.3" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="345.3" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="348.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (103 samples, 8.48%)</title><rect x="346.3" y="1155.0" width="100.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.3" y="1166.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (7 samples, 0.58%)</title><rect x="346.3" y="1139.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="349.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (7 samples, 0.58%)</title><rect x="346.3" y="1123.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="349.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.16%)</title><rect x="347.3" y="1107.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="350.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.16%)</title><rect x="347.3" y="1091.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="350.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.08%)</title><rect x="349.2" y="1107.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="352.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 0.25%)</title><rect x="350.2" y="1107.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (10 samples, 0.82%)</title><rect x="353.1" y="1139.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.82%)</title><rect x="353.1" y="1123.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.25%)</title><rect x="357.0" y="1107.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="360.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (3 samples, 0.25%)</title><rect x="359.9" y="1107.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="362.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.91%)</title><rect x="362.8" y="1139.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.82%)</title><rect x="362.8" y="1123.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="365.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.66%)</title><rect x="364.8" y="1107.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="367.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.66%)</title><rect x="364.8" y="1091.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="367.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.25%)</title><rect x="369.6" y="1075.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="372.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.08%)</title><rect x="372.6" y="1123.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="375.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.49%)</title><rect x="373.5" y="1139.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="376.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.49%)</title><rect x="373.5" y="1123.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.5" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="374.5" y="1107.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="377.5" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="374.5" y="1091.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="377.5" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="374.5" y="1075.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="377.5" y="1086.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="374.5" y="1059.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="377.5" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="375.5" y="1059.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="378.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.25%)</title><rect x="376.4" y="1107.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.25%)</title><rect x="376.4" y="1091.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.25%)</title><rect x="376.4" y="1075.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 5.68%)</title><rect x="379.4" y="1139.0" width="67.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="382.4" y="1150.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 1.89%)</title><rect x="380.3" y="1123.0" width="22.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="383.3" y="1134.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.66%)</title><rect x="380.3" y="1107.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="383.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.66%)</title><rect x="380.3" y="1091.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="383.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.66%)</title><rect x="380.3" y="1075.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.91%)</title><rect x="388.1" y="1107.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="391.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.25%)</title><rect x="398.8" y="1107.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="401.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.25%)</title><rect x="398.8" y="1091.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="401.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="401.7" y="1107.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="404.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (45 samples, 3.71%)</title><rect x="402.7" y="1123.0" width="43.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="405.7" y="1134.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (43 samples, 3.54%)</title><rect x="404.6" y="1107.0" width="41.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.6" y="1118.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (43 samples, 3.54%)</title><rect x="404.6" y="1091.0" width="41.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="407.6" y="1102.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.73%)</title><rect x="411.4" y="1075.0" width="20.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="414.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.41%)</title><rect x="418.2" y="1059.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="421.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.41%)</title><rect x="418.2" y="1043.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="421.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.41%)</title><rect x="418.2" y="1027.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="421.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.25%)</title><rect x="420.2" y="1011.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="423.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.25%)</title><rect x="420.2" y="995.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="423.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.41%)</title><rect x="423.1" y="1059.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="426.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.25%)</title><rect x="428.0" y="1059.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="431.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.25%)</title><rect x="428.0" y="1043.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="431.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="428.9" y="1027.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="431.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="430.9" y="1059.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.33%)</title><rect x="431.8" y="1075.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="434.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.25%)</title><rect x="432.8" y="1059.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.25%)</title><rect x="432.8" y="1043.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="435.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.25%)</title><rect x="432.8" y="1027.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.25%)</title><rect x="432.8" y="1011.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.58%)</title><rect x="435.7" y="1075.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="438.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.58%)</title><rect x="435.7" y="1059.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.58%)</title><rect x="435.7" y="1043.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.58%)</title><rect x="435.7" y="1027.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.58%)</title><rect x="435.7" y="1011.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.7" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="435.7" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="438.7" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="435.7" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="438.7" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="435.7" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="438.7" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="435.7" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="438.7" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="435.7" y="931.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="438.7" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="435.7" y="915.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="438.7" y="926.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="435.7" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="438.7" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="435.7" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="438.7" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="435.7" y="867.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="438.7" y="878.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.08%)</title><rect x="435.7" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="438.7" y="862.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.49%)</title><rect x="436.7" y="995.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="439.7" y="1006.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (6 samples, 0.49%)</title><rect x="436.7" y="979.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="439.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.33%)</title><rect x="442.5" y="1075.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="445.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.33%)</title><rect x="442.5" y="1059.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.33%)</title><rect x="442.5" y="1043.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="445.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.16%)</title><rect x="444.5" y="1027.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.74%)</title><rect x="446.4" y="1155.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="449.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.74%)</title><rect x="446.4" y="1139.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="449.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.74%)</title><rect x="446.4" y="1123.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (4 samples, 0.33%)</title><rect x="446.4" y="1107.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="449.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (2 samples, 0.16%)</title><rect x="450.3" y="1107.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="453.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.25%)</title><rect x="452.3" y="1107.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="455.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.25%)</title><rect x="452.3" y="1091.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (314 samples, 25.86%)</title><rect x="455.2" y="1251.0" width="305.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.2" y="1262.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (67 samples, 5.52%)</title><rect x="456.1" y="1235.0" width="65.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="459.1" y="1246.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (67 samples, 5.52%)</title><rect x="456.1" y="1219.0" width="65.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="459.1" y="1230.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (65 samples, 5.35%)</title><rect x="458.1" y="1203.0" width="63.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.1" y="1214.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.41%)</title><rect x="462.0" y="1187.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="465.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.41%)</title><rect x="462.0" y="1171.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="465.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.41%)</title><rect x="462.0" y="1155.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.41%)</title><rect x="462.0" y="1139.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="465.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.16%)</title><rect x="464.9" y="1123.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="467.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="465.9" y="1107.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="468.9" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (56 samples, 4.61%)</title><rect x="466.8" y="1187.0" width="54.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="469.8" y="1198.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (22 samples, 1.81%)</title><rect x="499.9" y="1171.0" width="21.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="502.9" y="1182.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (22 samples, 1.81%)</title><rect x="499.9" y="1155.0" width="21.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.9" y="1166.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.41%)</title><rect x="512.5" y="1139.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="515.5" y="1150.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.33%)</title><rect x="517.4" y="1139.0" width="3.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="520.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.41%)</title><rect x="521.3" y="1235.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="524.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.41%)</title><rect x="521.3" y="1219.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="524.3" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.41%)</title><rect x="521.3" y="1203.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="524.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (164 samples, 13.51%)</title><rect x="526.1" y="1235.0" width="159.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="529.1" y="1246.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (164 samples, 13.51%)</title><rect x="526.1" y="1219.0" width="159.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="529.1" y="1230.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="538.8" y="1203.0" width="4.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="541.8" y="1214.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="538.8" y="1187.0" width="4.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="541.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (53 samples, 4.37%)</title><rect x="543.6" y="1203.0" width="51.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="546.6" y="1214.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 2.97%)</title><rect x="553.3" y="1187.0" width="35.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="556.3" y="1198.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (35 samples, 2.88%)</title><rect x="554.3" y="1171.0" width="34.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="557.3" y="1182.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (24 samples, 1.98%)</title><rect x="560.1" y="1155.0" width="23.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="563.1" y="1166.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (24 samples, 1.98%)</title><rect x="560.1" y="1139.0" width="23.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="563.1" y="1150.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (24 samples, 1.98%)</title><rect x="560.1" y="1123.0" width="23.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.1" y="1134.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.66%)</title><rect x="567.9" y="1107.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="570.9" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="567.9" y="1091.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="570.9" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="568.9" y="1091.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="571.9" y="1102.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="568.9" y="1075.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="571.9" y="1086.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="568.9" y="1059.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="571.9" y="1070.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="568.9" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="571.9" y="1054.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.49%)</title><rect x="569.9" y="1091.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="572.9" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.25%)</title><rect x="571.8" y="1075.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="574.8" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="572.8" y="1059.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="575.8" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="572.8" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="575.8" y="1054.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="572.8" y="1027.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="575.8" y="1038.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="572.8" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="575.8" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="573.8" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="576.8" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="574.7" y="1075.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="577.7" y="1086.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.08%)</title><rect x="575.7" y="1107.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="578.7" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.58%)</title><rect x="576.7" y="1107.0" width="6.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="579.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="583.5" y="1155.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="586.5" y="1166.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="586.4" y="1155.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="589.4" y="1166.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="587.4" y="1155.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="590.4" y="1166.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.25%)</title><rect x="588.3" y="1187.0" width="3.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="591.3" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="591.3" y="1187.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="594.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="595.1" y="1203.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="598.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.91%)</title><rect x="596.1" y="1203.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="599.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.toString (11 samples, 0.91%)</title><rect x="596.1" y="1187.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="599.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (11 samples, 0.91%)</title><rect x="596.1" y="1171.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="599.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.16%)</title><rect x="603.9" y="1155.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="606.9" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.08%)</title><rect x="605.8" y="1155.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="608.8" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (81 samples, 6.67%)</title><rect x="606.8" y="1203.0" width="78.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="609.8" y="1214.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (78 samples, 6.43%)</title><rect x="609.7" y="1187.0" width="75.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="612.7" y="1198.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.58%)</title><rect x="609.7" y="1171.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="612.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.58%)</title><rect x="609.7" y="1155.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="612.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.58%)</title><rect x="609.7" y="1139.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="612.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.58%)</title><rect x="609.7" y="1123.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="612.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.16%)</title><rect x="614.6" y="1107.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.16%)</title><rect x="614.6" y="1091.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="617.6" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (71 samples, 5.85%)</title><rect x="616.5" y="1171.0" width="69.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="619.5" y="1182.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (62 samples, 5.11%)</title><rect x="625.3" y="1155.0" width="60.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="628.3" y="1166.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 2.97%)</title><rect x="650.5" y="1139.0" width="35.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="653.5" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.07%)</title><rect x="671.0" y="1123.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="674.0" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="681.6" y="1107.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="684.6" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="682.6" y="1091.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="685.6" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="682.6" y="1075.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="685.6" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="682.6" y="1059.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="685.6" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="682.6" y="1043.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="685.6" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="682.6" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="685.6" y="1038.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="682.6" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="685.6" y="1022.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="682.6" y="995.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="685.6" y="1006.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.16%)</title><rect x="683.6" y="1123.0" width="1.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="686.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (51 samples, 4.20%)</title><rect x="685.5" y="1235.0" width="49.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.5" y="1246.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (51 samples, 4.20%)</title><rect x="685.5" y="1219.0" width="49.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="688.5" y="1230.0">com/l..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="689.4" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="692.4" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1850758064.process (18 samples, 1.48%)</title><rect x="690.4" y="1203.0" width="17.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="693.4" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (17 samples, 1.40%)</title><rect x="690.4" y="1187.0" width="16.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="693.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.32%)</title><rect x="691.4" y="1171.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="694.4" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="691.4" y="1155.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="694.4" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="691.4" y="1139.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.4" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="691.4" y="1123.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.4" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="691.4" y="1107.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="694.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="691.4" y="1091.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="694.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.49%)</title><rect x="692.3" y="1155.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="695.3" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.33%)</title><rect x="694.3" y="1139.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="697.3" y="1150.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="694.3" y="1123.0" width="3.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="697.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.16%)</title><rect x="698.2" y="1155.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="701.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.58%)</title><rect x="700.1" y="1155.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="703.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="706.9" y="1187.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="709.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.33%)</title><rect x="707.9" y="1203.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="710.9" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.33%)</title><rect x="707.9" y="1187.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="710.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (7 samples, 0.58%)</title><rect x="711.8" y="1203.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="714.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (7 samples, 0.58%)</title><rect x="711.8" y="1187.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="714.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$269/1367815967.get$Lambda (7 samples, 0.58%)</title><rect x="711.8" y="1171.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="714.8" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="712.8" y="1155.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="715.8" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="712.8" y="1139.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="715.8" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="712.8" y="1123.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="715.8" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="712.8" y="1107.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="715.8" y="1118.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="712.8" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="715.8" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="712.8" y="1075.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="715.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$269/1367815967.&lt;init&gt; (5 samples, 0.41%)</title><rect x="713.7" y="1155.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="716.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.82%)</title><rect x="718.6" y="1203.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="721.6" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.74%)</title><rect x="719.6" y="1187.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="722.6" y="1198.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.49%)</title><rect x="719.6" y="1171.0" width="5.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="722.6" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.25%)</title><rect x="725.4" y="1171.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="728.4" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.58%)</title><rect x="728.3" y="1203.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.3" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.08%)</title><rect x="734.1" y="1187.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="737.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (26 samples, 2.14%)</title><rect x="735.1" y="1235.0" width="25.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="738.1" y="1246.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (26 samples, 2.14%)</title><rect x="735.1" y="1219.0" width="25.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="738.1" y="1230.0">j..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="746.8" y="1203.0" width="3.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="749.8" y="1214.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="748.7" y="1187.0" width="2.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="751.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.74%)</title><rect x="750.7" y="1203.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="753.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1204238113.accept (9 samples, 0.74%)</title><rect x="750.7" y="1187.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="753.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.74%)</title><rect x="750.7" y="1171.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="753.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.74%)</title><rect x="750.7" y="1155.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="753.7" y="1166.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.74%)</title><rect x="750.7" y="1139.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="753.7" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.74%)</title><rect x="750.7" y="1123.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="753.7" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="754.5" y="1107.0" width="4.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="757.5" y="1118.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="755.5" y="1091.0" width="3.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="758.5" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="759.4" y="1203.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="762.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.08%)</title><rect x="760.4" y="1251.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="763.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="760.4" y="1235.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="763.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/796357557.get$Lambda (1 samples, 0.08%)</title><rect x="760.4" y="1219.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="763.4" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="760.4" y="1203.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="763.4" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="760.4" y="1187.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="763.4" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="760.4" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="763.4" y="1182.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="760.4" y="1155.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="763.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.07%)</title><rect x="761.4" y="1251.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="764.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.07%)</title><rect x="761.4" y="1235.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="764.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="764.3" y="1219.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="767.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.74%)</title><rect x="765.2" y="1219.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="768.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1204238113.accept (9 samples, 0.74%)</title><rect x="765.2" y="1203.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="768.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.74%)</title><rect x="765.2" y="1187.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="768.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.74%)</title><rect x="765.2" y="1171.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="768.2" y="1182.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.74%)</title><rect x="765.2" y="1155.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="768.2" y="1166.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.74%)</title><rect x="765.2" y="1139.0" width="8.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="768.2" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.66%)</title><rect x="774.0" y="1251.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="777.0" y="1262.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.66%)</title><rect x="774.0" y="1235.0" width="7.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="777.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="781.8" y="1267.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="784.8" y="1278.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="781.8" y="1251.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="784.8" y="1262.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="781.8" y="1235.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="784.8" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="781.8" y="1219.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="784.8" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="781.8" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="784.8" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="781.8" y="1187.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.8" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="781.8" y="1171.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="784.8" y="1182.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="781.8" y="1155.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="784.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.49%)</title><rect x="782.7" y="1267.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="785.7" y="1278.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="786.6" y="1251.0" width="2.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="789.6" y="1262.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="786.6" y="1235.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="789.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.41%)</title><rect x="788.6" y="1315.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.41%)</title><rect x="788.6" y="1299.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="791.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.41%)</title><rect x="788.6" y="1283.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="791.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.41%)</title><rect x="788.6" y="1267.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="791.6" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (4 samples, 0.33%)</title><rect x="789.5" y="1251.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="792.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (227 samples, 18.70%)</title><rect x="793.4" y="1315.0" width="220.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="796.4" y="1326.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (227 samples, 18.70%)</title><rect x="793.4" y="1299.0" width="220.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="796.4" y="1310.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (197 samples, 16.23%)</title><rect x="810.0" y="1283.0" width="191.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="813.0" y="1294.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.66%)</title><rect x="820.6" y="1267.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="823.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.66%)</title><rect x="820.6" y="1251.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="823.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.66%)</title><rect x="820.6" y="1235.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="823.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.66%)</title><rect x="820.6" y="1219.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="823.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (178 samples, 14.66%)</title><rect x="828.4" y="1267.0" width="173.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="831.4" y="1278.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (178 samples, 14.66%)</title><rect x="828.4" y="1251.0" width="173.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="831.4" y="1262.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.16%)</title><rect x="840.1" y="1235.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="843.1" y="1246.0"></text>
</g>
<g>
<title>Unsafe_Park (159 samples, 13.10%)</title><rect x="842.0" y="1235.0" width="154.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="845.0" y="1246.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.25%)</title><rect x="845.9" y="1219.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="848.9" y="1230.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (30 samples, 2.47%)</title><rect x="848.8" y="1219.0" width="29.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="851.8" y="1230.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.41%)</title><rect x="865.4" y="1203.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="868.4" y="1214.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.16%)</title><rect x="866.3" y="1187.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="869.3" y="1198.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="867.3" y="1171.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="870.3" y="1182.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="868.3" y="1187.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="871.3" y="1198.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="870.2" y="1203.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="873.2" y="1214.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.58%)</title><rect x="871.2" y="1203.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.2" y="1214.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="878.0" y="1219.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="881.0" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="879.0" y="1219.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="882.0" y="1230.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.49%)</title><rect x="880.9" y="1219.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="883.9" y="1230.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 2.55%)</title><rect x="886.7" y="1219.0" width="30.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="889.7" y="1230.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 4.70%)</title><rect x="916.9" y="1219.0" width="55.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="919.9" y="1230.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.41%)</title><rect x="972.3" y="1219.0" width="4.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="975.3" y="1230.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="977.1" y="1219.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="980.1" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.25%)</title><rect x="978.1" y="1219.0" width="2.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="981.1" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="981.0" y="1219.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="984.0" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="983.0" y="1219.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="986.0" y="1230.0"></text>
</g>
<g>
<title>_init (2 samples, 0.16%)</title><rect x="983.9" y="1219.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="986.9" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.41%)</title><rect x="985.9" y="1219.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.9" y="1230.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.25%)</title><rect x="990.7" y="1219.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.7" y="1230.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.25%)</title><rect x="993.7" y="1219.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="996.7" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="996.6" y="1235.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="999.6" y="1246.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.33%)</title><rect x="997.5" y="1235.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.08%)</title><rect x="1001.4" y="1283.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1004.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.08%)</title><rect x="1001.4" y="1267.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1004.4" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="1001.4" y="1251.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.4" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="1001.4" y="1235.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1004.4" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="1001.4" y="1219.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1004.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 0.99%)</title><rect x="1002.4" y="1283.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1005.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.99%)</title><rect x="1002.4" y="1267.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1005.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.99%)</title><rect x="1002.4" y="1251.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1005.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.99%)</title><rect x="1002.4" y="1235.0" width="11.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1005.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1014.1" y="1363.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1017.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1014.1" y="1347.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1017.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1014.1" y="1331.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1017.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="1014.1" y="1315.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1017.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="1014.1" y="1299.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1017.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="1014.1" y="1283.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1017.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="1014.1" y="1267.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1017.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1014.1" y="1251.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1017.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1014.1" y="1235.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1017.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.08%)</title><rect x="1014.1" y="1219.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1017.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.08%)</title><rect x="1014.1" y="1203.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1017.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.08%)</title><rect x="1014.1" y="1187.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1017.1" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1014.1" y="1171.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1017.1" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1014.1" y="1155.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1017.1" y="1166.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1014.1" y="1139.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1017.1" y="1150.0"></text>
</g>
<g>
<title>start_thread (180 samples, 14.83%)</title><rect x="1015.0" y="1363.0" width="175.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1018.0" y="1374.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (180 samples, 14.83%)</title><rect x="1015.0" y="1347.0" width="175.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1018.0" y="1358.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (32 samples, 2.64%)</title><rect x="1015.0" y="1331.0" width="31.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1018.0" y="1342.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (12 samples, 0.99%)</title><rect x="1015.0" y="1315.0" width="11.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1018.0" y="1326.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 0.99%)</title><rect x="1015.0" y="1299.0" width="11.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1018.0" y="1310.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.25%)</title><rect x="1015.0" y="1283.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1018.0" y="1294.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.74%)</title><rect x="1018.0" y="1283.0" width="8.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1021.0" y="1294.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 1.65%)</title><rect x="1026.7" y="1315.0" width="19.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.7" y="1326.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.58%)</title><rect x="1027.7" y="1299.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.7" y="1310.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.25%)</title><rect x="1027.7" y="1283.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.7" y="1294.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.33%)</title><rect x="1030.6" y="1283.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1033.6" y="1294.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.66%)</title><rect x="1034.5" y="1299.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.5" y="1310.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.41%)</title><rect x="1034.5" y="1283.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1037.5" y="1294.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.16%)</title><rect x="1034.5" y="1267.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1037.5" y="1278.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.16%)</title><rect x="1034.5" y="1251.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1037.5" y="1262.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.16%)</title><rect x="1034.5" y="1235.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.5" y="1246.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker() (1 samples, 0.08%)</title><rect x="1036.4" y="1267.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1039.4" y="1278.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="1036.4" y="1251.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1039.4" y="1262.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="1037.4" y="1267.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.4" y="1278.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1038.4" y="1251.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1041.4" y="1262.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.08%)</title><rect x="1038.4" y="1235.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.4" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.25%)</title><rect x="1039.3" y="1283.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1042.3" y="1294.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.25%)</title><rect x="1039.3" y="1267.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1042.3" y="1278.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1041.3" y="1251.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1044.3" y="1262.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1041.3" y="1235.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1044.3" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="1042.3" y="1299.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.3" y="1310.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="1042.3" y="1283.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1045.3" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="1042.3" y="1267.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1045.3" y="1278.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.33%)</title><rect x="1042.3" y="1251.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.3" y="1262.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="1042.3" y="1235.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1045.3" y="1246.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="1042.3" y="1219.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.3" y="1230.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.25%)</title><rect x="1043.2" y="1235.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1046.2" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.25%)</title><rect x="1043.2" y="1219.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1046.2" y="1230.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.16%)</title><rect x="1044.2" y="1203.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.2" y="1214.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_const(HeapWord*, HeapWord*, void const*) const (1 samples, 0.08%)</title><rect x="1044.2" y="1187.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1047.2" y="1198.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1044.2" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.2" y="1182.0"></text>
</g>
<g>
<title>java_lang_Class::oop_size(oopDesc*) (1 samples, 0.08%)</title><rect x="1044.2" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.2" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1045.2" y="1187.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.2" y="1198.0"></text>
</g>
<g>
<title>JavaThread::run() (145 samples, 11.94%)</title><rect x="1046.1" y="1331.0" width="141.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.1" y="1342.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (145 samples, 11.94%)</title><rect x="1046.1" y="1315.0" width="141.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.1" y="1326.0">JavaThread::thread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (145 samples, 11.94%)</title><rect x="1046.1" y="1299.0" width="141.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.1" y="1310.0">CompileBroker::com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (145 samples, 11.94%)</title><rect x="1046.1" y="1283.0" width="141.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1049.1" y="1294.0">CompileBroker::inv..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (144 samples, 11.86%)</title><rect x="1046.1" y="1267.0" width="140.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1049.1" y="1278.0">C2Compiler::compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (144 samples, 11.86%)</title><rect x="1046.1" y="1251.0" width="140.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.1" y="1262.0">Compile::Compile(..</text>
</g>
<g>
<title>Compile::Code_Gen() (70 samples, 5.77%)</title><rect x="1046.1" y="1235.0" width="68.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1049.1" y="1246.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.16%)</title><rect x="1046.1" y="1219.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.1" y="1230.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1046.1" y="1203.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.1" y="1214.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="1046.1" y="1187.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.1" y="1198.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.08%)</title><rect x="1046.1" y="1171.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1049.1" y="1182.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.08%)</title><rect x="1046.1" y="1155.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.1" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1046.1" y="1139.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1049.1" y="1150.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1046.1" y="1123.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1049.1" y="1134.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="1047.1" y="1203.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.1" y="1214.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1047.1" y="1187.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.1" y="1198.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="1047.1" y="1171.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1050.1" y="1182.0"></text>
</g>
<g>
<title>CodeBuffer::initialize_section_size(CodeSection*, int) (1 samples, 0.08%)</title><rect x="1047.1" y="1155.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.1" y="1166.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.08%)</title><rect x="1048.1" y="1219.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1051.1" y="1230.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.49%)</title><rect x="1049.1" y="1219.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.1" y="1230.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.16%)</title><rect x="1049.1" y="1203.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.1" y="1214.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.33%)</title><rect x="1051.0" y="1203.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.0" y="1214.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1052.9" y="1187.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.9" y="1198.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1053.9" y="1187.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.9" y="1198.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1053.9" y="1171.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.9" y="1182.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1053.9" y="1155.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.9" y="1166.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1053.9" y="1139.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1056.9" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.49%)</title><rect x="1054.9" y="1219.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.9" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.49%)</title><rect x="1054.9" y="1203.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.9" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1054.9" y="1187.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.9" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1056.8" y="1187.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.8" y="1198.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="1056.8" y="1171.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1059.8" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="1057.8" y="1171.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.8" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1187.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.8" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="1059.8" y="1187.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.8" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (54 samples, 4.45%)</title><rect x="1060.7" y="1219.0" width="52.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1063.7" y="1230.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1060.7" y="1203.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1063.7" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1061.7" y="1203.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1064.7" y="1214.0"></text>
</g>
<g>
<title>MachHaltNode::jvms() const (1 samples, 0.08%)</title><rect x="1062.7" y="1203.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.7" y="1214.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1063.6" y="1203.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.6" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.08%)</title><rect x="1064.6" y="1203.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1067.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="1064.6" y="1187.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1067.6" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1064.6" y="1171.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1067.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.16%)</title><rect x="1065.6" y="1203.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.6" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1065.6" y="1187.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1068.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="1066.6" y="1187.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1069.6" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.66%)</title><rect x="1067.5" y="1203.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.5" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1073.4" y="1187.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.4" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1073.4" y="1171.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.4" y="1182.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.08%)</title><rect x="1073.4" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.08%)</title><rect x="1074.3" y="1187.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1077.3" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.08%)</title><rect x="1074.3" y="1171.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.3" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.66%)</title><rect x="1075.3" y="1203.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.3" y="1214.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="1078.2" y="1187.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1081.2" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.25%)</title><rect x="1079.2" y="1187.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1082.2" y="1198.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1082.1" y="1187.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.1" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.58%)</title><rect x="1083.1" y="1203.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.1" y="1214.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.08%)</title><rect x="1087.9" y="1187.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.9" y="1198.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1088.9" y="1187.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1089.9" y="1203.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.9" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.41%)</title><rect x="1090.9" y="1203.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.9" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.16%)</title><rect x="1093.8" y="1187.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.8" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="1095.7" y="1203.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.7" y="1214.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.08%)</title><rect x="1096.7" y="1203.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.7" y="1214.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="1096.7" y="1187.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.7" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.08%)</title><rect x="1096.7" y="1171.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.7" y="1182.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.08%)</title><rect x="1096.7" y="1155.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.16%)</title><rect x="1097.7" y="1203.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.7" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1097.7" y="1187.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.7" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1098.6" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.25%)</title><rect x="1099.6" y="1203.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.6" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1099.6" y="1187.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.6" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1100.6" y="1187.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.6" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.58%)</title><rect x="1102.5" y="1203.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.5" y="1214.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1106.4" y="1187.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.4" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1107.4" y="1187.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.4" y="1198.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1109.3" y="1203.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.3" y="1214.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1110.3" y="1203.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.3" y="1214.0"></text>
</g>
<g>
<title>compL_rRegNode::ideal_Opcode() const (1 samples, 0.08%)</title><rect x="1111.3" y="1203.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.3" y="1214.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.08%)</title><rect x="1112.2" y="1203.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1115.2" y="1214.0"></text>
</g>
<g>
<title>decodeHeapOopNode::ideal_Opcode() const (1 samples, 0.08%)</title><rect x="1113.2" y="1219.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.2" y="1230.0"></text>
</g>
<g>
<title>Compile::Optimize() (62 samples, 5.11%)</title><rect x="1114.2" y="1235.0" width="60.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.2" y="1246.0">Compil..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1114.2" y="1219.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.2" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.08%)</title><rect x="1115.2" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.2" y="1230.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1115.2" y="1203.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1118.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (38 samples, 3.13%)</title><rect x="1116.1" y="1219.0" width="37.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.1" y="1230.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.25%)</title><rect x="1116.1" y="1203.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.1" y="1214.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1118.1" y="1187.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.41%)</title><rect x="1119.0" y="1203.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.0" y="1214.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (1 samples, 0.08%)</title><rect x="1122.9" y="1187.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (22 samples, 1.81%)</title><rect x="1123.9" y="1203.0" width="21.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.9" y="1214.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (19 samples, 1.57%)</title><rect x="1126.8" y="1187.0" width="18.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.16%)</title><rect x="1126.8" y="1171.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 1.40%)</title><rect x="1128.8" y="1171.0" width="16.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1142.4" y="1155.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1142.4" y="1139.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.16%)</title><rect x="1143.3" y="1155.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.16%)</title><rect x="1145.3" y="1203.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.3" y="1214.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1146.3" y="1187.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.25%)</title><rect x="1147.2" y="1203.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.08%)</title><rect x="1148.2" y="1187.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.08%)</title><rect x="1148.2" y="1171.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.2" y="1182.0"></text>
</g>
<g>
<title>cmpkey(void const*, void const*) (1 samples, 0.08%)</title><rect x="1148.2" y="1155.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1151.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.08%)</title><rect x="1149.2" y="1187.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1149.2" y="1171.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1150.1" y="1203.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.1" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1150.1" y="1187.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.1" y="1198.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1150.1" y="1171.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1151.1" y="1203.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.1" y="1214.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1152.1" y="1203.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1153.1" y="1219.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (19 samples, 1.57%)</title><rect x="1154.0" y="1219.0" width="18.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (19 samples, 1.57%)</title><rect x="1154.0" y="1203.0" width="18.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.0" y="1214.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1154.0" y="1187.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.0" y="1198.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1154.0" y="1171.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.0" y="1182.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.25%)</title><rect x="1155.0" y="1187.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.0" y="1198.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (3 samples, 0.25%)</title><rect x="1155.0" y="1171.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.0" y="1182.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (3 samples, 0.25%)</title><rect x="1155.0" y="1155.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.0" y="1166.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 0.25%)</title><rect x="1155.0" y="1139.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="1150.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (3 samples, 0.25%)</title><rect x="1157.9" y="1187.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.9" y="1198.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.25%)</title><rect x="1160.8" y="1187.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.8" y="1198.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.16%)</title><rect x="1161.8" y="1171.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.33%)</title><rect x="1163.8" y="1187.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1166.7" y="1171.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.7" y="1182.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1167.6" y="1187.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.6" y="1198.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1167.6" y="1171.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.6" y="1182.0"></text>
</g>
<g>
<title>StoreCMNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1168.6" y="1187.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.6" y="1198.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1169.6" y="1187.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.6" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.16%)</title><rect x="1169.6" y="1171.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.6" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1169.6" y="1155.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.6" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1169.6" y="1139.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.6" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1169.6" y="1123.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.6" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1169.6" y="1107.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.6" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.6" y="1091.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.6" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.6" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.6" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.6" y="1059.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.6" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.6" y="1043.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.6" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.6" y="1027.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.6" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.6" y="1011.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.6" y="995.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.6" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.6" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1169.6" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.6" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1169.6" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.6" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.6" y="1091.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.6" y="1102.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1170.6" y="1075.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.6" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1171.5" y="1187.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.5" y="1198.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1171.5" y="1171.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.5" y="1182.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.5" y="1155.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.5" y="1166.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1171.5" y="1139.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.5" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.16%)</title><rect x="1172.5" y="1219.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.16%)</title><rect x="1172.5" y="1203.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.16%)</title><rect x="1172.5" y="1187.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.91%)</title><rect x="1174.4" y="1235.0" width="10.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.91%)</title><rect x="1174.4" y="1219.0" width="10.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.91%)</title><rect x="1174.4" y="1203.0" width="10.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.91%)</title><rect x="1174.4" y="1187.0" width="10.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.91%)</title><rect x="1174.4" y="1171.0" width="10.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.91%)</title><rect x="1174.4" y="1155.0" width="10.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1166.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1150.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1123.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="1134.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1174.4" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1174.4" y="1091.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1174.4" y="1075.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1174.4" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1174.4" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1174.4" y="1027.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="1011.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="1022.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1174.4" y="995.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1174.4" y="979.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.4" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1174.4" y="963.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.4" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1174.4" y="947.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.4" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1174.4" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1174.4" y="915.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="926.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.4" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.4" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::void_long_Type() (1 samples, 0.08%)</title><rect x="1175.4" y="1123.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.4" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.58%)</title><rect x="1176.4" y="1139.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.58%)</title><rect x="1176.4" y="1123.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.58%)</title><rect x="1176.4" y="1107.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.58%)</title><rect x="1176.4" y="1091.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.58%)</title><rect x="1176.4" y="1075.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.58%)</title><rect x="1176.4" y="1059.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1176.4" y="1043.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1176.4" y="1027.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1176.4" y="1011.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1176.4" y="995.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1176.4" y="979.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.49%)</title><rect x="1176.4" y="963.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.41%)</title><rect x="1176.4" y="947.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.4" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.41%)</title><rect x="1176.4" y="931.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.41%)</title><rect x="1176.4" y="915.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.41%)</title><rect x="1176.4" y="899.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.41%)</title><rect x="1176.4" y="883.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1176.4" y="867.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.4" y="878.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_receiver_for_speculation(Node*) (1 samples, 0.08%)</title><rect x="1176.4" y="851.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="862.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.08%)</title><rect x="1176.4" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1177.4" y="851.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1177.4" y="835.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.4" y="819.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.4" y="803.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.4" y="787.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.4" y="771.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.4" y="755.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.4" y="739.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.4" y="723.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.4" y="707.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.4" y="691.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.4" y="675.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.4" y="659.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.4" y="643.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.4" y="627.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.4" y="611.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.4" y="595.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.4" y="579.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.4" y="563.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.4" y="547.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.4" y="531.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.4" y="515.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.4" y="499.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.4" y="483.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.4" y="467.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.4" y="451.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.4" y="435.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.4" y="419.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.4" y="403.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.4" y="387.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.4" y="371.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.4" y="355.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.4" y="339.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.4" y="323.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.4" y="307.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.4" y="291.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.4" y="275.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.4" y="259.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.4" y="243.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.4" y="227.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.4" y="211.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.4" y="195.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.4" y="179.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.4" y="163.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.4" y="147.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="158.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.4" y="131.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_hashcode(bool, bool) (1 samples, 0.08%)</title><rect x="1177.4" y="115.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="126.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.08%)</title><rect x="1177.4" y="99.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="110.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.08%)</title><rect x="1177.4" y="83.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="94.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1177.4" y="67.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="78.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1177.4" y="51.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="62.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1177.4" y="35.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="46.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.08%)</title><rect x="1178.3" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="686.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.08%)</title><rect x="1178.3" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1178.3" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.08%)</title><rect x="1178.3" y="611.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1178.3" y="595.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="606.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="579.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1179.3" y="819.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="830.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1179.3" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="814.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1179.3" y="787.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.3" y="798.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1179.3" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1179.3" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="867.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.3" y="862.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1180.3" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="846.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="819.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="830.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.08%)</title><rect x="1180.3" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.3" y="814.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="787.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="798.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1180.3" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="947.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="931.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="915.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="899.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="883.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="867.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="851.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="819.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="803.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="787.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="755.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="739.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="723.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="707.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="691.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="675.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="659.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="643.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="627.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="611.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="595.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="579.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="590.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.3" y="563.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="574.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1181.3" y="547.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="558.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.08%)</title><rect x="1181.3" y="531.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="542.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1181.3" y="515.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="526.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1181.3" y="499.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1181.3" y="483.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="494.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1181.3" y="467.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="1027.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="1011.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="995.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="947.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="931.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="915.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="883.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="867.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="851.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="803.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="707.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="691.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="675.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="659.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="643.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="627.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="611.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1182.2" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1182.2" y="579.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1183.2" y="1139.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="1123.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="1107.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="1091.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="1075.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="1059.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="1043.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="1027.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="1011.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="979.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="963.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="931.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1183.2" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1183.2" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1183.2" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.2" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1183.2" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1183.2" y="851.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="862.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="1123.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="1134.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="1107.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="1118.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.08%)</title><rect x="1184.2" y="1091.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="1102.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.08%)</title><rect x="1184.2" y="1075.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="1086.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1185.1" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.1" y="1246.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1185.1" y="1219.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.1" y="1230.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.08%)</title><rect x="1186.1" y="1267.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.1" y="1278.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.08%)</title><rect x="1186.1" y="1251.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.1" y="1262.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1186.1" y="1235.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.1" y="1246.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1186.1" y="1219.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.1" y="1230.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.08%)</title><rect x="1186.1" y="1203.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.1" y="1214.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.08%)</title><rect x="1186.1" y="1187.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="1198.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.25%)</title><rect x="1187.1" y="1331.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.1" y="1342.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.25%)</title><rect x="1187.1" y="1315.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.1" y="1326.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1187.1" y="1299.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="1310.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.08%)</title><rect x="1187.1" y="1283.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="1294.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.08%)</title><rect x="1187.1" y="1267.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="1278.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1187.1" y="1251.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.1" y="1262.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1187.1" y="1235.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="1246.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1187.1" y="1219.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="1230.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1187.1" y="1203.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.1" y="1214.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1187.1" y="1187.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.1" y="1198.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.16%)</title><rect x="1188.1" y="1299.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="1310.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.16%)</title><rect x="1188.1" y="1283.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.1" y="1294.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.16%)</title><rect x="1188.1" y="1267.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.1" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.16%)</title><rect x="1188.1" y="1251.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.1" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.1" y="1235.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.1" y="1246.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.08%)</title><rect x="1188.1" y="1219.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.1" y="1230.0"></text>
</g>
<g>
<title>SubTasksDone::set_n_threads(unsigned int) (1 samples, 0.08%)</title><rect x="1188.1" y="1203.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.1" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="1235.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="1246.0"></text>
</g>
<g>
<title>FreeRegionList::add_ordered(FreeRegionList*) (1 samples, 0.08%)</title><rect x="1189.0" y="1219.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="1230.0"></text>
</g>
</g>
</svg>
