<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (175 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 14.29%)</title><rect x="10.0" y="1027.0" width="168.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (24 samples, 13.71%)</title><rect x="10.0" y="1011.0" width="161.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1022.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (18 samples, 10.29%)</title><rect x="10.0" y="995.0" width="121.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0">java/lang/Itera..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1146820434.accept (18 samples, 10.29%)</title><rect x="10.0" y="979.0" width="121.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (18 samples, 10.29%)</title><rect x="10.0" y="963.0" width="121.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (15 samples, 8.57%)</title><rect x="10.0" y="947.0" width="101.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (15 samples, 8.57%)</title><rect x="10.0" y="931.0" width="101.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (15 samples, 8.57%)</title><rect x="10.0" y="915.0" width="101.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (15 samples, 8.57%)</title><rect x="10.0" y="899.0" width="101.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="910.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (15 samples, 8.57%)</title><rect x="10.0" y="883.0" width="101.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="894.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (15 samples, 8.57%)</title><rect x="10.0" y="867.0" width="101.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="878.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (12 samples, 6.86%)</title><rect x="10.0" y="851.0" width="80.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="862.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.57%)</title><rect x="10.0" y="835.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.57%)</title><rect x="10.0" y="819.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.57%)</title><rect x="10.0" y="803.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.57%)</title><rect x="10.0" y="787.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 6.29%)</title><rect x="16.7" y="835.0" width="74.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.7" y="846.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 6.29%)</title><rect x="16.7" y="819.0" width="74.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="830.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 6.29%)</title><rect x="16.7" y="803.0" width="74.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="814.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 6.29%)</title><rect x="16.7" y="787.0" width="74.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.7" y="798.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (11 samples, 6.29%)</title><rect x="16.7" y="771.0" width="74.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.7" y="782.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 4.00%)</title><rect x="16.7" y="755.0" width="47.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.7" y="766.0">Unsa..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.57%)</title><rect x="16.7" y="739.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.7" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 2.86%)</title><rect x="23.5" y="739.0" width="33.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="26.5" y="750.0">__..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.57%)</title><rect x="57.2" y="739.0" width="6.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="60.2" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.14%)</title><rect x="63.9" y="755.0" width="13.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="66.9" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 1.14%)</title><rect x="77.4" y="755.0" width="13.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="80.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.57%)</title><rect x="90.9" y="851.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.57%)</title><rect x="90.9" y="835.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.57%)</title><rect x="90.9" y="819.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.57%)</title><rect x="97.7" y="851.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.57%)</title><rect x="97.7" y="835.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="100.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.57%)</title><rect x="97.7" y="819.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.57%)</title><rect x="97.7" y="803.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.57%)</title><rect x="104.4" y="851.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.57%)</title><rect x="104.4" y="835.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="107.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.57%)</title><rect x="104.4" y="819.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="107.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.57%)</title><rect x="104.4" y="803.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.71%)</title><rect x="111.1" y="947.0" width="20.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.1" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.57%)</title><rect x="124.6" y="931.0" width="6.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="127.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 3.43%)</title><rect x="131.4" y="995.0" width="40.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.4" y="1006.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 3.43%)</title><rect x="131.4" y="979.0" width="40.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="134.4" y="990.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.14%)</title><rect x="131.4" y="963.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="134.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.14%)</title><rect x="131.4" y="947.0" width="13.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.57%)</title><rect x="138.1" y="931.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="141.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.57%)</title><rect x="138.1" y="915.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="141.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.57%)</title><rect x="138.1" y="899.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.57%)</title><rect x="138.1" y="883.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.57%)</title><rect x="138.1" y="867.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.57%)</title><rect x="138.1" y="851.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.1" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.57%)</title><rect x="138.1" y="835.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.14%)</title><rect x="144.9" y="963.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="147.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.57%)</title><rect x="144.9" y="947.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.57%)</title><rect x="144.9" y="931.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="147.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.57%)</title><rect x="144.9" y="915.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="147.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1629414146.accept (1 samples, 0.57%)</title><rect x="144.9" y="899.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="147.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.57%)</title><rect x="144.9" y="883.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="147.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.57%)</title><rect x="144.9" y="867.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="147.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.57%)</title><rect x="144.9" y="851.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="147.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.57%)</title><rect x="144.9" y="835.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="147.9" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.57%)</title><rect x="144.9" y="819.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.57%)</title><rect x="144.9" y="803.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.57%)</title><rect x="151.6" y="947.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="154.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.57%)</title><rect x="158.3" y="963.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.57%)</title><rect x="158.3" y="947.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="161.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.57%)</title><rect x="158.3" y="931.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="161.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.57%)</title><rect x="158.3" y="915.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.3" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/SelectionKey.isConnectable (1 samples, 0.57%)</title><rect x="158.3" y="899.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.57%)</title><rect x="165.1" y="963.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.57%)</title><rect x="165.1" y="947.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.57%)</title><rect x="165.1" y="931.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.57%)</title><rect x="165.1" y="915.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="168.1" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.57%)</title><rect x="165.1" y="899.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.57%)</title><rect x="165.1" y="883.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.57%)</title><rect x="165.1" y="867.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="168.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.57%)</title><rect x="165.1" y="851.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.57%)</title><rect x="165.1" y="835.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.57%)</title><rect x="171.8" y="1011.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.8" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.57%)</title><rect x="171.8" y="995.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="174.8" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.57%)</title><rect x="171.8" y="979.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.8" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.57%)</title><rect x="171.8" y="963.0" width="6.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="174.8" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="171.8" y="947.0" width="6.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="174.8" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.run (61 samples, 34.86%)</title><rect x="178.6" y="1027.0" width="411.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.6" y="1038.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (61 samples, 34.86%)</title><rect x="178.6" y="1011.0" width="411.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.6" y="1022.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (61 samples, 34.86%)</title><rect x="178.6" y="995.0" width="411.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="181.6" y="1006.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.57%)</title><rect x="185.3" y="979.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/600378564.run (43 samples, 24.57%)</title><rect x="192.1" y="979.0" width="289.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.1" y="990.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (43 samples, 24.57%)</title><rect x="192.1" y="963.0" width="289.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.1" y="974.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (43 samples, 24.57%)</title><rect x="192.1" y="947.0" width="289.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.1" y="958.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (42 samples, 24.00%)</title><rect x="192.1" y="931.0" width="283.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.1" y="942.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (5 samples, 2.86%)</title><rect x="225.8" y="915.0" width="33.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.8" y="926.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (5 samples, 2.86%)</title><rect x="225.8" y="899.0" width="33.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.8" y="910.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (5 samples, 2.86%)</title><rect x="225.8" y="883.0" width="33.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.8" y="894.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (5 samples, 2.86%)</title><rect x="225.8" y="867.0" width="33.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.8" y="878.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (5 samples, 2.86%)</title><rect x="225.8" y="851.0" width="33.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.8" y="862.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (5 samples, 2.86%)</title><rect x="225.8" y="835.0" width="33.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.8" y="846.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.86%)</title><rect x="225.8" y="819.0" width="33.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.8" y="830.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.57%)</title><rect x="225.8" y="803.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 2.29%)</title><rect x="232.5" y="803.0" width="27.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.5" y="814.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.29%)</title><rect x="232.5" y="787.0" width="27.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.5" y="798.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.29%)</title><rect x="232.5" y="771.0" width="27.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.5" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.29%)</title><rect x="232.5" y="755.0" width="27.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.5" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.57%)</title><rect x="239.3" y="739.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.57%)</title><rect x="239.3" y="723.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.57%)</title><rect x="239.3" y="707.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.57%)</title><rect x="239.3" y="691.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.57%)</title><rect x="239.3" y="675.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.57%)</title><rect x="246.0" y="739.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.57%)</title><rect x="246.0" y="723.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.57%)</title><rect x="246.0" y="707.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="249.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.57%)</title><rect x="252.7" y="739.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (26 samples, 14.86%)</title><rect x="259.5" y="915.0" width="175.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.5" y="926.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 2.86%)</title><rect x="259.5" y="899.0" width="33.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.5" y="910.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.71%)</title><rect x="273.0" y="883.0" width="20.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.71%)</title><rect x="273.0" y="867.0" width="20.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="276.0" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.57%)</title><rect x="273.0" y="851.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="276.0" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.57%)</title><rect x="273.0" y="835.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="276.0" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.57%)</title><rect x="273.0" y="819.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.57%)</title><rect x="273.0" y="803.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.0" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.14%)</title><rect x="279.7" y="851.0" width="13.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.57%)</title><rect x="293.2" y="899.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.57%)</title><rect x="293.2" y="883.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.2" y="894.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.57%)</title><rect x="293.2" y="867.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (12 samples, 6.86%)</title><rect x="299.9" y="899.0" width="81.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.9" y="910.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (11 samples, 6.29%)</title><rect x="306.7" y="883.0" width="74.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="309.7" y="894.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 2.86%)</title><rect x="313.4" y="867.0" width="33.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.4" y="878.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.14%)</title><rect x="320.2" y="851.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.2" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.14%)</title><rect x="320.2" y="835.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.2" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.57%)</title><rect x="320.2" y="819.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.2" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.57%)</title><rect x="320.2" y="803.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="323.2" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.57%)</title><rect x="320.2" y="787.0" width="6.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="323.2" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.57%)</title><rect x="326.9" y="819.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.9" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.57%)</title><rect x="333.7" y="851.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="336.7" y="862.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.57%)</title><rect x="333.7" y="835.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.7" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.57%)</title><rect x="333.7" y="819.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="336.7" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.57%)</title><rect x="333.7" y="803.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="336.7" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.57%)</title><rect x="333.7" y="787.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="336.7" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.57%)</title><rect x="340.4" y="851.0" width="6.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="343.4" y="862.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.57%)</title><rect x="347.1" y="867.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.57%)</title><rect x="347.1" y="851.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.1" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 2.29%)</title><rect x="353.9" y="867.0" width="27.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.9" y="878.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 2.29%)</title><rect x="353.9" y="851.0" width="27.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.9" y="862.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.57%)</title><rect x="353.9" y="835.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="356.9" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.57%)</title><rect x="353.9" y="819.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.57%)</title><rect x="353.9" y="803.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.57%)</title><rect x="353.9" y="787.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="356.9" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.71%)</title><rect x="360.6" y="835.0" width="20.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="363.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.14%)</title><rect x="367.4" y="819.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="370.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.57%)</title><rect x="367.4" y="803.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="370.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.57%)</title><rect x="374.1" y="803.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="377.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (7 samples, 4.00%)</title><rect x="380.9" y="899.0" width="47.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="383.9" y="910.0">com/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.14%)</title><rect x="387.6" y="883.0" width="13.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="390.6" y="894.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.14%)</title><rect x="387.6" y="867.0" width="13.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="390.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.29%)</title><rect x="401.1" y="883.0" width="27.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="404.1" y="894.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/168124410.process (2 samples, 1.14%)</title><rect x="401.1" y="867.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="404.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.14%)</title><rect x="401.1" y="851.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="404.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.14%)</title><rect x="401.1" y="835.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.14%)</title><rect x="401.1" y="819.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="404.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.57%)</title><rect x="401.1" y="803.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.57%)</title><rect x="401.1" y="787.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.57%)</title><rect x="407.8" y="803.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.57%)</title><rect x="407.8" y="787.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="410.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.57%)</title><rect x="407.8" y="771.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.57%)</title><rect x="407.8" y="755.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.8" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.57%)</title><rect x="414.6" y="867.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="417.6" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.57%)</title><rect x="414.6" y="851.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="417.6" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.57%)</title><rect x="414.6" y="835.0" width="6.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="417.6" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.57%)</title><rect x="421.3" y="867.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="424.3" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.57%)</title><rect x="421.3" y="851.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="424.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.57%)</title><rect x="428.1" y="899.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="431.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.57%)</title><rect x="428.1" y="883.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="431.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.29%)</title><rect x="434.8" y="915.0" width="27.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="437.8" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 2.29%)</title><rect x="434.8" y="899.0" width="27.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="437.8" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 2.29%)</title><rect x="434.8" y="883.0" width="27.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="437.8" y="894.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/2036965139.accept (4 samples, 2.29%)</title><rect x="434.8" y="867.0" width="27.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="437.8" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (4 samples, 2.29%)</title><rect x="434.8" y="851.0" width="27.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="437.8" y="862.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/718094487.complete (4 samples, 2.29%)</title><rect x="434.8" y="835.0" width="27.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="437.8" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (4 samples, 2.29%)</title><rect x="434.8" y="819.0" width="27.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="437.8" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 2.29%)</title><rect x="434.8" y="803.0" width="27.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="437.8" y="814.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 2.29%)</title><rect x="434.8" y="787.0" width="27.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="437.8" y="798.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 2.29%)</title><rect x="434.8" y="771.0" width="27.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="437.8" y="782.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 2.29%)</title><rect x="434.8" y="755.0" width="27.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="437.8" y="766.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 2.29%)</title><rect x="434.8" y="739.0" width="27.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="437.8" y="750.0">c..</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.14%)</title><rect x="461.8" y="915.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="464.8" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="468.5" y="899.0" width="6.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="471.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.57%)</title><rect x="475.3" y="931.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="478.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.14%)</title><rect x="482.0" y="979.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="485.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.14%)</title><rect x="482.0" y="963.0" width="13.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 1.14%)</title><rect x="482.0" y="947.0" width="13.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.14%)</title><rect x="495.5" y="979.0" width="13.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 6.86%)</title><rect x="509.0" y="979.0" width="80.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.0" y="990.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (12 samples, 6.86%)</title><rect x="509.0" y="963.0" width="80.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="512.0" y="974.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 6.86%)</title><rect x="509.0" y="947.0" width="80.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="512.0" y="958.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.57%)</title><rect x="515.7" y="931.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 1.14%)</title><rect x="522.5" y="931.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="525.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 4.57%)</title><rect x="535.9" y="931.0" width="54.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="538.9" y="942.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (8 samples, 4.57%)</title><rect x="535.9" y="915.0" width="54.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="538.9" y="926.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Park (7 samples, 4.00%)</title><rect x="542.7" y="899.0" width="47.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="545.7" y="910.0">Unsa..</text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 1.14%)</title><rect x="542.7" y="883.0" width="13.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="545.7" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.14%)</title><rect x="556.2" y="883.0" width="13.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="559.2" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.71%)</title><rect x="569.7" y="883.0" width="20.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="572.7" y="894.0"></text>
</g>
<g>
<title>start_thread (89 samples, 50.86%)</title><rect x="589.9" y="1027.0" width="600.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="592.9" y="1038.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (89 samples, 50.86%)</title><rect x="589.9" y="1011.0" width="600.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="592.9" y="1022.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 8.57%)</title><rect x="589.9" y="995.0" width="101.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="592.9" y="1006.0">GangWorker::..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (15 samples, 8.57%)</title><rect x="589.9" y="979.0" width="101.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="592.9" y="990.0">G1ParTask::w..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 6.86%)</title><rect x="589.9" y="963.0" width="80.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="592.9" y="974.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.14%)</title><rect x="610.1" y="947.0" width="13.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="613.1" y="958.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.57%)</title><rect x="616.9" y="931.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="619.9" y="942.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.57%)</title><rect x="616.9" y="915.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="619.9" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 2.86%)</title><rect x="623.6" y="947.0" width="33.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="626.6" y="958.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.71%)</title><rect x="637.1" y="931.0" width="20.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="640.1" y="942.0"></text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.57%)</title><rect x="643.8" y="915.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="646.8" y="926.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.57%)</title><rect x="650.6" y="915.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="653.6" y="926.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.57%)</title><rect x="657.3" y="947.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="660.3" y="958.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.57%)</title><rect x="664.1" y="947.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="667.1" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 1.71%)</title><rect x="670.8" y="963.0" width="20.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="673.8" y="974.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 1.14%)</title><rect x="670.8" y="947.0" width="13.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="673.8" y="958.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 1.14%)</title><rect x="670.8" y="931.0" width="13.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="673.8" y="942.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (2 samples, 1.14%)</title><rect x="670.8" y="915.0" width="13.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="673.8" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.14%)</title><rect x="670.8" y="899.0" width="13.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="673.8" y="910.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.57%)</title><rect x="677.5" y="883.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="680.5" y="894.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.57%)</title><rect x="684.3" y="947.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="687.3" y="958.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (73 samples, 41.71%)</title><rect x="691.0" y="995.0" width="492.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="694.0" y="1006.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (73 samples, 41.71%)</title><rect x="691.0" y="979.0" width="492.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="694.0" y="990.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (73 samples, 41.71%)</title><rect x="691.0" y="963.0" width="492.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="694.0" y="974.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (70 samples, 40.00%)</title><rect x="691.0" y="947.0" width="472.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="694.0" y="958.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (70 samples, 40.00%)</title><rect x="691.0" y="931.0" width="472.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="694.0" y="942.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool,..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.57%)</title><rect x="691.0" y="915.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="694.0" y="926.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.57%)</title><rect x="691.0" y="899.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="694.0" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="691.0" y="883.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="694.0" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.57%)</title><rect x="691.0" y="867.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="694.0" y="878.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 22.29%)</title><rect x="697.8" y="915.0" width="262.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="700.8" y="926.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.14%)</title><rect x="697.8" y="899.0" width="13.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="700.8" y="910.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.57%)</title><rect x="697.8" y="883.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="700.8" y="894.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.57%)</title><rect x="697.8" y="867.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="700.8" y="878.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.57%)</title><rect x="697.8" y="851.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="700.8" y="862.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.57%)</title><rect x="704.5" y="883.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="707.5" y="894.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.57%)</title><rect x="704.5" y="867.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="707.5" y="878.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.71%)</title><rect x="711.3" y="899.0" width="20.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="714.3" y="910.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 1.71%)</title><rect x="711.3" y="883.0" width="20.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="714.3" y="894.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.57%)</title><rect x="718.0" y="867.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="721.0" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.57%)</title><rect x="724.7" y="867.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="727.7" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.71%)</title><rect x="731.5" y="899.0" width="20.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="734.5" y="910.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.57%)</title><rect x="731.5" y="883.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="734.5" y="894.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.57%)</title><rect x="731.5" y="867.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="734.5" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.14%)</title><rect x="738.2" y="883.0" width="13.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="741.2" y="894.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.57%)</title><rect x="738.2" y="867.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="741.2" y="878.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.57%)</title><rect x="738.2" y="851.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="741.2" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.57%)</title><rect x="738.2" y="835.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="741.2" y="846.0"></text>
</g>
<g>
<title>TypeNarrowPtr::singleton() const (1 samples, 0.57%)</title><rect x="738.2" y="819.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="741.2" y="830.0"></text>
</g>
<g>
<title>StartNode::match(ProjNode const*, Matcher const*) (1 samples, 0.57%)</title><rect x="745.0" y="867.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="748.0" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.14%)</title><rect x="751.7" y="899.0" width="13.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="754.7" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::call_catch_cleanup(Block*) (1 samples, 0.57%)</title><rect x="751.7" y="883.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="754.7" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.57%)</title><rect x="758.5" y="883.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="761.5" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.57%)</title><rect x="758.5" y="867.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="761.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 16.00%)</title><rect x="765.2" y="899.0" width="188.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="768.2" y="910.0">PhaseChaitin::Register_A..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.57%)</title><rect x="765.2" y="883.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="768.2" y="894.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.57%)</title><rect x="771.9" y="883.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="774.9" y="894.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.57%)</title><rect x="771.9" y="867.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="774.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.29%)</title><rect x="778.7" y="883.0" width="27.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="781.7" y="894.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 4.57%)</title><rect x="805.7" y="883.0" width="53.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="808.7" y="894.0">Phase..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.57%)</title><rect x="819.1" y="867.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="822.1" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="825.9" y="867.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="828.9" y="878.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.57%)</title><rect x="832.6" y="867.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="835.6" y="878.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.57%)</title><rect x="839.4" y="867.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="842.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.14%)</title><rect x="846.1" y="867.0" width="13.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="849.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.57%)</title><rect x="859.6" y="883.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="862.6" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.57%)</title><rect x="866.3" y="883.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="869.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 2.29%)</title><rect x="873.1" y="883.0" width="27.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="876.1" y="894.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.57%)</title><rect x="893.3" y="867.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="896.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.71%)</title><rect x="900.1" y="883.0" width="20.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.1" y="894.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.57%)</title><rect x="906.8" y="867.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="909.8" y="878.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.57%)</title><rect x="906.8" y="851.0" width="6.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="909.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.57%)</title><rect x="913.5" y="867.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.5" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 1.14%)</title><rect x="920.3" y="883.0" width="13.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="923.3" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="927.0" y="867.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="930.0" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.57%)</title><rect x="933.8" y="883.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="936.8" y="894.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.57%)</title><rect x="933.8" y="867.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="936.8" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.14%)</title><rect x="940.5" y="883.0" width="13.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="943.5" y="894.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.57%)</title><rect x="947.3" y="867.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="950.3" y="878.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.57%)</title><rect x="954.0" y="899.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="957.0" y="910.0"></text>
</g>
<g>
<title>Compile::Optimize() (21 samples, 12.00%)</title><rect x="960.7" y="915.0" width="141.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="963.7" y="926.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.57%)</title><rect x="960.7" y="899.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="963.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.14%)</title><rect x="967.5" y="899.0" width="13.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="970.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.14%)</title><rect x="967.5" y="883.0" width="13.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="970.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.57%)</title><rect x="967.5" y="867.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="970.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.57%)</title><rect x="967.5" y="851.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="970.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.57%)</title><rect x="967.5" y="835.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="970.5" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.57%)</title><rect x="967.5" y="819.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.5" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.57%)</title><rect x="967.5" y="803.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.5" y="814.0"></text>
</g>
<g>
<title>ciInstance::java_lang_Class_klass() (1 samples, 0.57%)</title><rect x="967.5" y="787.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="974.2" y="867.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="974.2" y="851.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="977.2" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.57%)</title><rect x="981.0" y="899.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="984.0" y="910.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.57%)</title><rect x="981.0" y="883.0" width="6.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="984.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 7.43%)</title><rect x="987.7" y="899.0" width="87.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.7" y="910.0">PhaseIdeal..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.57%)</title><rect x="987.7" y="883.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.7" y="894.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.57%)</title><rect x="994.5" y="883.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="997.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.57%)</title><rect x="1001.2" y="883.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1004.2" y="894.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.57%)</title><rect x="1001.2" y="867.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1004.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.57%)</title><rect x="1007.9" y="883.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 4.00%)</title><rect x="1014.7" y="883.0" width="47.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1017.7" y="894.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 2.86%)</title><rect x="1028.2" y="867.0" width="33.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1031.2" y="878.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.57%)</title><rect x="1028.2" y="851.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 2.29%)</title><rect x="1034.9" y="851.0" width="27.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.9" y="862.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.14%)</title><rect x="1048.4" y="835.0" width="13.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.4" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.14%)</title><rect x="1061.9" y="883.0" width="13.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1064.9" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.14%)</title><rect x="1061.9" y="867.0" width="13.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.9" y="878.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1068.6" y="851.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.6" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.57%)</title><rect x="1068.6" y="835.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1071.6" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.57%)</title><rect x="1068.6" y="819.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.6" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.29%)</title><rect x="1075.4" y="899.0" width="26.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.4" y="910.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 2.29%)</title><rect x="1075.4" y="883.0" width="26.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1078.4" y="894.0">P..</text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1075.4" y="867.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.57%)</title><rect x="1075.4" y="851.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.4" y="862.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.57%)</title><rect x="1075.4" y="835.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1078.4" y="846.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1082.1" y="867.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.1" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.57%)</title><rect x="1082.1" y="851.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.1" y="862.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1082.1" y="835.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.1" y="846.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 1.14%)</title><rect x="1088.9" y="867.0" width="13.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.9" y="878.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 1.14%)</title><rect x="1088.9" y="851.0" width="13.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 4.00%)</title><rect x="1102.3" y="915.0" width="47.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.3" y="926.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 4.00%)</title><rect x="1102.3" y="899.0" width="47.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.3" y="910.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 4.00%)</title><rect x="1102.3" y="883.0" width="47.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.3" y="894.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 4.00%)</title><rect x="1102.3" y="867.0" width="47.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.3" y="878.0">Pars..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.57%)</title><rect x="1102.3" y="851.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.3" y="862.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.57%)</title><rect x="1102.3" y="835.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.3" y="846.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.57%)</title><rect x="1102.3" y="819.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.3" y="830.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.57%)</title><rect x="1102.3" y="803.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.43%)</title><rect x="1109.1" y="851.0" width="40.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.1" y="862.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.43%)</title><rect x="1109.1" y="835.0" width="40.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.1" y="846.0">Par..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1109.1" y="819.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.1" y="830.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.57%)</title><rect x="1109.1" y="803.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.1" y="814.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.57%)</title><rect x="1109.1" y="787.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.1" y="798.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.57%)</title><rect x="1109.1" y="771.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.1" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.57%)</title><rect x="1109.1" y="755.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.1" y="766.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.57%)</title><rect x="1109.1" y="739.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.1" y="750.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.57%)</title><rect x="1109.1" y="723.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.1" y="734.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.57%)</title><rect x="1109.1" y="707.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.1" y="718.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.57%)</title><rect x="1109.1" y="691.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.86%)</title><rect x="1115.8" y="819.0" width="33.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.8" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.86%)</title><rect x="1115.8" y="803.0" width="33.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.8" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.86%)</title><rect x="1115.8" y="787.0" width="33.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.8" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.86%)</title><rect x="1115.8" y="771.0" width="33.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.8" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.86%)</title><rect x="1115.8" y="755.0" width="33.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.8" y="766.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.86%)</title><rect x="1115.8" y="739.0" width="33.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.8" y="750.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.71%)</title><rect x="1115.8" y="723.0" width="20.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.8" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.71%)</title><rect x="1115.8" y="707.0" width="20.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.71%)</title><rect x="1115.8" y="691.0" width="20.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.71%)</title><rect x="1115.8" y="675.0" width="20.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.71%)</title><rect x="1115.8" y="659.0" width="20.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.71%)</title><rect x="1115.8" y="643.0" width="20.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.71%)</title><rect x="1115.8" y="627.0" width="20.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.71%)</title><rect x="1115.8" y="611.0" width="20.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.71%)</title><rect x="1115.8" y="595.0" width="20.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.71%)</title><rect x="1115.8" y="579.0" width="20.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.71%)</title><rect x="1115.8" y="563.0" width="20.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.71%)</title><rect x="1115.8" y="547.0" width="20.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.8" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1115.8" y="531.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.8" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1115.8" y="515.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.8" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="1115.8" y="499.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.8" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="1115.8" y="483.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.8" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="1115.8" y="467.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.8" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1115.8" y="451.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.8" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1115.8" y="435.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.8" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1115.8" y="419.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.8" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1115.8" y="403.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.8" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.57%)</title><rect x="1115.8" y="387.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.8" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1115.8" y="371.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.8" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1115.8" y="355.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.8" y="366.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1115.8" y="339.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.8" y="350.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.57%)</title><rect x="1115.8" y="323.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.8" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.14%)</title><rect x="1122.6" y="531.0" width="13.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.14%)</title><rect x="1122.6" y="515.0" width="13.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.14%)</title><rect x="1122.6" y="499.0" width="13.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.14%)</title><rect x="1122.6" y="483.0" width="13.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.14%)</title><rect x="1122.6" y="467.0" width="13.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1122.6" y="451.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1122.6" y="435.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1122.6" y="419.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1122.6" y="403.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1122.6" y="387.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1122.6" y="371.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1122.6" y="355.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.6" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1122.6" y="339.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.6" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1122.6" y="323.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.6" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="1122.6" y="307.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.6" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="1122.6" y="291.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.6" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="1122.6" y="275.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.6" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1122.6" y="259.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.6" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1122.6" y="243.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.6" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1122.6" y="227.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.6" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.57%)</title><rect x="1122.6" y="211.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.6" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.57%)</title><rect x="1122.6" y="195.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.6" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1122.6" y="179.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.6" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1122.6" y="163.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.6" y="174.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.57%)</title><rect x="1122.6" y="147.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.6" y="158.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.57%)</title><rect x="1122.6" y="131.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.6" y="142.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.57%)</title><rect x="1122.6" y="115.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.6" y="126.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.57%)</title><rect x="1122.6" y="99.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.6" y="110.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.57%)</title><rect x="1122.6" y="83.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.6" y="94.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.57%)</title><rect x="1122.6" y="67.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.6" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.57%)</title><rect x="1122.6" y="51.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.6" y="62.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.57%)</title><rect x="1122.6" y="35.0" width="6.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1125.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.57%)</title><rect x="1129.3" y="451.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.57%)</title><rect x="1129.3" y="435.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.3" y="446.0"></text>
</g>
<g>
<title>Parse::push_constant(ciConstant, bool, bool, Type const*) (1 samples, 0.57%)</title><rect x="1129.3" y="419.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.3" y="430.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.57%)</title><rect x="1129.3" y="403.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.3" y="414.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.57%)</title><rect x="1129.3" y="387.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.3" y="398.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.57%)</title><rect x="1129.3" y="371.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.3" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.14%)</title><rect x="1136.1" y="723.0" width="13.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.1" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.14%)</title><rect x="1136.1" y="707.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.1" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.14%)</title><rect x="1136.1" y="691.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1136.1" y="675.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1136.1" y="659.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1136.1" y="643.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1136.1" y="627.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.1" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1136.1" y="611.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.1" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1136.1" y="595.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.1" y="606.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1136.1" y="579.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.1" y="590.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.57%)</title><rect x="1136.1" y="563.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.1" y="574.0"></text>
</g>
<g>
<title>ciMethod::should_not_inline() (1 samples, 0.57%)</title><rect x="1136.1" y="547.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.1" y="558.0"></text>
</g>
<g>
<title>CompilerOracle::should_not_inline(methodHandle) (1 samples, 0.57%)</title><rect x="1136.1" y="531.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.57%)</title><rect x="1142.8" y="675.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.8" y="686.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 1.14%)</title><rect x="1149.5" y="915.0" width="13.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="926.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 1.14%)</title><rect x="1149.5" y="899.0" width="13.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="910.0"></text>
</g>
<g>
<title>Dependencies::copy_to(nmethod*) (1 samples, 0.57%)</title><rect x="1149.5" y="883.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.5" y="894.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.57%)</title><rect x="1156.3" y="883.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.3" y="894.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.71%)</title><rect x="1163.0" y="947.0" width="20.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.0" y="958.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.71%)</title><rect x="1163.0" y="931.0" width="20.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.0" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.71%)</title><rect x="1163.0" y="915.0" width="20.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.0" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.14%)</title><rect x="1163.0" y="899.0" width="13.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.0" y="910.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.57%)</title><rect x="1163.0" y="883.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.0" y="894.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.57%)</title><rect x="1163.0" y="867.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="878.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.57%)</title><rect x="1163.0" y="851.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.0" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.57%)</title><rect x="1163.0" y="835.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.0" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.57%)</title><rect x="1163.0" y="819.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.0" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.57%)</title><rect x="1163.0" y="803.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.0" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.57%)</title><rect x="1163.0" y="787.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.0" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.57%)</title><rect x="1163.0" y="771.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.0" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.57%)</title><rect x="1163.0" y="755.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.0" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.57%)</title><rect x="1163.0" y="739.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.0" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.57%)</title><rect x="1163.0" y="723.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.0" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.57%)</title><rect x="1163.0" y="707.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.57%)</title><rect x="1163.0" y="691.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.0" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.57%)</title><rect x="1163.0" y="675.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.0" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.57%)</title><rect x="1163.0" y="659.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.0" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.57%)</title><rect x="1163.0" y="643.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.0" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.57%)</title><rect x="1163.0" y="627.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.0" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.57%)</title><rect x="1163.0" y="611.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.0" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.57%)</title><rect x="1163.0" y="595.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.57%)</title><rect x="1163.0" y="579.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.0" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.57%)</title><rect x="1163.0" y="563.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.0" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.57%)</title><rect x="1163.0" y="547.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.57%)</title><rect x="1163.0" y="531.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.0" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1163.0" y="515.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.0" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1163.0" y="499.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.0" y="510.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1163.0" y="483.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.0" y="494.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.57%)</title><rect x="1163.0" y="467.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.0" y="478.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.57%)</title><rect x="1169.8" y="883.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.8" y="894.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.57%)</title><rect x="1169.8" y="867.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.8" y="878.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.57%)</title><rect x="1169.8" y="851.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.8" y="862.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.57%)</title><rect x="1169.8" y="835.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.8" y="846.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.57%)</title><rect x="1169.8" y="819.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.8" y="830.0"></text>
</g>
<g>
<title>LIR_OpVisitState::append(LIR_OprDesc*&amp;, LIR_OpVisitState::OprMode) (1 samples, 0.57%)</title><rect x="1169.8" y="803.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.8" y="814.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.57%)</title><rect x="1176.5" y="899.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.5" y="910.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.57%)</title><rect x="1176.5" y="883.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.5" y="894.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.57%)</title><rect x="1176.5" y="867.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.5" y="878.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.57%)</title><rect x="1176.5" y="851.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="862.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.57%)</title><rect x="1176.5" y="835.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.5" y="846.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.57%)</title><rect x="1183.3" y="995.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="1006.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.57%)</title><rect x="1183.3" y="979.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="990.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.57%)</title><rect x="1183.3" y="963.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.3" y="974.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.57%)</title><rect x="1183.3" y="947.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.3" y="958.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.57%)</title><rect x="1183.3" y="931.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.3" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.57%)</title><rect x="1183.3" y="915.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_epilogue(bool) (1 samples, 0.57%)</title><rect x="1183.3" y="899.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.3" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::oop_extra_words() (1 samples, 0.57%)</title><rect x="1183.3" y="883.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="894.0"></text>
</g>
</g>
</svg>
