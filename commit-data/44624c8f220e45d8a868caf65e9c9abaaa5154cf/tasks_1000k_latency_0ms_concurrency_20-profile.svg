<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (1,385 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (267 samples, 19.28%)</title><rect x="10.0" y="1235.0" width="227.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (266 samples, 19.21%)</title><rect x="10.0" y="1219.0" width="226.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.36%)</title><rect x="10.0" y="1203.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.36%)</title><rect x="10.0" y="1187.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1573389636.accept (5 samples, 0.36%)</title><rect x="10.0" y="1171.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.36%)</title><rect x="10.0" y="1155.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.36%)</title><rect x="10.0" y="1139.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.29%)</title><rect x="10.9" y="1123.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.07%)</title><rect x="14.3" y="1203.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.07%)</title><rect x="14.3" y="1187.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.14%)</title><rect x="15.1" y="1203.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.14%)</title><rect x="15.1" y="1187.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="15.1" y="1171.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="15.1" y="1155.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="15.1" y="1139.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="15.1" y="1123.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="15.1" y="1107.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.1" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="15.1" y="1091.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="18.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="16.0" y="1107.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="16.0" y="1091.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="16.0" y="1075.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="16.0" y="1059.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (205 samples, 14.80%)</title><rect x="16.8" y="1203.0" width="174.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.8" y="1214.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/544328610.accept (201 samples, 14.51%)</title><rect x="16.8" y="1187.0" width="171.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="1198.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (201 samples, 14.51%)</title><rect x="16.8" y="1171.0" width="171.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.8" y="1182.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.14%)</title><rect x="16.8" y="1155.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (163 samples, 11.77%)</title><rect x="18.5" y="1155.0" width="138.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.5" y="1166.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (163 samples, 11.77%)</title><rect x="18.5" y="1139.0" width="138.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.5" y="1150.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (163 samples, 11.77%)</title><rect x="18.5" y="1123.0" width="138.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.5" y="1134.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (163 samples, 11.77%)</title><rect x="18.5" y="1107.0" width="138.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.5" y="1118.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (163 samples, 11.77%)</title><rect x="18.5" y="1091.0" width="138.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.5" y="1102.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (163 samples, 11.77%)</title><rect x="18.5" y="1075.0" width="138.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.5" y="1086.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (112 samples, 8.09%)</title><rect x="18.5" y="1059.0" width="95.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.5" y="1070.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 1.95%)</title><rect x="18.5" y="1043.0" width="23.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.5" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 1.95%)</title><rect x="18.5" y="1027.0" width="23.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.5" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.37%)</title><rect x="25.3" y="1011.0" width="16.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (19 samples, 1.37%)</title><rect x="25.3" y="995.0" width="16.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.43%)</title><rect x="41.5" y="1043.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.43%)</title><rect x="41.5" y="1027.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.14%)</title><rect x="42.4" y="1011.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.4" y="1022.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.14%)</title><rect x="42.4" y="995.0" width="1.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="45.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="44.1" y="1011.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.14%)</title><rect x="44.9" y="1011.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 5.70%)</title><rect x="46.6" y="1043.0" width="67.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.6" y="1054.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 5.70%)</title><rect x="46.6" y="1027.0" width="67.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.6" y="1038.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (78 samples, 5.63%)</title><rect x="46.6" y="1011.0" width="66.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.6" y="1022.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (78 samples, 5.63%)</title><rect x="46.6" y="995.0" width="66.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.6" y="1006.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (76 samples, 5.49%)</title><rect x="48.3" y="979.0" width="64.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.3" y="990.0">sun/mis..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="50.9" y="963.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="53.9" y="974.0"></text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 4.62%)</title><rect x="51.7" y="963.0" width="54.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="54.7" y="974.0">Unsaf..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="54.3" y="947.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="57.3" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 3.18%)</title><rect x="55.2" y="947.0" width="37.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="58.2" y="958.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.14%)</title><rect x="92.6" y="947.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="95.6" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.01%)</title><rect x="94.3" y="947.0" width="12.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="97.3" y="958.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.22%)</title><rect x="106.3" y="963.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="109.3" y="974.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.29%)</title><rect x="108.8" y="963.0" width="3.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="111.8" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="112.2" y="963.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="115.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="113.1" y="1011.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="113.9" y="1059.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.07%)</title><rect x="113.9" y="1043.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="116.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.07%)</title><rect x="113.9" y="1027.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="116.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (50 samples, 3.61%)</title><rect x="114.8" y="1059.0" width="42.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.8" y="1070.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (50 samples, 3.61%)</title><rect x="114.8" y="1043.0" width="42.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="117.8" y="1054.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.36%)</title><rect x="114.8" y="1027.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (45 samples, 3.25%)</title><rect x="119.1" y="1027.0" width="38.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="122.1" y="1038.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.14%)</title><rect x="155.7" y="1011.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="158.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.29%)</title><rect x="157.4" y="1155.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.29%)</title><rect x="157.4" y="1139.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.14%)</title><rect x="160.8" y="1155.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.14%)</title><rect x="160.8" y="1139.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="163.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.14%)</title><rect x="160.8" y="1123.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="163.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (30 samples, 2.17%)</title><rect x="162.5" y="1155.0" width="25.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.5" y="1166.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 2.17%)</title><rect x="162.5" y="1139.0" width="25.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.5" y="1150.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 0.94%)</title><rect x="174.4" y="1123.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.36%)</title><rect x="174.4" y="1107.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="177.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.36%)</title><rect x="174.4" y="1091.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="177.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.36%)</title><rect x="174.4" y="1075.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.4" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="177.0" y="1059.0" width="1.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="180.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="178.7" y="1107.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.51%)</title><rect x="179.5" y="1107.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.5" y="1118.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="185.5" y="1123.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="188.5" y="1134.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="186.4" y="1123.0" width="1.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="189.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.29%)</title><rect x="188.1" y="1187.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.29%)</title><rect x="188.1" y="1171.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.29%)</title><rect x="188.1" y="1155.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.29%)</title><rect x="188.1" y="1139.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="191.1" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.22%)</title><rect x="188.9" y="1123.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (53 samples, 3.83%)</title><rect x="191.5" y="1203.0" width="45.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.5" y="1214.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (53 samples, 3.83%)</title><rect x="191.5" y="1187.0" width="45.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="194.5" y="1198.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (31 samples, 2.24%)</title><rect x="191.5" y="1171.0" width="26.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.5" y="1182.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (31 samples, 2.24%)</title><rect x="191.5" y="1155.0" width="26.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="194.5" y="1166.0">o..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="191.5" y="1139.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.5" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="191.5" y="1123.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="194.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="192.3" y="1139.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.3" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="192.3" y="1123.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.07%)</title><rect x="192.3" y="1107.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (29 samples, 2.09%)</title><rect x="193.2" y="1139.0" width="24.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.2" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (22 samples, 1.59%)</title><rect x="193.2" y="1123.0" width="18.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (22 samples, 1.59%)</title><rect x="193.2" y="1107.0" width="18.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 0.94%)</title><rect x="193.2" y="1091.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.07%)</title><rect x="200.8" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.07%)</title><rect x="200.8" y="1059.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.getValue (1 samples, 0.07%)</title><rect x="200.8" y="1043.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.22%)</title><rect x="201.7" y="1075.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.22%)</title><rect x="201.7" y="1059.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.22%)</title><rect x="201.7" y="1043.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.22%)</title><rect x="201.7" y="1027.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="204.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.22%)</title><rect x="201.7" y="1011.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.22%)</title><rect x="201.7" y="995.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.22%)</title><rect x="201.7" y="979.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="204.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.65%)</title><rect x="204.3" y="1091.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 0.65%)</title><rect x="204.3" y="1075.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (9 samples, 0.65%)</title><rect x="204.3" y="1059.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.3" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (9 samples, 0.65%)</title><rect x="204.3" y="1043.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="207.3" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6 samples, 0.43%)</title><rect x="206.8" y="1027.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (6 samples, 0.43%)</title><rect x="206.8" y="1011.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (6 samples, 0.43%)</title><rect x="206.8" y="995.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="209.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.43%)</title><rect x="206.8" y="979.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.14%)</title><rect x="211.9" y="1123.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.14%)</title><rect x="211.9" y="1107.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (2 samples, 0.14%)</title><rect x="211.9" y="1091.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="211.9" y="1075.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="211.9" y="1059.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="212.8" y="1075.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.07%)</title><rect x="212.8" y="1059.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="215.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.07%)</title><rect x="212.8" y="1043.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.8" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="212.8" y="1027.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="215.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (4 samples, 0.29%)</title><rect x="213.6" y="1123.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (4 samples, 0.29%)</title><rect x="213.6" y="1107.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (2 samples, 0.14%)</title><rect x="213.6" y="1091.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="213.6" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="213.6" y="1059.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="214.5" y="1075.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.07%)</title><rect x="214.5" y="1059.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.07%)</title><rect x="214.5" y="1043.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="215.3" y="1091.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="215.3" y="1075.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.3" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="216.2" y="1059.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="219.2" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="216.2" y="1043.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="219.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="217.0" y="1123.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.65%)</title><rect x="217.9" y="1171.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.58%)</title><rect x="217.9" y="1155.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.43%)</title><rect x="217.9" y="1139.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="218.7" y="1123.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1243979213.accept (1 samples, 0.07%)</title><rect x="218.7" y="1107.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="218.7" y="1091.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="218.7" y="1075.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.07%)</title><rect x="218.7" y="1059.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.07%)</title><rect x="218.7" y="1043.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="219.6" y="1123.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="219.6" y="1107.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="219.6" y="1091.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="219.6" y="1075.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="219.6" y="1059.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.6" y="1070.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="219.6" y="1043.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.07%)</title><rect x="219.6" y="1027.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.22%)</title><rect x="220.4" y="1123.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.14%)</title><rect x="221.3" y="1107.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="221.3" y="1091.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.3" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="221.3" y="1075.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.3" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="221.3" y="1059.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="221.3" y="1043.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.3" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="221.3" y="1027.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.3" y="1038.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="221.3" y="1011.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="221.3" y="995.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="221.3" y="979.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$229/21876157.apply (1 samples, 0.07%)</title><rect x="221.3" y="963.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.07%)</title><rect x="221.3" y="947.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="222.1" y="1027.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="222.1" y="1011.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="222.1" y="995.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="222.1" y="979.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="225.1" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="222.1" y="963.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="225.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.14%)</title><rect x="223.0" y="1139.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.14%)</title><rect x="223.0" y="1123.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="223.0" y="1107.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.14%)</title><rect x="223.0" y="1091.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="223.8" y="1075.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/2131952342.get (1 samples, 0.07%)</title><rect x="223.8" y="1059.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.lambda$makeRef$237 (1 samples, 0.07%)</title><rect x="223.8" y="1043.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="224.7" y="1155.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.07%)</title><rect x="224.7" y="1139.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.07%)</title><rect x="225.6" y="1171.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.07%)</title><rect x="226.4" y="1171.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.07%)</title><rect x="226.4" y="1155.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.29%)</title><rect x="227.3" y="1171.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.22%)</title><rect x="227.3" y="1155.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.22%)</title><rect x="227.3" y="1139.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="227.3" y="1123.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="227.3" y="1107.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.14%)</title><rect x="228.1" y="1123.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.14%)</title><rect x="228.1" y="1107.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.14%)</title><rect x="228.1" y="1091.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.14%)</title><rect x="228.1" y="1075.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.14%)</title><rect x="228.1" y="1059.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.14%)</title><rect x="228.1" y="1043.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.1" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.14%)</title><rect x="228.1" y="1027.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.1" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="228.1" y="1011.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="231.1" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.07%)</title><rect x="229.0" y="1011.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.0" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.07%)</title><rect x="229.0" y="995.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.0" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.07%)</title><rect x="229.0" y="979.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.0" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.07%)</title><rect x="229.0" y="963.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="229.8" y="1155.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="229.8" y="1139.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="229.8" y="1123.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="229.8" y="1107.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="229.8" y="1091.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="229.8" y="1075.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.07%)</title><rect x="229.8" y="1059.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.07%)</title><rect x="229.8" y="1043.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.43%)</title><rect x="230.7" y="1171.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.07%)</title><rect x="230.7" y="1155.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.36%)</title><rect x="231.5" y="1155.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.22%)</title><rect x="232.4" y="1139.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="235.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.22%)</title><rect x="232.4" y="1123.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.22%)</title><rect x="232.4" y="1107.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.22%)</title><rect x="232.4" y="1091.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.22%)</title><rect x="232.4" y="1075.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.22%)</title><rect x="232.4" y="1059.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.22%)</title><rect x="232.4" y="1043.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.14%)</title><rect x="232.4" y="1027.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.4" y="1038.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.14%)</title><rect x="232.4" y="1011.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="235.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.14%)</title><rect x="232.4" y="995.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="232.4" y="979.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="232.4" y="963.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.4" y="974.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="232.4" y="947.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="235.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$229/21876157.apply (1 samples, 0.07%)</title><rect x="233.2" y="979.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.07%)</title><rect x="233.2" y="963.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="234.1" y="1027.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="234.1" y="1011.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.1" y="1022.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="234.1" y="995.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="237.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="234.9" y="1139.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="234.9" y="1123.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.9" y="1134.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="234.9" y="1107.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.9" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.07%)</title><rect x="234.9" y="1091.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="237.9" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="234.9" y="1075.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.9" y="1086.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.07%)</title><rect x="234.9" y="1059.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="235.8" y="1171.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="235.8" y="1155.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="235.8" y="1139.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="235.8" y="1123.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="235.8" y="1107.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.8" y="1118.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.07%)</title><rect x="236.6" y="1219.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.6" y="1230.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.07%)</title><rect x="236.6" y="1203.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.run (672 samples, 48.52%)</title><rect x="237.5" y="1235.0" width="572.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.5" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (672 samples, 48.52%)</title><rect x="237.5" y="1219.0" width="572.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.5" y="1230.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (672 samples, 48.52%)</title><rect x="237.5" y="1203.0" width="572.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.5" y="1214.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1266410925.run (431 samples, 31.12%)</title><rect x="240.0" y="1187.0" width="367.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="243.0" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (431 samples, 31.12%)</title><rect x="240.0" y="1171.0" width="367.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.0" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (431 samples, 31.12%)</title><rect x="240.0" y="1155.0" width="367.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.0" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (422 samples, 30.47%)</title><rect x="240.0" y="1139.0" width="359.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.0" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessPip..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.14%)</title><rect x="248.6" y="1123.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (134 samples, 9.68%)</title><rect x="250.3" y="1123.0" width="114.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.3" y="1134.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (134 samples, 9.68%)</title><rect x="250.3" y="1107.0" width="114.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.3" y="1118.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (134 samples, 9.68%)</title><rect x="250.3" y="1091.0" width="114.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.3" y="1102.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (134 samples, 9.68%)</title><rect x="250.3" y="1075.0" width="114.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.3" y="1086.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (134 samples, 9.68%)</title><rect x="250.3" y="1059.0" width="114.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.3" y="1070.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (134 samples, 9.68%)</title><rect x="250.3" y="1043.0" width="114.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.3" y="1054.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (40 samples, 2.89%)</title><rect x="250.3" y="1027.0" width="34.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.3" y="1038.0">co..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="263.0" y="1011.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="266.0" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="263.0" y="995.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="266.0" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.58%)</title><rect x="263.9" y="1011.0" width="6.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="266.9" y="1022.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.51%)</title><rect x="264.7" y="995.0" width="6.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="267.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.14%)</title><rect x="270.7" y="1011.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.07%)</title><rect x="271.6" y="995.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.07%)</title><rect x="271.6" y="979.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="271.6" y="963.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="271.6" y="947.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.6" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="271.6" y="931.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 1.01%)</title><rect x="272.4" y="1011.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.22%)</title><rect x="281.8" y="995.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="284.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.14%)</title><rect x="281.8" y="979.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.14%)</title><rect x="281.8" y="963.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="283.5" y="979.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.07%)</title><rect x="283.5" y="963.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.07%)</title><rect x="283.5" y="947.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.5" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="283.5" y="931.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="286.5" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="283.5" y="915.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="286.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="283.5" y="899.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="286.5" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="283.5" y="883.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="286.5" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="283.5" y="867.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="286.5" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="283.5" y="851.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="286.5" y="862.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="283.5" y="835.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="286.5" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="283.5" y="819.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="286.5" y="830.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="283.5" y="803.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="286.5" y="814.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.07%)</title><rect x="283.5" y="787.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="286.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (88 samples, 6.35%)</title><rect x="284.3" y="1027.0" width="75.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.3" y="1038.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.07%)</title><rect x="286.0" y="1011.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (3 samples, 0.22%)</title><rect x="286.9" y="1011.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.36%)</title><rect x="289.5" y="1011.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.29%)</title><rect x="290.3" y="995.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.58%)</title><rect x="293.7" y="1011.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.58%)</title><rect x="293.7" y="995.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.43%)</title><rect x="293.7" y="979.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.43%)</title><rect x="293.7" y="963.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.14%)</title><rect x="297.1" y="947.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="300.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="298.8" y="979.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="298.8" y="963.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="301.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.51%)</title><rect x="300.5" y="1011.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="303.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.29%)</title><rect x="303.1" y="995.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (59 samples, 4.26%)</title><rect x="306.5" y="1011.0" width="50.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.5" y="1022.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.16%)</title><rect x="310.8" y="995.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.36%)</title><rect x="315.9" y="979.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="318.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.36%)</title><rect x="315.9" y="963.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="318.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.36%)</title><rect x="315.9" y="947.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.29%)</title><rect x="320.1" y="979.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="323.5" y="979.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="326.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="323.5" y="963.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="326.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.14%)</title><rect x="324.4" y="995.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="327.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (36 samples, 2.60%)</title><rect x="326.1" y="995.0" width="30.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="329.1" y="1006.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (36 samples, 2.60%)</title><rect x="326.1" y="979.0" width="30.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="329.1" y="990.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (35 samples, 2.53%)</title><rect x="326.9" y="963.0" width="29.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="329.9" y="974.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.87%)</title><rect x="328.6" y="947.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="331.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.36%)</title><rect x="330.3" y="931.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.36%)</title><rect x="330.3" y="915.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.36%)</title><rect x="330.3" y="899.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.29%)</title><rect x="331.2" y="883.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.22%)</title><rect x="334.6" y="931.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.22%)</title><rect x="334.6" y="915.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.14%)</title><rect x="337.2" y="931.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="340.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.43%)</title><rect x="338.9" y="947.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="341.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.29%)</title><rect x="340.6" y="931.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.29%)</title><rect x="340.6" y="915.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.29%)</title><rect x="340.6" y="899.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.6" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.29%)</title><rect x="340.6" y="883.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="343.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.14%)</title><rect x="344.0" y="947.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="347.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.72%)</title><rect x="345.7" y="947.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="348.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.72%)</title><rect x="345.7" y="931.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="348.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.72%)</title><rect x="345.7" y="915.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.72%)</title><rect x="345.7" y="899.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.7" y="910.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.72%)</title><rect x="345.7" y="883.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.7" y="894.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (10 samples, 0.72%)</title><rect x="345.7" y="867.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="348.7" y="878.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (10 samples, 0.72%)</title><rect x="345.7" y="851.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="348.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.07%)</title><rect x="354.2" y="947.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="357.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="354.2" y="931.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="357.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="354.2" y="915.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.14%)</title><rect x="355.1" y="947.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.07%)</title><rect x="356.8" y="1011.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.14%)</title><rect x="357.6" y="1011.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="360.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.43%)</title><rect x="359.3" y="1027.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="362.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.43%)</title><rect x="359.3" y="1011.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.43%)</title><rect x="359.3" y="995.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="362.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.43%)</title><rect x="359.3" y="979.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.43%)</title><rect x="359.3" y="963.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="362.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (253 samples, 18.27%)</title><rect x="364.4" y="1123.0" width="215.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="367.4" y="1134.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (37 samples, 2.67%)</title><rect x="367.0" y="1107.0" width="31.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.0" y="1118.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 0.22%)</title><rect x="367.0" y="1091.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="370.0" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (34 samples, 2.45%)</title><rect x="369.5" y="1091.0" width="29.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="372.5" y="1102.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (31 samples, 2.24%)</title><rect x="372.1" y="1075.0" width="26.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="375.1" y="1086.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.43%)</title><rect x="372.1" y="1059.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="375.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.43%)</title><rect x="372.1" y="1043.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="375.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.43%)</title><rect x="372.1" y="1027.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="375.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.43%)</title><rect x="372.1" y="1011.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="375.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="377.2" y="1059.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="377.2" y="1043.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="380.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="377.2" y="1027.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="380.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.07%)</title><rect x="378.1" y="1011.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="381.1" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (23 samples, 1.66%)</title><rect x="378.9" y="1059.0" width="19.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="381.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (20 samples, 1.44%)</title><rect x="381.5" y="1043.0" width="17.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.58%)</title><rect x="391.7" y="1027.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="394.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.14%)</title><rect x="398.5" y="1107.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="401.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="399.4" y="1091.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="402.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.07%)</title><rect x="399.4" y="1075.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="402.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (150 samples, 10.83%)</title><rect x="400.2" y="1107.0" width="127.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="403.2" y="1118.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (150 samples, 10.83%)</title><rect x="400.2" y="1091.0" width="127.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.2" y="1102.0">com/linecorp/dec..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.36%)</title><rect x="407.9" y="1075.0" width="4.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="410.9" y="1086.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.36%)</title><rect x="407.9" y="1059.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="410.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (39 samples, 2.82%)</title><rect x="412.1" y="1075.0" width="33.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="415.1" y="1086.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (38 samples, 2.74%)</title><rect x="413.0" y="1059.0" width="32.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="416.0" y="1070.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (27 samples, 1.95%)</title><rect x="418.1" y="1043.0" width="23.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="421.1" y="1054.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="427.5" y="1027.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="430.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (11 samples, 0.79%)</title><rect x="428.3" y="1027.0" width="9.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="431.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (11 samples, 0.79%)</title><rect x="428.3" y="1011.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="431.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 0.79%)</title><rect x="428.3" y="995.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="431.3" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.51%)</title><rect x="430.9" y="979.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="433.9" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.36%)</title><rect x="430.9" y="963.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="433.9" y="974.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="430.9" y="947.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="433.9" y="958.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.07%)</title><rect x="431.7" y="947.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="434.7" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.22%)</title><rect x="432.6" y="947.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="435.6" y="958.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.22%)</title><rect x="432.6" y="931.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="435.6" y="942.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="433.4" y="915.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="436.4" y="926.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="434.3" y="915.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="437.3" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="435.1" y="963.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="438.1" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="435.1" y="947.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="438.1" y="958.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="435.1" y="931.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="438.1" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="435.1" y="915.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="438.1" y="926.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="436.0" y="947.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="439.0" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="436.8" y="979.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="439.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.22%)</title><rect x="437.7" y="1027.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="440.7" y="1038.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="440.3" y="1027.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="443.3" y="1038.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="441.1" y="1043.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="444.1" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.29%)</title><rect x="442.0" y="1043.0" width="3.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="445.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.51%)</title><rect x="445.4" y="1075.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="448.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.14%)</title><rect x="445.4" y="1059.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="448.4" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="445.4" y="1043.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="448.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="446.2" y="1043.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="449.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="446.2" y="1027.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="449.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.36%)</title><rect x="447.1" y="1059.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="450.1" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="447.1" y="1043.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="450.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.29%)</title><rect x="447.9" y="1043.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.9" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (90 samples, 6.50%)</title><rect x="451.3" y="1075.0" width="76.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="454.3" y="1086.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (90 samples, 6.50%)</title><rect x="451.3" y="1059.0" width="76.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="454.3" y="1070.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.58%)</title><rect x="451.3" y="1043.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="454.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.58%)</title><rect x="451.3" y="1027.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="454.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.58%)</title><rect x="451.3" y="1011.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.58%)</title><rect x="451.3" y="995.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="454.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.29%)</title><rect x="458.1" y="1043.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.29%)</title><rect x="458.1" y="1027.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.29%)</title><rect x="458.1" y="1011.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.1" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.29%)</title><rect x="458.1" y="995.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="461.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (78 samples, 5.63%)</title><rect x="461.6" y="1043.0" width="66.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="464.6" y="1054.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (72 samples, 5.20%)</title><rect x="466.7" y="1027.0" width="61.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="469.7" y="1038.0">java/u..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.07%)</title><rect x="495.6" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="498.6" y="1022.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.07%)</title><rect x="495.6" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="498.6" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="495.6" y="979.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="498.6" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="495.6" y="963.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="498.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="496.5" y="1011.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="499.5" y="1022.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.07%)</title><rect x="496.5" y="995.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="499.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 2.60%)</title><rect x="497.3" y="1011.0" width="30.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="500.3" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.29%)</title><rect x="514.4" y="995.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="517.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.72%)</title><rect x="517.8" y="995.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="520.8" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="524.6" y="979.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="527.6" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="524.6" y="963.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="527.6" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="524.6" y="947.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="527.6" y="958.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.14%)</title><rect x="526.3" y="995.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="529.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (43 samples, 3.10%)</title><rect x="528.0" y="1107.0" width="36.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="531.0" y="1118.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (43 samples, 3.10%)</title><rect x="528.0" y="1091.0" width="36.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="531.0" y="1102.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/950531920.process (22 samples, 1.59%)</title><rect x="529.7" y="1075.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="532.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (22 samples, 1.59%)</title><rect x="529.7" y="1059.0" width="18.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="532.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (19 samples, 1.37%)</title><rect x="529.7" y="1043.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="532.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.36%)</title><rect x="538.2" y="1027.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="541.2" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="539.1" y="1011.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="542.1" y="1022.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="539.1" y="995.0" width="3.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="542.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.22%)</title><rect x="542.5" y="1027.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="545.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.07%)</title><rect x="545.0" y="1027.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="548.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.22%)</title><rect x="545.9" y="1043.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="548.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.22%)</title><rect x="545.9" y="1027.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.22%)</title><rect x="545.9" y="1011.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="548.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.22%)</title><rect x="545.9" y="995.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="548.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.36%)</title><rect x="548.5" y="1075.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="551.5" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.36%)</title><rect x="548.5" y="1059.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 0.22%)</title><rect x="552.7" y="1075.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 0.22%)</title><rect x="552.7" y="1059.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="555.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1874862429.get$Lambda (3 samples, 0.22%)</title><rect x="552.7" y="1043.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="555.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1874862429.&lt;init&gt; (3 samples, 0.22%)</title><rect x="552.7" y="1027.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="555.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.51%)</title><rect x="555.3" y="1075.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="558.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.51%)</title><rect x="555.3" y="1059.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="558.3" y="1070.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.29%)</title><rect x="555.3" y="1043.0" width="3.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="558.3" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.22%)</title><rect x="558.7" y="1043.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="561.7" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.14%)</title><rect x="561.2" y="1075.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="564.2" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="562.1" y="1059.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="565.1" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.07%)</title><rect x="562.1" y="1043.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="565.1" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.07%)</title><rect x="562.1" y="1027.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="565.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.14%)</title><rect x="562.9" y="1075.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="565.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="563.8" y="1059.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="566.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.30%)</title><rect x="564.6" y="1107.0" width="15.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="567.6" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="568.1" y="1091.0" width="1.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="571.1" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="568.1" y="1075.0" width="1.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="571.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 0.87%)</title><rect x="569.8" y="1091.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="572.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.79%)</title><rect x="570.6" y="1075.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="573.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1116797930.accept (11 samples, 0.79%)</title><rect x="570.6" y="1059.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="573.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (11 samples, 0.79%)</title><rect x="570.6" y="1043.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="573.6" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (11 samples, 0.79%)</title><rect x="570.6" y="1027.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.6" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (11 samples, 0.79%)</title><rect x="570.6" y="1011.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="573.6" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.36%)</title><rect x="574.0" y="995.0" width="4.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="577.0" y="1006.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.36%)</title><rect x="574.0" y="979.0" width="4.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="577.0" y="990.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.14%)</title><rect x="578.3" y="995.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="581.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.30%)</title><rect x="580.0" y="1123.0" width="15.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (3 samples, 0.22%)</title><rect x="581.7" y="1107.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="584.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 0.94%)</title><rect x="584.2" y="1107.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="587.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.87%)</title><rect x="585.1" y="1091.0" width="10.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="588.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/719480717.accept (12 samples, 0.87%)</title><rect x="585.1" y="1075.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (12 samples, 0.87%)</title><rect x="585.1" y="1059.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="588.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/302019705.complete (12 samples, 0.87%)</title><rect x="585.1" y="1043.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="588.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (12 samples, 0.87%)</title><rect x="585.1" y="1027.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (12 samples, 0.87%)</title><rect x="585.1" y="1011.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="588.1" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 0.87%)</title><rect x="585.1" y="995.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="588.1" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 0.87%)</title><rect x="585.1" y="979.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 0.87%)</title><rect x="585.1" y="963.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.1" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (12 samples, 0.87%)</title><rect x="585.1" y="947.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="588.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="594.5" y="931.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="597.5" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.36%)</title><rect x="595.3" y="1123.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="598.3" y="1134.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.36%)</title><rect x="595.3" y="1107.0" width="4.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="598.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.14%)</title><rect x="599.6" y="1139.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="602.6" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.14%)</title><rect x="599.6" y="1123.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="602.6" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.14%)</title><rect x="599.6" y="1107.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="602.6" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="599.6" y="1091.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="602.6" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="599.6" y="1075.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="602.6" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="599.6" y="1059.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="602.6" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="599.6" y="1043.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="602.6" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="599.6" y="1027.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="602.6" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="599.6" y="1011.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="602.6" y="1022.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="599.6" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="602.6" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="599.6" y="979.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="602.6" y="990.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="599.6" y="963.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="602.6" y="974.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.07%)</title><rect x="600.4" y="1027.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="603.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.51%)</title><rect x="601.3" y="1139.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="604.3" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="605.5" y="1123.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="608.5" y="1134.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="605.5" y="1107.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="608.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.29%)</title><rect x="607.2" y="1187.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="610.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.29%)</title><rect x="607.2" y="1171.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="610.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.29%)</title><rect x="607.2" y="1155.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.29%)</title><rect x="607.2" y="1139.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (234 samples, 16.90%)</title><rect x="610.6" y="1187.0" width="199.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="613.6" y="1198.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (234 samples, 16.90%)</title><rect x="610.6" y="1171.0" width="199.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="613.6" y="1182.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (186 samples, 13.43%)</title><rect x="637.1" y="1155.0" width="158.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.1" y="1166.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (174 samples, 12.56%)</title><rect x="647.3" y="1139.0" width="148.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="650.3" y="1150.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (162 samples, 11.70%)</title><rect x="657.5" y="1123.0" width="138.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.5" y="1134.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.22%)</title><rect x="665.2" y="1107.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="668.2" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="667.7" y="1107.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="670.7" y="1118.0"></text>
</g>
<g>
<title>Unsafe_Park (146 samples, 10.54%)</title><rect x="669.4" y="1107.0" width="124.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="672.4" y="1118.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="673.7" y="1091.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="676.7" y="1102.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.14%)</title><rect x="674.5" y="1091.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="677.5" y="1102.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="676.3" y="1091.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="679.3" y="1102.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.73%)</title><rect x="677.1" y="1091.0" width="20.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="680.1" y="1102.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.51%)</title><rect x="686.5" y="1075.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="689.5" y="1086.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.14%)</title><rect x="689.0" y="1059.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="692.0" y="1070.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="690.7" y="1059.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="693.7" y="1070.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="692.4" y="1075.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="695.4" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.36%)</title><rect x="693.3" y="1075.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="696.3" y="1086.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="697.6" y="1091.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="700.6" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.14%)</title><rect x="698.4" y="1091.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="701.4" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="700.1" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="703.1" y="1102.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.79%)</title><rect x="701.0" y="1091.0" width="9.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="704.0" y="1102.0"></text>
</g>
<g>
<title>__lll_unlock_wake (26 samples, 1.88%)</title><rect x="710.3" y="1091.0" width="22.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="713.3" y="1102.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 3.75%)</title><rect x="732.5" y="1091.0" width="44.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="735.5" y="1102.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.14%)</title><rect x="776.8" y="1091.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="779.8" y="1102.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="778.5" y="1091.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="781.5" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.29%)</title><rect x="779.3" y="1091.0" width="3.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="782.3" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.14%)</title><rect x="782.8" y="1091.0" width="1.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="785.8" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.43%)</title><rect x="784.5" y="1091.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="787.5" y="1102.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.22%)</title><rect x="789.6" y="1091.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="792.6" y="1102.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="792.1" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="795.1" y="1102.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="793.0" y="1091.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="796.0" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="793.8" y="1107.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="796.8" y="1118.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="794.7" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="797.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.23%)</title><rect x="795.5" y="1155.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.23%)</title><rect x="795.5" y="1139.0" width="14.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="798.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.23%)</title><rect x="795.5" y="1123.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="798.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.23%)</title><rect x="795.5" y="1107.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="798.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="810.0" y="1235.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="813.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="810.0" y="1219.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="813.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="810.0" y="1203.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="813.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="810.0" y="1187.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="810.0" y="1171.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="813.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="810.0" y="1155.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="813.0" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="810.0" y="1139.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.0" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="810.0" y="1123.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="813.0" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="810.0" y="1107.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.0" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.07%)</title><rect x="810.0" y="1091.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="813.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="810.0" y="1075.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="813.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="810.0" y="1059.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.0" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.07%)</title><rect x="810.0" y="1043.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="813.0" y="1054.0"></text>
</g>
<g>
<title>start_thread (445 samples, 32.13%)</title><rect x="810.9" y="1235.0" width="379.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="813.9" y="1246.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (445 samples, 32.13%)</title><rect x="810.9" y="1219.0" width="379.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="813.9" y="1230.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 1.16%)</title><rect x="810.9" y="1203.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="813.9" y="1214.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="810.9" y="1187.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="813.9" y="1198.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.07%)</title><rect x="810.9" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="813.9" y="1182.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="810.9" y="1155.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="813.9" y="1166.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.08%)</title><rect x="811.7" y="1187.0" width="12.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="814.7" y="1198.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.51%)</title><rect x="811.7" y="1171.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="814.7" y="1182.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="811.7" y="1155.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="814.7" y="1166.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.07%)</title><rect x="811.7" y="1139.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="814.7" y="1150.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.07%)</title><rect x="811.7" y="1123.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="814.7" y="1134.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="811.7" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="814.7" y="1118.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="811.7" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="814.7" y="1102.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.22%)</title><rect x="812.6" y="1155.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="815.6" y="1166.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.22%)</title><rect x="815.1" y="1155.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="818.1" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.29%)</title><rect x="817.7" y="1171.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="820.7" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.29%)</title><rect x="817.7" y="1155.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="820.7" y="1166.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="817.7" y="1139.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="820.7" y="1150.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="817.7" y="1123.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="820.7" y="1134.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="817.7" y="1107.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="820.7" y="1118.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.22%)</title><rect x="818.5" y="1139.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="821.5" y="1150.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="819.4" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="822.4" y="1134.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="820.2" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="823.2" y="1134.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.07%)</title><rect x="820.2" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="823.2" y="1118.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="820.2" y="1091.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="823.2" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.29%)</title><rect x="821.1" y="1171.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="824.1" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.29%)</title><rect x="821.1" y="1155.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="824.1" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.22%)</title><rect x="821.1" y="1139.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="824.1" y="1150.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.22%)</title><rect x="821.1" y="1123.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="824.1" y="1134.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.22%)</title><rect x="821.1" y="1107.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="824.1" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.22%)</title><rect x="821.1" y="1091.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="824.1" y="1102.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.07%)</title><rect x="822.8" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="825.8" y="1086.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="822.8" y="1059.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="825.8" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="823.6" y="1139.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="826.6" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.07%)</title><rect x="823.6" y="1123.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="826.6" y="1134.0"></text>
</g>
<g>
<title>JavaThread::run() (428 samples, 30.90%)</title><rect x="824.5" y="1203.0" width="364.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="827.5" y="1214.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (428 samples, 30.90%)</title><rect x="824.5" y="1187.0" width="364.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="827.5" y="1198.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (427 samples, 30.83%)</title><rect x="824.5" y="1171.0" width="363.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="827.5" y="1182.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (427 samples, 30.83%)</title><rect x="824.5" y="1155.0" width="363.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="827.5" y="1166.0">CompileBroker::invoke_compiler_on_method(CompileT..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (427 samples, 30.83%)</title><rect x="824.5" y="1139.0" width="363.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="827.5" y="1150.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (427 samples, 30.83%)</title><rect x="824.5" y="1123.0" width="363.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="827.5" y="1134.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (154 samples, 11.12%)</title><rect x="824.5" y="1107.0" width="131.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="827.5" y="1118.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.29%)</title><rect x="824.5" y="1091.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="827.5" y="1102.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.22%)</title><rect x="824.5" y="1075.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="827.5" y="1086.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="826.2" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.2" y="1070.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.07%)</title><rect x="826.2" y="1043.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="829.2" y="1054.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="827.1" y="1075.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="830.1" y="1086.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="827.1" y="1059.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="830.1" y="1070.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (10 samples, 0.72%)</title><rect x="827.9" y="1091.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="830.9" y="1102.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.07%)</title><rect x="828.8" y="1075.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="831.8" y="1086.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (6 samples, 0.43%)</title><rect x="829.6" y="1075.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="832.6" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.14%)</title><rect x="829.6" y="1059.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="832.6" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="829.6" y="1043.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="832.6" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="831.3" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="834.3" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="831.3" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="834.3" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.14%)</title><rect x="832.2" y="1059.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="835.2" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="832.2" y="1043.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="835.2" y="1054.0"></text>
</g>
<g>
<title>ObjectValue::write_on(DebugInfoWriteStream*) (1 samples, 0.07%)</title><rect x="833.0" y="1043.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="836.0" y="1054.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.07%)</title><rect x="833.0" y="1027.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="836.0" y="1038.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.07%)</title><rect x="833.0" y="1011.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="836.0" y="1022.0"></text>
</g>
<g>
<title>new_loc_value(PhaseRegAlloc*, int, Location::Type) (1 samples, 0.07%)</title><rect x="833.9" y="1059.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="836.9" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.14%)</title><rect x="834.7" y="1075.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="837.7" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="834.7" y="1059.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="837.7" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (15 samples, 1.08%)</title><rect x="836.4" y="1091.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="839.4" y="1102.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (3 samples, 0.22%)</title><rect x="836.4" y="1075.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="839.4" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 0.79%)</title><rect x="839.0" y="1075.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="842.0" y="1086.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.29%)</title><rect x="840.7" y="1059.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="843.7" y="1070.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.22%)</title><rect x="844.1" y="1059.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="847.1" y="1070.0"></text>
</g>
<g>
<title>LoadNode::match_edge(unsigned int) const (1 samples, 0.07%)</title><rect x="844.1" y="1043.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="847.1" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.14%)</title><rect x="844.9" y="1043.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="847.9" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.14%)</title><rect x="844.9" y="1027.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="847.9" y="1038.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="844.9" y="1011.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="847.9" y="1022.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="844.9" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="847.9" y="1006.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="844.9" y="979.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="847.9" y="990.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.07%)</title><rect x="844.9" y="963.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="847.9" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="845.8" y="1011.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="848.8" y="1022.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="845.8" y="995.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="848.8" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="845.8" y="979.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="848.8" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="845.8" y="963.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="848.8" y="974.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="846.6" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="849.6" y="1070.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="847.5" y="1059.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="850.5" y="1070.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="848.4" y="1075.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="851.4" y="1086.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (2 samples, 0.14%)</title><rect x="849.2" y="1091.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="852.2" y="1102.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (2 samples, 0.14%)</title><rect x="849.2" y="1075.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="852.2" y="1086.0"></text>
</g>
<g>
<title>RootNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="850.1" y="1059.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="853.1" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.51%)</title><rect x="850.9" y="1091.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="853.9" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.51%)</title><rect x="850.9" y="1075.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="853.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.07%)</title><rect x="850.9" y="1059.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="853.9" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="851.8" y="1059.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="854.8" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="853.5" y="1059.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="856.5" y="1070.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.14%)</title><rect x="853.5" y="1043.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="856.5" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="855.2" y="1059.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="858.2" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="855.2" y="1043.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="858.2" y="1054.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="856.0" y="1027.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="859.0" y="1038.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="856.0" y="1011.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="859.0" y="1022.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="856.0" y="995.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="859.0" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="856.9" y="1091.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="859.9" y="1102.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="856.9" y="1075.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="859.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (115 samples, 8.30%)</title><rect x="857.7" y="1091.0" width="98.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="860.7" y="1102.0">PhaseChaiti..</text>
</g>
<g>
<title>CallStaticJavaDirectNode::oper_input_base() const (1 samples, 0.07%)</title><rect x="857.7" y="1075.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="860.7" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="858.6" y="1075.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.6" y="1086.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="859.4" y="1075.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="862.4" y="1086.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="860.3" y="1075.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="863.3" y="1086.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.14%)</title><rect x="861.1" y="1075.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.1" y="1086.0"></text>
</g>
<g>
<title>LiveRangeMap::compress_uf_map_for_nodes() (1 samples, 0.07%)</title><rect x="862.0" y="1059.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="865.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.36%)</title><rect x="862.8" y="1075.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="865.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.07%)</title><rect x="863.7" y="1059.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="866.7" y="1070.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.07%)</title><rect x="863.7" y="1043.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.22%)</title><rect x="864.5" y="1059.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="867.5" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="865.4" y="1043.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="868.4" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.36%)</title><rect x="867.1" y="1075.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="870.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 0.36%)</title><rect x="867.1" y="1059.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="870.1" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="869.7" y="1043.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="872.7" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (20 samples, 1.44%)</title><rect x="871.4" y="1075.0" width="17.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.4" y="1086.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="883.3" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.07%)</title><rect x="884.1" y="1059.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="887.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (3 samples, 0.22%)</title><rect x="885.0" y="1059.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="888.0" y="1070.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.07%)</title><rect x="885.0" y="1043.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="888.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (2 samples, 0.14%)</title><rect x="885.8" y="1043.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="888.8" y="1054.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="886.7" y="1027.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="889.7" y="1038.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.07%)</title><rect x="887.5" y="1059.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="890.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (18 samples, 1.30%)</title><rect x="888.4" y="1075.0" width="15.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="891.4" y="1086.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="891.8" y="1059.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="894.8" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="892.7" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="895.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (8 samples, 0.58%)</title><rect x="893.5" y="1059.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="896.5" y="1070.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.14%)</title><rect x="900.3" y="1059.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.3" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="902.0" y="1059.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="905.0" y="1070.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="902.9" y="1059.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="905.9" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.22%)</title><rect x="903.7" y="1075.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="906.7" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.22%)</title><rect x="903.7" y="1059.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="906.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (11 samples, 0.79%)</title><rect x="906.3" y="1075.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="909.3" y="1086.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.14%)</title><rect x="913.1" y="1059.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="916.1" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.07%)</title><rect x="914.8" y="1059.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="917.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.14%)</title><rect x="915.7" y="1075.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="918.7" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="916.5" y="1059.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="919.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (10 samples, 0.72%)</title><rect x="917.4" y="1075.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="920.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (7 samples, 0.51%)</title><rect x="919.1" y="1059.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="922.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="924.2" y="1043.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="927.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="924.2" y="1027.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="927.2" y="1038.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="925.0" y="1059.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="928.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (20 samples, 1.44%)</title><rect x="925.9" y="1075.0" width="17.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.9" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (20 samples, 1.44%)</title><rect x="925.9" y="1059.0" width="17.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="928.9" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.14%)</title><rect x="925.9" y="1043.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="928.9" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (18 samples, 1.30%)</title><rect x="927.6" y="1043.0" width="15.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="930.6" y="1054.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.22%)</title><rect x="927.6" y="1027.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="930.6" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="929.3" y="1011.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="932.3" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (12 samples, 0.87%)</title><rect x="930.1" y="1027.0" width="10.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (3 samples, 0.22%)</title><rect x="940.4" y="1027.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.22%)</title><rect x="942.9" y="1075.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="945.9" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="943.8" y="1059.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="946.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.14%)</title><rect x="945.5" y="1075.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.5" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="946.3" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="949.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="947.2" y="1075.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="950.2" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.58%)</title><rect x="948.0" y="1075.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="951.0" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.22%)</title><rect x="952.3" y="1059.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="955.3" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="953.1" y="1043.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="956.1" y="1054.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="954.9" y="1075.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.9" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (257 samples, 18.56%)</title><rect x="955.7" y="1107.0" width="219.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="958.7" y="1118.0">Compile::Optimize()</text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="955.7" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.7" y="1102.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (2 samples, 0.14%)</title><rect x="956.6" y="1091.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="959.6" y="1102.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (2 samples, 0.14%)</title><rect x="956.6" y="1075.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="959.6" y="1086.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.14%)</title><rect x="956.6" y="1059.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="959.6" y="1070.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.14%)</title><rect x="956.6" y="1043.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="959.6" y="1054.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="958.3" y="1091.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="958.3" y="1075.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="961.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="958.3" y="1059.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="958.3" y="1043.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="961.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (11 samples, 0.79%)</title><rect x="959.1" y="1091.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (11 samples, 0.79%)</title><rect x="959.1" y="1075.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.07%)</title><rect x="959.1" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.07%)</title><rect x="959.1" y="1043.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.1" y="1054.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.07%)</title><rect x="959.1" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="962.1" y="1038.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="959.1" y="1011.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.1" y="1022.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.07%)</title><rect x="959.1" y="995.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.1" y="1006.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.07%)</title><rect x="959.1" y="979.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="962.1" y="990.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.07%)</title><rect x="959.1" y="963.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.1" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="959.1" y="947.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.1" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="959.1" y="931.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.1" y="942.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.07%)</title><rect x="959.1" y="915.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="962.1" y="926.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.07%)</title><rect x="959.1" y="899.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="962.1" y="910.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.07%)</title><rect x="959.1" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="962.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (2 samples, 0.14%)</title><rect x="960.0" y="1059.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="963.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.07%)</title><rect x="960.8" y="1043.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="963.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.07%)</title><rect x="960.8" y="1027.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="963.8" y="1038.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="960.8" y="1011.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="963.8" y="1022.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="960.8" y="995.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="963.8" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="960.8" y="979.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="963.8" y="990.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="960.8" y="963.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.7" y="1059.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="964.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="961.7" y="1043.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="964.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.07%)</title><rect x="961.7" y="1027.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="964.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.07%)</title><rect x="961.7" y="1011.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (7 samples, 0.51%)</title><rect x="962.5" y="1059.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="965.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (7 samples, 0.51%)</title><rect x="962.5" y="1043.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="965.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="962.5" y="1027.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="965.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="962.5" y="1011.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="962.5" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="965.5" y="1006.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="962.5" y="979.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="965.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="963.4" y="995.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="966.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="963.4" y="979.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="963.4" y="963.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="966.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="963.4" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="966.4" y="958.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.07%)</title><rect x="963.4" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="966.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.36%)</title><rect x="964.2" y="1027.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="967.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.14%)</title><rect x="964.2" y="1011.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="967.2" y="1022.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (2 samples, 0.14%)</title><rect x="964.2" y="995.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="967.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="965.9" y="1011.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="968.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="966.8" y="995.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="969.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="966.8" y="979.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="969.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="966.8" y="963.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="947.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="969.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="931.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="969.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="915.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="969.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="883.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="969.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="867.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="969.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="851.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="969.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="835.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="969.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="819.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="969.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="803.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="969.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="787.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="969.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="771.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="969.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="755.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="969.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="739.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="969.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="723.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="969.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="707.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="969.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="691.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="969.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="675.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="969.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="659.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="643.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="969.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="627.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="969.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="966.8" y="611.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="969.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="947.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="970.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="931.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="970.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="915.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="970.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="970.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="867.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="970.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="851.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="970.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="835.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="970.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="819.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="803.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="970.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="787.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="970.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="771.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="970.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="970.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="739.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="970.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="723.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="707.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="691.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="970.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="675.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="659.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="970.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="643.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="970.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="627.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="970.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="611.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="595.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="970.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="970.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="563.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="970.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="547.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="970.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="531.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="970.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="515.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="499.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="970.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="483.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="970.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="467.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="970.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="451.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="435.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="970.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="419.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="970.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="403.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.6" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="387.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="970.6" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="371.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="970.6" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="967.6" y="355.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.6" y="366.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.14%)</title><rect x="968.5" y="1091.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="971.5" y="1102.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="968.5" y="1075.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="971.5" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="968.5" y="1059.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.5" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="968.5" y="1043.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.5" y="1054.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="968.5" y="1027.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="971.5" y="1038.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="968.5" y="1011.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.5" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.07%)</title><rect x="968.5" y="995.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.5" y="1006.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="969.3" y="1075.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="972.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (211 samples, 15.23%)</title><rect x="970.2" y="1091.0" width="179.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.2" y="1102.0">PhaseIdealLoop::build_a..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="970.2" y="1075.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="973.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="970.2" y="1059.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="973.2" y="1070.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.07%)</title><rect x="970.2" y="1043.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="973.2" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::is_invariant(Node*) const (1 samples, 0.07%)</title><rect x="970.2" y="1027.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="973.2" y="1038.0"></text>
</g>
<g>
<title>IfNode::pinned() const (1 samples, 0.07%)</title><rect x="971.0" y="1075.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="974.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (8 samples, 0.58%)</title><rect x="971.9" y="1075.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="974.9" y="1086.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.14%)</title><rect x="975.3" y="1059.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="978.3" y="1070.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="977.0" y="1059.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.0" y="1070.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.07%)</title><rect x="977.9" y="1059.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.29%)</title><rect x="978.7" y="1075.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (183 samples, 13.21%)</title><rect x="982.1" y="1075.0" width="155.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.1" y="1086.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="988.9" y="1059.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="991.9" y="1070.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="988.9" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="991.9" y="1054.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="988.9" y="1027.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="991.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (174 samples, 12.56%)</title><rect x="989.8" y="1059.0" width="148.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.8" y="1070.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.51%)</title><rect x="991.5" y="1043.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="994.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (165 samples, 11.91%)</title><rect x="997.5" y="1043.0" width="140.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.5" y="1054.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.22%)</title><rect x="1110.8" y="1027.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1111.6" y="1011.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (26 samples, 1.88%)</title><rect x="1113.3" y="1027.0" width="22.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.3" y="1038.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.22%)</title><rect x="1135.5" y="1027.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.14%)</title><rect x="1136.3" y="1011.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.14%)</title><rect x="1138.0" y="1075.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.36%)</title><rect x="1139.7" y="1075.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.7" y="1086.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.07%)</title><rect x="1142.3" y="1059.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1143.1" y="1059.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.1" y="1070.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1143.1" y="1043.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.29%)</title><rect x="1144.0" y="1075.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.29%)</title><rect x="1144.0" y="1059.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.0" y="1070.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1144.0" y="1043.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.0" y="1054.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1144.0" y="1027.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.0" y="1038.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1144.0" y="1011.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.0" y="1022.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1144.0" y="995.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.0" y="1006.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1144.8" y="1043.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.8" y="1054.0"></text>
</g>
<g>
<title>EncodeNarrowPtrNode::EncodeNarrowPtrNode(Node*, Type const*) (1 samples, 0.07%)</title><rect x="1144.8" y="1027.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.8" y="1038.0"></text>
</g>
<g>
<title>PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int) (1 samples, 0.07%)</title><rect x="1145.7" y="1027.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.7" y="1038.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1146.5" y="1043.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="1054.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1146.5" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.5" y="1038.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1147.4" y="1075.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.4" y="1086.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1148.3" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.3" y="1086.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1149.1" y="1075.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1152.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (25 samples, 1.81%)</title><rect x="1150.0" y="1091.0" width="21.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.0" y="1102.0">P..</text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1150.0" y="1075.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (24 samples, 1.73%)</title><rect x="1150.8" y="1075.0" width="20.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.8" y="1086.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1151.7" y="1059.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1151.7" y="1043.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1151.7" y="1027.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.7" y="1038.0"></text>
</g>
<g>
<title>LoadNKlassNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1152.5" y="1059.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.5" y="1070.0"></text>
</g>
<g>
<title>LoadNode::klass_identity_common(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1152.5" y="1043.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.5" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1152.5" y="1027.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.5" y="1038.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1152.5" y="1011.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.5" y="1022.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1152.5" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.5" y="1006.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1152.5" y="979.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.5" y="990.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.07%)</title><rect x="1152.5" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.5" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1153.4" y="1059.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.4" y="1070.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1153.4" y="1043.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.4" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1153.4" y="1027.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.4" y="1038.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="1153.4" y="1011.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.4" y="1022.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1154.2" y="1043.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1154.2" y="1027.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.2" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1154.2" y="1011.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.2" y="1022.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (5 samples, 0.36%)</title><rect x="1155.1" y="1059.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (7 samples, 0.51%)</title><rect x="1159.3" y="1059.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.3" y="1070.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1162.7" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.7" y="1054.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1163.6" y="1043.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1164.4" y="1043.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.4" y="1054.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1164.4" y="1027.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.4" y="1038.0"></text>
</g>
<g>
<title>PhiNode::hash() const (2 samples, 0.14%)</title><rect x="1165.3" y="1059.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.3" y="1070.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1166.1" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="1054.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1167.0" y="1059.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.22%)</title><rect x="1167.0" y="1043.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.0" y="1054.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1167.0" y="1027.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.14%)</title><rect x="1167.8" y="1027.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.8" y="1038.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.14%)</title><rect x="1167.8" y="1011.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.8" y="1022.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1169.6" y="1059.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.6" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.14%)</title><rect x="1169.6" y="1043.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.6" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1169.6" y="1027.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="1011.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="995.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="979.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.6" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.6" y="963.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1169.6" y="947.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.6" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.4" y="1011.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="1022.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="995.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.4" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.14%)</title><rect x="1171.3" y="1091.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.3" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.14%)</title><rect x="1171.3" y="1075.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.3" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::can_eliminate_allocation(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1171.3" y="1059.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.3" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1173.0" y="1091.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1173.0" y="1075.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1173.0" y="1059.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.0" y="1070.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1173.0" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.0" y="1054.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1173.0" y="1027.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.0" y="1038.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.07%)</title><rect x="1173.0" y="1011.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.0" y="1022.0"></text>
</g>
<g>
<title>StoreLNode::Opcode() const (1 samples, 0.07%)</title><rect x="1173.8" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.87%)</title><rect x="1174.7" y="1107.0" width="10.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.7" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.87%)</title><rect x="1174.7" y="1091.0" width="10.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.87%)</title><rect x="1174.7" y="1075.0" width="10.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.87%)</title><rect x="1174.7" y="1059.0" width="10.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.87%)</title><rect x="1174.7" y="1043.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.79%)</title><rect x="1174.7" y="1027.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.7" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.65%)</title><rect x="1174.7" y="1011.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.65%)</title><rect x="1174.7" y="995.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.65%)</title><rect x="1174.7" y="979.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.65%)</title><rect x="1174.7" y="963.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.65%)</title><rect x="1174.7" y="947.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.65%)</title><rect x="1174.7" y="931.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.43%)</title><rect x="1174.7" y="915.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.43%)</title><rect x="1174.7" y="899.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.43%)</title><rect x="1174.7" y="883.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.43%)</title><rect x="1174.7" y="867.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.7" y="878.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.07%)</title><rect x="1174.7" y="851.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.36%)</title><rect x="1175.5" y="851.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.36%)</title><rect x="1175.5" y="835.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.36%)</title><rect x="1175.5" y="819.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.36%)</title><rect x="1175.5" y="803.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.36%)</title><rect x="1175.5" y="787.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.36%)</title><rect x="1175.5" y="771.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.36%)</title><rect x="1175.5" y="755.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.36%)</title><rect x="1175.5" y="739.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.5" y="723.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.5" y="707.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.5" y="691.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.5" y="675.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.5" y="659.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.5" y="643.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.5" y="627.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.5" y="611.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.5" y="595.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.5" y="579.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.5" y="563.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.5" y="547.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.5" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1175.5" y="531.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1175.5" y="515.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1175.5" y="499.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="510.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1175.5" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="494.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1175.5" y="467.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="478.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1175.5" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.5" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.4" y="627.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.4" y="611.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.4" y="595.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.4" y="579.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.4" y="563.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.4" y="547.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.4" y="531.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.4" y="515.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.4" y="499.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.4" y="483.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.4" y="467.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.4" y="451.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.4" y="435.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="446.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1176.4" y="419.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="430.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1176.4" y="403.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="414.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1176.4" y="387.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1176.4" y="371.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1176.4" y="355.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1176.4" y="339.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.4" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1176.4" y="323.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1176.4" y="307.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1176.4" y="291.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.4" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1176.4" y="275.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="286.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1176.4" y="259.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="270.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1176.4" y="243.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1176.4" y="227.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1176.4" y="211.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="222.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1176.4" y="195.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.2" y="723.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.2" y="707.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.2" y="691.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.2" y="675.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.2" y="659.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.2" y="643.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.2" y="627.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.2" y="611.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.2" y="595.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.2" y="579.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.2" y="563.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.2" y="547.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.2" y="531.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.2" y="515.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.2" y="499.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.2" y="483.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.2" y="467.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.2" y="451.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.2" y="435.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.2" y="419.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.2" y="403.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.2" y="387.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="398.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1177.2" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.2" y="382.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.07%)</title><rect x="1177.2" y="355.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="366.0"></text>
</g>
<g>
<title>Parse::Block::local_type_at(int) const (1 samples, 0.07%)</title><rect x="1177.2" y="339.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.2" y="350.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1177.2" y="323.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="334.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.07%)</title><rect x="1177.2" y="307.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="318.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1177.2" y="291.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1178.1" y="387.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="398.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1178.1" y="371.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1178.9" y="723.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.9" y="707.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.9" y="691.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="702.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1178.9" y="675.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1178.9" y="659.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1178.9" y="643.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="654.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1178.9" y="627.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="638.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1178.9" y="611.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.8" y="915.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.8" y="899.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.8" y="883.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.8" y="867.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.8" y="851.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.8" y="835.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.8" y="819.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.8" y="803.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.8" y="787.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.8" y="771.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.8" y="755.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.8" y="739.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.8" y="723.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.8" y="707.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.8" y="691.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.8" y="675.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.8" y="659.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.8" y="643.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.8" y="627.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.8" y="611.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.8" y="595.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.8" y="579.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.8" y="563.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.8" y="547.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.8" y="531.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.8" y="515.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.8" y="499.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.8" y="483.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.8" y="467.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.8" y="451.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="462.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1179.8" y="435.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="446.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.07%)</title><rect x="1179.8" y="419.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="430.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.07%)</title><rect x="1179.8" y="403.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.6" y="435.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.6" y="419.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.6" y="403.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.6" y="387.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.6" y="371.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.6" y="355.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.6" y="339.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.6" y="323.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.6" y="307.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.6" y="291.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.6" y="275.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.6" y="259.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.6" y="243.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.6" y="227.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.6" y="211.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.6" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.6" y="195.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.6" y="179.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.6" y="163.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.6" y="147.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1180.6" y="131.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="142.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1180.6" y="115.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="126.0"></text>
</g>
<g>
<title>ciSignature::return_type() const (1 samples, 0.07%)</title><rect x="1181.5" y="611.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.3" y="1011.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.3" y="995.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.3" y="979.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.3" y="963.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.3" y="947.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.3" y="931.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.3" y="915.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.3" y="899.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.3" y="883.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.3" y="867.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.3" y="851.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.3" y="835.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.3" y="819.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.3" y="803.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.3" y="787.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.3" y="771.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.3" y="755.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.3" y="739.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.3" y="723.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.3" y="707.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.3" y="691.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.3" y="675.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.3" y="659.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.3" y="643.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.3" y="627.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.3" y="611.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.3" y="595.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.3" y="579.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.3" y="563.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.3" y="547.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.3" y="531.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.3" y="515.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.3" y="499.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.3" y="483.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.3" y="467.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.3" y="451.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.3" y="435.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.3" y="419.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.3" y="403.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.3" y="387.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.3" y="371.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.3" y="355.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.3" y="339.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.3" y="323.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.3" y="307.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.3" y="291.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.3" y="275.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.3" y="259.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.3" y="243.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.3" y="227.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.3" y="211.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.3" y="195.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.3" y="179.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.3" y="163.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.2" y="147.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="158.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.2" y="131.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.07%)</title><rect x="1183.2" y="115.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1183.2" y="99.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1183.2" y="83.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1183.2" y="67.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.2" y="78.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1183.2" y="51.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="62.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1183.2" y="35.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="1027.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="1011.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="1022.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.0" y="995.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="1006.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1184.0" y="979.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1184.0" y="963.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1184.0" y="947.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.0" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="931.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="942.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.07%)</title><rect x="1184.0" y="915.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="926.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (4 samples, 0.29%)</title><rect x="1184.9" y="1107.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="1118.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.14%)</title><rect x="1185.7" y="1091.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.7" y="1102.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1187.4" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.4" y="1102.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1188.3" y="1171.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.3" y="1182.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1188.3" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.3" y="1166.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1188.3" y="1139.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.3" y="1150.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1188.3" y="1123.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1191.3" y="1134.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.07%)</title><rect x="1188.3" y="1107.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.3" y="1118.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.07%)</title><rect x="1188.3" y="1091.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.3" y="1102.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.07%)</title><rect x="1188.3" y="1075.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="1086.0"></text>
</g>
<g>
<title>DebugInfoReadStream::read_object_value() (1 samples, 0.07%)</title><rect x="1188.3" y="1059.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="1070.0"></text>
</g>
<g>
<title>ObjectValue::read_object(DebugInfoReadStream*) (1 samples, 0.07%)</title><rect x="1188.3" y="1043.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.3" y="1054.0"></text>
</g>
<g>
<title>ScopeValue::read_from(DebugInfoReadStream*) (1 samples, 0.07%)</title><rect x="1188.3" y="1027.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="1038.0"></text>
</g>
<g>
<title>LocationValue::LocationValue(DebugInfoReadStream*) (1 samples, 0.07%)</title><rect x="1188.3" y="1011.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.3" y="1022.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.1" y="1203.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.1" y="1214.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.1" y="1187.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.1" y="1198.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1189.1" y="1171.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.1" y="1182.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.07%)</title><rect x="1189.1" y="1155.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.1" y="1166.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.07%)</title><rect x="1189.1" y="1139.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.1" y="1150.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1189.1" y="1123.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.1" y="1134.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1189.1" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.1" y="1118.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1189.1" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="1102.0"></text>
</g>
</g>
</svg>
