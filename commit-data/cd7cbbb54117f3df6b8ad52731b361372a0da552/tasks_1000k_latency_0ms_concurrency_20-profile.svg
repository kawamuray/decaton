<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (1,110 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (241 samples, 21.71%)</title><rect x="10.0" y="1011.0" width="256.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (241 samples, 21.71%)</title><rect x="10.0" y="995.0" width="256.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.18%)</title><rect x="10.0" y="979.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.18%)</title><rect x="10.0" y="963.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/696513281.accept (2 samples, 0.18%)</title><rect x="10.0" y="947.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.18%)</title><rect x="10.0" y="931.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.18%)</title><rect x="10.0" y="915.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.09%)</title><rect x="10.0" y="899.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.09%)</title><rect x="11.1" y="899.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.1" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="11.1" y="883.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.27%)</title><rect x="12.1" y="979.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.27%)</title><rect x="12.1" y="963.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.27%)</title><rect x="12.1" y="947.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.1" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.27%)</title><rect x="12.1" y="931.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.1" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.09%)</title><rect x="12.1" y="915.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="12.1" y="899.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="12.1" y="883.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="12.1" y="867.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="12.1" y="851.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="13.2" y="915.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="13.2" y="899.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.2" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="13.2" y="883.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="894.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="13.2" y="867.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="16.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="14.3" y="867.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="14.3" y="851.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="14.3" y="835.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.3" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="14.3" y="819.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="17.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (184 samples, 16.58%)</title><rect x="15.3" y="979.0" width="195.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.3" y="990.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1969244459.accept (180 samples, 16.22%)</title><rect x="16.4" y="963.0" width="191.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.4" y="974.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (180 samples, 16.22%)</title><rect x="16.4" y="947.0" width="191.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.4" y="958.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.09%)</title><rect x="24.9" y="931.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (142 samples, 12.79%)</title><rect x="25.9" y="931.0" width="151.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.9" y="942.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (142 samples, 12.79%)</title><rect x="25.9" y="915.0" width="151.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.9" y="926.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (142 samples, 12.79%)</title><rect x="25.9" y="899.0" width="151.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.9" y="910.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (142 samples, 12.79%)</title><rect x="25.9" y="883.0" width="151.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.9" y="894.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (142 samples, 12.79%)</title><rect x="25.9" y="867.0" width="151.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.9" y="878.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (122 samples, 10.99%)</title><rect x="47.2" y="851.0" width="129.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.2" y="862.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (102 samples, 9.19%)</title><rect x="67.4" y="835.0" width="108.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.4" y="846.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.44%)</title><rect x="79.1" y="819.0" width="17.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.44%)</title><rect x="79.1" y="803.0" width="17.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.44%)</title><rect x="79.1" y="787.0" width="17.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (75 samples, 6.76%)</title><rect x="96.1" y="819.0" width="79.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="99.1" y="830.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (75 samples, 6.76%)</title><rect x="96.1" y="803.0" width="79.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.1" y="814.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (75 samples, 6.76%)</title><rect x="96.1" y="787.0" width="79.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.1" y="798.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 6.76%)</title><rect x="96.1" y="771.0" width="79.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.1" y="782.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (73 samples, 6.58%)</title><rect x="98.2" y="755.0" width="77.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.2" y="766.0">sun/misc/..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="98.2" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="101.2" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark (68 samples, 6.13%)</title><rect x="99.3" y="739.0" width="72.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="102.3" y="750.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="100.4" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="103.4" y="734.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.27%)</title><rect x="101.4" y="723.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="104.4" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (48 samples, 4.32%)</title><rect x="104.6" y="723.0" width="51.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="107.6" y="734.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.18%)</title><rect x="155.6" y="723.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="158.6" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.17%)</title><rect x="157.8" y="723.0" width="13.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="160.8" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.36%)</title><rect x="171.6" y="739.0" width="4.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="174.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="175.8" y="835.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="175.8" y="819.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="175.8" y="803.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="178.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="175.8" y="787.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.45%)</title><rect x="176.9" y="931.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.45%)</title><rect x="176.9" y="915.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (6 samples, 0.54%)</title><rect x="182.2" y="931.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.54%)</title><rect x="182.2" y="915.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.54%)</title><rect x="182.2" y="899.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="185.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (18 samples, 1.62%)</title><rect x="188.6" y="931.0" width="19.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="191.6" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (18 samples, 1.62%)</title><rect x="188.6" y="915.0" width="19.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="191.6" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 0.99%)</title><rect x="190.7" y="899.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.7" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.36%)</title><rect x="190.7" y="883.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.7" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.36%)</title><rect x="190.7" y="867.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.7" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.36%)</title><rect x="190.7" y="851.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.7" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="192.8" y="835.0" width="2.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="195.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (6 samples, 0.54%)</title><rect x="195.0" y="883.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="198.0" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="200.3" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="203.3" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="200.3" y="851.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="203.3" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="200.3" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="203.3" y="846.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="200.3" y="819.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="203.3" y="830.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="200.3" y="803.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="203.3" y="814.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="200.3" y="787.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="203.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="201.4" y="883.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.4" y="894.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="202.4" y="899.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="205.4" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.36%)</title><rect x="203.5" y="899.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="206.5" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="207.7" y="963.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="210.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.18%)</title><rect x="208.8" y="963.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.18%)</title><rect x="208.8" y="947.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.18%)</title><rect x="208.8" y="931.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.18%)</title><rect x="208.8" y="915.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="211.8" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.18%)</title><rect x="208.8" y="899.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 4.68%)</title><rect x="210.9" y="979.0" width="55.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.9" y="990.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 4.68%)</title><rect x="210.9" y="963.0" width="55.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="213.9" y="974.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (26 samples, 2.34%)</title><rect x="212.0" y="947.0" width="27.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.0" y="958.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="212.0" y="931.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="215.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="212.0" y="915.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="212.0" y="899.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="213.0" y="931.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="213.0" y="915.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/987318441.shouldBlock (1 samples, 0.09%)</title><rect x="213.0" y="899.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.09%)</title><rect x="213.0" y="883.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.09%)</title><rect x="213.0" y="867.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.09%)</title><rect x="213.0" y="851.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="213.0" y="835.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="213.0" y="819.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="213.0" y="803.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="213.0" y="787.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="213.0" y="771.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="213.0" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="213.0" y="739.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.0" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.09%)</title><rect x="213.0" y="723.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="216.0" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="213.0" y="707.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="216.0" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.09%)</title><rect x="213.0" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="216.0" y="702.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.09%)</title><rect x="213.0" y="675.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="216.0" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokeinterface(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.09%)</title><rect x="213.0" y="659.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="216.0" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="213.0" y="643.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="216.0" y="654.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="213.0" y="627.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="216.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (24 samples, 2.16%)</title><rect x="214.1" y="931.0" width="25.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.1" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (23 samples, 2.07%)</title><rect x="214.1" y="915.0" width="24.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="217.1" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (19 samples, 1.71%)</title><rect x="214.1" y="899.0" width="20.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (19 samples, 1.71%)</title><rect x="214.1" y="883.0" width="20.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="217.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (9 samples, 0.81%)</title><rect x="217.3" y="867.0" width="9.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="220.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (1 samples, 0.09%)</title><rect x="220.5" y="851.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.36%)</title><rect x="221.5" y="851.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.36%)</title><rect x="221.5" y="835.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.36%)</title><rect x="221.5" y="819.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.36%)</title><rect x="221.5" y="803.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.36%)</title><rect x="221.5" y="787.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.36%)</title><rect x="221.5" y="771.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.36%)</title><rect x="221.5" y="755.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="224.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="225.8" y="851.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (7 samples, 0.63%)</title><rect x="226.9" y="867.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.63%)</title><rect x="226.9" y="851.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.63%)</title><rect x="226.9" y="835.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.9" y="846.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.63%)</title><rect x="226.9" y="819.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="229.9" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="233.2" y="803.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="236.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="234.3" y="899.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="234.3" y="883.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="234.3" y="867.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="235.4" y="899.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="235.4" y="883.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="235.4" y="867.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="235.4" y="851.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.09%)</title><rect x="236.4" y="899.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.09%)</title><rect x="237.5" y="899.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="237.5" y="883.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="237.5" y="867.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.5" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="237.5" y="851.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="240.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="237.5" y="835.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.09%)</title><rect x="238.6" y="915.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasValidPosition (1 samples, 0.09%)</title><rect x="238.6" y="899.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="238.6" y="883.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="238.6" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.6" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="238.6" y="851.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="238.6" y="835.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.72%)</title><rect x="239.6" y="947.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.72%)</title><rect x="239.6" y="931.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.54%)</title><rect x="239.6" y="915.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.6" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="239.6" y="899.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1685337787.accept (1 samples, 0.09%)</title><rect x="239.6" y="883.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="239.6" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="239.6" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="239.6" y="835.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="239.6" y="819.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="239.6" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.09%)</title><rect x="240.7" y="899.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="241.7" y="899.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="241.7" y="883.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="241.7" y="867.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="241.7" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="241.7" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="241.7" y="819.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="241.7" y="803.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.7" y="814.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="241.7" y="787.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.09%)</title><rect x="241.7" y="771.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.18%)</title><rect x="242.8" y="899.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.8" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="243.9" y="883.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="246.9" y="894.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="243.9" y="867.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="243.9" y="851.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="243.9" y="835.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="243.9" y="819.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.09%)</title><rect x="244.9" y="899.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="244.9" y="883.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="244.9" y="867.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="244.9" y="851.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="244.9" y="835.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="244.9" y="819.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="244.9" y="803.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.9" y="814.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="244.9" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.9" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="244.9" y="771.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.9" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="244.9" y="755.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.18%)</title><rect x="246.0" y="915.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.18%)</title><rect x="246.0" y="899.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="246.0" y="883.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="246.0" y="867.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="246.0" y="851.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="246.0" y="835.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="246.0" y="819.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.18%)</title><rect x="246.0" y="803.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.0" y="814.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="246.0" y="787.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="247.1" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.1" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="247.1" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.09%)</title><rect x="247.1" y="755.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (11 samples, 0.99%)</title><rect x="248.1" y="947.0" width="11.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (10 samples, 0.90%)</title><rect x="248.1" y="931.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="248.1" y="915.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="248.1" y="899.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="248.1" y="883.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="248.1" y="867.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.read (1 samples, 0.09%)</title><rect x="248.1" y="851.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.09%)</title><rect x="249.2" y="915.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (8 samples, 0.72%)</title><rect x="250.3" y="915.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="250.3" y="899.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.3" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="250.3" y="883.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (6 samples, 0.54%)</title><rect x="251.3" y="899.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (6 samples, 0.54%)</title><rect x="251.3" y="883.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (5 samples, 0.45%)</title><rect x="251.3" y="867.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.3" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="251.3" y="851.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="254.3" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="251.3" y="835.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="254.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.36%)</title><rect x="252.4" y="851.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.36%)</title><rect x="252.4" y="835.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (4 samples, 0.36%)</title><rect x="252.4" y="819.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.4" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.36%)</title><rect x="252.4" y="803.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.4" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="252.4" y="787.0" width="3.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="255.4" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="255.6" y="787.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="258.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceive (1 samples, 0.09%)</title><rect x="256.6" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="256.6" y="851.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="256.6" y="835.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="257.7" y="899.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.7" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="257.7" y="883.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.7" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="257.7" y="867.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.7" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="257.7" y="851.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.09%)</title><rect x="257.7" y="835.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.09%)</title><rect x="257.7" y="819.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.7" y="830.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.09%)</title><rect x="257.7" y="803.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="260.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="258.8" y="931.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="258.8" y="915.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="258.8" y="899.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="258.8" y="883.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="258.8" y="867.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="261.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="258.8" y="851.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="258.8" y="835.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.09%)</title><rect x="258.8" y="819.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="258.8" y="803.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.validate (1 samples, 0.09%)</title><rect x="258.8" y="787.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.45%)</title><rect x="259.8" y="947.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.45%)</title><rect x="259.8" y="931.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.8" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.18%)</title><rect x="259.8" y="915.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/233435895.accept (2 samples, 0.18%)</title><rect x="259.8" y="899.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.18%)</title><rect x="259.8" y="883.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.18%)</title><rect x="259.8" y="867.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="260.9" y="851.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="260.9" y="835.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="263.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.18%)</title><rect x="261.9" y="915.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="261.9" y="899.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="261.9" y="883.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="261.9" y="867.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="261.9" y="851.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="263.0" y="899.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="263.0" y="883.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="263.0" y="867.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="263.0" y="851.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="263.0" y="835.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="263.0" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.0" y="830.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="263.0" y="803.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.0" y="814.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="263.0" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="263.0" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="263.0" y="755.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/1892779430.test (1 samples, 0.09%)</title><rect x="263.0" y="739.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.09%)</title><rect x="263.0" y="723.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/118769521.test (1 samples, 0.09%)</title><rect x="263.0" y="707.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.09%)</title><rect x="263.0" y="691.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="263.0" y="675.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="263.0" y="659.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="263.0" y="643.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="264.1" y="915.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="267.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="264.1" y="899.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.1" y="910.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="264.1" y="883.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="264.1" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="264.1" y="851.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="264.1" y="835.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="264.1" y="819.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="265.1" y="947.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="265.1" y="931.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="265.1" y="915.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="265.1" y="899.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="265.1" y="883.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.1" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.09%)</title><rect x="265.1" y="867.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.1" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="265.1" y="851.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.1" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (686 samples, 61.80%)</title><rect x="266.2" y="1011.0" width="729.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.2" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (686 samples, 61.80%)</title><rect x="266.2" y="995.0" width="729.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.2" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (686 samples, 61.80%)</title><rect x="266.2" y="979.0" width="729.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.2" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/432819351.run (458 samples, 41.26%)</title><rect x="267.3" y="963.0" width="486.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.3" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/43..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (458 samples, 41.26%)</title><rect x="267.3" y="947.0" width="486.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.3" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (458 samples, 41.26%)</title><rect x="267.3" y="931.0" width="486.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.3" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (441 samples, 39.73%)</title><rect x="267.3" y="915.0" width="468.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.3" y="926.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.54%)</title><rect x="268.3" y="899.0" width="6.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="271.3" y="910.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.45%)</title><rect x="269.4" y="883.0" width="5.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="272.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (5 samples, 0.45%)</title><rect x="274.7" y="899.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (5 samples, 0.45%)</title><rect x="274.7" y="883.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/697535916.get (5 samples, 0.45%)</title><rect x="274.7" y="867.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="277.7" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.45%)</title><rect x="274.7" y="851.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.7" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.45%)</title><rect x="274.7" y="835.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="277.7" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.36%)</title><rect x="275.8" y="819.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="278.8" y="830.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="275.8" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="278.8" y="814.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.27%)</title><rect x="276.8" y="803.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="279.8" y="814.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.27%)</title><rect x="276.8" y="787.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="279.8" y="798.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="276.8" y="771.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="279.8" y="782.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="277.9" y="771.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="280.9" y="782.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="277.9" y="755.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="280.9" y="766.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="279.0" y="771.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="282.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (142 samples, 12.79%)</title><rect x="280.0" y="899.0" width="151.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.0" y="910.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (142 samples, 12.79%)</title><rect x="280.0" y="883.0" width="151.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="283.0" y="894.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (142 samples, 12.79%)</title><rect x="280.0" y="867.0" width="151.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.0" y="878.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (142 samples, 12.79%)</title><rect x="280.0" y="851.0" width="151.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.0" y="862.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (142 samples, 12.79%)</title><rect x="280.0" y="835.0" width="151.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="283.0" y="846.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (142 samples, 12.79%)</title><rect x="280.0" y="819.0" width="151.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.0" y="830.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (40 samples, 3.60%)</title><rect x="280.0" y="803.0" width="42.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.0" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.72%)</title><rect x="299.2" y="787.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.72%)</title><rect x="299.2" y="771.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.72%)</title><rect x="299.2" y="755.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.2" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.72%)</title><rect x="299.2" y="739.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="302.2" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (8 samples, 0.72%)</title><rect x="299.2" y="723.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.72%)</title><rect x="299.2" y="707.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 1.26%)</title><rect x="307.7" y="787.0" width="14.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="310.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (13 samples, 1.17%)</title><rect x="308.7" y="771.0" width="13.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.09%)</title><rect x="308.7" y="755.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.09%)</title><rect x="308.7" y="739.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.27%)</title><rect x="309.8" y="755.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.8" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="309.8" y="739.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="312.8" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="309.8" y="723.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="312.8" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="309.8" y="707.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="312.8" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="309.8" y="691.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="312.8" y="702.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (2 samples, 0.18%)</title><rect x="309.8" y="675.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="312.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="311.9" y="739.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="311.9" y="723.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="311.9" y="707.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="314.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (9 samples, 0.81%)</title><rect x="313.0" y="755.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (88 samples, 7.93%)</title><rect x="322.5" y="803.0" width="93.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.5" y="814.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.45%)</title><rect x="322.5" y="787.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.45%)</title><rect x="322.5" y="771.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="325.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.45%)</title><rect x="322.5" y="755.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.45%)</title><rect x="322.5" y="739.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.18%)</title><rect x="324.7" y="723.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.18%)</title><rect x="324.7" y="707.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.18%)</title><rect x="324.7" y="691.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="326.8" y="723.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="329.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.45%)</title><rect x="327.9" y="787.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.45%)</title><rect x="327.9" y="771.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.99%)</title><rect x="333.2" y="787.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="336.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.90%)</title><rect x="334.2" y="771.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.54%)</title><rect x="338.5" y="755.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.45%)</title><rect x="339.5" y="739.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="342.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (4 samples, 0.36%)</title><rect x="340.6" y="723.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="343.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.54%)</title><rect x="344.9" y="787.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="347.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.54%)</title><rect x="344.9" y="771.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (6 samples, 0.54%)</title><rect x="344.9" y="755.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (6 samples, 0.54%)</title><rect x="344.9" y="739.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="347.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.18%)</title><rect x="348.1" y="723.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="351.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="350.2" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (61 samples, 5.50%)</title><rect x="351.2" y="787.0" width="64.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.2" y="798.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.44%)</title><rect x="351.2" y="771.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.63%)</title><rect x="355.5" y="755.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="358.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.63%)</title><rect x="355.5" y="739.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.63%)</title><rect x="355.5" y="723.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="358.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="362.9" y="755.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="365.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="362.9" y="739.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.27%)</title><rect x="365.1" y="755.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="368.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (45 samples, 4.05%)</title><rect x="368.3" y="771.0" width="47.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="371.3" y="782.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (45 samples, 4.05%)</title><rect x="368.3" y="755.0" width="47.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.3" y="766.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (43 samples, 3.87%)</title><rect x="370.4" y="739.0" width="45.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="373.4" y="750.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.17%)</title><rect x="372.5" y="723.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="375.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.72%)</title><rect x="374.6" y="707.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.72%)</title><rect x="374.6" y="691.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.72%)</title><rect x="374.6" y="675.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="377.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.45%)</title><rect x="377.8" y="659.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="380.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="383.1" y="707.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="386.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="383.1" y="691.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="386.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="385.3" y="707.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="388.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.36%)</title><rect x="386.3" y="723.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="389.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.27%)</title><rect x="387.4" y="707.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.27%)</title><rect x="387.4" y="691.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.27%)</title><rect x="387.4" y="675.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.4" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.27%)</title><rect x="387.4" y="659.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="390.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.90%)</title><rect x="390.6" y="723.0" width="10.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="393.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.90%)</title><rect x="390.6" y="707.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="393.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.90%)</title><rect x="390.6" y="691.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="393.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.90%)</title><rect x="390.6" y="675.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="393.6" y="686.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.90%)</title><rect x="390.6" y="659.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.6" y="670.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.81%)</title><rect x="390.6" y="643.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="393.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="395.9" y="627.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="398.9" y="638.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor18.newInstance (3 samples, 0.27%)</title><rect x="397.0" y="627.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.0" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="399.1" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="402.1" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="399.1" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="402.1" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="399.1" y="579.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="402.1" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="399.1" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="402.1" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="399.1" y="547.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="402.1" y="558.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor18.newInstance (1 samples, 0.09%)</title><rect x="400.1" y="643.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.45%)</title><rect x="401.2" y="723.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="404.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.45%)</title><rect x="401.2" y="707.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="404.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.45%)</title><rect x="401.2" y="691.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="404.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="405.5" y="675.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (9 samples, 0.81%)</title><rect x="406.5" y="723.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="415.0" y="707.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="418.0" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="415.0" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="418.0" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="415.0" y="675.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="418.0" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="415.0" y="659.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="418.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (14 samples, 1.26%)</title><rect x="416.1" y="803.0" width="14.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="419.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (14 samples, 1.26%)</title><rect x="416.1" y="787.0" width="14.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (14 samples, 1.26%)</title><rect x="416.1" y="771.0" width="14.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (14 samples, 1.26%)</title><rect x="416.1" y="755.0" width="14.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="419.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (14 samples, 1.26%)</title><rect x="416.1" y="739.0" width="14.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="419.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.09%)</title><rect x="425.7" y="723.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.09%)</title><rect x="426.7" y="723.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="429.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (3 samples, 0.27%)</title><rect x="427.8" y="723.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="430.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (287 samples, 25.86%)</title><rect x="431.0" y="899.0" width="305.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="434.0" y="910.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (49 samples, 4.41%)</title><rect x="431.0" y="883.0" width="52.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="434.0" y="894.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.18%)</title><rect x="431.0" y="867.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.0" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (47 samples, 4.23%)</title><rect x="433.1" y="867.0" width="50.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.1" y="878.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (43 samples, 3.87%)</title><rect x="437.4" y="851.0" width="45.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.4" y="862.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.63%)</title><rect x="439.5" y="835.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="442.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.63%)</title><rect x="439.5" y="819.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="442.5" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.63%)</title><rect x="439.5" y="803.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="442.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.63%)</title><rect x="439.5" y="787.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="442.5" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (34 samples, 3.06%)</title><rect x="446.9" y="835.0" width="36.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.9" y="846.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (32 samples, 2.88%)</title><rect x="449.0" y="819.0" width="34.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.0" y="830.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.45%)</title><rect x="477.7" y="803.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (19 samples, 1.71%)</title><rect x="483.1" y="883.0" width="20.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="486.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (1 samples, 0.09%)</title><rect x="489.4" y="867.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="492.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.54%)</title><rect x="490.5" y="867.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="493.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="490.5" y="851.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="493.5" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="490.5" y="835.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="493.5" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="491.6" y="835.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="494.6" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="491.6" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="494.6" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="491.6" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="494.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.36%)</title><rect x="492.6" y="851.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="495.6" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.54%)</title><rect x="496.9" y="867.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="499.9" y="878.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.54%)</title><rect x="496.9" y="851.0" width="6.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="499.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (152 samples, 13.69%)</title><rect x="503.3" y="883.0" width="161.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="506.3" y="894.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (152 samples, 13.69%)</title><rect x="503.3" y="867.0" width="161.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="506.3" y="878.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (55 samples, 4.95%)</title><rect x="515.0" y="851.0" width="58.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="518.0" y="862.0">com/li..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="515.0" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="518.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="515.0" y="819.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="518.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="515.0" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="518.0" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="515.0" y="787.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="518.0" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="515.0" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="518.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (53 samples, 4.77%)</title><rect x="516.0" y="835.0" width="56.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="519.0" y="846.0">java/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.18%)</title><rect x="527.7" y="819.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="530.7" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (35 samples, 3.15%)</title><rect x="529.8" y="819.0" width="37.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="532.8" y="830.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (26 samples, 2.34%)</title><rect x="533.0" y="803.0" width="27.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="536.0" y="814.0">j..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="537.3" y="787.0" width="2.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="540.3" y="798.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="537.3" y="771.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="540.3" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (20 samples, 1.80%)</title><rect x="539.4" y="787.0" width="21.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.4" y="798.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 1.71%)</title><rect x="540.5" y="771.0" width="20.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="543.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.63%)</title><rect x="549.0" y="755.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="552.0" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.18%)</title><rect x="549.0" y="739.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="552.0" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="549.0" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="552.0" y="734.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="550.0" y="723.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="553.0" y="734.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="550.0" y="707.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="553.0" y="718.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="550.0" y="691.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="553.0" y="702.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="551.1" y="739.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="554.1" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.36%)</title><rect x="552.2" y="739.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="555.2" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.36%)</title><rect x="552.2" y="723.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="555.2" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="552.2" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="555.2" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="552.2" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="555.2" y="702.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.09%)</title><rect x="552.2" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="555.2" y="686.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="553.2" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="556.2" y="718.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.18%)</title><rect x="554.3" y="707.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="557.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="554.3" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="557.3" y="702.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="555.4" y="691.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="558.4" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.36%)</title><rect x="556.4" y="755.0" width="4.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="559.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.36%)</title><rect x="560.7" y="803.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="563.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.getChars (2 samples, 0.18%)</title><rect x="564.9" y="803.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="567.9" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.45%)</title><rect x="567.0" y="819.0" width="5.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="570.0" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="572.4" y="835.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="572.4" y="819.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="575.4" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="572.4" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="575.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="572.4" y="787.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="575.4" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.18%)</title><rect x="573.4" y="851.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="576.4" y="862.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.36%)</title><rect x="575.5" y="851.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="578.5" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.36%)</title><rect x="575.5" y="835.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="578.5" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.36%)</title><rect x="575.5" y="819.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="578.5" y="830.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="579.8" y="851.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="582.8" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (79 samples, 7.12%)</title><rect x="580.9" y="851.0" width="83.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.9" y="862.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (77 samples, 6.94%)</title><rect x="583.0" y="835.0" width="81.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="586.0" y="846.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.27%)</title><rect x="583.0" y="819.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="586.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.27%)</title><rect x="583.0" y="803.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="586.0" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.27%)</title><rect x="583.0" y="787.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="586.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.27%)</title><rect x="583.0" y="771.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="586.0" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="585.1" y="755.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="588.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="585.1" y="739.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.1" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (74 samples, 6.67%)</title><rect x="586.2" y="819.0" width="78.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="589.2" y="830.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (67 samples, 6.04%)</title><rect x="593.6" y="803.0" width="71.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="596.6" y="814.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (41 samples, 3.69%)</title><rect x="621.3" y="787.0" width="43.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="624.3" y="798.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.27%)</title><rect x="641.5" y="771.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="644.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (16 samples, 1.44%)</title><rect x="644.6" y="771.0" width="17.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="647.6" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.36%)</title><rect x="657.4" y="755.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="660.4" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="658.5" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="661.5" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="658.5" y="723.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="661.5" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="659.5" y="739.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="662.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="659.5" y="723.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="662.5" y="734.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="659.5" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="662.5" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="660.6" y="707.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="663.6" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="660.6" y="691.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="663.6" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="660.6" y="675.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="663.6" y="686.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="660.6" y="659.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="663.6" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="660.6" y="643.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="663.6" y="654.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="660.6" y="627.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="663.6" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="660.6" y="611.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="663.6" y="622.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="660.6" y="595.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="663.6" y="606.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.27%)</title><rect x="661.7" y="771.0" width="3.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="664.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 4.05%)</title><rect x="664.8" y="883.0" width="47.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="667.8" y="894.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 4.05%)</title><rect x="664.8" y="867.0" width="47.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="667.8" y="878.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/2058325204.process (24 samples, 2.16%)</title><rect x="665.9" y="851.0" width="25.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="668.9" y="862.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (24 samples, 2.16%)</title><rect x="665.9" y="835.0" width="25.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="668.9" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.80%)</title><rect x="667.0" y="819.0" width="21.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="670.0" y="830.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="681.9" y="803.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="684.9" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="681.9" y="787.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="684.9" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="681.9" y="771.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="684.9" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="681.9" y="755.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="684.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="681.9" y="739.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="684.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="681.9" y="723.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="684.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.45%)</title><rect x="682.9" y="803.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="685.9" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.45%)</title><rect x="682.9" y="787.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="685.9" y="798.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.45%)</title><rect x="682.9" y="771.0" width="5.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="685.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.27%)</title><rect x="688.2" y="819.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="691.2" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.27%)</title><rect x="688.2" y="803.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="691.2" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 0.27%)</title><rect x="688.2" y="787.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="691.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.63%)</title><rect x="691.4" y="851.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="694.4" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.63%)</title><rect x="691.4" y="835.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.4" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="698.9" y="851.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="701.9" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (5 samples, 0.45%)</title><rect x="699.9" y="851.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="702.9" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (5 samples, 0.45%)</title><rect x="699.9" y="835.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="702.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/2043919628.get$Lambda (5 samples, 0.45%)</title><rect x="699.9" y="819.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="702.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/2043919628.&lt;init&gt; (5 samples, 0.45%)</title><rect x="699.9" y="803.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="702.9" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.54%)</title><rect x="705.2" y="851.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.2" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.36%)</title><rect x="707.4" y="835.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="710.4" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="707.4" y="819.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="710.4" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.27%)</title><rect x="708.4" y="819.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.4" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="711.6" y="851.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="714.6" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="711.6" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="714.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.98%)</title><rect x="712.7" y="883.0" width="23.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="715.7" y="894.0">j..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.27%)</title><rect x="720.1" y="867.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="723.1" y="878.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="720.1" y="851.0" width="3.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="723.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.08%)</title><rect x="723.3" y="867.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="726.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.99%)</title><rect x="724.4" y="851.0" width="11.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="727.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/721611759.accept (10 samples, 0.90%)</title><rect x="724.4" y="835.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="727.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (10 samples, 0.90%)</title><rect x="724.4" y="819.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="727.4" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (10 samples, 0.90%)</title><rect x="724.4" y="803.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="727.4" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (10 samples, 0.90%)</title><rect x="724.4" y="787.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="727.4" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="733.9" y="771.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="736.9" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="733.9" y="755.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="736.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$282/1261121209.accept (1 samples, 0.09%)</title><rect x="735.0" y="835.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="738.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="735.0" y="819.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="738.0" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="735.0" y="803.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="738.0" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="735.0" y="787.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="738.0" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="735.0" y="771.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="738.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.53%)</title><rect x="736.1" y="915.0" width="18.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="739.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.53%)</title><rect x="736.1" y="899.0" width="18.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="739.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.26%)</title><rect x="738.2" y="883.0" width="14.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="741.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$282/1261121209.accept (14 samples, 1.26%)</title><rect x="738.2" y="867.0" width="14.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (14 samples, 1.26%)</title><rect x="738.2" y="851.0" width="14.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="741.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/909160640.complete (14 samples, 1.26%)</title><rect x="738.2" y="835.0" width="14.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="741.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (14 samples, 1.26%)</title><rect x="738.2" y="819.0" width="14.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="741.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (14 samples, 1.26%)</title><rect x="738.2" y="803.0" width="14.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.2" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.26%)</title><rect x="738.2" y="787.0" width="14.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="741.2" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.26%)</title><rect x="738.2" y="771.0" width="14.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="741.2" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (14 samples, 1.26%)</title><rect x="738.2" y="755.0" width="14.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="741.2" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (14 samples, 1.26%)</title><rect x="738.2" y="739.0" width="14.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="741.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="753.1" y="883.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="756.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.09%)</title><rect x="754.1" y="963.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (1 samples, 0.09%)</title><rect x="754.1" y="947.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="757.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (1 samples, 0.09%)</title><rect x="754.1" y="931.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="757.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (1 samples, 0.09%)</title><rect x="754.1" y="915.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="757.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 0.09%)</title><rect x="754.1" y="899.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="757.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 0.09%)</title><rect x="754.1" y="883.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="757.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (1 samples, 0.09%)</title><rect x="754.1" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.09%)</title><rect x="754.1" y="851.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.09%)</title><rect x="754.1" y="835.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="757.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.09%)</title><rect x="754.1" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="757.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.09%)</title><rect x="754.1" y="803.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="757.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="754.1" y="787.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.45%)</title><rect x="755.2" y="963.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.45%)</title><rect x="755.2" y="947.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="758.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.45%)</title><rect x="755.2" y="931.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="758.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.45%)</title><rect x="755.2" y="915.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="758.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/432819351.run (2 samples, 0.18%)</title><rect x="758.4" y="899.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="761.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (221 samples, 19.91%)</title><rect x="760.5" y="963.0" width="235.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="763.5" y="974.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (221 samples, 19.91%)</title><rect x="760.5" y="947.0" width="235.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="763.5" y="958.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (203 samples, 18.29%)</title><rect x="761.6" y="931.0" width="215.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="764.6" y="942.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (21 samples, 1.89%)</title><rect x="769.0" y="915.0" width="22.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="772.0" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (13 samples, 1.17%)</title><rect x="791.4" y="915.0" width="13.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="794.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.17%)</title><rect x="791.4" y="899.0" width="13.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="794.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.17%)</title><rect x="791.4" y="883.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.17%)</title><rect x="791.4" y="867.0" width="13.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="794.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (162 samples, 14.59%)</title><rect x="805.2" y="915.0" width="172.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="808.2" y="926.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (160 samples, 14.41%)</title><rect x="807.3" y="899.0" width="170.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="810.3" y="910.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.18%)</title><rect x="814.7" y="883.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="817.7" y="894.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.27%)</title><rect x="816.9" y="883.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="819.9" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="820.1" y="883.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="823.1" y="894.0"></text>
</g>
<g>
<title>Unsafe_Park (139 samples, 12.52%)</title><rect x="821.1" y="883.0" width="147.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="824.1" y="894.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="826.4" y="867.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="829.4" y="878.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.27%)</title><rect x="828.6" y="867.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="831.6" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.43%)</title><rect x="831.7" y="867.0" width="28.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="834.7" y="878.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.90%)</title><rect x="842.4" y="851.0" width="10.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="845.4" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.36%)</title><rect x="843.4" y="835.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="846.4" y="846.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.36%)</title><rect x="843.4" y="819.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="846.4" y="830.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="847.7" y="835.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="850.7" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.36%)</title><rect x="848.8" y="835.0" width="4.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="851.8" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.63%)</title><rect x="853.0" y="851.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="856.0" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.18%)</title><rect x="860.5" y="867.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="863.5" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.27%)</title><rect x="862.6" y="867.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="865.6" y="878.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.72%)</title><rect x="865.8" y="867.0" width="8.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="868.8" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (28 samples, 2.52%)</title><rect x="874.3" y="867.0" width="29.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="877.3" y="878.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (39 samples, 3.51%)</title><rect x="904.0" y="867.0" width="41.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="907.0" y="878.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.72%)</title><rect x="945.5" y="867.0" width="8.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="948.5" y="878.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.18%)</title><rect x="954.0" y="867.0" width="2.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="957.0" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="956.1" y="867.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="959.1" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.45%)</title><rect x="957.2" y="867.0" width="5.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="960.2" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="962.5" y="867.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="965.5" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="963.6" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="966.6" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.27%)</title><rect x="964.6" y="867.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="967.6" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="967.8" y="867.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="970.8" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.36%)</title><rect x="968.9" y="883.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="971.9" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.36%)</title><rect x="973.1" y="883.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.53%)</title><rect x="977.4" y="931.0" width="18.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.53%)</title><rect x="977.4" y="915.0" width="18.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="980.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.53%)</title><rect x="977.4" y="899.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="980.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.53%)</title><rect x="977.4" y="883.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="980.4" y="894.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="995.5" y="1011.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="998.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="995.5" y="995.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="998.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="995.5" y="979.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="998.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="995.5" y="963.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="998.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.09%)</title><rect x="995.5" y="947.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="998.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.09%)</title><rect x="995.5" y="931.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="998.5" y="942.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.09%)</title><rect x="995.5" y="915.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="998.5" y="926.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.09%)</title><rect x="996.5" y="1011.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="999.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="997.6" y="1011.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1000.6" y="1022.0"></text>
</g>
<g>
<title>start_thread (180 samples, 16.22%)</title><rect x="998.6" y="1011.0" width="191.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1001.6" y="1022.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (180 samples, 16.22%)</title><rect x="998.6" y="995.0" width="191.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1001.6" y="1006.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.89%)</title><rect x="998.6" y="979.0" width="22.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.6" y="990.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (11 samples, 0.99%)</title><rect x="998.6" y="963.0" width="11.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.6" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 0.99%)</title><rect x="998.6" y="947.0" width="11.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.6" y="958.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.27%)</title><rect x="998.6" y="931.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.6" y="942.0"></text>
</g>
<g>
<title>SpinPause (8 samples, 0.72%)</title><rect x="1001.8" y="931.0" width="8.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1004.8" y="942.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 0.81%)</title><rect x="1010.3" y="963.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1013.3" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.36%)</title><rect x="1010.3" y="947.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1013.3" y="958.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.18%)</title><rect x="1010.3" y="931.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1013.3" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1010.3" y="915.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1013.3" y="926.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1011.4" y="915.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1014.4" y="926.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1012.5" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.5" y="942.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1013.5" y="931.0" width="1.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1016.5" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.27%)</title><rect x="1014.6" y="947.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1017.6" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.27%)</title><rect x="1014.6" y="931.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.6" y="942.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.18%)</title><rect x="1014.6" y="915.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.6" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1016.7" y="915.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1019.7" y="926.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1016.7" y="899.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1019.7" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.18%)</title><rect x="1017.8" y="947.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1020.8" y="958.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.18%)</title><rect x="1017.8" y="931.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1020.8" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.18%)</title><rect x="1017.8" y="915.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1020.8" y="926.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.18%)</title><rect x="1017.8" y="899.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1020.8" y="910.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.18%)</title><rect x="1017.8" y="883.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1020.8" y="894.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.18%)</title><rect x="1017.8" y="867.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1020.8" y="878.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.18%)</title><rect x="1017.8" y="851.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1020.8" y="862.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1018.8" y="835.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.8" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="1019.9" y="963.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.9" y="974.0"></text>
</g>
<g>
<title>JavaThread::run() (158 samples, 14.23%)</title><rect x="1021.0" y="979.0" width="167.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1024.0" y="990.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (158 samples, 14.23%)</title><rect x="1021.0" y="963.0" width="167.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.0" y="974.0">JavaThread::thread_ma..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (158 samples, 14.23%)</title><rect x="1021.0" y="947.0" width="167.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1024.0" y="958.0">CompileBroker::compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (158 samples, 14.23%)</title><rect x="1021.0" y="931.0" width="167.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1024.0" y="942.0">CompileBroker::invoke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (157 samples, 14.14%)</title><rect x="1021.0" y="915.0" width="166.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.0" y="926.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (157 samples, 14.14%)</title><rect x="1021.0" y="899.0" width="166.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.0" y="910.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>Compile::Code_Gen() (66 samples, 5.95%)</title><rect x="1021.0" y="883.0" width="70.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1024.0" y="894.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.27%)</title><rect x="1021.0" y="867.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1024.0" y="878.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1021.0" y="851.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.0" y="862.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1022.0" y="851.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1025.0" y="862.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1022.0" y="835.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.0" y="846.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1022.0" y="819.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.0" y="830.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.09%)</title><rect x="1022.0" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1025.0" y="814.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1023.1" y="851.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1026.1" y="862.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.18%)</title><rect x="1024.2" y="867.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1027.2" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.81%)</title><rect x="1026.3" y="867.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.3" y="878.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1026.3" y="851.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1029.3" y="862.0"></text>
</g>
<g>
<title>LoadPNode::Opcode() const (1 samples, 0.09%)</title><rect x="1027.4" y="851.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1030.4" y="862.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1028.4" y="851.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1031.4" y="862.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1029.5" y="851.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1032.5" y="862.0"></text>
</g>
<g>
<title>loadConP0Node::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.09%)</title><rect x="1029.5" y="835.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1032.5" y="846.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.45%)</title><rect x="1030.5" y="851.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.5" y="862.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.27%)</title><rect x="1030.5" y="835.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.5" y="846.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="1033.7" y="835.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1036.7" y="846.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1033.7" y="819.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1036.7" y="830.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1033.7" y="803.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.7" y="814.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1034.8" y="835.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.8" y="846.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1035.9" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.9" y="878.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.09%)</title><rect x="1035.9" y="851.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.9" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.18%)</title><rect x="1036.9" y="867.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1039.9" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.18%)</title><rect x="1036.9" y="851.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.9" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1036.9" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1039.9" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1038.0" y="835.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1041.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (49 samples, 4.41%)</title><rect x="1039.0" y="867.0" width="52.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1042.0" y="878.0">Phase..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1040.1" y="851.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1043.1" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1041.2" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1044.2" y="862.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.27%)</title><rect x="1042.2" y="851.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1045.2" y="862.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.09%)</title><rect x="1042.2" y="835.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1045.2" y="846.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="1043.3" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.09%)</title><rect x="1044.4" y="835.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.45%)</title><rect x="1045.4" y="851.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.4" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1046.5" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1049.5" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.27%)</title><rect x="1047.5" y="835.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1050.5" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1049.7" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.18%)</title><rect x="1050.7" y="851.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.7" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1050.7" y="835.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.7" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1051.8" y="835.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.8" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1051.8" y="819.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.8" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.72%)</title><rect x="1052.9" y="851.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.9" y="862.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1059.2" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1062.2" y="846.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.09%)</title><rect x="1060.3" y="835.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.63%)</title><rect x="1061.4" y="851.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.4" y="862.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.09%)</title><rect x="1062.4" y="835.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1065.4" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1063.5" y="835.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1066.5" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.36%)</title><rect x="1064.6" y="835.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1067.6" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="1066.7" y="819.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1069.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.27%)</title><rect x="1068.8" y="851.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 0.27%)</title><rect x="1072.0" y="851.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.0" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1075.2" y="851.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.2" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1076.3" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.3" y="846.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1077.3" y="851.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.3" y="862.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1077.3" y="835.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.3" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1078.4" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.4" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1079.4" y="851.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.4" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.18%)</title><rect x="1080.5" y="851.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.5" y="862.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.18%)</title><rect x="1080.5" y="835.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.5" y="846.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1081.6" y="819.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1084.6" y="830.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.09%)</title><rect x="1081.6" y="803.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.6" y="814.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1081.6" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.6" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.72%)</title><rect x="1082.6" y="851.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.6" y="862.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1084.8" y="835.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1087.8" y="846.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.09%)</title><rect x="1084.8" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1087.8" y="830.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.36%)</title><rect x="1085.8" y="835.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.8" y="846.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.09%)</title><rect x="1086.9" y="819.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.9" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="1087.9" y="819.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.9" y="830.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1090.1" y="835.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.1" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (85 samples, 7.66%)</title><rect x="1091.1" y="883.0" width="90.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.1" y="894.0">Compile::O..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.18%)</title><rect x="1091.1" y="867.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.18%)</title><rect x="1091.1" y="851.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.1" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.09%)</title><rect x="1091.1" y="819.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="819.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="803.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="787.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="755.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="739.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="723.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="707.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="691.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="675.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="659.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="643.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="627.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="611.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="595.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="579.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="563.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="547.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="531.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="515.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="499.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="483.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="467.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="451.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="435.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="419.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="403.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="387.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="371.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="355.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1092.2" y="339.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.2" y="350.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.09%)</title><rect x="1092.2" y="323.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.2" y="334.0"></text>
</g>
<g>
<title>Node::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1093.3" y="867.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.3" y="878.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.18%)</title><rect x="1094.3" y="867.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.3" y="878.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1094.3" y="851.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.3" y="862.0"></text>
</g>
<g>
<title>MemBarNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1095.4" y="851.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (67 samples, 6.04%)</title><rect x="1096.5" y="867.0" width="71.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.5" y="878.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (8 samples, 0.72%)</title><rect x="1096.5" y="851.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.5" y="862.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.18%)</title><rect x="1101.8" y="835.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.8" y="846.0"></text>
</g>
<g>
<title>free (1 samples, 0.09%)</title><rect x="1103.9" y="835.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1106.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.36%)</title><rect x="1105.0" y="851.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.0" y="862.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1108.1" y="835.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (47 samples, 4.23%)</title><rect x="1109.2" y="851.0" width="50.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.2" y="862.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (42 samples, 3.78%)</title><rect x="1113.5" y="835.0" width="44.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.5" y="846.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1116.6" y="819.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.6" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.18%)</title><rect x="1117.7" y="819.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (36 samples, 3.24%)</title><rect x="1119.8" y="819.0" width="38.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.8" y="830.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1147.5" y="803.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1147.5" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1147.5" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.63%)</title><rect x="1148.5" y="803.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.18%)</title><rect x="1156.0" y="803.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1157.0" y="787.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.09%)</title><rect x="1158.1" y="835.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.36%)</title><rect x="1159.2" y="851.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.18%)</title><rect x="1161.3" y="835.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.27%)</title><rect x="1163.4" y="851.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1165.5" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.09%)</title><rect x="1165.5" y="819.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.5" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1166.6" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.6" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1166.6" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.6" y="846.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1166.6" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.6" y="830.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1166.6" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.6" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.99%)</title><rect x="1167.7" y="867.0" width="11.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.90%)</title><rect x="1168.7" y="851.0" width="10.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.7" y="862.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1168.7" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.7" y="846.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1168.7" y="819.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.7" y="830.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.09%)</title><rect x="1168.7" y="803.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.7" y="814.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1168.7" y="787.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.7" y="798.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1168.7" y="771.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.7" y="782.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1168.7" y="755.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.7" y="766.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1168.7" y="739.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.7" y="750.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1169.8" y="835.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.8" y="846.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1170.9" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.27%)</title><rect x="1171.9" y="835.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.9" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1174.1" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="830.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1174.1" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.09%)</title><rect x="1174.1" y="787.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.1" y="798.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1175.1" y="835.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.1" y="846.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1176.2" y="819.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.2" y="830.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1177.2" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="846.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1177.2" y="819.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.2" y="830.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.3" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1178.3" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1178.3" y="803.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1179.4" y="867.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1179.4" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1179.4" y="835.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.09%)</title><rect x="1179.4" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="830.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.09%)</title><rect x="1179.4" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1180.4" y="867.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.4" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1180.4" y="851.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1180.4" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1180.4" y="819.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.09%)</title><rect x="1180.4" y="803.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1180.4" y="787.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1183.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1181.5" y="883.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1181.5" y="867.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1181.5" y="851.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1181.5" y="835.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1181.5" y="819.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.36%)</title><rect x="1181.5" y="803.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="814.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.5" y="787.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="798.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1181.5" y="771.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="782.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.09%)</title><rect x="1181.5" y="755.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="766.0"></text>
</g>
<g>
<title>IfFalseNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1181.5" y="739.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1182.6" y="787.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1182.6" y="771.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.27%)</title><rect x="1182.6" y="755.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.27%)</title><rect x="1182.6" y="739.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.27%)</title><rect x="1182.6" y="723.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.27%)</title><rect x="1182.6" y="707.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1182.6" y="691.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1182.6" y="675.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.27%)</title><rect x="1182.6" y="659.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.27%)</title><rect x="1182.6" y="643.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.27%)</title><rect x="1182.6" y="627.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.27%)</title><rect x="1182.6" y="611.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1182.6" y="595.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1182.6" y="579.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.27%)</title><rect x="1182.6" y="563.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.27%)</title><rect x="1182.6" y="547.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.27%)</title><rect x="1182.6" y="531.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.27%)</title><rect x="1182.6" y="515.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1182.6" y="499.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1182.6" y="483.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.6" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.6" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.6" y="435.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.6" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.6" y="403.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.6" y="387.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.6" y="371.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.6" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.6" y="339.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.6" y="323.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.6" y="307.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.6" y="291.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.6" y="275.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.6" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.6" y="243.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.6" y="227.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.6" y="211.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.6" y="195.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.6" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.6" y="163.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.6" y="147.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.6" y="131.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.6" y="115.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.6" y="99.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.6" y="83.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="94.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.09%)</title><rect x="1182.6" y="67.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1182.6" y="51.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="62.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1182.6" y="35.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="46.0"></text>
</g>
<g>
<title>Parse::make_node_notes(Node_Notes*) (1 samples, 0.09%)</title><rect x="1183.6" y="467.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.7" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.7" y="510.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.09%)</title><rect x="1184.7" y="483.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.7" y="494.0"></text>
</g>
<g>
<title>TypeKlassPtr::as_instance_type() const (1 samples, 0.09%)</title><rect x="1184.7" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.7" y="478.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.09%)</title><rect x="1184.7" y="451.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.7" y="462.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1185.7" y="883.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.7" y="894.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1185.7" y="867.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="878.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1186.8" y="883.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.8" y="894.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1186.8" y="867.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.8" y="878.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1186.8" y="851.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.8" y="862.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.09%)</title><rect x="1186.8" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="846.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.09%)</title><rect x="1186.8" y="819.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.8" y="830.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.09%)</title><rect x="1186.8" y="803.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.8" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1187.9" y="915.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="926.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1187.9" y="899.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.9" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1187.9" y="883.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.9" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1187.9" y="867.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.9" y="878.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1187.9" y="851.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="862.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1187.9" y="835.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.9" y="846.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1187.9" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.9" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1187.9" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1187.9" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.9" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1187.9" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.9" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1187.9" y="755.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1187.9" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1187.9" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1187.9" y="707.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.9" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1187.9" y="691.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.9" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1187.9" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.9" y="686.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1187.9" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="670.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1187.9" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="654.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.09%)</title><rect x="1187.9" y="627.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.9" y="638.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 0.09%)</title><rect x="1187.9" y="611.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="622.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1188.9" y="979.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="990.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1188.9" y="963.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="974.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="947.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="958.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="931.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="942.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="915.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.9" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="899.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="883.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="894.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.09%)</title><rect x="1188.9" y="867.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.9" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.09%)</title><rect x="1188.9" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="862.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="1188.9" y="835.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.9" y="846.0"></text>
</g>
</g>
</svg>
