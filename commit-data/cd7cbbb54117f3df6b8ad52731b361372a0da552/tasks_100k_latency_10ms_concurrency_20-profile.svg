<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (348 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 6.03%)</title><rect x="10.0" y="1203.0" width="71.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 6.03%)</title><rect x="10.0" y="1187.0" width="71.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1198.0">com/line..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 2.01%)</title><rect x="10.0" y="1171.0" width="23.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1182.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/485608507.accept (7 samples, 2.01%)</title><rect x="10.0" y="1155.0" width="23.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (7 samples, 2.01%)</title><rect x="10.0" y="1139.0" width="23.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1150.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.29%)</title><rect x="23.6" y="1123.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.29%)</title><rect x="23.6" y="1107.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.29%)</title><rect x="23.6" y="1091.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.29%)</title><rect x="23.6" y="1075.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.29%)</title><rect x="23.6" y="1059.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.29%)</title><rect x="23.6" y="1043.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.29%)</title><rect x="23.6" y="1027.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.29%)</title><rect x="23.6" y="1011.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.29%)</title><rect x="23.6" y="995.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.29%)</title><rect x="23.6" y="979.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.29%)</title><rect x="27.0" y="1123.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="27.0" y="1107.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="27.0" y="1091.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.29%)</title><rect x="30.3" y="1123.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 4.02%)</title><rect x="33.7" y="1171.0" width="47.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.7" y="1182.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 4.02%)</title><rect x="33.7" y="1155.0" width="47.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.7" y="1166.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 1.72%)</title><rect x="33.7" y="1139.0" width="20.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.29%)</title><rect x="33.7" y="1123.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.29%)</title><rect x="33.7" y="1107.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.29%)</title><rect x="33.7" y="1091.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.29%)</title><rect x="33.7" y="1075.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 0.86%)</title><rect x="37.1" y="1123.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.86%)</title><rect x="37.1" y="1107.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.86%)</title><rect x="37.1" y="1091.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.86%)</title><rect x="37.1" y="1075.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.86%)</title><rect x="37.1" y="1059.0" width="10.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.57%)</title><rect x="37.1" y="1043.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.57%)</title><rect x="37.1" y="1027.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.57%)</title><rect x="37.1" y="1011.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.57%)</title><rect x="37.1" y="995.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.57%)</title><rect x="37.1" y="979.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.57%)</title><rect x="37.1" y="963.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.57%)</title><rect x="37.1" y="947.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.29%)</title><rect x="43.9" y="1043.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.29%)</title><rect x="43.9" y="1027.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.29%)</title><rect x="43.9" y="1011.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.57%)</title><rect x="47.3" y="1123.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.57%)</title><rect x="47.3" y="1107.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.29%)</title><rect x="50.7" y="1091.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/460590394.accept (1 samples, 0.29%)</title><rect x="50.7" y="1075.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.29%)</title><rect x="50.7" y="1059.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.29%)</title><rect x="50.7" y="1043.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.29%)</title><rect x="50.7" y="1027.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.29%)</title><rect x="50.7" y="1011.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="50.7" y="995.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="50.7" y="979.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.15%)</title><rect x="54.1" y="1139.0" width="13.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="57.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.86%)</title><rect x="54.1" y="1123.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.86%)</title><rect x="54.1" y="1107.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.29%)</title><rect x="54.1" y="1091.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="57.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1925129129.accept (1 samples, 0.29%)</title><rect x="54.1" y="1075.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.57%)</title><rect x="57.5" y="1091.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="60.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.57%)</title><rect x="57.5" y="1075.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.29%)</title><rect x="57.5" y="1059.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.29%)</title><rect x="57.5" y="1043.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.29%)</title><rect x="57.5" y="1027.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.29%)</title><rect x="57.5" y="1011.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.29%)</title><rect x="57.5" y="995.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.5" y="1006.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.29%)</title><rect x="57.5" y="979.0" width="3.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="60.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.29%)</title><rect x="60.9" y="1059.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.29%)</title><rect x="60.9" y="1043.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="63.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.29%)</title><rect x="60.9" y="1027.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.29%)</title><rect x="60.9" y="1011.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.29%)</title><rect x="64.3" y="1123.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.29%)</title><rect x="64.3" y="1107.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.29%)</title><rect x="64.3" y="1091.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.29%)</title><rect x="64.3" y="1075.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.29%)</title><rect x="64.3" y="1059.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.29%)</title><rect x="64.3" y="1043.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="64.3" y="1027.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="64.3" y="1011.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 1.15%)</title><rect x="67.6" y="1139.0" width="13.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.57%)</title><rect x="67.6" y="1123.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.29%)</title><rect x="71.0" y="1107.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.29%)</title><rect x="71.0" y="1091.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.29%)</title><rect x="71.0" y="1075.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.29%)</title><rect x="71.0" y="1059.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.29%)</title><rect x="71.0" y="1043.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.29%)</title><rect x="71.0" y="1027.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.0" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.29%)</title><rect x="71.0" y="1011.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="74.0" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.29%)</title><rect x="71.0" y="995.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="74.0" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.29%)</title><rect x="71.0" y="979.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.0" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.29%)</title><rect x="71.0" y="963.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.0" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.29%)</title><rect x="71.0" y="947.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.0" y="958.0"></text>
</g>
<g>
<title>__writev (1 samples, 0.29%)</title><rect x="71.0" y="931.0" width="3.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="74.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.57%)</title><rect x="74.4" y="1123.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.57%)</title><rect x="74.4" y="1107.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.57%)</title><rect x="74.4" y="1091.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="77.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.57%)</title><rect x="74.4" y="1075.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.add (1 samples, 0.29%)</title><rect x="74.4" y="1059.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.4" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addFirst (1 samples, 0.29%)</title><rect x="74.4" y="1043.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.29%)</title><rect x="77.8" y="1059.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.29%)</title><rect x="77.8" y="1043.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.29%)</title><rect x="77.8" y="1027.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.29%)</title><rect x="77.8" y="1011.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.29%)</title><rect x="77.8" y="995.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.29%)</title><rect x="77.8" y="979.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.29%)</title><rect x="77.8" y="963.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.29%)</title><rect x="77.8" y="947.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.29%)</title><rect x="77.8" y="931.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.8" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (146 samples, 41.95%)</title><rect x="81.2" y="1203.0" width="495.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.2" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.29%)</title><rect x="81.2" y="1187.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.29%)</title><rect x="81.2" y="1171.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (145 samples, 41.67%)</title><rect x="84.6" y="1187.0" width="491.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.6" y="1198.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (145 samples, 41.67%)</title><rect x="84.6" y="1171.0" width="491.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="87.6" y="1182.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/421643679.run (139 samples, 39.94%)</title><rect x="84.6" y="1155.0" width="471.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="87.6" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (139 samples, 39.94%)</title><rect x="84.6" y="1139.0" width="471.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.6" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (138 samples, 39.66%)</title><rect x="88.0" y="1123.0" width="467.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.0" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (129 samples, 37.07%)</title><rect x="88.0" y="1107.0" width="437.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.0" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sched..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (31 samples, 8.91%)</title><rect x="88.0" y="1091.0" width="105.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.0" y="1102.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (31 samples, 8.91%)</title><rect x="88.0" y="1075.0" width="105.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="91.0" y="1086.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (31 samples, 8.91%)</title><rect x="88.0" y="1059.0" width="105.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.0" y="1070.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 8.91%)</title><rect x="88.0" y="1043.0" width="105.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.0" y="1054.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 8.91%)</title><rect x="88.0" y="1027.0" width="105.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.0" y="1038.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (31 samples, 8.91%)</title><rect x="88.0" y="1011.0" width="105.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.0" y="1022.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 2.01%)</title><rect x="88.0" y="995.0" width="23.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.0" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.57%)</title><rect x="88.0" y="979.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.57%)</title><rect x="88.0" y="963.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 1.44%)</title><rect x="94.8" y="979.0" width="16.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.44%)</title><rect x="94.8" y="963.0" width="16.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.8" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="94.8" y="947.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="97.8" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="94.8" y="931.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="97.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="94.8" y="915.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="97.8" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="94.8" y="899.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="97.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.29%)</title><rect x="98.2" y="947.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.29%)</title><rect x="98.2" y="931.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.86%)</title><rect x="101.6" y="947.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="104.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.86%)</title><rect x="101.6" y="931.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="104.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.29%)</title><rect x="101.6" y="915.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="104.6" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.29%)</title><rect x="101.6" y="899.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="104.6" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="101.6" y="883.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="104.6" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="101.6" y="867.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="104.6" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.29%)</title><rect x="101.6" y="851.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="104.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.29%)</title><rect x="101.6" y="835.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="104.6" y="846.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.29%)</title><rect x="101.6" y="819.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="104.6" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.29%)</title><rect x="101.6" y="803.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="104.6" y="814.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.29%)</title><rect x="101.6" y="787.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="104.6" y="798.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.29%)</title><rect x="101.6" y="771.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="104.6" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.29%)</title><rect x="101.6" y="755.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="104.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.29%)</title><rect x="104.9" y="915.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.29%)</title><rect x="108.3" y="915.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="111.3" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="108.3" y="899.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="111.3" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="108.3" y="883.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="111.3" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="108.3" y="867.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="111.3" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="108.3" y="851.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="111.3" y="862.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.29%)</title><rect x="108.3" y="835.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="111.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (22 samples, 6.32%)</title><rect x="111.7" y="995.0" width="74.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="114.7" y="1006.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.86%)</title><rect x="111.7" y="979.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.86%)</title><rect x="111.7" y="963.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="114.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.29%)</title><rect x="121.9" y="979.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.29%)</title><rect x="121.9" y="963.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.29%)</title><rect x="121.9" y="947.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.29%)</title><rect x="121.9" y="931.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.29%)</title><rect x="121.9" y="915.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.29%)</title><rect x="125.3" y="979.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="128.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.29%)</title><rect x="125.3" y="963.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (17 samples, 4.89%)</title><rect x="128.7" y="979.0" width="57.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.7" y="990.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.44%)</title><rect x="128.7" y="963.0" width="16.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="131.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 1.44%)</title><rect x="128.7" y="947.0" width="16.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="131.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 3.45%)</title><rect x="145.6" y="963.0" width="40.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.6" y="974.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 3.45%)</title><rect x="145.6" y="947.0" width="40.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.6" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (12 samples, 3.45%)</title><rect x="145.6" y="931.0" width="40.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="148.6" y="942.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 1.72%)</title><rect x="155.8" y="915.0" width="20.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="158.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.29%)</title><rect x="159.2" y="899.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.86%)</title><rect x="162.6" y="899.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.86%)</title><rect x="162.6" y="883.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="165.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.86%)</title><rect x="162.6" y="867.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="165.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.86%)</title><rect x="162.6" y="851.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.86%)</title><rect x="162.6" y="835.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="165.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.86%)</title><rect x="162.6" y="819.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.57%)</title><rect x="166.0" y="803.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="169.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.29%)</title><rect x="172.8" y="899.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="175.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.29%)</title><rect x="176.1" y="915.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.29%)</title><rect x="176.1" y="899.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.29%)</title><rect x="179.5" y="915.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.29%)</title><rect x="179.5" y="899.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="182.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.29%)</title><rect x="179.5" y="883.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.29%)</title><rect x="179.5" y="867.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.5" y="878.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.29%)</title><rect x="179.5" y="851.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.5" y="862.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.29%)</title><rect x="179.5" y="835.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.29%)</title><rect x="182.9" y="915.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.57%)</title><rect x="186.3" y="995.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.57%)</title><rect x="186.3" y="979.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.57%)</title><rect x="186.3" y="963.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.29%)</title><rect x="189.7" y="947.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.29%)</title><rect x="189.7" y="931.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (98 samples, 28.16%)</title><rect x="193.1" y="1091.0" width="332.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.1" y="1102.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (11 samples, 3.16%)</title><rect x="193.1" y="1075.0" width="37.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.1" y="1086.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (10 samples, 2.87%)</title><rect x="196.5" y="1059.0" width="33.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.5" y="1070.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 1.15%)</title><rect x="216.8" y="1043.0" width="13.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.8" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 1.15%)</title><rect x="216.8" y="1027.0" width="13.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.29%)</title><rect x="227.0" y="1011.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.29%)</title><rect x="227.0" y="995.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.29%)</title><rect x="230.4" y="1075.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.29%)</title><rect x="230.4" y="1059.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.29%)</title><rect x="230.4" y="1043.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (18 samples, 5.17%)</title><rect x="233.8" y="1075.0" width="61.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.8" y="1086.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (18 samples, 5.17%)</title><rect x="233.8" y="1059.0" width="61.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.8" y="1070.0">com/li..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="237.2" y="1043.0" width="3.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="240.2" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="237.2" y="1027.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="240.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 1.44%)</title><rect x="240.6" y="1043.0" width="16.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.86%)</title><rect x="244.0" y="1027.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.86%)</title><rect x="244.0" y="1011.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.29%)</title><rect x="247.4" y="995.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.29%)</title><rect x="247.4" y="979.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.4" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.29%)</title><rect x="247.4" y="963.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.4" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="247.4" y="947.0" width="3.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="250.4" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.29%)</title><rect x="250.7" y="995.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.7" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="254.1" y="1027.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="257.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.86%)</title><rect x="257.5" y="1043.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.86%)</title><rect x="257.5" y="1027.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.29%)</title><rect x="257.5" y="1011.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="260.5" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="257.5" y="995.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="260.5" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="260.9" y="1011.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="263.9" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="260.9" y="995.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="263.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.29%)</title><rect x="264.3" y="1011.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.3" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 2.30%)</title><rect x="267.7" y="1043.0" width="27.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.7" y="1054.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.01%)</title><rect x="271.1" y="1027.0" width="23.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.1" y="1038.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.29%)</title><rect x="271.1" y="1011.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.29%)</title><rect x="271.1" y="995.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.29%)</title><rect x="271.1" y="979.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.1" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.29%)</title><rect x="271.1" y="963.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.29%)</title><rect x="271.1" y="947.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.29%)</title><rect x="271.1" y="931.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.1" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 1.72%)</title><rect x="274.5" y="1011.0" width="20.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 1.72%)</title><rect x="274.5" y="995.0" width="20.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.57%)</title><rect x="288.0" y="979.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.29%)</title><rect x="291.4" y="963.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="294.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (64 samples, 18.39%)</title><rect x="294.8" y="1075.0" width="217.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.8" y="1086.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (64 samples, 18.39%)</title><rect x="294.8" y="1059.0" width="217.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="297.8" y="1070.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/983331208.process (54 samples, 15.52%)</title><rect x="311.8" y="1043.0" width="183.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="314.8" y="1054.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (53 samples, 15.23%)</title><rect x="315.2" y="1027.0" width="179.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.2" y="1038.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (53 samples, 15.23%)</title><rect x="315.2" y="1011.0" width="179.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="318.2" y="1022.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (53 samples, 15.23%)</title><rect x="315.2" y="995.0" width="179.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.2" y="1006.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>java/lang/Thread.sleep (50 samples, 14.37%)</title><rect x="318.6" y="979.0" width="169.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.6" y="990.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (42 samples, 12.07%)</title><rect x="338.9" y="963.0" width="142.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="341.9" y="974.0">JVM_Sleep</text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="362.6" y="947.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="365.6" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.57%)</title><rect x="366.0" y="947.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="369.0" y="958.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (32 samples, 9.20%)</title><rect x="372.8" y="947.0" width="108.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="375.8" y="958.0">os::sleep(Thr..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.29%)</title><rect x="403.3" y="931.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="406.3" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.29%)</title><rect x="406.7" y="931.0" width="3.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="409.7" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 3.45%)</title><rect x="410.1" y="931.0" width="40.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="413.1" y="942.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 1.15%)</title><rect x="450.8" y="931.0" width="13.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="453.8" y="942.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.29%)</title><rect x="464.4" y="931.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="467.4" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.29%)</title><rect x="467.8" y="931.0" width="3.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="470.8" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.29%)</title><rect x="471.1" y="931.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="474.1" y="942.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.29%)</title><rect x="474.5" y="931.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="477.5" y="942.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.29%)</title><rect x="477.9" y="931.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="480.9" y="942.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.29%)</title><rect x="481.3" y="963.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="484.3" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.29%)</title><rect x="484.7" y="963.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="487.7" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.57%)</title><rect x="488.1" y="979.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="491.1" y="990.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.57%)</title><rect x="488.1" y="963.0" width="6.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="491.1" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.86%)</title><rect x="494.9" y="1043.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="497.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.29%)</title><rect x="501.7" y="1027.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="504.7" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.29%)</title><rect x="501.7" y="1011.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="504.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.57%)</title><rect x="505.1" y="1043.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.15%)</title><rect x="511.8" y="1075.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="514.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.15%)</title><rect x="511.8" y="1059.0" width="13.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="514.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="522.0" y="1043.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="525.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1185022913.accept (1 samples, 0.29%)</title><rect x="522.0" y="1027.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="525.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (1 samples, 0.29%)</title><rect x="522.0" y="1011.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="525.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.29%)</title><rect x="522.0" y="995.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="525.0" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.29%)</title><rect x="522.0" y="979.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="525.0" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.29%)</title><rect x="522.0" y="963.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="525.0" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="522.0" y="947.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="525.0" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="522.0" y="931.0" width="3.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="525.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 1.44%)</title><rect x="525.4" y="1107.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="528.4" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="539.0" y="1091.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="542.0" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="539.0" y="1075.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="542.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.15%)</title><rect x="542.4" y="1107.0" width="13.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="545.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.15%)</title><rect x="542.4" y="1091.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="545.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.29%)</title><rect x="545.7" y="1075.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="548.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.57%)</title><rect x="549.1" y="1075.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="552.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1185022913.accept (2 samples, 0.57%)</title><rect x="549.1" y="1059.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (2 samples, 0.57%)</title><rect x="549.1" y="1043.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="552.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.57%)</title><rect x="549.1" y="1027.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="552.1" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.57%)</title><rect x="549.1" y="1011.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="552.1" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.57%)</title><rect x="549.1" y="995.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="552.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.57%)</title><rect x="555.9" y="1155.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="558.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.57%)</title><rect x="555.9" y="1139.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="558.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.57%)</title><rect x="555.9" y="1123.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="558.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.57%)</title><rect x="555.9" y="1107.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="558.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.15%)</title><rect x="562.7" y="1155.0" width="13.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="565.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.15%)</title><rect x="562.7" y="1139.0" width="13.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="565.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.29%)</title><rect x="576.3" y="1203.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="579.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.29%)</title><rect x="576.3" y="1187.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="579.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.29%)</title><rect x="576.3" y="1171.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="579.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.29%)</title><rect x="576.3" y="1155.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="579.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.29%)</title><rect x="576.3" y="1139.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="579.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.29%)</title><rect x="576.3" y="1123.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="579.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.29%)</title><rect x="576.3" y="1107.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="579.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.29%)</title><rect x="576.3" y="1091.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="579.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.29%)</title><rect x="576.3" y="1075.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="579.3" y="1086.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.29%)</title><rect x="576.3" y="1059.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="579.3" y="1070.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.29%)</title><rect x="576.3" y="1043.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="579.3" y="1054.0"></text>
</g>
<g>
<title>start_thread (180 samples, 51.72%)</title><rect x="579.7" y="1203.0" width="610.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="582.7" y="1214.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (180 samples, 51.72%)</title><rect x="579.7" y="1187.0" width="610.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="582.7" y="1198.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 3.16%)</title><rect x="579.7" y="1171.0" width="37.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="582.7" y="1182.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 3.16%)</title><rect x="579.7" y="1155.0" width="37.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="582.7" y="1166.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 2.01%)</title><rect x="579.7" y="1139.0" width="23.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="582.7" y="1150.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 1.72%)</title><rect x="579.7" y="1123.0" width="20.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="582.7" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.57%)</title><rect x="589.8" y="1107.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="592.8" y="1118.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.29%)</title><rect x="596.6" y="1107.0" width="3.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="599.6" y="1118.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.29%)</title><rect x="600.0" y="1123.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="603.0" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.57%)</title><rect x="603.4" y="1139.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="606.4" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.57%)</title><rect x="603.4" y="1123.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="606.4" y="1134.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.57%)</title><rect x="603.4" y="1107.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="606.4" y="1118.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.29%)</title><rect x="606.8" y="1091.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="609.8" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.57%)</title><rect x="610.2" y="1139.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="613.2" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.57%)</title><rect x="610.2" y="1123.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="613.2" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.57%)</title><rect x="610.2" y="1107.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="613.2" y="1118.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.57%)</title><rect x="610.2" y="1091.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="613.2" y="1102.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.57%)</title><rect x="610.2" y="1075.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="613.2" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.57%)</title><rect x="610.2" y="1059.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="613.2" y="1070.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.57%)</title><rect x="610.2" y="1043.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="613.2" y="1054.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.29%)</title><rect x="610.2" y="1027.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="613.2" y="1038.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.29%)</title><rect x="613.6" y="1027.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="616.6" y="1038.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.29%)</title><rect x="613.6" y="1011.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="616.6" y="1022.0"></text>
</g>
<g>
<title>JavaThread::run() (169 samples, 48.56%)</title><rect x="617.0" y="1171.0" width="573.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="620.0" y="1182.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (169 samples, 48.56%)</title><rect x="617.0" y="1155.0" width="573.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="620.0" y="1166.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (169 samples, 48.56%)</title><rect x="617.0" y="1139.0" width="573.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="620.0" y="1150.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (169 samples, 48.56%)</title><rect x="617.0" y="1123.0" width="573.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="620.0" y="1134.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (167 samples, 47.99%)</title><rect x="617.0" y="1107.0" width="566.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="620.0" y="1118.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (167 samples, 47.99%)</title><rect x="617.0" y="1091.0" width="566.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="620.0" y="1102.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 12.64%)</title><rect x="617.0" y="1075.0" width="149.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="620.0" y="1086.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.86%)</title><rect x="617.0" y="1059.0" width="10.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="620.0" y="1070.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.57%)</title><rect x="617.0" y="1043.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="620.0" y="1054.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.29%)</title><rect x="620.3" y="1027.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="623.3" y="1038.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.29%)</title><rect x="620.3" y="1011.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="623.3" y="1022.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.29%)</title><rect x="623.7" y="1043.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="626.7" y="1054.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.29%)</title><rect x="623.7" y="1027.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="626.7" y="1038.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.29%)</title><rect x="623.7" y="1011.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="626.7" y="1022.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.29%)</title><rect x="623.7" y="995.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="626.7" y="1006.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.29%)</title><rect x="623.7" y="979.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="626.7" y="990.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.29%)</title><rect x="627.1" y="1059.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="630.1" y="1070.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.29%)</title><rect x="627.1" y="1043.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="630.1" y="1054.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.29%)</title><rect x="627.1" y="1027.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="630.1" y="1038.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="627.1" y="1011.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="630.1" y="1022.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.44%)</title><rect x="630.5" y="1059.0" width="17.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="633.5" y="1070.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.29%)</title><rect x="630.5" y="1043.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="633.5" y="1054.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.15%)</title><rect x="633.9" y="1043.0" width="13.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="636.9" y="1054.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.86%)</title><rect x="633.9" y="1027.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="636.9" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.29%)</title><rect x="644.1" y="1027.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="647.1" y="1038.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.29%)</title><rect x="644.1" y="1011.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="647.1" y="1022.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.29%)</title><rect x="644.1" y="995.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="647.1" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.86%)</title><rect x="647.5" y="1059.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="650.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.86%)</title><rect x="647.5" y="1043.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="650.5" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.57%)</title><rect x="647.5" y="1027.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="650.5" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.57%)</title><rect x="647.5" y="1011.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="650.5" y="1022.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (2 samples, 0.57%)</title><rect x="647.5" y="995.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="650.5" y="1006.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.29%)</title><rect x="650.9" y="979.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="653.9" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.29%)</title><rect x="654.3" y="1027.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="657.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 9.20%)</title><rect x="657.6" y="1059.0" width="108.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="660.6" y="1070.0">PhaseChaitin:..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.86%)</title><rect x="657.6" y="1043.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="660.6" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.57%)</title><rect x="667.8" y="1043.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="670.8" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="667.8" y="1027.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="670.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.29%)</title><rect x="671.2" y="1027.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="674.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.29%)</title><rect x="674.6" y="1043.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="677.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.29%)</title><rect x="674.6" y="1027.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="677.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.57%)</title><rect x="678.0" y="1043.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="681.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 2.59%)</title><rect x="684.8" y="1043.0" width="30.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="687.8" y="1054.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="691.6" y="1027.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="694.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.44%)</title><rect x="694.9" y="1027.0" width="17.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="697.9" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="705.1" y="1011.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="708.1" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.29%)</title><rect x="708.5" y="1011.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="711.5" y="1022.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.29%)</title><rect x="711.9" y="1027.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="714.9" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.57%)</title><rect x="715.3" y="1043.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="718.3" y="1054.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.29%)</title><rect x="718.7" y="1027.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="721.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.29%)</title><rect x="722.1" y="1043.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="725.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.57%)</title><rect x="725.5" y="1043.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="728.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.29%)</title><rect x="728.9" y="1027.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="731.9" y="1038.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.29%)</title><rect x="728.9" y="1011.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="731.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.29%)</title><rect x="732.2" y="1043.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="735.2" y="1054.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.29%)</title><rect x="732.2" y="1027.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="735.2" y="1038.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.57%)</title><rect x="735.6" y="1043.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="738.6" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.57%)</title><rect x="735.6" y="1027.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="738.6" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.57%)</title><rect x="735.6" y="1011.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="738.6" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.29%)</title><rect x="735.6" y="995.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="738.6" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="735.6" y="979.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="738.6" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.29%)</title><rect x="739.0" y="995.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.0" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="739.0" y="979.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="742.0" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.29%)</title><rect x="742.4" y="1043.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="745.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.29%)</title><rect x="745.8" y="1043.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="748.8" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="745.8" y="1027.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="748.8" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.86%)</title><rect x="749.2" y="1043.0" width="10.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="752.2" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.57%)</title><rect x="752.6" y="1027.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="755.6" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="756.0" y="1011.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="759.0" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.57%)</title><rect x="759.4" y="1043.0" width="6.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="762.4" y="1054.0"></text>
</g>
<g>
<title>Compile::Optimize() (116 samples, 33.33%)</title><rect x="766.1" y="1075.0" width="393.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="769.1" y="1086.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.57%)</title><rect x="766.1" y="1059.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="769.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.57%)</title><rect x="766.1" y="1043.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="769.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="766.1" y="1027.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="769.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.29%)</title><rect x="766.1" y="1011.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="769.1" y="1022.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.29%)</title><rect x="766.1" y="995.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="769.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.29%)</title><rect x="769.5" y="1027.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="772.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="769.5" y="1011.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="772.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="769.5" y="995.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="772.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="769.5" y="979.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="772.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="769.5" y="963.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="772.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="769.5" y="947.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="772.5" y="958.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.29%)</title><rect x="769.5" y="931.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="772.5" y="942.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.29%)</title><rect x="772.9" y="1059.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="775.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (103 samples, 29.60%)</title><rect x="776.3" y="1059.0" width="349.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.3" y="1070.0">PhaseIdealLoop::build_and_optimize(bool, bool)</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.57%)</title><rect x="776.3" y="1043.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="779.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.57%)</title><rect x="783.1" y="1043.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="786.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.29%)</title><rect x="783.1" y="1027.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="786.1" y="1038.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.29%)</title><rect x="786.5" y="1027.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="789.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (95 samples, 27.30%)</title><rect x="789.9" y="1043.0" width="322.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="792.9" y="1054.0">PhaseIdealLoop::build_loop_late(VectorSet&amp;, ..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (95 samples, 27.30%)</title><rect x="789.9" y="1027.0" width="322.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="792.9" y="1038.0">PhaseIdealLoop::build_loop_late_post(Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 1.44%)</title><rect x="789.9" y="1011.0" width="16.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="792.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (90 samples, 25.86%)</title><rect x="806.8" y="1011.0" width="305.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="809.8" y="1022.0">PhaseIdealLoop::get_late_ctrl(Node*, Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.29%)</title><rect x="1040.8" y="995.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1043.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.29%)</title><rect x="1040.8" y="979.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1043.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (20 samples, 5.75%)</title><rect x="1044.2" y="995.0" width="67.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.2" y="1006.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.29%)</title><rect x="1112.0" y="1043.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.57%)</title><rect x="1115.4" y="1043.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.29%)</title><rect x="1115.4" y="1027.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.29%)</title><rect x="1118.8" y="1027.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.29%)</title><rect x="1118.8" y="1011.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.8" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.29%)</title><rect x="1118.8" y="995.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.8" y="1006.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.29%)</title><rect x="1118.8" y="979.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.8" y="990.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.29%)</title><rect x="1118.8" y="963.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.8" y="974.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.29%)</title><rect x="1118.8" y="947.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.8" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.29%)</title><rect x="1118.8" y="931.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.8" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.29%)</title><rect x="1118.8" y="915.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.8" y="926.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.29%)</title><rect x="1118.8" y="899.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.8" y="910.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.29%)</title><rect x="1122.2" y="1043.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.29%)</title><rect x="1125.6" y="1059.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.6" y="1070.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.29%)</title><rect x="1125.6" y="1043.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 2.30%)</title><rect x="1129.0" y="1059.0" width="27.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.0" y="1070.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 2.30%)</title><rect x="1129.0" y="1043.0" width="27.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.0" y="1054.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1132.4" y="1027.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.4" y="1038.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.29%)</title><rect x="1132.4" y="1011.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.4" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.29%)</title><rect x="1132.4" y="995.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.4" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1132.4" y="979.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.4" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.29%)</title><rect x="1135.7" y="1027.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.86%)</title><rect x="1139.1" y="1027.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.1" y="1038.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.29%)</title><rect x="1145.9" y="1011.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.9" y="1022.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.29%)</title><rect x="1149.3" y="1027.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.3" y="1038.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1152.7" y="1027.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.7" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.29%)</title><rect x="1152.7" y="1011.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.7" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1152.7" y="995.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.7" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1152.7" y="979.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.7" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.29%)</title><rect x="1152.7" y="963.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.7" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1152.7" y="947.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.7" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.29%)</title><rect x="1156.1" y="1059.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.1" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.29%)</title><rect x="1156.1" y="1043.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.1" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.29%)</title><rect x="1156.1" y="1027.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.1" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="1156.1" y="1011.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.1" y="1022.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.29%)</title><rect x="1156.1" y="995.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.1" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.72%)</title><rect x="1159.5" y="1075.0" width="20.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.72%)</title><rect x="1159.5" y="1059.0" width="20.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.72%)</title><rect x="1159.5" y="1043.0" width="20.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.72%)</title><rect x="1159.5" y="1027.0" width="20.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.72%)</title><rect x="1159.5" y="1011.0" width="20.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.5" y="1022.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.29%)</title><rect x="1159.5" y="995.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.5" y="1006.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.29%)</title><rect x="1159.5" y="979.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.5" y="990.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.29%)</title><rect x="1159.5" y="963.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.5" y="974.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.29%)</title><rect x="1159.5" y="947.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="958.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="1159.5" y="931.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.44%)</title><rect x="1162.9" y="995.0" width="16.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.9" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.44%)</title><rect x="1162.9" y="979.0" width="16.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.9" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.44%)</title><rect x="1162.9" y="963.0" width="16.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.44%)</title><rect x="1162.9" y="947.0" width="16.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.44%)</title><rect x="1162.9" y="931.0" width="16.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.44%)</title><rect x="1162.9" y="915.0" width="16.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.44%)</title><rect x="1162.9" y="899.0" width="16.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.9" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.9" y="883.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1162.9" y="867.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1162.9" y="851.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1162.9" y="835.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1162.9" y="819.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1162.9" y="803.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.9" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.9" y="787.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1162.9" y="771.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1162.9" y="755.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1162.9" y="739.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1162.9" y="723.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1162.9" y="707.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.9" y="691.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1162.9" y="675.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1162.9" y="659.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1162.9" y="643.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1162.9" y="627.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1162.9" y="611.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.9" y="622.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1162.9" y="595.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.9" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.15%)</title><rect x="1166.3" y="883.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.3" y="894.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.29%)</title><rect x="1166.3" y="867.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.3" y="878.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, long) (1 samples, 0.29%)</title><rect x="1166.3" y="851.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.3" y="862.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.29%)</title><rect x="1166.3" y="835.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.86%)</title><rect x="1169.7" y="867.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.86%)</title><rect x="1169.7" y="851.0" width="10.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.86%)</title><rect x="1169.7" y="835.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.86%)</title><rect x="1169.7" y="819.0" width="10.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.86%)</title><rect x="1169.7" y="803.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.86%)</title><rect x="1169.7" y="787.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.86%)</title><rect x="1169.7" y="771.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.7" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.86%)</title><rect x="1169.7" y="755.0" width="10.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.86%)</title><rect x="1169.7" y="739.0" width="10.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.86%)</title><rect x="1169.7" y="723.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.86%)</title><rect x="1169.7" y="707.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.86%)</title><rect x="1169.7" y="691.0" width="10.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.86%)</title><rect x="1169.7" y="675.0" width="10.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.86%)</title><rect x="1169.7" y="659.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1169.7" y="643.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1169.7" y="627.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1169.7" y="611.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.7" y="595.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.7" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.7" y="579.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.7" y="563.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1169.7" y="547.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1169.7" y="531.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1169.7" y="515.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1169.7" y="499.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.7" y="483.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.7" y="467.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1169.7" y="451.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1169.7" y="435.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1169.7" y="419.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1169.7" y="403.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.7" y="387.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.7" y="371.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1169.7" y="355.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1169.7" y="339.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1169.7" y="323.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1169.7" y="307.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.7" y="291.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.7" y="302.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1169.7" y="275.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="286.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1169.7" y="259.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="270.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.29%)</title><rect x="1169.7" y="243.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.7" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.29%)</title><rect x="1169.7" y="227.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.7" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.29%)</title><rect x="1169.7" y="211.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1169.7" y="195.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.7" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1169.7" y="179.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.7" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.29%)</title><rect x="1169.7" y="163.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.29%)</title><rect x="1169.7" y="147.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.29%)</title><rect x="1169.7" y="131.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.7" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.29%)</title><rect x="1169.7" y="115.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.7" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.29%)</title><rect x="1169.7" y="99.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="110.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.29%)</title><rect x="1169.7" y="83.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.7" y="94.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.29%)</title><rect x="1169.7" y="67.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.7" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.29%)</title><rect x="1169.7" y="51.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.7" y="62.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::push(Metadata* const&amp;) (1 samples, 0.29%)</title><rect x="1169.7" y="35.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="46.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.29%)</title><rect x="1173.0" y="595.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.29%)</title><rect x="1176.4" y="643.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.29%)</title><rect x="1176.4" y="627.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.4" y="638.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.29%)</title><rect x="1176.4" y="611.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.4" y="622.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.29%)</title><rect x="1179.8" y="1075.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="1086.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.29%)</title><rect x="1179.8" y="1059.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.57%)</title><rect x="1183.2" y="1107.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="1118.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.57%)</title><rect x="1183.2" y="1091.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.57%)</title><rect x="1183.2" y="1075.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.29%)</title><rect x="1183.2" y="1059.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="1070.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.29%)</title><rect x="1183.2" y="1043.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="1054.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.29%)</title><rect x="1183.2" y="1027.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="1038.0"></text>
</g>
<g>
<title>Return::visit(InstructionVisitor*) (1 samples, 0.29%)</title><rect x="1183.2" y="1011.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="1022.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.29%)</title><rect x="1186.6" y="1059.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.6" y="1070.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.29%)</title><rect x="1186.6" y="1043.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.6" y="1054.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.29%)</title><rect x="1186.6" y="1027.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.6" y="1038.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.29%)</title><rect x="1186.6" y="1011.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.6" y="1022.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.29%)</title><rect x="1186.6" y="995.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.6" y="1006.0"></text>
</g>
</g>
</svg>
