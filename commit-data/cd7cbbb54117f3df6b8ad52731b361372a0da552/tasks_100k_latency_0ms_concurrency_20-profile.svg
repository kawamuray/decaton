<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1157"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1157"> </text>
<g id="frames">
<g>
<title>all (182 samples, 100.00%)</title><rect x="10.0" y="1123.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1134.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.55%)</title><rect x="10.0" y="1107.0" width="6.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.55%)</title><rect x="10.0" y="1091.0" width="6.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.55%)</title><rect x="16.5" y="1107.0" width="6.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="19.5" y="1118.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.55%)</title><rect x="16.5" y="1091.0" width="6.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="19.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (37 samples, 20.33%)</title><rect x="23.0" y="1107.0" width="239.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.0" y="1118.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.55%)</title><rect x="23.0" y="1091.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.55%)</title><rect x="23.0" y="1075.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.55%)</title><rect x="23.0" y="1059.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (1 samples, 0.55%)</title><rect x="23.0" y="1043.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$293/600550056.accept (1 samples, 0.55%)</title><rect x="23.0" y="1027.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateLastSeenEpochIfNewer (1 samples, 0.55%)</title><rect x="23.0" y="1011.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/667447085.linkToTargetMethod (1 samples, 0.55%)</title><rect x="23.0" y="995.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (36 samples, 19.78%)</title><rect x="29.5" y="1091.0" width="233.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.5" y="1102.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.55%)</title><rect x="29.5" y="1075.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.55%)</title><rect x="29.5" y="1059.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/818403214.accept (1 samples, 0.55%)</title><rect x="29.5" y="1043.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.55%)</title><rect x="29.5" y="1027.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.55%)</title><rect x="29.5" y="1011.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.5" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.55%)</title><rect x="29.5" y="995.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.5" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.55%)</title><rect x="29.5" y="979.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.5" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.55%)</title><rect x="29.5" y="963.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 1.10%)</title><rect x="35.9" y="1075.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 1.10%)</title><rect x="35.9" y="1059.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.55%)</title><rect x="35.9" y="1043.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.55%)</title><rect x="35.9" y="1027.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.&lt;init&gt; (1 samples, 0.55%)</title><rect x="35.9" y="1011.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.55%)</title><rect x="42.4" y="1043.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.55%)</title><rect x="42.4" y="1027.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.55%)</title><rect x="42.4" y="1011.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.55%)</title><rect x="42.4" y="995.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.55%)</title><rect x="42.4" y="979.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.55%)</title><rect x="42.4" y="963.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.55%)</title><rect x="42.4" y="947.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.55%)</title><rect x="42.4" y="931.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/751119549.test (1 samples, 0.55%)</title><rect x="42.4" y="915.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.4" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (22 samples, 12.09%)</title><rect x="48.9" y="1075.0" width="142.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.9" y="1086.0">java/lang/Iterable..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1992302078.accept (20 samples, 10.99%)</title><rect x="48.9" y="1059.0" width="129.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.9" y="1070.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (20 samples, 10.99%)</title><rect x="48.9" y="1043.0" width="129.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.9" y="1054.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 7.14%)</title><rect x="48.9" y="1027.0" width="84.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.9" y="1038.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 7.14%)</title><rect x="48.9" y="1011.0" width="84.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.9" y="1022.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 7.14%)</title><rect x="48.9" y="995.0" width="84.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.9" y="1006.0">com/lineco..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 7.14%)</title><rect x="48.9" y="979.0" width="84.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.9" y="990.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 7.14%)</title><rect x="48.9" y="963.0" width="84.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.9" y="974.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 7.14%)</title><rect x="48.9" y="947.0" width="84.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.9" y="958.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 6.04%)</title><rect x="48.9" y="931.0" width="71.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.9" y="942.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.55%)</title><rect x="48.9" y="915.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.55%)</title><rect x="48.9" y="899.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.55%)</title><rect x="48.9" y="883.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.55%)</title><rect x="55.4" y="915.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.55%)</title><rect x="55.4" y="899.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.55%)</title><rect x="55.4" y="883.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 4.95%)</title><rect x="61.9" y="915.0" width="58.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.9" y="926.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 4.95%)</title><rect x="61.9" y="899.0" width="58.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.9" y="910.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 4.40%)</title><rect x="61.9" y="883.0" width="51.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.9" y="894.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 4.40%)</title><rect x="61.9" y="867.0" width="51.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.9" y="878.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (8 samples, 4.40%)</title><rect x="61.9" y="851.0" width="51.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.9" y="862.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 3.85%)</title><rect x="68.4" y="835.0" width="45.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="71.4" y="846.0">Unsa..</text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 2.75%)</title><rect x="68.4" y="819.0" width="32.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="71.4" y="830.0">__..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.10%)</title><rect x="100.8" y="819.0" width="12.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="103.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.55%)</title><rect x="113.7" y="883.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="116.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.10%)</title><rect x="120.2" y="931.0" width="13.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 1.10%)</title><rect x="120.2" y="915.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 1.65%)</title><rect x="133.2" y="1027.0" width="19.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="136.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 1.65%)</title><rect x="133.2" y="1011.0" width="19.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 2.20%)</title><rect x="152.6" y="1027.0" width="26.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="155.6" y="1038.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.20%)</title><rect x="152.6" y="1011.0" width="26.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="155.6" y="1022.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.65%)</title><rect x="152.6" y="995.0" width="19.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.6" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.55%)</title><rect x="172.1" y="995.0" width="6.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="175.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 1.10%)</title><rect x="178.6" y="1059.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 1.10%)</title><rect x="178.6" y="1043.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 1.10%)</title><rect x="178.6" y="1027.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 1.10%)</title><rect x="178.6" y="1011.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (2 samples, 1.10%)</title><rect x="178.6" y="995.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 1.10%)</title><rect x="178.6" y="979.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 6.04%)</title><rect x="191.5" y="1075.0" width="71.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="194.5" y="1086.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 6.04%)</title><rect x="191.5" y="1059.0" width="71.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="194.5" y="1070.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.20%)</title><rect x="191.5" y="1043.0" width="26.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.5" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.20%)</title><rect x="191.5" y="1027.0" width="26.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.5" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.20%)</title><rect x="191.5" y="1011.0" width="26.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.5" y="1022.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.65%)</title><rect x="191.5" y="995.0" width="19.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="194.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.65%)</title><rect x="191.5" y="979.0" width="19.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.65%)</title><rect x="191.5" y="963.0" width="19.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="194.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.55%)</title><rect x="198.0" y="947.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.55%)</title><rect x="198.0" y="931.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.55%)</title><rect x="198.0" y="915.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.55%)</title><rect x="204.5" y="947.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.55%)</title><rect x="204.5" y="931.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.55%)</title><rect x="204.5" y="915.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="207.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.compressionType (1 samples, 0.55%)</title><rect x="204.5" y="899.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.5" y="910.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.55%)</title><rect x="204.5" y="883.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.55%)</title><rect x="211.0" y="995.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$FetchStates$2.hasValidPosition (1 samples, 0.55%)</title><rect x="211.0" y="979.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.10%)</title><rect x="217.5" y="1043.0" width="12.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.10%)</title><rect x="217.5" y="1027.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.10%)</title><rect x="217.5" y="1011.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 1.10%)</title><rect x="217.5" y="995.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 1.10%)</title><rect x="217.5" y="979.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="220.5" y="990.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 1.10%)</title><rect x="217.5" y="963.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 1.10%)</title><rect x="217.5" y="947.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.10%)</title><rect x="217.5" y="931.0" width="12.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.55%)</title><rect x="224.0" y="915.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (3 samples, 1.65%)</title><rect x="230.4" y="1043.0" width="19.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (2 samples, 1.10%)</title><rect x="236.9" y="1027.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (2 samples, 1.10%)</title><rect x="236.9" y="1011.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (1 samples, 0.55%)</title><rect x="243.4" y="995.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.10%)</title><rect x="249.9" y="1043.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.10%)</title><rect x="249.9" y="1027.0" width="13.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="252.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.10%)</title><rect x="249.9" y="1011.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 1.10%)</title><rect x="249.9" y="995.0" width="13.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 1.10%)</title><rect x="249.9" y="979.0" width="13.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 1.10%)</title><rect x="249.9" y="963.0" width="13.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.55%)</title><rect x="256.4" y="947.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.55%)</title><rect x="256.4" y="931.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.55%)</title><rect x="256.4" y="915.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.4" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.55%)</title><rect x="256.4" y="899.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.4" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.55%)</title><rect x="256.4" y="883.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="259.4" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.55%)</title><rect x="256.4" y="867.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="259.4" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.55%)</title><rect x="256.4" y="851.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.4" y="862.0"></text>
</g>
<g>
<title>java/nio/Bits.copyToArray (1 samples, 0.55%)</title><rect x="256.4" y="835.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.4" y="846.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.55%)</title><rect x="256.4" y="819.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.4" y="830.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.55%)</title><rect x="256.4" y="803.0" width="6.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="259.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (65 samples, 35.71%)</title><rect x="262.9" y="1107.0" width="421.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.9" y="1118.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (65 samples, 35.71%)</title><rect x="262.9" y="1091.0" width="421.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.9" y="1102.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (65 samples, 35.71%)</title><rect x="262.9" y="1075.0" width="421.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.9" y="1086.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1529316903.run (44 samples, 24.18%)</title><rect x="282.3" y="1059.0" width="285.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.3" y="1070.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (44 samples, 24.18%)</title><rect x="282.3" y="1043.0" width="285.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.3" y="1054.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (44 samples, 24.18%)</title><rect x="282.3" y="1027.0" width="285.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.3" y="1038.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (44 samples, 24.18%)</title><rect x="282.3" y="1011.0" width="285.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.3" y="1022.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (9 samples, 4.95%)</title><rect x="282.3" y="995.0" width="58.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.3" y="1006.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (9 samples, 4.95%)</title><rect x="282.3" y="979.0" width="58.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.3" y="990.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (9 samples, 4.95%)</title><rect x="282.3" y="963.0" width="58.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.3" y="974.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.40%)</title><rect x="288.8" y="947.0" width="51.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.8" y="958.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.40%)</title><rect x="288.8" y="931.0" width="51.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.8" y="942.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 4.40%)</title><rect x="288.8" y="915.0" width="51.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.8" y="926.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.55%)</title><rect x="288.8" y="899.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.55%)</title><rect x="288.8" y="883.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="291.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.55%)</title><rect x="288.8" y="867.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.55%)</title><rect x="288.8" y="851.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.55%)</title><rect x="288.8" y="835.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 3.85%)</title><rect x="295.3" y="899.0" width="45.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.3" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.10%)</title><rect x="295.3" y="883.0" width="12.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="298.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.10%)</title><rect x="295.3" y="867.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 1.10%)</title><rect x="295.3" y="851.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 1.10%)</title><rect x="295.3" y="835.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.55%)</title><rect x="301.8" y="819.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="304.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.55%)</title><rect x="308.2" y="883.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.55%)</title><rect x="308.2" y="867.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 2.20%)</title><rect x="314.7" y="883.0" width="26.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.7" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.20%)</title><rect x="314.7" y="867.0" width="26.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.7" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.20%)</title><rect x="314.7" y="851.0" width="26.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.7" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.20%)</title><rect x="314.7" y="835.0" width="26.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.7" y="846.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 1.10%)</title><rect x="321.2" y="819.0" width="13.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="324.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 1.10%)</title><rect x="321.2" y="803.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.10%)</title><rect x="321.2" y="787.0" width="13.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="324.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.10%)</title><rect x="321.2" y="771.0" width="13.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="324.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 1.10%)</title><rect x="321.2" y="755.0" width="13.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="324.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.55%)</title><rect x="334.2" y="819.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.55%)</title><rect x="334.2" y="803.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="337.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (35 samples, 19.23%)</title><rect x="340.7" y="995.0" width="226.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.7" y="1006.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (8 samples, 4.40%)</title><rect x="353.6" y="979.0" width="51.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.6" y="990.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (8 samples, 4.40%)</title><rect x="353.6" y="963.0" width="51.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.6" y="974.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (7 samples, 3.85%)</title><rect x="360.1" y="947.0" width="45.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="363.1" y="958.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.20%)</title><rect x="379.6" y="931.0" width="25.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="382.6" y="942.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 2.20%)</title><rect x="379.6" y="915.0" width="25.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="382.6" y="926.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 2.20%)</title><rect x="379.6" y="899.0" width="25.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.6" y="910.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.55%)</title><rect x="399.0" y="883.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (15 samples, 8.24%)</title><rect x="405.5" y="979.0" width="97.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="408.5" y="990.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (15 samples, 8.24%)</title><rect x="405.5" y="963.0" width="97.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="408.5" y="974.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 2.75%)</title><rect x="412.0" y="947.0" width="32.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="415.0" y="958.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.75%)</title><rect x="412.0" y="931.0" width="32.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="415.0" y="942.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.65%)</title><rect x="418.5" y="915.0" width="19.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="421.5" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.55%)</title><rect x="431.4" y="899.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="434.4" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.55%)</title><rect x="431.4" y="883.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="434.4" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.55%)</title><rect x="437.9" y="915.0" width="6.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="440.9" y="926.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.55%)</title><rect x="444.4" y="947.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="447.4" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.55%)</title><rect x="444.4" y="931.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="447.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.topic (1 samples, 0.55%)</title><rect x="450.9" y="947.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="453.9" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 3.85%)</title><rect x="457.4" y="947.0" width="45.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="460.4" y="958.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 3.85%)</title><rect x="457.4" y="931.0" width="45.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="460.4" y="942.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 3.85%)</title><rect x="457.4" y="915.0" width="45.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="460.4" y="926.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 2.75%)</title><rect x="470.3" y="899.0" width="32.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="473.3" y="910.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 2.75%)</title><rect x="470.3" y="883.0" width="32.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="473.3" y="894.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.55%)</title><rect x="489.8" y="867.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.55%)</title><rect x="496.3" y="867.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 2.75%)</title><rect x="502.7" y="979.0" width="32.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.7" y="990.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 2.75%)</title><rect x="502.7" y="963.0" width="32.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="505.7" y="974.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1600718929.process (1 samples, 0.55%)</title><rect x="502.7" y="947.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="505.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.55%)</title><rect x="502.7" y="931.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="505.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.55%)</title><rect x="502.7" y="915.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="505.7" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.55%)</title><rect x="502.7" y="899.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.7" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.55%)</title><rect x="502.7" y="883.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="505.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.55%)</title><rect x="502.7" y="867.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="505.7" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.55%)</title><rect x="502.7" y="851.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="505.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.55%)</title><rect x="509.2" y="947.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="512.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.10%)</title><rect x="515.7" y="947.0" width="13.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="518.7" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.10%)</title><rect x="515.7" y="931.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="518.7" y="942.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.55%)</title><rect x="515.7" y="915.0" width="6.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="518.7" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.55%)</title><rect x="522.2" y="915.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="525.2" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.55%)</title><rect x="528.7" y="947.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="531.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.75%)</title><rect x="535.2" y="979.0" width="32.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="538.2" y="990.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 2.75%)</title><rect x="535.2" y="963.0" width="32.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="538.2" y="974.0">ja..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.55%)</title><rect x="541.6" y="947.0" width="6.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="544.6" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.55%)</title><rect x="541.6" y="931.0" width="6.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="544.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.65%)</title><rect x="548.1" y="947.0" width="19.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="551.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/671513420.accept (3 samples, 1.65%)</title><rect x="548.1" y="931.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="551.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$0 (3 samples, 1.65%)</title><rect x="548.1" y="915.0" width="19.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="551.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 1.65%)</title><rect x="548.1" y="899.0" width="19.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="551.1" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.65%)</title><rect x="548.1" y="883.0" width="19.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="551.1" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 1.65%)</title><rect x="548.1" y="867.0" width="19.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="551.1" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.55%)</title><rect x="561.1" y="851.0" width="6.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="564.1" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.55%)</title><rect x="561.1" y="835.0" width="6.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="564.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.55%)</title><rect x="567.6" y="1059.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="570.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.55%)</title><rect x="567.6" y="1043.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="570.6" y="1054.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.55%)</title><rect x="567.6" y="1027.0" width="6.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="570.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.55%)</title><rect x="574.1" y="1059.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="577.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.55%)</title><rect x="574.1" y="1043.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="577.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (1 samples, 0.55%)</title><rect x="574.1" y="1027.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="577.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 8.79%)</title><rect x="580.5" y="1059.0" width="103.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="583.5" y="1070.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 8.79%)</title><rect x="580.5" y="1043.0" width="103.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.5" y="1054.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 7.69%)</title><rect x="587.0" y="1027.0" width="90.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.0" y="1038.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.55%)</title><rect x="587.0" y="1011.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="590.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.55%)</title><rect x="587.0" y="995.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="590.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.55%)</title><rect x="587.0" y="979.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="590.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 7.14%)</title><rect x="593.5" y="1011.0" width="84.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="596.5" y="1022.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (13 samples, 7.14%)</title><rect x="593.5" y="995.0" width="84.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="596.5" y="1006.0">sun/misc/U..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.55%)</title><rect x="600.0" y="979.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="603.0" y="990.0"></text>
</g>
<g>
<title>Unsafe_Park (11 samples, 6.04%)</title><rect x="606.5" y="979.0" width="71.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="609.5" y="990.0">Unsafe_P..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.55%)</title><rect x="613.0" y="963.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="616.0" y="974.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.55%)</title><rect x="619.5" y="963.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="622.5" y="974.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 1.65%)</title><rect x="625.9" y="963.0" width="19.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="628.9" y="974.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.55%)</title><rect x="638.9" y="947.0" width="6.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="641.9" y="958.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.55%)</title><rect x="645.4" y="963.0" width="6.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="648.4" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.20%)</title><rect x="651.9" y="963.0" width="25.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="654.9" y="974.0">_..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.55%)</title><rect x="677.8" y="1027.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="680.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.55%)</title><rect x="677.8" y="1011.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="680.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.55%)</title><rect x="677.8" y="995.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="680.8" y="1006.0"></text>
</g>
<g>
<title>start_thread (78 samples, 42.86%)</title><rect x="684.3" y="1107.0" width="505.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="687.3" y="1118.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (78 samples, 42.86%)</title><rect x="684.3" y="1091.0" width="505.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="687.3" y="1102.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 8.79%)</title><rect x="684.3" y="1075.0" width="103.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="687.3" y="1086.0">GangWorker::..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 2.20%)</title><rect x="684.3" y="1059.0" width="25.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="687.3" y="1070.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.20%)</title><rect x="684.3" y="1043.0" width="25.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="687.3" y="1054.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 1.65%)</title><rect x="684.3" y="1027.0" width="19.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="687.3" y="1038.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.55%)</title><rect x="703.7" y="1027.0" width="6.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="706.7" y="1038.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (12 samples, 6.59%)</title><rect x="710.2" y="1059.0" width="77.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="713.2" y="1070.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 5.49%)</title><rect x="710.2" y="1043.0" width="64.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="713.2" y="1054.0">G1ParEv..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.55%)</title><rect x="710.2" y="1027.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="713.2" y="1038.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.20%)</title><rect x="716.7" y="1027.0" width="25.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="719.7" y="1038.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.55%)</title><rect x="736.2" y="1011.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="739.2" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.55%)</title><rect x="736.2" y="995.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="739.2" y="1006.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.55%)</title><rect x="736.2" y="979.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="739.2" y="990.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 2.20%)</title><rect x="742.6" y="1027.0" width="26.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="745.6" y="1038.0">G..</text>
</g>
<g>
<title>SpinPause (1 samples, 0.55%)</title><rect x="768.6" y="1027.0" width="6.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="771.6" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.55%)</title><rect x="775.1" y="1043.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="778.1" y="1054.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.55%)</title><rect x="775.1" y="1027.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="778.1" y="1038.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.55%)</title><rect x="775.1" y="1011.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="778.1" y="1022.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.55%)</title><rect x="775.1" y="995.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="778.1" y="1006.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.55%)</title><rect x="775.1" y="979.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.1" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.55%)</title><rect x="775.1" y="963.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="778.1" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.55%)</title><rect x="781.5" y="1043.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="784.5" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.55%)</title><rect x="781.5" y="1027.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="784.5" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.55%)</title><rect x="781.5" y="1011.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="784.5" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.55%)</title><rect x="781.5" y="995.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.5" y="1006.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.55%)</title><rect x="781.5" y="979.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="784.5" y="990.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.55%)</title><rect x="781.5" y="963.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="784.5" y="974.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.55%)</title><rect x="781.5" y="947.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="784.5" y="958.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (62 samples, 34.07%)</title><rect x="788.0" y="1075.0" width="402.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="791.0" y="1086.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (62 samples, 34.07%)</title><rect x="788.0" y="1059.0" width="402.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="791.0" y="1070.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (62 samples, 34.07%)</title><rect x="788.0" y="1043.0" width="402.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="791.0" y="1054.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (59 samples, 32.42%)</title><rect x="788.0" y="1027.0" width="382.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="791.0" y="1038.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.55%)</title><rect x="788.0" y="1011.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="791.0" y="1022.0"></text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.55%)</title><rect x="788.0" y="995.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="791.0" y="1006.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.55%)</title><rect x="788.0" y="979.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="791.0" y="990.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (58 samples, 31.87%)</title><rect x="794.5" y="1011.0" width="376.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="797.5" y="1022.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, in..</text>
</g>
<g>
<title>Compile::Code_Gen() (31 samples, 17.03%)</title><rect x="794.5" y="995.0" width="201.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="797.5" y="1006.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.10%)</title><rect x="794.5" y="979.0" width="13.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="797.5" y="990.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.55%)</title><rect x="794.5" y="963.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="797.5" y="974.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.55%)</title><rect x="801.0" y="963.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="804.0" y="974.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.55%)</title><rect x="801.0" y="947.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="804.0" y="958.0"></text>
</g>
<g>
<title>jmpDirNode::short_branch_version(Compile*) (1 samples, 0.55%)</title><rect x="801.0" y="931.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="804.0" y="942.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.55%)</title><rect x="801.0" y="915.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="804.0" y="926.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.10%)</title><rect x="807.5" y="979.0" width="12.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="810.5" y="990.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.55%)</title><rect x="807.5" y="963.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="810.5" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.55%)</title><rect x="807.5" y="947.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="810.5" y="958.0"></text>
</g>
<g>
<title>PhaseRegAlloc::reg2offset(int) const (1 samples, 0.55%)</title><rect x="814.0" y="963.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="817.0" y="974.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.65%)</title><rect x="820.4" y="979.0" width="19.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="823.4" y="990.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.55%)</title><rect x="820.4" y="963.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="823.4" y="974.0"></text>
</g>
<g>
<title>LoadStoreNode::ideal_reg() const (1 samples, 0.55%)</title><rect x="826.9" y="963.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.9" y="974.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.55%)</title><rect x="833.4" y="963.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="836.4" y="974.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.55%)</title><rect x="833.4" y="947.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.4" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.65%)</title><rect x="839.9" y="979.0" width="19.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="842.9" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.65%)</title><rect x="839.9" y="963.0" width="19.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="842.9" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.55%)</title><rect x="839.9" y="947.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="842.9" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.55%)</title><rect x="839.9" y="931.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="842.9" y="942.0"></text>
</g>
<g>
<title>compN_rReg_imm_klassNode::pipeline() const (1 samples, 0.55%)</title><rect x="839.9" y="915.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="842.9" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.10%)</title><rect x="846.4" y="947.0" width="12.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="849.4" y="958.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 1.10%)</title><rect x="846.4" y="931.0" width="12.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="849.4" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 11.54%)</title><rect x="859.3" y="979.0" width="136.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="862.3" y="990.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.55%)</title><rect x="859.3" y="963.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="862.3" y="974.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.55%)</title><rect x="865.8" y="963.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="868.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.10%)</title><rect x="872.3" y="963.0" width="13.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="875.3" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.55%)</title><rect x="872.3" y="947.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.3" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.55%)</title><rect x="878.8" y="947.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="881.8" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.65%)</title><rect x="885.3" y="963.0" width="19.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="888.3" y="974.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.55%)</title><rect x="898.2" y="947.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="901.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.65%)</title><rect x="904.7" y="963.0" width="19.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="907.7" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.55%)</title><rect x="911.2" y="947.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="914.2" y="958.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.55%)</title><rect x="917.7" y="947.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="920.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.55%)</title><rect x="924.2" y="963.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="927.2" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.55%)</title><rect x="924.2" y="947.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="927.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 2.20%)</title><rect x="930.7" y="963.0" width="25.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.7" y="974.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.55%)</title><rect x="943.6" y="947.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="946.6" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.55%)</title><rect x="950.1" y="947.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="953.1" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.55%)</title><rect x="950.1" y="931.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="953.1" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.55%)</title><rect x="956.6" y="963.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="959.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.55%)</title><rect x="956.6" y="947.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="959.6" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.55%)</title><rect x="963.1" y="963.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="966.1" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.55%)</title><rect x="969.6" y="963.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.6" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.55%)</title><rect x="969.6" y="947.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.6" y="958.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.65%)</title><rect x="976.0" y="963.0" width="19.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="979.0" y="974.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.55%)</title><rect x="989.0" y="947.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.0" y="958.0"></text>
</g>
<g>
<title>Compile::Optimize() (18 samples, 9.89%)</title><rect x="995.5" y="995.0" width="116.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="998.5" y="1006.0">Compile::Optim..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.10%)</title><rect x="995.5" y="979.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="998.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.10%)</title><rect x="995.5" y="963.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="998.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.55%)</title><rect x="995.5" y="947.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.55%)</title><rect x="995.5" y="931.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="998.5" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.55%)</title><rect x="995.5" y="915.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="998.5" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.55%)</title><rect x="995.5" y="899.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.5" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.55%)</title><rect x="995.5" y="883.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="998.5" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.55%)</title><rect x="995.5" y="867.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="998.5" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.55%)</title><rect x="995.5" y="851.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="998.5" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.55%)</title><rect x="995.5" y="835.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="998.5" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.55%)</title><rect x="995.5" y="819.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="998.5" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.55%)</title><rect x="995.5" y="803.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.5" y="814.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.55%)</title><rect x="995.5" y="787.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.5" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.55%)</title><rect x="995.5" y="771.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.5" y="782.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, methodHandle, KlassHandle, KlassHandle, Handle, bool, Thread*) (1 samples, 0.55%)</title><rect x="995.5" y="755.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.5" y="766.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.55%)</title><rect x="995.5" y="739.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.5" y="750.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.55%)</title><rect x="995.5" y="723.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="998.5" y="734.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.55%)</title><rect x="995.5" y="707.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.55%)</title><rect x="1002.0" y="947.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.0" y="958.0"></text>
</g>
<g>
<title>ciMethod::is_boxing_method() const (1 samples, 0.55%)</title><rect x="1002.0" y="931.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1005.0" y="942.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.55%)</title><rect x="1008.5" y="979.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1011.5" y="990.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.55%)</title><rect x="1008.5" y="963.0" width="6.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1011.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (9 samples, 4.95%)</title><rect x="1014.9" y="979.0" width="58.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.9" y="990.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.55%)</title><rect x="1014.9" y="963.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1017.9" y="974.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.55%)</title><rect x="1014.9" y="947.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.10%)</title><rect x="1021.4" y="963.0" width="13.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1024.4" y="974.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.55%)</title><rect x="1027.9" y="947.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1030.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.65%)</title><rect x="1034.4" y="963.0" width="19.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1037.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.10%)</title><rect x="1040.9" y="947.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1043.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.10%)</title><rect x="1040.9" y="931.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.9" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.55%)</title><rect x="1040.9" y="915.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1043.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.55%)</title><rect x="1047.4" y="915.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.55%)</title><rect x="1053.8" y="963.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1056.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.55%)</title><rect x="1053.8" y="947.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1056.8" y="958.0"></text>
</g>
<g>
<title>Node::raise_bottom_type(Type const*) (1 samples, 0.55%)</title><rect x="1053.8" y="931.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1056.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.10%)</title><rect x="1060.3" y="963.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.3" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.10%)</title><rect x="1060.3" y="947.0" width="13.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1063.3" y="958.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.55%)</title><rect x="1066.8" y="931.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.8" y="942.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.55%)</title><rect x="1066.8" y="915.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1069.8" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 3.30%)</title><rect x="1073.3" y="979.0" width="38.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1076.3" y="990.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 3.30%)</title><rect x="1073.3" y="963.0" width="38.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.3" y="974.0">Pha..</text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.55%)</title><rect x="1079.8" y="947.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1082.8" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.55%)</title><rect x="1079.8" y="931.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.8" y="942.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.55%)</title><rect x="1079.8" y="915.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.8" y="926.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1086.3" y="947.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1089.3" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.55%)</title><rect x="1086.3" y="931.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.3" y="942.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.55%)</title><rect x="1092.7" y="947.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1095.7" y="958.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.55%)</title><rect x="1092.7" y="931.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.7" y="942.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.55%)</title><rect x="1092.7" y="915.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.7" y="926.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.55%)</title><rect x="1092.7" y="899.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.7" y="910.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1099.2" y="947.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.2" y="958.0"></text>
</g>
<g>
<title>StoreLNode::hash() const (1 samples, 0.55%)</title><rect x="1105.7" y="947.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.7" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.85%)</title><rect x="1112.2" y="995.0" width="45.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.2" y="1006.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.85%)</title><rect x="1112.2" y="979.0" width="45.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.2" y="990.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.85%)</title><rect x="1112.2" y="963.0" width="45.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.2" y="974.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.85%)</title><rect x="1112.2" y="947.0" width="45.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.2" y="958.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.85%)</title><rect x="1112.2" y="931.0" width="45.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.2" y="942.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.85%)</title><rect x="1112.2" y="915.0" width="45.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.2" y="926.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.30%)</title><rect x="1112.2" y="899.0" width="38.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.2" y="910.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.30%)</title><rect x="1112.2" y="883.0" width="38.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.2" y="894.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.30%)</title><rect x="1112.2" y="867.0" width="38.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1115.2" y="878.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.30%)</title><rect x="1112.2" y="851.0" width="38.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.2" y="862.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.30%)</title><rect x="1112.2" y="835.0" width="38.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.2" y="846.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.30%)</title><rect x="1112.2" y="819.0" width="38.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.2" y="830.0">Par..</text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.55%)</title><rect x="1112.2" y="803.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.2" y="814.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.55%)</title><rect x="1112.2" y="787.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.2" y="798.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.55%)</title><rect x="1112.2" y="771.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.2" y="782.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.55%)</title><rect x="1112.2" y="755.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.2" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.75%)</title><rect x="1118.7" y="803.0" width="32.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.7" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.75%)</title><rect x="1118.7" y="787.0" width="32.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.7" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.75%)</title><rect x="1118.7" y="771.0" width="32.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.7" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.75%)</title><rect x="1118.7" y="755.0" width="32.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.7" y="766.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.75%)</title><rect x="1118.7" y="739.0" width="32.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.7" y="750.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.75%)</title><rect x="1118.7" y="723.0" width="32.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.7" y="734.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.20%)</title><rect x="1118.7" y="707.0" width="25.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.7" y="718.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.20%)</title><rect x="1118.7" y="691.0" width="25.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.7" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.65%)</title><rect x="1118.7" y="675.0" width="19.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.65%)</title><rect x="1118.7" y="659.0" width="19.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.65%)</title><rect x="1118.7" y="643.0" width="19.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.65%)</title><rect x="1118.7" y="627.0" width="19.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.65%)</title><rect x="1118.7" y="611.0" width="19.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.65%)</title><rect x="1118.7" y="595.0" width="19.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.10%)</title><rect x="1118.7" y="579.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.10%)</title><rect x="1118.7" y="563.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.10%)</title><rect x="1118.7" y="547.0" width="12.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1118.7" y="531.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1118.7" y="515.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1118.7" y="499.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1118.7" y="483.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1118.7" y="467.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1118.7" y="451.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1118.7" y="435.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.7" y="446.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.55%)</title><rect x="1118.7" y="419.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.7" y="430.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.55%)</title><rect x="1118.7" y="403.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.7" y="414.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.55%)</title><rect x="1118.7" y="387.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.7" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.55%)</title><rect x="1118.7" y="371.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.7" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.55%)</title><rect x="1118.7" y="355.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.7" y="366.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.55%)</title><rect x="1118.7" y="339.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.7" y="350.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.55%)</title><rect x="1118.7" y="323.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.7" y="334.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.55%)</title><rect x="1125.2" y="531.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.2" y="542.0"></text>
</g>
<g>
<title>LoadRangeNode::Ideal(PhaseGVN*, bool) (1 samples, 0.55%)</title><rect x="1125.2" y="515.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.2" y="526.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.55%)</title><rect x="1125.2" y="499.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.2" y="510.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.55%)</title><rect x="1125.2" y="483.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.2" y="494.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.55%)</title><rect x="1125.2" y="467.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.2" y="478.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.55%)</title><rect x="1125.2" y="451.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.2" y="462.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.55%)</title><rect x="1125.2" y="435.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.55%)</title><rect x="1131.6" y="579.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.6" y="590.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.55%)</title><rect x="1131.6" y="563.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.6" y="574.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.55%)</title><rect x="1131.6" y="547.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.55%)</title><rect x="1138.1" y="675.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.1" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.55%)</title><rect x="1144.6" y="707.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.6" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.55%)</title><rect x="1144.6" y="691.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.6" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.55%)</title><rect x="1144.6" y="675.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.6" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.55%)</title><rect x="1144.6" y="659.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.6" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.1" y="899.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.1" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.1" y="883.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.1" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1151.1" y="867.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1151.1" y="851.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1151.1" y="835.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1151.1" y="819.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1151.1" y="803.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.1" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.1" y="787.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.1" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1151.1" y="771.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1151.1" y="755.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1151.1" y="739.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1151.1" y="723.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1151.1" y="707.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.1" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.1" y="691.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1151.1" y="675.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1151.1" y="659.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1151.1" y="643.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1151.1" y="627.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1151.1" y="611.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.1" y="595.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.1" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1151.1" y="579.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1151.1" y="563.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1151.1" y="547.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1151.1" y="531.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1151.1" y="515.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.1" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.1" y="499.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1151.1" y="483.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1151.1" y="467.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1151.1" y="451.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1151.1" y="435.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1151.1" y="419.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.1" y="403.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1151.1" y="387.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1151.1" y="371.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1151.1" y="355.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1151.1" y="339.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1151.1" y="323.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.1" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.1" y="307.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.1" y="291.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1151.1" y="275.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1151.1" y="259.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1151.1" y="243.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1151.1" y="227.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1151.1" y="211.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.55%)</title><rect x="1151.1" y="195.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.55%)</title><rect x="1151.1" y="179.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.55%)</title><rect x="1151.1" y="163.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.55%)</title><rect x="1151.1" y="147.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.55%)</title><rect x="1151.1" y="131.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.55%)</title><rect x="1151.1" y="115.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.1" y="126.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.55%)</title><rect x="1151.1" y="99.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.1" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.55%)</title><rect x="1151.1" y="83.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.1" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.55%)</title><rect x="1151.1" y="67.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.1" y="78.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.55%)</title><rect x="1151.1" y="51.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.1" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.55%)</title><rect x="1151.1" y="35.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.1" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.10%)</title><rect x="1157.6" y="995.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.6" y="1006.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.55%)</title><rect x="1157.6" y="979.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.6" y="990.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.55%)</title><rect x="1164.1" y="979.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="990.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.10%)</title><rect x="1170.5" y="1027.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.5" y="1038.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.10%)</title><rect x="1170.5" y="1011.0" width="13.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.5" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.10%)</title><rect x="1170.5" y="995.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.5" y="1006.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.55%)</title><rect x="1170.5" y="979.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.5" y="990.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.55%)</title><rect x="1170.5" y="963.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.5" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_entries(ExceptionInfoList*) (1 samples, 0.55%)</title><rect x="1170.5" y="947.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.5" y="958.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.55%)</title><rect x="1177.0" y="979.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="990.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.55%)</title><rect x="1177.0" y="963.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="974.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.55%)</title><rect x="1177.0" y="947.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="958.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.55%)</title><rect x="1177.0" y="931.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="942.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.55%)</title><rect x="1177.0" y="915.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="926.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (1 samples, 0.55%)</title><rect x="1183.5" y="1027.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.5" y="1038.0"></text>
</g>
</g>
</svg>
