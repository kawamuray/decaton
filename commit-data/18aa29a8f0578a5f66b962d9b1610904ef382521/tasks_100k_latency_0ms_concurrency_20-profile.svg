<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (129 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 18.60%)</title><rect x="10.0" y="787.0" width="219.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="798.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (24 samples, 18.60%)</title><rect x="10.0" y="771.0" width="219.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="782.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 1.55%)</title><rect x="10.0" y="755.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 1.55%)</title><rect x="10.0" y="739.0" width="18.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.78%)</title><rect x="10.0" y="723.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.78%)</title><rect x="10.0" y="707.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.78%)</title><rect x="10.0" y="691.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.78%)</title><rect x="19.1" y="723.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.78%)</title><rect x="19.1" y="707.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.78%)</title><rect x="19.1" y="691.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.78%)</title><rect x="19.1" y="675.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.78%)</title><rect x="19.1" y="659.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.78%)</title><rect x="19.1" y="643.0" width="9.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.78%)</title><rect x="19.1" y="627.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.78%)</title><rect x="19.1" y="611.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.78%)</title><rect x="19.1" y="595.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/427275822.get (1 samples, 0.78%)</title><rect x="19.1" y="579.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.1" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (13 samples, 10.08%)</title><rect x="28.3" y="755.0" width="118.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.3" y="766.0">java/lang/Iter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1918122111.accept (13 samples, 10.08%)</title><rect x="28.3" y="739.0" width="118.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.3" y="750.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (13 samples, 10.08%)</title><rect x="28.3" y="723.0" width="118.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.3" y="734.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (8 samples, 6.20%)</title><rect x="28.3" y="707.0" width="73.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.3" y="718.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (8 samples, 6.20%)</title><rect x="28.3" y="691.0" width="73.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.3" y="702.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (8 samples, 6.20%)</title><rect x="28.3" y="675.0" width="73.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.3" y="686.0">com/line..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (8 samples, 6.20%)</title><rect x="28.3" y="659.0" width="73.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.3" y="670.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (8 samples, 6.20%)</title><rect x="28.3" y="643.0" width="73.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.3" y="654.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (8 samples, 6.20%)</title><rect x="28.3" y="627.0" width="73.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.3" y="638.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 5.43%)</title><rect x="37.4" y="611.0" width="64.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.4" y="622.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 5.43%)</title><rect x="37.4" y="595.0" width="64.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.4" y="606.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 5.43%)</title><rect x="37.4" y="579.0" width="64.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.4" y="590.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 4.65%)</title><rect x="37.4" y="563.0" width="54.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.4" y="574.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 4.65%)</title><rect x="37.4" y="547.0" width="54.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.4" y="558.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 4.65%)</title><rect x="37.4" y="531.0" width="54.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.4" y="542.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 4.65%)</title><rect x="37.4" y="515.0" width="54.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="40.4" y="526.0">Unsaf..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.78%)</title><rect x="37.4" y="499.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="40.4" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 3.10%)</title><rect x="46.6" y="499.0" width="36.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="49.6" y="510.0">__p..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.78%)</title><rect x="83.2" y="499.0" width="9.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="86.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.78%)</title><rect x="92.3" y="563.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="95.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 2.33%)</title><rect x="101.5" y="707.0" width="27.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.5" y="718.0">c..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.78%)</title><rect x="101.5" y="691.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="104.5" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.55%)</title><rect x="110.6" y="691.0" width="18.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="113.6" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.78%)</title><rect x="119.8" y="675.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.78%)</title><rect x="119.8" y="659.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="122.8" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.55%)</title><rect x="128.9" y="707.0" width="18.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="131.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 6.98%)</title><rect x="147.2" y="755.0" width="82.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.2" y="766.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 6.98%)</title><rect x="147.2" y="739.0" width="82.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="150.2" y="750.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 4.65%)</title><rect x="147.2" y="723.0" width="54.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="150.2" y="734.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 4.65%)</title><rect x="147.2" y="707.0" width="54.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.2" y="718.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 4.65%)</title><rect x="147.2" y="691.0" width="54.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="150.2" y="702.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 4.65%)</title><rect x="147.2" y="675.0" width="54.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="150.2" y="686.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 4.65%)</title><rect x="147.2" y="659.0" width="54.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="150.2" y="670.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.55%)</title><rect x="156.4" y="643.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.78%)</title><rect x="156.4" y="627.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.78%)</title><rect x="156.4" y="611.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.topic (1 samples, 0.78%)</title><rect x="156.4" y="595.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.78%)</title><rect x="165.5" y="627.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="168.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.78%)</title><rect x="165.5" y="611.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 2.33%)</title><rect x="174.7" y="643.0" width="27.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="177.7" y="654.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 2.33%)</title><rect x="174.7" y="627.0" width="27.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.7" y="638.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 2.33%)</title><rect x="174.7" y="611.0" width="27.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.7" y="622.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 2.33%)</title><rect x="174.7" y="595.0" width="27.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.7" y="606.0">j..</text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.78%)</title><rect x="192.9" y="579.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="195.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.78%)</title><rect x="192.9" y="563.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.78%)</title><rect x="192.9" y="547.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="195.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.78%)</title><rect x="192.9" y="531.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.78%)</title><rect x="202.1" y="723.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.78%)</title><rect x="202.1" y="707.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.78%)</title><rect x="202.1" y="691.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.78%)</title><rect x="202.1" y="675.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.78%)</title><rect x="202.1" y="659.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.1" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.78%)</title><rect x="202.1" y="643.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.1" y="654.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.78%)</title><rect x="202.1" y="627.0" width="9.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="205.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.55%)</title><rect x="211.2" y="723.0" width="18.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.55%)</title><rect x="211.2" y="707.0" width="18.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.55%)</title><rect x="211.2" y="691.0" width="18.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 1.55%)</title><rect x="211.2" y="675.0" width="18.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 1.55%)</title><rect x="211.2" y="659.0" width="18.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 1.55%)</title><rect x="211.2" y="643.0" width="18.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 1.55%)</title><rect x="211.2" y="627.0" width="18.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 1.55%)</title><rect x="211.2" y="611.0" width="18.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="214.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.78%)</title><rect x="211.2" y="595.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.2" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.78%)</title><rect x="211.2" y="579.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.2" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.78%)</title><rect x="211.2" y="563.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.2" y="574.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.78%)</title><rect x="211.2" y="547.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="214.2" y="558.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.78%)</title><rect x="211.2" y="531.0" width="9.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="214.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.78%)</title><rect x="220.4" y="595.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.78%)</title><rect x="220.4" y="579.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.4" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.run (52 samples, 40.31%)</title><rect x="229.5" y="787.0" width="475.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.5" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (52 samples, 40.31%)</title><rect x="229.5" y="771.0" width="475.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="232.5" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (52 samples, 40.31%)</title><rect x="229.5" y="755.0" width="475.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.5" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/867619451.run (30 samples, 23.26%)</title><rect x="238.7" y="739.0" width="274.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.7" y="750.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (30 samples, 23.26%)</title><rect x="238.7" y="723.0" width="274.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.7" y="734.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (30 samples, 23.26%)</title><rect x="238.7" y="707.0" width="274.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.7" y="718.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (30 samples, 23.26%)</title><rect x="238.7" y="691.0" width="274.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="241.7" y="702.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (13 samples, 10.08%)</title><rect x="247.8" y="675.0" width="118.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.8" y="686.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (12 samples, 9.30%)</title><rect x="257.0" y="659.0" width="109.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.0" y="670.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 9.30%)</title><rect x="257.0" y="643.0" width="109.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="260.0" y="654.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 9.30%)</title><rect x="257.0" y="627.0" width="109.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.0" y="638.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 9.30%)</title><rect x="257.0" y="611.0" width="109.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.0" y="622.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 9.30%)</title><rect x="257.0" y="595.0" width="109.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.0" y="606.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.55%)</title><rect x="257.0" y="579.0" width="18.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.55%)</title><rect x="257.0" y="563.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.55%)</title><rect x="257.0" y="547.0" width="18.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 1.55%)</title><rect x="257.0" y="531.0" width="18.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 6.98%)</title><rect x="275.3" y="579.0" width="82.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.3" y="590.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.78%)</title><rect x="275.3" y="563.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.78%)</title><rect x="275.3" y="547.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.78%)</title><rect x="284.4" y="563.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="287.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.78%)</title><rect x="284.4" y="547.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.78%)</title><rect x="293.6" y="563.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.78%)</title><rect x="293.6" y="547.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 4.65%)</title><rect x="302.7" y="563.0" width="54.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="305.7" y="574.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.78%)</title><rect x="302.7" y="547.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.78%)</title><rect x="302.7" y="531.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.78%)</title><rect x="302.7" y="515.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.78%)</title><rect x="302.7" y="499.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="305.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.78%)</title><rect x="302.7" y="483.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="305.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 3.88%)</title><rect x="311.9" y="547.0" width="45.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="314.9" y="558.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 3.88%)</title><rect x="311.9" y="531.0" width="45.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.9" y="542.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 3.88%)</title><rect x="311.9" y="515.0" width="45.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.9" y="526.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.55%)</title><rect x="321.0" y="499.0" width="18.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.78%)</title><rect x="321.0" y="483.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.78%)</title><rect x="330.2" y="483.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.78%)</title><rect x="330.2" y="467.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.78%)</title><rect x="330.2" y="451.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.78%)</title><rect x="330.2" y="435.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="333.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.78%)</title><rect x="339.3" y="499.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.78%)</title><rect x="339.3" y="483.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="342.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.78%)</title><rect x="339.3" y="467.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.78%)</title><rect x="339.3" y="451.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="342.3" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.78%)</title><rect x="339.3" y="435.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="342.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.78%)</title><rect x="348.4" y="499.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.78%)</title><rect x="348.4" y="483.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.78%)</title><rect x="348.4" y="467.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="351.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.78%)</title><rect x="357.6" y="579.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="360.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.78%)</title><rect x="357.6" y="563.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="360.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.78%)</title><rect x="357.6" y="547.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="360.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.78%)</title><rect x="357.6" y="531.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="360.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.78%)</title><rect x="357.6" y="515.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="360.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.78%)</title><rect x="357.6" y="499.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="360.6" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (12 samples, 9.30%)</title><rect x="366.7" y="675.0" width="109.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.7" y="686.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 3.10%)</title><rect x="375.9" y="659.0" width="36.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.9" y="670.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 3.10%)</title><rect x="375.9" y="643.0" width="36.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="378.9" y="654.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 3.10%)</title><rect x="375.9" y="627.0" width="36.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="378.9" y="638.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.55%)</title><rect x="375.9" y="611.0" width="18.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="378.9" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.55%)</title><rect x="375.9" y="595.0" width="18.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="378.9" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.55%)</title><rect x="375.9" y="579.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="378.9" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.55%)</title><rect x="375.9" y="563.0" width="18.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="378.9" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.78%)</title><rect x="385.0" y="547.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.78%)</title><rect x="385.0" y="531.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="388.0" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.55%)</title><rect x="394.2" y="611.0" width="18.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.2" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (4 samples, 3.10%)</title><rect x="412.5" y="659.0" width="36.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="415.5" y="670.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (3 samples, 2.33%)</title><rect x="421.6" y="643.0" width="27.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="424.6" y="654.0">c..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.78%)</title><rect x="421.6" y="627.0" width="9.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="424.6" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (2 samples, 1.55%)</title><rect x="430.8" y="627.0" width="18.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="433.8" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (2 samples, 1.55%)</title><rect x="430.8" y="611.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.55%)</title><rect x="430.8" y="595.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.55%)</title><rect x="430.8" y="579.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="433.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.78%)</title><rect x="439.9" y="563.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="442.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.78%)</title><rect x="439.9" y="547.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 2.33%)</title><rect x="449.1" y="659.0" width="27.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="452.1" y="670.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 2.33%)</title><rect x="449.1" y="643.0" width="27.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="452.1" y="654.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1709782537.process (1 samples, 0.78%)</title><rect x="449.1" y="627.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="452.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.78%)</title><rect x="449.1" y="611.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="452.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.78%)</title><rect x="458.2" y="627.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="461.2" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.78%)</title><rect x="458.2" y="611.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="461.2" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.78%)</title><rect x="458.2" y="595.0" width="9.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="461.2" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.78%)</title><rect x="467.4" y="627.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="470.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 3.10%)</title><rect x="476.5" y="675.0" width="36.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.5" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 3.10%)</title><rect x="476.5" y="659.0" width="36.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="479.5" y="670.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.55%)</title><rect x="485.7" y="643.0" width="18.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/1473899454.accept (2 samples, 1.55%)</title><rect x="485.7" y="627.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (2 samples, 1.55%)</title><rect x="485.7" y="611.0" width="18.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="488.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/898575006.complete (2 samples, 1.55%)</title><rect x="485.7" y="595.0" width="18.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (2 samples, 1.55%)</title><rect x="485.7" y="579.0" width="18.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="488.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 1.55%)</title><rect x="485.7" y="563.0" width="18.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.7" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 1.55%)</title><rect x="485.7" y="547.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.7" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 1.55%)</title><rect x="485.7" y="531.0" width="18.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="488.7" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 1.55%)</title><rect x="485.7" y="515.0" width="18.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.7" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 1.55%)</title><rect x="485.7" y="499.0" width="18.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="488.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.78%)</title><rect x="504.0" y="643.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="507.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.78%)</title><rect x="513.1" y="739.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="516.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.78%)</title><rect x="513.1" y="723.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="516.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.78%)</title><rect x="513.1" y="707.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="516.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.78%)</title><rect x="522.2" y="739.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="525.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (19 samples, 14.73%)</title><rect x="531.4" y="739.0" width="173.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="534.4" y="750.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (19 samples, 14.73%)</title><rect x="531.4" y="723.0" width="173.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="534.4" y="734.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (17 samples, 13.18%)</title><rect x="549.7" y="707.0" width="155.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="552.7" y="718.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 4.65%)</title><rect x="549.7" y="691.0" width="54.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="552.7" y="702.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 4.65%)</title><rect x="549.7" y="675.0" width="54.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="552.7" y="686.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 4.65%)</title><rect x="549.7" y="659.0" width="54.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="552.7" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 4.65%)</title><rect x="549.7" y="643.0" width="54.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="552.7" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 8.53%)</title><rect x="604.6" y="691.0" width="100.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="607.6" y="702.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 8.53%)</title><rect x="604.6" y="675.0" width="100.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="607.6" y="686.0">sun/misc/Uns..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 6.20%)</title><rect x="613.7" y="659.0" width="73.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="616.7" y="670.0">Unsafe_P..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.78%)</title><rect x="613.7" y="643.0" width="9.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="616.7" y="654.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 1.55%)</title><rect x="622.9" y="643.0" width="18.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="625.9" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.78%)</title><rect x="641.2" y="643.0" width="9.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="644.2" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 3.10%)</title><rect x="650.3" y="643.0" width="36.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="653.3" y="654.0">__p..</text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.78%)</title><rect x="686.9" y="659.0" width="9.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="689.9" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.78%)</title><rect x="696.0" y="659.0" width="9.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="699.0" y="670.0"></text>
</g>
<g>
<title>start_thread (53 samples, 41.09%)</title><rect x="705.2" y="787.0" width="484.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="708.2" y="798.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (53 samples, 41.09%)</title><rect x="705.2" y="771.0" width="484.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="708.2" y="782.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 6.98%)</title><rect x="705.2" y="755.0" width="82.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="708.2" y="766.0">GangWorke..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.78%)</title><rect x="705.2" y="739.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="708.2" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.78%)</title><rect x="705.2" y="723.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="708.2" y="734.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.78%)</title><rect x="705.2" y="707.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="708.2" y="718.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 6.20%)</title><rect x="714.3" y="739.0" width="73.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="717.3" y="750.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 4.65%)</title><rect x="714.3" y="723.0" width="54.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="717.3" y="734.0">G1Par..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.78%)</title><rect x="714.3" y="707.0" width="9.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="717.3" y="718.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 3.10%)</title><rect x="723.5" y="707.0" width="36.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="726.5" y="718.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.78%)</title><rect x="750.9" y="691.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="753.9" y="702.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.78%)</title><rect x="750.9" y="675.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="753.9" y="686.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (1 samples, 0.78%)</title><rect x="750.9" y="659.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="753.9" y="670.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.78%)</title><rect x="760.1" y="707.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="763.1" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 1.55%)</title><rect x="769.2" y="723.0" width="18.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="772.2" y="734.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.55%)</title><rect x="769.2" y="707.0" width="18.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="772.2" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.55%)</title><rect x="769.2" y="691.0" width="18.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="772.2" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 1.55%)</title><rect x="769.2" y="675.0" width="18.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="772.2" y="686.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 1.55%)</title><rect x="769.2" y="659.0" width="18.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="772.2" y="670.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (2 samples, 1.55%)</title><rect x="769.2" y="643.0" width="18.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="772.2" y="654.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 1.55%)</title><rect x="769.2" y="627.0" width="18.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="772.2" y="638.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 1.55%)</title><rect x="769.2" y="611.0" width="18.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="772.2" y="622.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**) (1 samples, 0.78%)</title><rect x="769.2" y="595.0" width="9.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="772.2" y="606.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.78%)</title><rect x="769.2" y="579.0" width="9.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="772.2" y="590.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.78%)</title><rect x="769.2" y="563.0" width="9.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="772.2" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.78%)</title><rect x="769.2" y="547.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="772.2" y="558.0"></text>
</g>
<g>
<title>RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) (1 samples, 0.78%)</title><rect x="778.4" y="595.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="781.4" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (44 samples, 34.11%)</title><rect x="787.5" y="755.0" width="402.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="790.5" y="766.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (44 samples, 34.11%)</title><rect x="787.5" y="739.0" width="402.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="790.5" y="750.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (44 samples, 34.11%)</title><rect x="787.5" y="723.0" width="402.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="790.5" y="734.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (41 samples, 31.78%)</title><rect x="787.5" y="707.0" width="375.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="790.5" y="718.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (41 samples, 31.78%)</title><rect x="787.5" y="691.0" width="375.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="790.5" y="702.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, in..</text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 20.16%)</title><rect x="787.5" y="675.0" width="237.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="790.5" y="686.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.55%)</title><rect x="787.5" y="659.0" width="18.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="790.5" y="670.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.78%)</title><rect x="787.5" y="643.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="790.5" y="654.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.78%)</title><rect x="796.7" y="643.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="799.7" y="654.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.78%)</title><rect x="796.7" y="627.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="799.7" y="638.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.78%)</title><rect x="796.7" y="611.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="799.7" y="622.0"></text>
</g>
<g>
<title>storeLNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.78%)</title><rect x="796.7" y="595.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="799.7" y="606.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.78%)</title><rect x="805.8" y="659.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="808.8" y="670.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 0.78%)</title><rect x="805.8" y="643.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.8" y="654.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.78%)</title><rect x="815.0" y="659.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="818.0" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.78%)</title><rect x="824.1" y="659.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="827.1" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.78%)</title><rect x="824.1" y="643.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="827.1" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 2.33%)</title><rect x="833.3" y="659.0" width="27.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="836.3" y="670.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 2.33%)</title><rect x="833.3" y="643.0" width="27.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="836.3" y="654.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 2.33%)</title><rect x="833.3" y="627.0" width="27.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="836.3" y="638.0">P..</text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.78%)</title><rect x="833.3" y="611.0" width="9.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="836.3" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.78%)</title><rect x="842.4" y="611.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="845.4" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.78%)</title><rect x="851.6" y="611.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.6" y="622.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.78%)</title><rect x="851.6" y="595.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="854.6" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.78%)</title><rect x="851.6" y="579.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="854.6" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.78%)</title><rect x="851.6" y="563.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="854.6" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.78%)</title><rect x="851.6" y="547.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="854.6" y="558.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.78%)</title><rect x="851.6" y="531.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="854.6" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (17 samples, 13.18%)</title><rect x="860.7" y="659.0" width="155.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="863.7" y="670.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 3.10%)</title><rect x="860.7" y="643.0" width="36.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="863.7" y="654.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.55%)</title><rect x="860.7" y="627.0" width="18.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="863.7" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 1.55%)</title><rect x="879.0" y="627.0" width="18.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="882.0" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.78%)</title><rect x="888.1" y="611.0" width="9.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="891.1" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.78%)</title><rect x="897.3" y="643.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.3" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.78%)</title><rect x="897.3" y="627.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="900.3" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.78%)</title><rect x="897.3" y="611.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="900.3" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.55%)</title><rect x="906.4" y="643.0" width="18.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="909.4" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 2.33%)</title><rect x="924.7" y="643.0" width="27.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.7" y="654.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.78%)</title><rect x="933.9" y="627.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="936.9" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.78%)</title><rect x="933.9" y="611.0" width="9.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="936.9" y="622.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.78%)</title><rect x="943.0" y="627.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="946.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.78%)</title><rect x="952.2" y="643.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="955.2" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.78%)</title><rect x="952.2" y="627.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="955.2" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (2 samples, 1.55%)</title><rect x="961.3" y="643.0" width="18.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="964.3" y="654.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.78%)</title><rect x="970.5" y="627.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="973.5" y="638.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.55%)</title><rect x="979.6" y="643.0" width="18.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="982.6" y="654.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.55%)</title><rect x="979.6" y="627.0" width="18.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="982.6" y="638.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 1.55%)</title><rect x="979.6" y="611.0" width="18.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="982.6" y="622.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.78%)</title><rect x="979.6" y="595.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.6" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.78%)</title><rect x="988.8" y="595.0" width="9.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="991.8" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.55%)</title><rect x="997.9" y="643.0" width="18.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.9" y="654.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.78%)</title><rect x="1016.2" y="659.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1019.2" y="670.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 8.53%)</title><rect x="1025.3" y="675.0" width="100.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1028.3" y="686.0">Compile::Opt..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.55%)</title><rect x="1025.3" y="659.0" width="18.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1028.3" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.55%)</title><rect x="1025.3" y="643.0" width="18.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.3" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (2 samples, 1.55%)</title><rect x="1025.3" y="627.0" width="18.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.3" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (2 samples, 1.55%)</title><rect x="1025.3" y="611.0" width="18.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1028.3" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (2 samples, 1.55%)</title><rect x="1025.3" y="595.0" width="18.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1028.3" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (2 samples, 1.55%)</title><rect x="1025.3" y="579.0" width="18.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1028.3" y="590.0"></text>
</g>
<g>
<title>Type::hashcons() (2 samples, 1.55%)</title><rect x="1025.3" y="563.0" width="18.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1028.3" y="574.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (2 samples, 1.55%)</title><rect x="1025.3" y="547.0" width="18.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.3" y="558.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.78%)</title><rect x="1034.5" y="531.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.5" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.78%)</title><rect x="1034.5" y="515.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1037.5" y="526.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.78%)</title><rect x="1043.6" y="659.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1046.6" y="670.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.78%)</title><rect x="1043.6" y="643.0" width="9.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1046.6" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 5.43%)</title><rect x="1052.8" y="659.0" width="64.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1055.8" y="670.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.78%)</title><rect x="1052.8" y="643.0" width="9.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1055.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.78%)</title><rect x="1061.9" y="643.0" width="9.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1064.9" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.78%)</title><rect x="1061.9" y="627.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.78%)</title><rect x="1061.9" y="611.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1064.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.78%)</title><rect x="1061.9" y="595.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1064.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.78%)</title><rect x="1061.9" y="579.0" width="9.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1064.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_intrinsify_fill() (1 samples, 0.78%)</title><rect x="1071.1" y="643.0" width="9.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.1" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::intrinsify_fill(IdealLoopTree*) (1 samples, 0.78%)</title><rect x="1071.1" y="627.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.1" y="638.0"></text>
</g>
<g>
<title>CountedLoopEndNode::Opcode() const (1 samples, 0.78%)</title><rect x="1071.1" y="611.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.1" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.55%)</title><rect x="1080.2" y="643.0" width="18.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.2" y="654.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.78%)</title><rect x="1089.4" y="627.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.4" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.78%)</title><rect x="1098.5" y="643.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.5" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.78%)</title><rect x="1098.5" y="627.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.5" y="638.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.78%)</title><rect x="1098.5" y="611.0" width="9.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.5" y="622.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.78%)</title><rect x="1098.5" y="595.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.5" y="606.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.78%)</title><rect x="1098.5" y="579.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.5" y="590.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.78%)</title><rect x="1098.5" y="563.0" width="9.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.5" y="574.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.78%)</title><rect x="1098.5" y="547.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.5" y="558.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.78%)</title><rect x="1107.7" y="643.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.7" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.78%)</title><rect x="1116.8" y="659.0" width="9.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.8" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.78%)</title><rect x="1116.8" y="643.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.8" y="654.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.78%)</title><rect x="1116.8" y="627.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.8" y="638.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.78%)</title><rect x="1116.8" y="611.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.8" y="622.0"></text>
</g>
<g>
<title>TypeKlassPtr::add_offset(long) const (1 samples, 0.78%)</title><rect x="1116.8" y="595.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.33%)</title><rect x="1126.0" y="675.0" width="27.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.0" y="686.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.33%)</title><rect x="1126.0" y="659.0" width="27.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.0" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.33%)</title><rect x="1126.0" y="643.0" width="27.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.0" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.33%)</title><rect x="1126.0" y="627.0" width="27.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.0" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.33%)</title><rect x="1126.0" y="611.0" width="27.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.0" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.33%)</title><rect x="1126.0" y="595.0" width="27.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.0" y="606.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.33%)</title><rect x="1126.0" y="579.0" width="27.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.0" y="590.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.33%)</title><rect x="1126.0" y="563.0" width="27.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.0" y="574.0">P..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.78%)</title><rect x="1126.0" y="547.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.0" y="558.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.78%)</title><rect x="1126.0" y="531.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.0" y="542.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.78%)</title><rect x="1126.0" y="515.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.78%)</title><rect x="1126.0" y="499.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.0" y="510.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.78%)</title><rect x="1126.0" y="483.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.55%)</title><rect x="1135.1" y="547.0" width="18.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.55%)</title><rect x="1135.1" y="531.0" width="18.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.55%)</title><rect x="1135.1" y="515.0" width="18.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.55%)</title><rect x="1135.1" y="499.0" width="18.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.55%)</title><rect x="1135.1" y="483.0" width="18.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.55%)</title><rect x="1135.1" y="467.0" width="18.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.55%)</title><rect x="1135.1" y="451.0" width="18.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.55%)</title><rect x="1135.1" y="435.0" width="18.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.55%)</title><rect x="1135.1" y="419.0" width="18.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.55%)</title><rect x="1135.1" y="403.0" width="18.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.55%)</title><rect x="1135.1" y="387.0" width="18.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.55%)</title><rect x="1135.1" y="371.0" width="18.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.55%)</title><rect x="1135.1" y="355.0" width="18.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.55%)</title><rect x="1135.1" y="339.0" width="18.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.55%)</title><rect x="1135.1" y="323.0" width="18.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.55%)</title><rect x="1135.1" y="307.0" width="18.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.55%)</title><rect x="1135.1" y="291.0" width="18.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.55%)</title><rect x="1135.1" y="275.0" width="18.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.55%)</title><rect x="1135.1" y="259.0" width="18.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.55%)</title><rect x="1135.1" y="243.0" width="18.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.55%)</title><rect x="1135.1" y="227.0" width="18.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.78%)</title><rect x="1135.1" y="211.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1135.1" y="195.0" width="9.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1135.1" y="179.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1135.1" y="163.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1135.1" y="147.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1135.1" y="131.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.78%)</title><rect x="1135.1" y="115.0" width="9.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.1" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1135.1" y="99.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.1" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1135.1" y="83.0" width="9.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1135.1" y="67.0" width="9.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1135.1" y="51.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.1" y="62.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.78%)</title><rect x="1135.1" y="35.0" width="9.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.78%)</title><rect x="1144.3" y="211.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.78%)</title><rect x="1144.3" y="195.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.3" y="206.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.78%)</title><rect x="1144.3" y="179.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.3" y="190.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.78%)</title><rect x="1144.3" y="163.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.3" y="174.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.78%)</title><rect x="1144.3" y="147.0" width="9.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.3" y="158.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.78%)</title><rect x="1144.3" y="131.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.3" y="142.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.78%)</title><rect x="1153.4" y="675.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.4" y="686.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.78%)</title><rect x="1153.4" y="659.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.4" y="670.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.78%)</title><rect x="1153.4" y="643.0" width="9.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.4" y="654.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.78%)</title><rect x="1153.4" y="627.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.4" y="638.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.78%)</title><rect x="1153.4" y="611.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.4" y="622.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 2.33%)</title><rect x="1162.6" y="707.0" width="27.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="718.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 2.33%)</title><rect x="1162.6" y="691.0" width="27.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="702.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 2.33%)</title><rect x="1162.6" y="675.0" width="27.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.6" y="686.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.78%)</title><rect x="1162.6" y="659.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.6" y="670.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.78%)</title><rect x="1162.6" y="643.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="654.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.78%)</title><rect x="1162.6" y="627.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.6" y="638.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (1 samples, 0.78%)</title><rect x="1162.6" y="611.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="622.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 1.55%)</title><rect x="1171.7" y="659.0" width="18.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.7" y="670.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 1.55%)</title><rect x="1171.7" y="643.0" width="18.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.7" y="654.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 1.55%)</title><rect x="1171.7" y="627.0" width="18.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.7" y="638.0"></text>
</g>
</g>
</svg>
