<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (153 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (29 samples, 18.95%)</title><rect x="10.0" y="755.0" width="223.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="766.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (29 samples, 18.95%)</title><rect x="10.0" y="739.0" width="223.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.65%)</title><rect x="10.0" y="723.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.65%)</title><rect x="10.0" y="707.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.65%)</title><rect x="10.0" y="691.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.65%)</title><rect x="10.0" y="675.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.65%)</title><rect x="10.0" y="659.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.65%)</title><rect x="10.0" y="643.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.65%)</title><rect x="10.0" y="627.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.65%)</title><rect x="10.0" y="611.0" width="7.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.65%)</title><rect x="17.7" y="723.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.65%)</title><rect x="17.7" y="707.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (1 samples, 0.65%)</title><rect x="17.7" y="691.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.65%)</title><rect x="17.7" y="675.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.7" y="686.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 11.11%)</title><rect x="25.4" y="723.0" width="131.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.4" y="734.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1209424634.accept (17 samples, 11.11%)</title><rect x="25.4" y="707.0" width="131.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.4" y="718.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 11.11%)</title><rect x="25.4" y="691.0" width="131.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.4" y="702.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 8.50%)</title><rect x="25.4" y="675.0" width="100.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.4" y="686.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 8.50%)</title><rect x="25.4" y="659.0" width="100.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.4" y="670.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 8.50%)</title><rect x="25.4" y="643.0" width="100.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.4" y="654.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 8.50%)</title><rect x="25.4" y="627.0" width="100.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.4" y="638.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 8.50%)</title><rect x="25.4" y="611.0" width="100.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.4" y="622.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 8.50%)</title><rect x="25.4" y="595.0" width="100.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.4" y="606.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 5.23%)</title><rect x="25.4" y="579.0" width="61.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.4" y="590.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.65%)</title><rect x="25.4" y="563.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.65%)</title><rect x="25.4" y="547.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 4.58%)</title><rect x="33.1" y="563.0" width="54.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.1" y="574.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 4.58%)</title><rect x="33.1" y="547.0" width="54.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.1" y="558.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 4.58%)</title><rect x="33.1" y="531.0" width="54.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.1" y="542.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 4.58%)</title><rect x="33.1" y="515.0" width="54.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.1" y="526.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 4.58%)</title><rect x="33.1" y="499.0" width="54.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.1" y="510.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 3.92%)</title><rect x="33.1" y="483.0" width="46.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="36.1" y="494.0">Unsa..</text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 3.27%)</title><rect x="33.1" y="467.0" width="38.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="36.1" y="478.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.65%)</title><rect x="71.7" y="467.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="74.7" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.65%)</title><rect x="79.4" y="483.0" width="7.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="82.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 2.61%)</title><rect x="87.1" y="579.0" width="30.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.1" y="590.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 2.61%)</title><rect x="87.1" y="563.0" width="30.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.1" y="574.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 2.61%)</title><rect x="87.1" y="547.0" width="30.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.1" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.65%)</title><rect x="118.0" y="579.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.65%)</title><rect x="118.0" y="563.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.65%)</title><rect x="118.0" y="547.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.65%)</title><rect x="125.7" y="675.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="128.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.65%)</title><rect x="125.7" y="659.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.65%)</title><rect x="125.7" y="643.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.96%)</title><rect x="133.4" y="675.0" width="23.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.4" y="686.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.96%)</title><rect x="133.4" y="659.0" width="23.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="136.4" y="670.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 6.54%)</title><rect x="156.5" y="723.0" width="77.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.5" y="734.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 6.54%)</title><rect x="156.5" y="707.0" width="77.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.5" y="718.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 3.27%)</title><rect x="156.5" y="691.0" width="38.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="159.5" y="702.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 3.27%)</title><rect x="156.5" y="675.0" width="38.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="159.5" y="686.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 3.27%)</title><rect x="156.5" y="659.0" width="38.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.5" y="670.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 2.61%)</title><rect x="156.5" y="643.0" width="30.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.5" y="654.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 2.61%)</title><rect x="156.5" y="627.0" width="30.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.5" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.96%)</title><rect x="156.5" y="611.0" width="23.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.5" y="622.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.65%)</title><rect x="164.2" y="595.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="167.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.65%)</title><rect x="164.2" y="579.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.65%)</title><rect x="164.2" y="563.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.65%)</title><rect x="164.2" y="547.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="167.2" y="558.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.65%)</title><rect x="164.2" y="531.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.2" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.65%)</title><rect x="164.2" y="515.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.65%)</title><rect x="172.0" y="595.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.65%)</title><rect x="172.0" y="579.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.65%)</title><rect x="172.0" y="563.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="175.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.65%)</title><rect x="172.0" y="547.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="175.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.65%)</title><rect x="172.0" y="531.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="175.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.65%)</title><rect x="172.0" y="515.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="175.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.65%)</title><rect x="172.0" y="499.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.65%)</title><rect x="179.7" y="611.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.65%)</title><rect x="179.7" y="595.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.65%)</title><rect x="179.7" y="579.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.7" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.65%)</title><rect x="179.7" y="563.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.65%)</title><rect x="187.4" y="643.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 2.61%)</title><rect x="195.1" y="691.0" width="30.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.1" y="702.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.96%)</title><rect x="195.1" y="675.0" width="23.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.1" y="686.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.96%)</title><rect x="195.1" y="659.0" width="23.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="198.1" y="670.0">o..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.65%)</title><rect x="195.1" y="643.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/2124853235.accept (1 samples, 0.65%)</title><rect x="195.1" y="627.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.65%)</title><rect x="195.1" y="611.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.65%)</title><rect x="195.1" y="595.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="198.1" y="606.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.65%)</title><rect x="195.1" y="579.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.65%)</title><rect x="202.8" y="643.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.65%)</title><rect x="202.8" y="627.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.65%)</title><rect x="202.8" y="611.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.65%)</title><rect x="202.8" y="595.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.65%)</title><rect x="202.8" y="579.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.8" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.65%)</title><rect x="202.8" y="563.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.8" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.65%)</title><rect x="202.8" y="547.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.65%)</title><rect x="202.8" y="531.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.65%)</title><rect x="210.5" y="643.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.65%)</title><rect x="210.5" y="627.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="213.5" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.65%)</title><rect x="210.5" y="611.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.5" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.65%)</title><rect x="210.5" y="595.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.65%)</title><rect x="210.5" y="579.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="213.5" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.65%)</title><rect x="210.5" y="563.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.65%)</title><rect x="210.5" y="547.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.65%)</title><rect x="210.5" y="531.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.65%)</title><rect x="210.5" y="515.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.65%)</title><rect x="218.2" y="675.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.65%)</title><rect x="218.2" y="659.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.2" y="670.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.65%)</title><rect x="218.2" y="643.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="221.2" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.65%)</title><rect x="218.2" y="627.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="221.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.65%)</title><rect x="225.9" y="691.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.65%)</title><rect x="225.9" y="675.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.65%)</title><rect x="225.9" y="659.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.65%)</title><rect x="225.9" y="643.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.65%)</title><rect x="225.9" y="627.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.9" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.run (58 samples, 37.91%)</title><rect x="233.7" y="755.0" width="447.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.7" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (58 samples, 37.91%)</title><rect x="233.7" y="739.0" width="447.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.7" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (58 samples, 37.91%)</title><rect x="233.7" y="723.0" width="447.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.7" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2069414408.run (34 samples, 22.22%)</title><rect x="264.5" y="707.0" width="262.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.5" y="718.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (34 samples, 22.22%)</title><rect x="264.5" y="691.0" width="262.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.5" y="702.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (34 samples, 22.22%)</title><rect x="264.5" y="675.0" width="262.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.5" y="686.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (34 samples, 22.22%)</title><rect x="264.5" y="659.0" width="262.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.5" y="670.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.65%)</title><rect x="279.9" y="643.0" width="7.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="282.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (9 samples, 5.88%)</title><rect x="287.6" y="643.0" width="69.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.6" y="654.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (9 samples, 5.88%)</title><rect x="287.6" y="627.0" width="69.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.6" y="638.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (9 samples, 5.88%)</title><rect x="287.6" y="611.0" width="69.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="290.6" y="622.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (9 samples, 5.88%)</title><rect x="287.6" y="595.0" width="69.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.6" y="606.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (9 samples, 5.88%)</title><rect x="287.6" y="579.0" width="69.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.6" y="590.0">com/lin..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (9 samples, 5.88%)</title><rect x="287.6" y="563.0" width="69.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.6" y="574.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.96%)</title><rect x="287.6" y="547.0" width="23.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.6" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.31%)</title><rect x="295.4" y="531.0" width="15.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 2.61%)</title><rect x="310.8" y="547.0" width="30.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.8" y="558.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.65%)</title><rect x="310.8" y="531.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.65%)</title><rect x="310.8" y="515.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.65%)</title><rect x="318.5" y="531.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.65%)</title><rect x="318.5" y="515.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="321.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.65%)</title><rect x="318.5" y="499.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.65%)</title><rect x="318.5" y="483.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="321.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (2 samples, 1.31%)</title><rect x="326.2" y="531.0" width="15.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="329.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.65%)</title><rect x="326.2" y="515.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="329.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.65%)</title><rect x="326.2" y="499.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.65%)</title><rect x="326.2" y="483.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="329.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.65%)</title><rect x="326.2" y="467.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.65%)</title><rect x="333.9" y="515.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="336.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.65%)</title><rect x="333.9" y="499.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="336.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.65%)</title><rect x="333.9" y="483.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="336.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.65%)</title><rect x="333.9" y="467.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.65%)</title><rect x="333.9" y="451.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.65%)</title><rect x="333.9" y="435.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.65%)</title><rect x="333.9" y="419.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="336.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 1.31%)</title><rect x="341.6" y="547.0" width="15.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="344.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 1.31%)</title><rect x="341.6" y="531.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 1.31%)</title><rect x="341.6" y="515.0" width="15.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="344.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 1.31%)</title><rect x="341.6" y="499.0" width="15.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="344.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.31%)</title><rect x="341.6" y="483.0" width="15.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="344.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (20 samples, 13.07%)</title><rect x="357.1" y="643.0" width="154.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="360.1" y="654.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.65%)</title><rect x="357.1" y="627.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.1" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.65%)</title><rect x="357.1" y="611.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="360.1" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.65%)</title><rect x="357.1" y="595.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.1" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.65%)</title><rect x="357.1" y="579.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="360.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.65%)</title><rect x="364.8" y="627.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="367.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.65%)</title><rect x="364.8" y="611.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="367.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.65%)</title><rect x="364.8" y="595.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (13 samples, 8.50%)</title><rect x="372.5" y="627.0" width="100.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="375.5" y="638.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (13 samples, 8.50%)</title><rect x="372.5" y="611.0" width="100.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="375.5" y="622.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 3.27%)</title><rect x="387.9" y="595.0" width="38.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="390.9" y="606.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.61%)</title><rect x="387.9" y="579.0" width="30.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="390.9" y="590.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 2.61%)</title><rect x="387.9" y="563.0" width="30.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.9" y="574.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.31%)</title><rect x="395.6" y="547.0" width="15.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="398.6" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.31%)</title><rect x="395.6" y="531.0" width="15.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="398.6" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.65%)</title><rect x="411.0" y="547.0" width="7.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="414.0" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.65%)</title><rect x="418.8" y="579.0" width="7.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="421.8" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.92%)</title><rect x="426.5" y="595.0" width="46.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="429.5" y="606.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.92%)</title><rect x="426.5" y="579.0" width="46.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="429.5" y="590.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 3.92%)</title><rect x="426.5" y="563.0" width="46.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="429.5" y="574.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 3.92%)</title><rect x="426.5" y="547.0" width="46.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="429.5" y="558.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.96%)</title><rect x="449.6" y="531.0" width="23.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.6" y="542.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.65%)</title><rect x="465.0" y="515.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="468.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 3.27%)</title><rect x="472.7" y="627.0" width="38.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.7" y="638.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 3.27%)</title><rect x="472.7" y="611.0" width="38.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.7" y="622.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2098216011.process (1 samples, 0.65%)</title><rect x="472.7" y="595.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="475.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.65%)</title><rect x="472.7" y="579.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="475.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.65%)</title><rect x="472.7" y="563.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.65%)</title><rect x="472.7" y="547.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="475.7" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.65%)</title><rect x="472.7" y="531.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="475.7" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.65%)</title><rect x="472.7" y="515.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="475.7" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.65%)</title><rect x="472.7" y="499.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="475.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.65%)</title><rect x="480.5" y="595.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="483.5" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.65%)</title><rect x="480.5" y="579.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="483.5" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.65%)</title><rect x="488.2" y="595.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="491.2" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.65%)</title><rect x="488.2" y="579.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.2" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.65%)</title><rect x="488.2" y="563.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="491.2" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.65%)</title><rect x="495.9" y="595.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="498.9" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.65%)</title><rect x="495.9" y="579.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.9" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.65%)</title><rect x="495.9" y="563.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.9" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.rangeCheck (1 samples, 0.65%)</title><rect x="495.9" y="547.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="498.9" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.65%)</title><rect x="495.9" y="531.0" width="7.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="498.9" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.65%)</title><rect x="495.9" y="515.0" width="7.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="498.9" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.65%)</title><rect x="503.6" y="595.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="506.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.65%)</title><rect x="511.3" y="643.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="514.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.65%)</title><rect x="511.3" y="627.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="514.3" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.65%)</title><rect x="519.0" y="643.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="522.0" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.65%)</title><rect x="519.0" y="627.0" width="7.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="522.0" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.65%)</title><rect x="526.7" y="707.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="529.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.65%)</title><rect x="526.7" y="691.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="529.7" y="702.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.65%)</title><rect x="526.7" y="675.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="529.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (19 samples, 12.42%)</title><rect x="534.4" y="707.0" width="146.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="537.4" y="718.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (19 samples, 12.42%)</title><rect x="534.4" y="691.0" width="146.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.4" y="702.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 9.80%)</title><rect x="542.2" y="675.0" width="115.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="545.2" y="686.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 1.31%)</title><rect x="542.2" y="659.0" width="15.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="545.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.31%)</title><rect x="542.2" y="643.0" width="15.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="545.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.31%)</title><rect x="542.2" y="627.0" width="15.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="545.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.31%)</title><rect x="542.2" y="611.0" width="15.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="545.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 8.50%)</title><rect x="557.6" y="659.0" width="100.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.6" y="670.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (13 samples, 8.50%)</title><rect x="557.6" y="643.0" width="100.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="560.6" y="654.0">sun/misc/Uns..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 6.54%)</title><rect x="580.7" y="627.0" width="77.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="583.7" y="638.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.31%)</title><rect x="580.7" y="611.0" width="15.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="583.7" y="622.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.65%)</title><rect x="588.4" y="595.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="591.4" y="606.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.65%)</title><rect x="588.4" y="579.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="591.4" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.31%)</title><rect x="596.1" y="611.0" width="15.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="599.1" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.96%)</title><rect x="611.6" y="611.0" width="23.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="614.6" y="622.0">_..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.65%)</title><rect x="634.7" y="611.0" width="7.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="637.7" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.65%)</title><rect x="642.4" y="611.0" width="7.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="645.4" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.65%)</title><rect x="650.1" y="611.0" width="7.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="653.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.96%)</title><rect x="657.8" y="675.0" width="23.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="660.8" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.96%)</title><rect x="657.8" y="659.0" width="23.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="660.8" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.96%)</title><rect x="657.8" y="643.0" width="23.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="660.8" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.96%)</title><rect x="657.8" y="627.0" width="23.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="660.8" y="638.0">j..</text>
</g>
<g>
<title>start_thread (66 samples, 43.14%)</title><rect x="681.0" y="755.0" width="509.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="684.0" y="766.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (66 samples, 43.14%)</title><rect x="681.0" y="739.0" width="509.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="684.0" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 8.50%)</title><rect x="681.0" y="723.0" width="100.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="684.0" y="734.0">GangWorker::..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.96%)</title><rect x="681.0" y="707.0" width="23.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="684.0" y="718.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.96%)</title><rect x="681.0" y="691.0" width="23.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="684.0" y="702.0">G..</text>
</g>
<g>
<title>SpinPause (3 samples, 1.96%)</title><rect x="681.0" y="675.0" width="23.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="684.0" y="686.0">S..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 6.54%)</title><rect x="704.1" y="707.0" width="77.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="707.1" y="718.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 5.23%)</title><rect x="704.1" y="691.0" width="61.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="707.1" y="702.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.31%)</title><rect x="711.8" y="675.0" width="15.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="714.8" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.31%)</title><rect x="711.8" y="659.0" width="15.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="714.8" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 1.31%)</title><rect x="711.8" y="643.0" width="15.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="714.8" y="654.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (2 samples, 1.31%)</title><rect x="711.8" y="627.0" width="15.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="714.8" y="638.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.96%)</title><rect x="727.3" y="675.0" width="23.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="730.3" y="686.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.65%)</title><rect x="750.4" y="675.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="753.4" y="686.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.65%)</title><rect x="758.1" y="675.0" width="7.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="761.1" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.31%)</title><rect x="765.8" y="691.0" width="15.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="768.8" y="702.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 1.31%)</title><rect x="765.8" y="675.0" width="15.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="768.8" y="686.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 1.31%)</title><rect x="765.8" y="659.0" width="15.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="768.8" y="670.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 1.31%)</title><rect x="765.8" y="643.0" width="15.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="768.8" y="654.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.65%)</title><rect x="773.5" y="627.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="776.5" y="638.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.65%)</title><rect x="773.5" y="611.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="776.5" y="622.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.65%)</title><rect x="773.5" y="595.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="776.5" y="606.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.65%)</title><rect x="773.5" y="579.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="776.5" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (53 samples, 34.64%)</title><rect x="781.2" y="723.0" width="408.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="784.2" y="734.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (53 samples, 34.64%)</title><rect x="781.2" y="707.0" width="408.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.2" y="718.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (53 samples, 34.64%)</title><rect x="781.2" y="691.0" width="408.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="784.2" y="702.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (50 samples, 32.68%)</title><rect x="781.2" y="675.0" width="385.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="784.2" y="686.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (50 samples, 32.68%)</title><rect x="781.2" y="659.0" width="385.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="784.2" y="670.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.65%)</title><rect x="781.2" y="643.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="784.2" y="654.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.65%)</title><rect x="781.2" y="627.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="784.2" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.65%)</title><rect x="781.2" y="611.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="784.2" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.65%)</title><rect x="781.2" y="595.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.2" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.65%)</title><rect x="781.2" y="579.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="784.2" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.65%)</title><rect x="781.2" y="563.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="784.2" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.65%)</title><rect x="781.2" y="547.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="784.2" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.65%)</title><rect x="781.2" y="531.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="784.2" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.65%)</title><rect x="781.2" y="515.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.2" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.65%)</title><rect x="781.2" y="499.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="784.2" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="781.2" y="483.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="784.2" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="781.2" y="467.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="784.2" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.65%)</title><rect x="781.2" y="451.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="784.2" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.65%)</title><rect x="781.2" y="435.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="784.2" y="446.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="781.2" y="419.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.2" y="430.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.65%)</title><rect x="781.2" y="403.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="784.2" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.65%)</title><rect x="781.2" y="387.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="784.2" y="398.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (32 samples, 20.92%)</title><rect x="789.0" y="643.0" width="246.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="792.0" y="654.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.65%)</title><rect x="789.0" y="627.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="792.0" y="638.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.65%)</title><rect x="789.0" y="611.0" width="7.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="792.0" y="622.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 2.61%)</title><rect x="796.7" y="627.0" width="30.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="799.7" y="638.0">Co..</text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 1.31%)</title><rect x="804.4" y="611.0" width="15.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="807.4" y="622.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.65%)</title><rect x="804.4" y="595.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="807.4" y="606.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.65%)</title><rect x="812.1" y="595.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="815.1" y="606.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.65%)</title><rect x="812.1" y="579.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="815.1" y="590.0"></text>
</g>
<g>
<title>immNOper::constant() const (1 samples, 0.65%)</title><rect x="819.8" y="611.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="822.8" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.61%)</title><rect x="827.5" y="627.0" width="30.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="830.5" y="638.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 1.31%)</title><rect x="827.5" y="611.0" width="15.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="830.5" y="622.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.65%)</title><rect x="827.5" y="595.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="830.5" y="606.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.65%)</title><rect x="835.2" y="595.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="838.2" y="606.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.31%)</title><rect x="842.9" y="611.0" width="15.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="845.9" y="622.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.65%)</title><rect x="850.7" y="595.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="853.7" y="606.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.65%)</title><rect x="850.7" y="579.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="853.7" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.65%)</title><rect x="850.7" y="563.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="853.7" y="574.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.65%)</title><rect x="850.7" y="547.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="853.7" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.65%)</title><rect x="858.4" y="627.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="861.4" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.65%)</title><rect x="858.4" y="611.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.4" y="622.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.65%)</title><rect x="858.4" y="595.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="861.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 14.38%)</title><rect x="866.1" y="627.0" width="169.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="869.1" y="638.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.65%)</title><rect x="866.1" y="611.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="869.1" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.65%)</title><rect x="873.8" y="611.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.8" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.65%)</title><rect x="873.8" y="595.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="876.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.96%)</title><rect x="881.5" y="611.0" width="23.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="884.5" y="622.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 3.27%)</title><rect x="904.6" y="611.0" width="38.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.6" y="622.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.61%)</title><rect x="904.6" y="595.0" width="30.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="907.6" y="606.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.31%)</title><rect x="920.1" y="579.0" width="15.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="923.1" y="590.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.65%)</title><rect x="935.5" y="595.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.5" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.65%)</title><rect x="943.2" y="611.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.2" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.65%)</title><rect x="950.9" y="611.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="953.9" y="622.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.65%)</title><rect x="950.9" y="595.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="953.9" y="606.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.31%)</title><rect x="958.6" y="611.0" width="15.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="961.6" y="622.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.65%)</title><rect x="958.6" y="595.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="961.6" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.65%)</title><rect x="958.6" y="579.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="961.6" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.65%)</title><rect x="966.3" y="595.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.3" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.65%)</title><rect x="966.3" y="579.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.3" y="590.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.65%)</title><rect x="966.3" y="563.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="969.3" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 1.31%)</title><rect x="974.1" y="611.0" width="15.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="977.1" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.65%)</title><rect x="981.8" y="595.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="984.8" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.61%)</title><rect x="989.5" y="611.0" width="30.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="992.5" y="622.0">Ph..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.65%)</title><rect x="1012.6" y="595.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1015.6" y="606.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.65%)</title><rect x="1020.3" y="611.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1023.3" y="622.0"></text>
</g>
<g>
<title>checkCastPPNode::oper_input_base() const (1 samples, 0.65%)</title><rect x="1028.0" y="611.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.0" y="622.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 9.80%)</title><rect x="1035.8" y="643.0" width="115.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1038.8" y="654.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.65%)</title><rect x="1035.8" y="627.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1038.8" y="638.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.65%)</title><rect x="1035.8" y="611.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1038.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (9 samples, 5.88%)</title><rect x="1043.5" y="627.0" width="69.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1046.5" y="638.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.31%)</title><rect x="1043.5" y="611.0" width="15.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1046.5" y="622.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.65%)</title><rect x="1051.2" y="595.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.2" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.65%)</title><rect x="1058.9" y="611.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.65%)</title><rect x="1058.9" y="595.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.96%)</title><rect x="1066.6" y="611.0" width="23.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.6" y="622.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.96%)</title><rect x="1066.6" y="595.0" width="23.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.6" y="606.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.96%)</title><rect x="1066.6" y="579.0" width="23.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.6" y="590.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.65%)</title><rect x="1066.6" y="563.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.65%)</title><rect x="1066.6" y="547.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.65%)</title><rect x="1066.6" y="531.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.6" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.31%)</title><rect x="1074.3" y="563.0" width="15.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.3" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 1.31%)</title><rect x="1089.7" y="611.0" width="15.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.7" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.65%)</title><rect x="1097.5" y="595.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.5" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.65%)</title><rect x="1105.2" y="611.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.2" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.65%)</title><rect x="1105.2" y="595.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.2" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.65%)</title><rect x="1105.2" y="579.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.2" y="590.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.65%)</title><rect x="1105.2" y="563.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.2" y="574.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.65%)</title><rect x="1105.2" y="547.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.2" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 3.27%)</title><rect x="1112.9" y="627.0" width="38.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.9" y="638.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 3.27%)</title><rect x="1112.9" y="611.0" width="38.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.9" y="622.0">Pha..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.65%)</title><rect x="1120.6" y="595.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.6" y="606.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.65%)</title><rect x="1120.6" y="579.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.6" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.65%)</title><rect x="1128.3" y="595.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.3" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.65%)</title><rect x="1128.3" y="579.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.3" y="590.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.65%)</title><rect x="1136.0" y="595.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.0" y="606.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.65%)</title><rect x="1136.0" y="579.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.0" y="590.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.65%)</title><rect x="1143.7" y="595.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.7" y="606.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.65%)</title><rect x="1143.7" y="579.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.31%)</title><rect x="1151.4" y="643.0" width="15.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.31%)</title><rect x="1151.4" y="627.0" width="15.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.31%)</title><rect x="1151.4" y="611.0" width="15.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.31%)</title><rect x="1151.4" y="595.0" width="15.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.31%)</title><rect x="1151.4" y="579.0" width="15.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.31%)</title><rect x="1151.4" y="563.0" width="15.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.4" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.31%)</title><rect x="1151.4" y="547.0" width="15.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.4" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.31%)</title><rect x="1151.4" y="531.0" width="15.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.31%)</title><rect x="1151.4" y="515.0" width="15.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.31%)</title><rect x="1151.4" y="499.0" width="15.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.31%)</title><rect x="1151.4" y="483.0" width="15.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.31%)</title><rect x="1151.4" y="467.0" width="15.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.31%)</title><rect x="1151.4" y="451.0" width="15.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.31%)</title><rect x="1151.4" y="435.0" width="15.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.31%)</title><rect x="1151.4" y="419.0" width="15.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.31%)</title><rect x="1151.4" y="403.0" width="15.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.31%)</title><rect x="1151.4" y="387.0" width="15.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.31%)</title><rect x="1151.4" y="371.0" width="15.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.31%)</title><rect x="1151.4" y="355.0" width="15.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.4" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.31%)</title><rect x="1151.4" y="339.0" width="15.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.31%)</title><rect x="1151.4" y="323.0" width="15.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.31%)</title><rect x="1151.4" y="307.0" width="15.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.31%)</title><rect x="1151.4" y="291.0" width="15.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.31%)</title><rect x="1151.4" y="275.0" width="15.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.4" y="286.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.65%)</title><rect x="1151.4" y="259.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.4" y="270.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.65%)</title><rect x="1151.4" y="243.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.4" y="254.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.65%)</title><rect x="1151.4" y="227.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.4" y="238.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.65%)</title><rect x="1151.4" y="211.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.65%)</title><rect x="1159.2" y="259.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.2" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.65%)</title><rect x="1159.2" y="243.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.65%)</title><rect x="1159.2" y="227.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.65%)</title><rect x="1159.2" y="211.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.65%)</title><rect x="1159.2" y="195.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.65%)</title><rect x="1159.2" y="179.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.2" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.65%)</title><rect x="1159.2" y="163.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.2" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.65%)</title><rect x="1159.2" y="147.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.65%)</title><rect x="1159.2" y="131.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.65%)</title><rect x="1159.2" y="115.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.65%)</title><rect x="1159.2" y="99.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.65%)</title><rect x="1159.2" y="83.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.2" y="94.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.65%)</title><rect x="1159.2" y="67.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.2" y="78.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.65%)</title><rect x="1159.2" y="51.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.2" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_leaf_type() (1 samples, 0.65%)</title><rect x="1159.2" y="35.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.2" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.96%)</title><rect x="1166.9" y="675.0" width="23.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.9" y="686.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.96%)</title><rect x="1166.9" y="659.0" width="23.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.9" y="670.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.96%)</title><rect x="1166.9" y="643.0" width="23.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.9" y="654.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.96%)</title><rect x="1166.9" y="627.0" width="23.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.9" y="638.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.31%)</title><rect x="1166.9" y="611.0" width="15.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.9" y="622.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.65%)</title><rect x="1166.9" y="595.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.9" y="606.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.65%)</title><rect x="1166.9" y="579.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.9" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.65%)</title><rect x="1166.9" y="563.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.65%)</title><rect x="1166.9" y="547.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.9" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.65%)</title><rect x="1166.9" y="531.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.9" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.65%)</title><rect x="1166.9" y="515.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.9" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.65%)</title><rect x="1166.9" y="499.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.9" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.65%)</title><rect x="1166.9" y="483.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.9" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.65%)</title><rect x="1166.9" y="467.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.9" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.65%)</title><rect x="1166.9" y="451.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.9" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.65%)</title><rect x="1166.9" y="435.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.9" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.65%)</title><rect x="1166.9" y="419.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.9" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.65%)</title><rect x="1166.9" y="403.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.9" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.65%)</title><rect x="1166.9" y="387.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.9" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.65%)</title><rect x="1166.9" y="371.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.9" y="382.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.65%)</title><rect x="1166.9" y="355.0" width="7.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1169.9" y="366.0"></text>
</g>
<g>
<title>IR::compute_code() (1 samples, 0.65%)</title><rect x="1174.6" y="595.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.6" y="606.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*) (1 samples, 0.65%)</title><rect x="1174.6" y="579.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.6" y="590.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::compute_order(BlockBegin*) (1 samples, 0.65%)</title><rect x="1174.6" y="563.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.6" y="574.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::compute_weight(BlockBegin*) (1 samples, 0.65%)</title><rect x="1174.6" y="547.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="558.0"></text>
</g>
<g>
<title>LinearScan::LinearScan(IR*, LIRGenerator*, FrameMap*) (1 samples, 0.65%)</title><rect x="1182.3" y="611.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="622.0"></text>
</g>
</g>
</svg>
