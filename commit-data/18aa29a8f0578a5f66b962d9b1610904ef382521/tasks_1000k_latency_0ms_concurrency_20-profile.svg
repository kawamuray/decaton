<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (1,042 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="10.0" y="1011.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.10%)</title><rect x="10.0" y="995.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (253 samples, 24.28%)</title><rect x="11.1" y="1011.0" width="286.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="1022.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (253 samples, 24.28%)</title><rect x="11.1" y="995.0" width="286.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="1006.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.10%)</title><rect x="11.1" y="979.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.38%)</title><rect x="12.3" y="979.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.38%)</title><rect x="12.3" y="963.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2050807863.accept (4 samples, 0.38%)</title><rect x="12.3" y="947.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.38%)</title><rect x="12.3" y="931.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.10%)</title><rect x="12.3" y="915.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.29%)</title><rect x="13.4" y="915.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.29%)</title><rect x="13.4" y="899.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.10%)</title><rect x="16.8" y="979.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.10%)</title><rect x="16.8" y="963.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.8" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="16.8" y="947.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="16.8" y="931.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="16.8" y="915.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="16.8" y="899.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="16.8" y="883.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.8" y="894.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="16.8" y="867.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.10%)</title><rect x="16.8" y="851.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.10%)</title><rect x="17.9" y="979.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="17.9" y="963.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.9" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="17.9" y="947.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="17.9" y="931.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.9" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="17.9" y="915.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.9" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="17.9" y="899.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="17.9" y="883.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="17.9" y="867.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="17.9" y="851.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="17.9" y="835.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.9" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="17.9" y="819.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="20.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (187 samples, 17.95%)</title><rect x="19.1" y="979.0" width="211.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.1" y="990.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1219383282.accept (177 samples, 16.99%)</title><rect x="19.1" y="963.0" width="200.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.1" y="974.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (177 samples, 16.99%)</title><rect x="19.1" y="947.0" width="200.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="958.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.10%)</title><rect x="19.1" y="931.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (142 samples, 13.63%)</title><rect x="20.2" y="931.0" width="160.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.2" y="942.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (142 samples, 13.63%)</title><rect x="20.2" y="915.0" width="160.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.2" y="926.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (142 samples, 13.63%)</title><rect x="20.2" y="899.0" width="160.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.2" y="910.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (142 samples, 13.63%)</title><rect x="20.2" y="883.0" width="160.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.2" y="894.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (142 samples, 13.63%)</title><rect x="20.2" y="867.0" width="160.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.2" y="878.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (142 samples, 13.63%)</title><rect x="20.2" y="851.0" width="160.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.2" y="862.0">java/util/concurrent..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="65.5" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (92 samples, 8.83%)</title><rect x="66.6" y="835.0" width="104.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.6" y="846.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (13 samples, 1.25%)</title><rect x="66.6" y="819.0" width="14.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (13 samples, 1.25%)</title><rect x="66.6" y="803.0" width="14.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 1.25%)</title><rect x="66.6" y="787.0" width="14.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.77%)</title><rect x="81.3" y="819.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.77%)</title><rect x="81.3" y="803.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.58%)</title><rect x="81.3" y="787.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.3" y="798.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (5 samples, 0.48%)</title><rect x="82.5" y="771.0" width="5.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="85.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.19%)</title><rect x="88.1" y="787.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (71 samples, 6.81%)</title><rect x="90.4" y="819.0" width="80.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.4" y="830.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (71 samples, 6.81%)</title><rect x="90.4" y="803.0" width="80.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.4" y="814.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="90.4" y="787.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (70 samples, 6.72%)</title><rect x="91.5" y="787.0" width="79.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.5" y="798.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (70 samples, 6.72%)</title><rect x="91.5" y="771.0" width="79.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="94.5" y="782.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 6.53%)</title><rect x="93.8" y="755.0" width="77.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.8" y="766.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="94.9" y="739.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="97.9" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark (58 samples, 5.57%)</title><rect x="96.1" y="739.0" width="65.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="99.1" y="750.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="98.3" y="723.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="101.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="99.5" y="723.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="102.5" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.84%)</title><rect x="100.6" y="723.0" width="45.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="103.6" y="734.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.19%)</title><rect x="145.9" y="723.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="148.9" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 1.15%)</title><rect x="148.2" y="723.0" width="13.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="151.2" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.38%)</title><rect x="161.7" y="739.0" width="4.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="164.7" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.29%)</title><rect x="166.3" y="739.0" width="3.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="169.3" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.10%)</title><rect x="169.7" y="739.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="172.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.67%)</title><rect x="170.8" y="835.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (7 samples, 0.67%)</title><rect x="170.8" y="819.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.67%)</title><rect x="170.8" y="803.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.19%)</title><rect x="178.7" y="835.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.19%)</title><rect x="178.7" y="819.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="178.7" y="803.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="179.9" y="803.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.10%)</title><rect x="179.9" y="787.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="182.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.10%)</title><rect x="181.0" y="931.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.10%)</title><rect x="181.0" y="915.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (33 samples, 3.17%)</title><rect x="182.1" y="931.0" width="37.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.1" y="942.0">com..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="182.1" y="915.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.1" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (31 samples, 2.98%)</title><rect x="183.3" y="915.0" width="35.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.3" y="926.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.77%)</title><rect x="207.0" y="899.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.0" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.67%)</title><rect x="207.0" y="883.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.0" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.67%)</title><rect x="207.0" y="867.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.0" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.67%)</title><rect x="207.0" y="851.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="209.3" y="835.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="212.3" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="209.3" y="819.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="212.3" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="209.3" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="212.3" y="814.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="209.3" y="787.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="212.3" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.38%)</title><rect x="210.4" y="835.0" width="4.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="213.4" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.10%)</title><rect x="215.0" y="883.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.0" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="216.1" y="899.0" width="2.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="219.1" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="218.4" y="915.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="221.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 0.86%)</title><rect x="219.5" y="963.0" width="10.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 0.86%)</title><rect x="219.5" y="947.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.86%)</title><rect x="219.5" y="931.0" width="10.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.86%)</title><rect x="219.5" y="915.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.5" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (8 samples, 0.77%)</title><rect x="220.6" y="899.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="229.7" y="963.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="229.7" y="947.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 5.66%)</title><rect x="230.8" y="979.0" width="66.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.8" y="990.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 5.66%)</title><rect x="230.8" y="963.0" width="66.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.8" y="974.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (41 samples, 3.93%)</title><rect x="230.8" y="947.0" width="46.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.8" y="958.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (41 samples, 3.93%)</title><rect x="230.8" y="931.0" width="46.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.8" y="942.0">org/..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="230.8" y="915.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="230.8" y="899.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.10%)</title><rect x="230.8" y="883.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="233.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="232.0" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="232.0" y="899.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.10%)</title><rect x="232.0" y="883.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (39 samples, 3.74%)</title><rect x="233.1" y="915.0" width="44.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.1" y="926.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (36 samples, 3.45%)</title><rect x="233.1" y="899.0" width="40.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.1" y="910.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (36 samples, 3.45%)</title><rect x="233.1" y="883.0" width="40.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.1" y="894.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.54%)</title><rect x="235.4" y="867.0" width="18.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.67%)</title><rect x="235.4" y="851.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="238.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.67%)</title><rect x="235.4" y="835.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.67%)</title><rect x="235.4" y="819.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.67%)</title><rect x="235.4" y="803.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.67%)</title><rect x="235.4" y="787.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.67%)</title><rect x="235.4" y="771.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.67%)</title><rect x="235.4" y="755.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.86%)</title><rect x="243.3" y="851.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.86%)</title><rect x="243.3" y="835.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (9 samples, 0.86%)</title><rect x="243.3" y="819.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (18 samples, 1.73%)</title><rect x="253.5" y="867.0" width="20.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.19%)</title><rect x="253.5" y="851.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (16 samples, 1.54%)</title><rect x="255.7" y="851.0" width="18.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 0.96%)</title><rect x="255.7" y="835.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.7" y="846.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 0.96%)</title><rect x="255.7" y="819.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.7" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="264.8" y="803.0" width="2.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="267.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.58%)</title><rect x="267.1" y="835.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.1" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.58%)</title><rect x="267.1" y="819.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.19%)</title><rect x="273.9" y="899.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.19%)</title><rect x="273.9" y="883.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="273.9" y="867.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="273.9" y="851.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="275.0" y="835.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="278.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="275.0" y="819.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.10%)</title><rect x="276.1" y="899.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="276.1" y="883.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.10%)</title><rect x="276.1" y="867.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.1" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="276.1" y="851.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.1" y="862.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.10%)</title><rect x="276.1" y="835.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.10%)</title><rect x="276.1" y="819.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 0.48%)</title><rect x="277.3" y="947.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.48%)</title><rect x="277.3" y="931.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="280.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.38%)</title><rect x="277.3" y="915.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.3" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="277.3" y="899.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/311497529.accept (1 samples, 0.10%)</title><rect x="278.4" y="883.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.10%)</title><rect x="278.4" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="278.4" y="851.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.10%)</title><rect x="278.4" y="835.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="278.4" y="819.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="278.4" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="279.5" y="899.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.5" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="279.5" y="883.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.5" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="279.5" y="867.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.5" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="279.5" y="851.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.5" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="279.5" y="835.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.5" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="279.5" y="819.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.5" y="830.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$79/692002353.get (1 samples, 0.10%)</title><rect x="279.5" y="803.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="280.7" y="899.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="280.7" y="883.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.7" y="894.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="280.7" y="867.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.7" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.10%)</title><rect x="280.7" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.7" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="280.7" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.7" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.10%)</title><rect x="280.7" y="819.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.10%)</title><rect x="281.8" y="915.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.10%)</title><rect x="281.8" y="899.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="281.8" y="883.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.10%)</title><rect x="281.8" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.10%)</title><rect x="281.8" y="851.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="284.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="281.8" y="835.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="281.8" y="819.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.10%)</title><rect x="281.8" y="803.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="284.8" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="281.8" y="787.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="284.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.38%)</title><rect x="282.9" y="947.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.19%)</title><rect x="282.9" y="931.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.10%)</title><rect x="282.9" y="915.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.10%)</title><rect x="282.9" y="899.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.10%)</title><rect x="282.9" y="883.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="282.9" y="867.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.10%)</title><rect x="282.9" y="851.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="282.9" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="282.9" y="819.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.10%)</title><rect x="282.9" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.10%)</title><rect x="282.9" y="787.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.10%)</title><rect x="282.9" y="771.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.10%)</title><rect x="282.9" y="755.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.10%)</title><rect x="282.9" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.10%)</title><rect x="282.9" y="723.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.9" y="734.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.10%)</title><rect x="282.9" y="707.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.9" y="718.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="282.9" y="691.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.9" y="702.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="282.9" y="675.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.9" y="686.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="282.9" y="659.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.9" y="670.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="282.9" y="643.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.10%)</title><rect x="284.0" y="915.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.10%)</title><rect x="284.0" y="899.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.10%)</title><rect x="284.0" y="883.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.0" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="284.0" y="867.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="287.0" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="284.0" y="851.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="287.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.19%)</title><rect x="285.2" y="931.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.19%)</title><rect x="285.2" y="915.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.19%)</title><rect x="285.2" y="899.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.19%)</title><rect x="285.2" y="883.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.19%)</title><rect x="285.2" y="867.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.19%)</title><rect x="285.2" y="851.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.10%)</title><rect x="285.2" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$TopicAndPartitionData.batchByTopic (1 samples, 0.10%)</title><rect x="285.2" y="819.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (1 samples, 0.10%)</title><rect x="285.2" y="803.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.10%)</title><rect x="286.3" y="835.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.10%)</title><rect x="286.3" y="819.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.10%)</title><rect x="286.3" y="803.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.10%)</title><rect x="286.3" y="787.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.10%)</title><rect x="286.3" y="771.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.write (1 samples, 0.10%)</title><rect x="286.3" y="755.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.10%)</title><rect x="286.3" y="739.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.10%)</title><rect x="286.3" y="723.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (9 samples, 0.86%)</title><rect x="287.4" y="947.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (9 samples, 0.86%)</title><rect x="287.4" y="931.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.4" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="288.6" y="915.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/733290574.accept (2 samples, 0.19%)</title><rect x="288.6" y="899.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.10%)</title><rect x="289.7" y="883.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="289.7" y="867.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="292.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.10%)</title><rect x="289.7" y="851.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="289.7" y="835.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="289.7" y="819.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (6 samples, 0.58%)</title><rect x="290.8" y="915.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.10%)</title><rect x="290.8" y="899.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.10%)</title><rect x="292.0" y="899.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="295.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.10%)</title><rect x="292.0" y="883.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (4 samples, 0.38%)</title><rect x="293.1" y="899.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (1 samples, 0.10%)</title><rect x="293.1" y="883.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="293.1" y="867.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="294.2" y="883.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="297.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="294.2" y="867.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="294.2" y="851.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="294.2" y="835.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="294.2" y="819.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="294.2" y="803.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="294.2" y="787.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="294.2" y="771.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.10%)</title><rect x="294.2" y="755.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.10%)</title><rect x="295.4" y="883.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="296.5" y="883.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.5" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.10%)</title><rect x="296.5" y="867.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.5" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="296.5" y="851.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.5" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (681 samples, 65.36%)</title><rect x="297.6" y="1011.0" width="771.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.6" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (681 samples, 65.36%)</title><rect x="297.6" y="995.0" width="771.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.6" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (681 samples, 65.36%)</title><rect x="297.6" y="979.0" width="771.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.6" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run (438 samples, 42.03%)</title><rect x="302.2" y="963.0" width="496.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.2" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (438 samples, 42.03%)</title><rect x="302.2" y="947.0" width="496.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="305.2" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (438 samples, 42.03%)</title><rect x="302.2" y="931.0" width="496.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.2" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (435 samples, 41.75%)</title><rect x="302.2" y="915.0" width="492.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="305.2" y="926.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenP..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.19%)</title><rect x="314.6" y="899.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.10%)</title><rect x="316.9" y="899.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.10%)</title><rect x="316.9" y="883.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/1973288729.get (1 samples, 0.10%)</title><rect x="316.9" y="867.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.10%)</title><rect x="316.9" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (138 samples, 13.24%)</title><rect x="318.0" y="899.0" width="156.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.0" y="910.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (138 samples, 13.24%)</title><rect x="318.0" y="883.0" width="156.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.0" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (138 samples, 13.24%)</title><rect x="318.0" y="867.0" width="156.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="321.0" y="878.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (138 samples, 13.24%)</title><rect x="318.0" y="851.0" width="156.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="321.0" y="862.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (138 samples, 13.24%)</title><rect x="318.0" y="835.0" width="156.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="321.0" y="846.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (138 samples, 13.24%)</title><rect x="318.0" y="819.0" width="156.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.0" y="830.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (45 samples, 4.32%)</title><rect x="318.0" y="803.0" width="51.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="321.0" y="814.0">com/f..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="328.2" y="787.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="331.2" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="328.2" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="331.2" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 1.06%)</title><rect x="329.3" y="787.0" width="12.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="332.3" y="798.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.77%)</title><rect x="332.7" y="771.0" width="9.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="335.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (10 samples, 0.96%)</title><rect x="341.8" y="787.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (9 samples, 0.86%)</title><rect x="342.9" y="771.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="345.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.48%)</title><rect x="347.5" y="755.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.48%)</title><rect x="347.5" y="739.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.48%)</title><rect x="347.5" y="723.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="350.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.48%)</title><rect x="347.5" y="707.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="350.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 1.34%)</title><rect x="353.1" y="787.0" width="15.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 0.48%)</title><rect x="363.3" y="771.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.38%)</title><rect x="363.3" y="755.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.38%)</title><rect x="363.3" y="739.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="366.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.10%)</title><rect x="367.9" y="755.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="370.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.10%)</title><rect x="367.9" y="739.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.10%)</title><rect x="367.9" y="723.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="367.9" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="370.9" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="367.9" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="370.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="367.9" y="675.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="370.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (80 samples, 7.68%)</title><rect x="369.0" y="803.0" width="90.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.0" y="814.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.29%)</title><rect x="369.0" y="787.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.10%)</title><rect x="372.4" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="375.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.58%)</title><rect x="373.5" y="787.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.48%)</title><rect x="374.6" y="771.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.58%)</title><rect x="380.3" y="787.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="383.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.58%)</title><rect x="380.3" y="771.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="383.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.48%)</title><rect x="381.4" y="755.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="384.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.38%)</title><rect x="382.6" y="739.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.6" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="383.7" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="386.7" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="383.7" y="707.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="386.7" y="718.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.10%)</title><rect x="383.7" y="691.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="386.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.19%)</title><rect x="384.8" y="723.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="387.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.38%)</title><rect x="387.1" y="787.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.19%)</title><rect x="389.4" y="771.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (59 samples, 5.66%)</title><rect x="391.6" y="787.0" width="66.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.6" y="798.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.44%)</title><rect x="393.9" y="771.0" width="17.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="396.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.58%)</title><rect x="398.4" y="755.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="401.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.58%)</title><rect x="398.4" y="739.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="401.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.58%)</title><rect x="398.4" y="723.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="401.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.19%)</title><rect x="405.2" y="755.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.19%)</title><rect x="405.2" y="739.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.29%)</title><rect x="407.5" y="755.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (42 samples, 4.03%)</title><rect x="410.9" y="771.0" width="47.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="413.9" y="782.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (42 samples, 4.03%)</title><rect x="410.9" y="755.0" width="47.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="413.9" y="766.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (42 samples, 4.03%)</title><rect x="410.9" y="739.0" width="47.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.9" y="750.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.25%)</title><rect x="413.1" y="723.0" width="14.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="416.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.29%)</title><rect x="417.7" y="707.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.29%)</title><rect x="417.7" y="691.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="420.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.29%)</title><rect x="417.7" y="675.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.19%)</title><rect x="418.8" y="659.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="421.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.38%)</title><rect x="421.1" y="707.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="424.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.38%)</title><rect x="421.1" y="691.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.29%)</title><rect x="422.2" y="675.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="425.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.19%)</title><rect x="425.6" y="707.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (10 samples, 0.96%)</title><rect x="427.9" y="723.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="430.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.67%)</title><rect x="431.3" y="707.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="434.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.67%)</title><rect x="431.3" y="691.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.67%)</title><rect x="431.3" y="675.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.3" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.67%)</title><rect x="431.3" y="659.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="434.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.58%)</title><rect x="439.2" y="723.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="442.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.58%)</title><rect x="439.2" y="707.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="442.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.58%)</title><rect x="439.2" y="691.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="442.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.58%)</title><rect x="439.2" y="675.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="442.2" y="686.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.58%)</title><rect x="439.2" y="659.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="442.2" y="670.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.38%)</title><rect x="440.3" y="643.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="443.3" y="654.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (1 samples, 0.10%)</title><rect x="444.9" y="643.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="447.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.58%)</title><rect x="446.0" y="723.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.58%)</title><rect x="446.0" y="707.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="449.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.58%)</title><rect x="446.0" y="691.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="449.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="451.7" y="675.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="454.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.48%)</title><rect x="452.8" y="723.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.10%)</title><rect x="458.4" y="787.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="461.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.25%)</title><rect x="459.6" y="803.0" width="14.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="462.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.10%)</title><rect x="459.6" y="787.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="462.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.15%)</title><rect x="460.7" y="787.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="463.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.15%)</title><rect x="460.7" y="771.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 1.15%)</title><rect x="460.7" y="755.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 1.15%)</title><rect x="460.7" y="739.0" width="13.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="463.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (258 samples, 24.76%)</title><rect x="474.3" y="899.0" width="292.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="477.3" y="910.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (45 samples, 4.32%)</title><rect x="475.4" y="883.0" width="51.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.4" y="894.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="475.4" y="867.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.10%)</title><rect x="475.4" y="851.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="478.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.10%)</title><rect x="475.4" y="835.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="478.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.19%)</title><rect x="476.6" y="867.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="479.6" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (42 samples, 4.03%)</title><rect x="478.8" y="867.0" width="47.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.8" y="878.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (38 samples, 3.65%)</title><rect x="483.4" y="851.0" width="43.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="486.4" y="862.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.58%)</title><rect x="484.5" y="835.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.38%)</title><rect x="486.8" y="819.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="489.8" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.38%)</title><rect x="486.8" y="803.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="489.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.38%)</title><rect x="486.8" y="787.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="489.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.38%)</title><rect x="491.3" y="835.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="494.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="494.7" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="497.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="494.7" y="803.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="497.7" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (27 samples, 2.59%)</title><rect x="495.8" y="835.0" width="30.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="498.8" y="846.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (14 samples, 1.34%)</title><rect x="510.5" y="819.0" width="15.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="513.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="510.5" y="803.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="513.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="510.5" y="787.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="513.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (13 samples, 1.25%)</title><rect x="511.7" y="803.0" width="14.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="514.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.29%)</title><rect x="521.9" y="787.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="524.9" y="798.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="525.3" y="787.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="528.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.38%)</title><rect x="526.4" y="883.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="529.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.29%)</title><rect x="527.5" y="867.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="530.5" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.29%)</title><rect x="527.5" y="851.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="530.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (149 samples, 14.30%)</title><rect x="530.9" y="883.0" width="168.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="533.9" y="894.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="532.1" y="867.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="535.1" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="532.1" y="851.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="535.1" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="532.1" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="535.1" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="532.1" y="819.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="535.1" y="830.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="532.1" y="803.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="535.1" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.48%)</title><rect x="533.2" y="867.0" width="5.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="536.2" y="878.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="534.3" y="851.0" width="4.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="537.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (141 samples, 13.53%)</title><rect x="538.8" y="867.0" width="159.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="541.8" y="878.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (51 samples, 4.89%)</title><rect x="545.6" y="851.0" width="57.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="548.6" y="862.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (32 samples, 3.07%)</title><rect x="559.2" y="835.0" width="36.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.2" y="846.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (32 samples, 3.07%)</title><rect x="559.2" y="819.0" width="36.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="562.2" y="830.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (23 samples, 2.21%)</title><rect x="564.9" y="803.0" width="26.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="567.9" y="814.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (23 samples, 2.21%)</title><rect x="564.9" y="787.0" width="26.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="567.9" y="798.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 2.21%)</title><rect x="564.9" y="771.0" width="26.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="567.9" y="782.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 1.06%)</title><rect x="570.6" y="755.0" width="12.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="573.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="571.7" y="739.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="574.7" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.19%)</title><rect x="572.8" y="739.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="575.8" y="750.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.19%)</title><rect x="572.8" y="723.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="575.8" y="734.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.19%)</title><rect x="572.8" y="707.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="575.8" y="718.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="572.8" y="691.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="575.8" y="702.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="572.8" y="675.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="575.8" y="686.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.10%)</title><rect x="574.0" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="577.0" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.67%)</title><rect x="575.1" y="739.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="578.1" y="750.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="576.2" y="723.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="579.2" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.48%)</title><rect x="577.4" y="723.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="580.4" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.19%)</title><rect x="578.5" y="707.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="581.5" y="718.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (2 samples, 0.19%)</title><rect x="580.7" y="707.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="583.7" y="718.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.10%)</title><rect x="583.0" y="755.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="586.0" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.58%)</title><rect x="584.1" y="755.0" width="6.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="587.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.29%)</title><rect x="590.9" y="803.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="593.9" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="594.3" y="803.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="597.3" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.67%)</title><rect x="595.5" y="835.0" width="7.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="598.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.38%)</title><rect x="603.4" y="851.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="606.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.38%)</title><rect x="603.4" y="835.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="606.4" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.38%)</title><rect x="603.4" y="819.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="606.4" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="607.9" y="851.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="610.9" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="607.9" y="835.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="610.9" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.10%)</title><rect x="607.9" y="819.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.9" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.10%)</title><rect x="607.9" y="803.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="610.9" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="607.9" y="787.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="610.9" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (79 samples, 7.58%)</title><rect x="609.1" y="851.0" width="89.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.1" y="862.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (78 samples, 7.49%)</title><rect x="610.2" y="835.0" width="88.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="613.2" y="846.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.77%)</title><rect x="610.2" y="819.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="613.2" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.77%)</title><rect x="610.2" y="803.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="613.2" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.77%)</title><rect x="610.2" y="787.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="613.2" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.77%)</title><rect x="610.2" y="771.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="613.2" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.19%)</title><rect x="617.0" y="755.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="620.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.19%)</title><rect x="617.0" y="739.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="620.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (70 samples, 6.72%)</title><rect x="619.3" y="819.0" width="79.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.3" y="830.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (60 samples, 5.76%)</title><rect x="630.6" y="803.0" width="67.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="633.6" y="814.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (32 samples, 3.07%)</title><rect x="662.3" y="787.0" width="36.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="665.3" y="798.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.48%)</title><rect x="682.7" y="771.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="685.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.77%)</title><rect x="688.3" y="771.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="691.3" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="696.3" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="699.3" y="766.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="697.4" y="771.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="700.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="698.5" y="867.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="701.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (38 samples, 3.65%)</title><rect x="699.7" y="883.0" width="43.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="702.7" y="894.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (37 samples, 3.55%)</title><rect x="700.8" y="867.0" width="41.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="703.8" y="878.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (19 samples, 1.82%)</title><rect x="703.1" y="851.0" width="21.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="706.1" y="862.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (18 samples, 1.73%)</title><rect x="703.1" y="835.0" width="20.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="706.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (14 samples, 1.34%)</title><rect x="704.2" y="819.0" width="15.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="707.2" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.29%)</title><rect x="704.2" y="803.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="707.2" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.29%)</title><rect x="704.2" y="787.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.2" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.19%)</title><rect x="705.3" y="771.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="708.3" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.19%)</title><rect x="705.3" y="755.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="708.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.19%)</title><rect x="705.3" y="739.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.19%)</title><rect x="705.3" y="723.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="708.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.67%)</title><rect x="707.6" y="803.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="710.6" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.29%)</title><rect x="712.1" y="787.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="715.1" y="798.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="712.1" y="771.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="715.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="715.5" y="803.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="718.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.29%)</title><rect x="716.6" y="803.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="719.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.29%)</title><rect x="720.0" y="819.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="723.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="722.3" y="803.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="725.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="723.4" y="835.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="726.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.29%)</title><rect x="724.6" y="851.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="727.6" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.29%)</title><rect x="724.6" y="835.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="727.6" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (5 samples, 0.48%)</title><rect x="728.0" y="851.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="731.0" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (5 samples, 0.48%)</title><rect x="728.0" y="835.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="731.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/533699941.get$Lambda (5 samples, 0.48%)</title><rect x="728.0" y="819.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="731.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/533699941.&lt;init&gt; (4 samples, 0.38%)</title><rect x="729.1" y="803.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.1" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.38%)</title><rect x="733.6" y="851.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="736.6" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.38%)</title><rect x="733.6" y="835.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="736.6" y="846.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.38%)</title><rect x="733.6" y="819.0" width="4.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="736.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.38%)</title><rect x="738.2" y="851.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.2" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="739.3" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="742.3" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="739.3" y="819.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="742.3" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="739.3" y="803.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="742.3" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (2 samples, 0.19%)</title><rect x="740.4" y="835.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="743.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="740.4" y="819.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="743.4" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="740.4" y="803.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="743.4" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="740.4" y="787.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="743.4" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="741.6" y="803.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="744.6" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="741.6" y="787.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="744.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="741.6" y="771.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="744.6" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="741.6" y="755.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="744.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="741.6" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="744.6" y="750.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="741.6" y="723.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="744.6" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="741.6" y="707.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="744.6" y="718.0"></text>
</g>
<g>
<title>SurvRateGroup::next_age_index() (1 samples, 0.10%)</title><rect x="741.6" y="691.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="744.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.10%)</title><rect x="742.7" y="883.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="745.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.92%)</title><rect x="743.8" y="883.0" width="22.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="746.8" y="894.0">j..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.48%)</title><rect x="748.3" y="867.0" width="5.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="751.3" y="878.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.48%)</title><rect x="748.3" y="851.0" width="5.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="751.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.06%)</title><rect x="754.0" y="867.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="757.0" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.58%)</title><rect x="758.5" y="851.0" width="6.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="761.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.58%)</title><rect x="758.5" y="835.0" width="6.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="761.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="765.3" y="851.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="768.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/807048600.accept (1 samples, 0.10%)</title><rect x="765.3" y="835.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="768.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (1 samples, 0.10%)</title><rect x="765.3" y="819.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="768.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/80425629.complete (1 samples, 0.10%)</title><rect x="765.3" y="803.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="768.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (1 samples, 0.10%)</title><rect x="765.3" y="787.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="768.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.10%)</title><rect x="765.3" y="771.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="768.3" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.10%)</title><rect x="765.3" y="755.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="768.3" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.10%)</title><rect x="765.3" y="739.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="768.3" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="765.3" y="723.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="768.3" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="765.3" y="707.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="768.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.63%)</title><rect x="766.5" y="899.0" width="19.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="769.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.63%)</title><rect x="766.5" y="883.0" width="19.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="769.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 1.63%)</title><rect x="766.5" y="867.0" width="19.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="769.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1258434045.accept (3 samples, 0.29%)</title><rect x="766.5" y="851.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="769.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (3 samples, 0.29%)</title><rect x="766.5" y="835.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 0.29%)</title><rect x="766.5" y="819.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.5" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.29%)</title><rect x="766.5" y="803.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="769.5" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.29%)</title><rect x="766.5" y="787.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/807048600.accept (14 samples, 1.34%)</title><rect x="769.9" y="851.0" width="15.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="772.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (14 samples, 1.34%)</title><rect x="769.9" y="835.0" width="15.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="772.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/80425629.complete (14 samples, 1.34%)</title><rect x="769.9" y="819.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (14 samples, 1.34%)</title><rect x="769.9" y="803.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="772.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (14 samples, 1.34%)</title><rect x="769.9" y="787.0" width="15.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.9" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.34%)</title><rect x="769.9" y="771.0" width="15.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="772.9" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.34%)</title><rect x="769.9" y="755.0" width="15.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="772.9" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.77%)</title><rect x="785.7" y="899.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="788.7" y="910.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.77%)</title><rect x="785.7" y="883.0" width="9.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="788.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.29%)</title><rect x="794.8" y="915.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="797.8" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="795.9" y="899.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="798.9" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="795.9" y="883.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="798.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="797.0" y="899.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (10 samples, 0.96%)</title><rect x="798.2" y="963.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="801.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.96%)</title><rect x="798.2" y="947.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="801.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.96%)</title><rect x="798.2" y="931.0" width="11.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="801.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.96%)</title><rect x="798.2" y="915.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="801.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run (1 samples, 0.10%)</title><rect x="808.4" y="899.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (229 samples, 21.98%)</title><rect x="809.5" y="963.0" width="259.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.5" y="974.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (227 samples, 21.79%)</title><rect x="810.6" y="947.0" width="257.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="813.6" y="958.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (210 samples, 20.15%)</title><rect x="824.2" y="931.0" width="237.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="827.2" y="942.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (26 samples, 2.50%)</title><rect x="835.5" y="915.0" width="29.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="838.5" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.48%)</title><rect x="865.0" y="915.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="868.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.48%)</title><rect x="865.0" y="899.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="868.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.48%)</title><rect x="865.0" y="883.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.48%)</title><rect x="865.0" y="867.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="868.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.48%)</title><rect x="870.7" y="915.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="873.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5 samples, 0.48%)</title><rect x="870.7" y="899.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="873.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (164 samples, 15.74%)</title><rect x="876.3" y="915.0" width="185.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="879.3" y="926.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (164 samples, 15.74%)</title><rect x="876.3" y="899.0" width="185.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="879.3" y="910.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.29%)</title><rect x="882.0" y="883.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="885.0" y="894.0"></text>
</g>
<g>
<title>Unsafe_Park (149 samples, 14.30%)</title><rect x="885.4" y="883.0" width="168.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="888.4" y="894.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.38%)</title><rect x="889.9" y="867.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="892.9" y="878.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="894.4" y="867.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="897.4" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 2.21%)</title><rect x="895.6" y="867.0" width="26.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="898.6" y="878.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.67%)</title><rect x="904.6" y="851.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="907.6" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.19%)</title><rect x="905.8" y="835.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="908.8" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="908.0" y="835.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="911.0" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.29%)</title><rect x="909.2" y="835.0" width="3.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="912.2" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="912.6" y="851.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="915.6" y="862.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="913.7" y="851.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.7" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.58%)</title><rect x="914.8" y="851.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="917.8" y="862.0"></text>
</g>
<g>
<title>__lll_lock_wait (13 samples, 1.25%)</title><rect x="921.6" y="867.0" width="14.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="924.6" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (35 samples, 3.36%)</title><rect x="936.3" y="867.0" width="39.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="939.3" y="878.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 4.89%)</title><rect x="976.0" y="867.0" width="57.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="979.0" y="878.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.67%)</title><rect x="1033.7" y="867.0" width="8.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1036.7" y="878.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1041.7" y="867.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1044.7" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.10%)</title><rect x="1042.8" y="867.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1045.8" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="1043.9" y="867.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1046.9" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.29%)</title><rect x="1045.0" y="867.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1048.0" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.19%)</title><rect x="1048.4" y="867.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1051.4" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1050.7" y="867.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.7" y="878.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="1051.8" y="867.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.8" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1053.0" y="867.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1056.0" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.29%)</title><rect x="1054.1" y="883.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1057.1" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.38%)</title><rect x="1057.5" y="883.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.29%)</title><rect x="1062.0" y="931.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1065.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.29%)</title><rect x="1062.0" y="915.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1065.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="1062.0" y="899.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1065.0" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="1062.0" y="883.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.0" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="1062.0" y="867.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="1062.0" y="851.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1065.0" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="1062.0" y="835.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1065.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.19%)</title><rect x="1063.2" y="899.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1066.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.19%)</title><rect x="1065.4" y="931.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1068.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.19%)</title><rect x="1065.4" y="915.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1068.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.19%)</title><rect x="1065.4" y="899.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1068.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.19%)</title><rect x="1065.4" y="883.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1068.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.workerCountOf (1 samples, 0.10%)</title><rect x="1067.7" y="947.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1070.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1068.8" y="1011.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1071.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1068.8" y="995.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1071.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1068.8" y="979.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1071.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="1068.8" y="963.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1071.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="1068.8" y="947.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1071.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="1068.8" y="931.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1071.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="1068.8" y="915.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1071.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1068.8" y="899.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1071.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1068.8" y="883.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1071.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1068.8" y="867.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1071.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1068.8" y="851.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1071.8" y="862.0"></text>
</g>
<g>
<title>start_thread (106 samples, 10.17%)</title><rect x="1070.0" y="1011.0" width="120.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1073.0" y="1022.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (106 samples, 10.17%)</title><rect x="1070.0" y="995.0" width="120.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1073.0" y="1006.0">java_start(Thre..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.92%)</title><rect x="1070.0" y="979.0" width="22.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.0" y="990.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.48%)</title><rect x="1070.0" y="963.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.0" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.48%)</title><rect x="1070.0" y="947.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.0" y="958.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.29%)</title><rect x="1070.0" y="931.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.0" y="942.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.19%)</title><rect x="1073.4" y="931.0" width="2.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1076.4" y="942.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.34%)</title><rect x="1075.6" y="963.0" width="15.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.6" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.19%)</title><rect x="1075.6" y="947.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1078.6" y="958.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.10%)</title><rect x="1075.6" y="931.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.6" y="942.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.10%)</title><rect x="1076.8" y="931.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1079.8" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.38%)</title><rect x="1077.9" y="947.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.9" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.29%)</title><rect x="1077.9" y="931.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.9" y="942.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1077.9" y="915.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.9" y="926.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1077.9" y="899.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.9" y="910.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.10%)</title><rect x="1077.9" y="883.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.9" y="894.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.19%)</title><rect x="1079.0" y="915.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1082.0" y="926.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.19%)</title><rect x="1079.0" y="899.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.0" y="910.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.10%)</title><rect x="1079.0" y="883.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.0" y="894.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.10%)</title><rect x="1079.0" y="867.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1082.0" y="878.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.10%)</title><rect x="1080.2" y="883.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.2" y="894.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.10%)</title><rect x="1080.2" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1083.2" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1081.3" y="931.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.3" y="942.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1081.3" y="915.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.3" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.77%)</title><rect x="1082.4" y="947.0" width="9.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.4" y="958.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.77%)</title><rect x="1082.4" y="931.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.4" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.77%)</title><rect x="1082.4" y="915.0" width="9.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1085.4" y="926.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.77%)</title><rect x="1082.4" y="899.0" width="9.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.4" y="910.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.77%)</title><rect x="1082.4" y="883.0" width="9.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.4" y="894.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.77%)</title><rect x="1082.4" y="867.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.4" y="878.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 0.58%)</title><rect x="1084.7" y="851.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.7" y="862.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.19%)</title><rect x="1085.8" y="835.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.8" y="846.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1086.9" y="819.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.9" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.10%)</title><rect x="1086.9" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.9" y="814.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1088.1" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.1" y="846.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.19%)</title><rect x="1089.2" y="835.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.2" y="846.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.10%)</title><rect x="1090.3" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.3" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.10%)</title><rect x="1091.5" y="963.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.5" y="974.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.10%)</title><rect x="1091.5" y="947.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.5" y="958.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.10%)</title><rect x="1091.5" y="931.0" width="1.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1094.5" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (83 samples, 7.97%)</title><rect x="1092.6" y="979.0" width="94.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.6" y="990.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (83 samples, 7.97%)</title><rect x="1092.6" y="963.0" width="94.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.6" y="974.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (83 samples, 7.97%)</title><rect x="1092.6" y="947.0" width="94.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.6" y="958.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (83 samples, 7.97%)</title><rect x="1092.6" y="931.0" width="94.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.6" y="942.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (82 samples, 7.87%)</title><rect x="1092.6" y="915.0" width="92.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.6" y="926.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (82 samples, 7.87%)</title><rect x="1092.6" y="899.0" width="92.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.6" y="910.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 4.80%)</title><rect x="1092.6" y="883.0" width="56.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.6" y="894.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.48%)</title><rect x="1092.6" y="867.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.6" y="878.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="1092.6" y="851.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.6" y="862.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.29%)</title><rect x="1093.7" y="851.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.7" y="862.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.10%)</title><rect x="1093.7" y="835.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.7" y="846.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.10%)</title><rect x="1093.7" y="819.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.7" y="830.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.10%)</title><rect x="1093.7" y="803.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.7" y="814.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="1093.7" y="787.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.7" y="798.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.10%)</title><rect x="1094.9" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.9" y="846.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.10%)</title><rect x="1094.9" y="819.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.9" y="830.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.10%)</title><rect x="1094.9" y="803.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.9" y="814.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="1094.9" y="787.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.9" y="798.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="1096.0" y="835.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.0" y="846.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.10%)</title><rect x="1097.1" y="851.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.1" y="862.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.10%)</title><rect x="1098.3" y="867.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.3" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.10%)</title><rect x="1098.3" y="851.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.3" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.38%)</title><rect x="1099.4" y="867.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1102.4" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.38%)</title><rect x="1099.4" y="851.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.4" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1099.4" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.4" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1100.5" y="835.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.5" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.10%)</title><rect x="1100.5" y="819.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.5" y="830.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.10%)</title><rect x="1100.5" y="803.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.5" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1101.7" y="835.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.7" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1102.8" y="835.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (40 samples, 3.84%)</title><rect x="1103.9" y="867.0" width="45.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.9" y="878.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1103.9" y="851.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.9" y="862.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.10%)</title><rect x="1105.1" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.1" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.48%)</title><rect x="1106.2" y="851.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.2" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1107.3" y="835.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.3" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.29%)</title><rect x="1108.5" y="835.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.5" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1108.5" y="819.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.5" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.19%)</title><rect x="1109.6" y="819.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.6" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1111.9" y="851.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.9" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1111.9" y="835.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.9" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1111.9" y="819.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.9" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.58%)</title><rect x="1113.0" y="851.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.0" y="862.0"></text>
</g>
<g>
<title>MachSpillCopyNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1117.5" y="835.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.5" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1118.7" y="835.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1121.7" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.48%)</title><rect x="1119.8" y="851.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.8" y="862.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.19%)</title><rect x="1120.9" y="835.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1123.2" y="835.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.2" y="846.0"></text>
</g>
<g>
<title>tlsLoadPNode::rule() const (1 samples, 0.10%)</title><rect x="1124.3" y="835.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.38%)</title><rect x="1125.5" y="851.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.5" y="862.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1127.7" y="835.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.7" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1128.8" y="835.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.19%)</title><rect x="1130.0" y="851.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.0" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1131.1" y="835.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.10%)</title><rect x="1132.2" y="851.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.2" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.38%)</title><rect x="1133.4" y="851.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.4" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 0.38%)</title><rect x="1133.4" y="835.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.4" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.29%)</title><rect x="1134.5" y="819.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.5" y="830.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.10%)</title><rect x="1134.5" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.5" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.10%)</title><rect x="1135.6" y="803.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.6" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.10%)</title><rect x="1136.8" y="803.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.8" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.10%)</title><rect x="1137.9" y="851.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.9" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1137.9" y="835.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.9" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1139.0" y="851.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.0" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1139.0" y="835.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.0" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.10%)</title><rect x="1140.2" y="851.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.2" y="862.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1140.2" y="835.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.2" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.58%)</title><rect x="1141.3" y="851.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.3" y="862.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.19%)</title><rect x="1145.8" y="835.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.8" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1147.0" y="819.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.0" y="830.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.10%)</title><rect x="1148.1" y="851.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.1" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (21 samples, 2.02%)</title><rect x="1149.2" y="883.0" width="23.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.2" y="894.0">C..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1149.2" y="867.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1149.2" y="851.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.2" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1149.2" y="835.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.2" y="846.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1149.2" y="819.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.2" y="830.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1149.2" y="803.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.2" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1149.2" y="787.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.2" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1149.2" y="771.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1150.4" y="867.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1150.4" y="851.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="835.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="787.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="771.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="755.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="739.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="675.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="659.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="595.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="579.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="563.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="547.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="531.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="515.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="499.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="483.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="467.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="451.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="435.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="403.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="387.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="355.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="339.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="323.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="307.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.4" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="291.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="275.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.4" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="259.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.4" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="243.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="227.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="211.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="195.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.4" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="179.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.4" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="163.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.4" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="147.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.4" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="131.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="115.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.4" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="99.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.4" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="83.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.4" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="67.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.4" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="51.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1150.4" y="35.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.4" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1151.5" y="867.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (15 samples, 1.44%)</title><rect x="1152.6" y="867.0" width="17.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.6" y="878.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1152.6" y="851.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.29%)</title><rect x="1153.8" y="851.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.29%)</title><rect x="1157.2" y="851.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.67%)</title><rect x="1160.6" y="851.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 0.48%)</title><rect x="1162.8" y="835.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.48%)</title><rect x="1162.8" y="819.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1167.4" y="803.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.4" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1167.4" y="787.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.4" y="798.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.10%)</title><rect x="1168.5" y="851.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.5" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.29%)</title><rect x="1169.6" y="867.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.6" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.29%)</title><rect x="1169.6" y="851.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.6" y="862.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1169.6" y="835.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.6" y="846.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1170.7" y="835.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="846.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1170.7" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.7" y="830.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1170.7" y="803.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1173.7" y="814.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1171.9" y="835.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.96%)</title><rect x="1173.0" y="883.0" width="11.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.0" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.96%)</title><rect x="1173.0" y="867.0" width="11.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.96%)</title><rect x="1173.0" y="851.0" width="11.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.96%)</title><rect x="1173.0" y="835.0" width="11.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.96%)</title><rect x="1173.0" y="819.0" width="11.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.96%)</title><rect x="1173.0" y="803.0" width="11.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.0" y="814.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.10%)</title><rect x="1173.0" y="787.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.0" y="798.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1173.0" y="771.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1173.0" y="755.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.10%)</title><rect x="1173.0" y="739.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.0" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1173.0" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.0" y="734.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.10%)</title><rect x="1173.0" y="707.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.77%)</title><rect x="1174.1" y="787.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.1" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.77%)</title><rect x="1174.1" y="771.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.77%)</title><rect x="1174.1" y="755.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.77%)</title><rect x="1174.1" y="739.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.77%)</title><rect x="1174.1" y="723.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.77%)</title><rect x="1174.1" y="707.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.1" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1174.1" y="691.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1174.1" y="675.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.1" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1174.1" y="659.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.1" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1174.1" y="643.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1174.1" y="627.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1174.1" y="611.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.1" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1174.1" y="595.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.1" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1174.1" y="579.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.1" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1174.1" y="563.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.1" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1174.1" y="547.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.1" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1174.1" y="531.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.1" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1174.1" y="515.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.1" y="526.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1174.1" y="499.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="510.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.10%)</title><rect x="1174.1" y="483.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.1" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.10%)</title><rect x="1174.1" y="467.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.1" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1174.1" y="451.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1174.1" y="435.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="446.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.10%)</title><rect x="1174.1" y="419.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.1" y="430.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.10%)</title><rect x="1174.1" y="403.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.1" y="414.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.10%)</title><rect x="1174.1" y="387.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.48%)</title><rect x="1175.3" y="691.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.48%)</title><rect x="1175.3" y="675.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.48%)</title><rect x="1175.3" y="659.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.48%)</title><rect x="1175.3" y="643.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.48%)</title><rect x="1175.3" y="627.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.48%)</title><rect x="1175.3" y="611.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.48%)</title><rect x="1175.3" y="595.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.48%)</title><rect x="1175.3" y="579.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.48%)</title><rect x="1175.3" y="563.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.48%)</title><rect x="1175.3" y="547.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.48%)</title><rect x="1175.3" y="531.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.48%)</title><rect x="1175.3" y="515.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="526.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.10%)</title><rect x="1175.3" y="499.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.3" y="510.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.10%)</title><rect x="1175.3" y="483.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="494.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.10%)</title><rect x="1175.3" y="467.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="478.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1175.3" y="451.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="462.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1175.3" y="435.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="446.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_virtual_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1175.3" y="419.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="430.0"></text>
</g>
<g>
<title>Method::can_be_statically_bound() const (1 samples, 0.10%)</title><rect x="1175.3" y="403.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.38%)</title><rect x="1176.4" y="499.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.38%)</title><rect x="1176.4" y="483.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.38%)</title><rect x="1176.4" y="467.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.38%)</title><rect x="1176.4" y="451.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.38%)</title><rect x="1176.4" y="435.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.38%)</title><rect x="1176.4" y="419.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.38%)</title><rect x="1176.4" y="403.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.38%)</title><rect x="1176.4" y="387.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="398.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.10%)</title><rect x="1176.4" y="371.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="382.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.10%)</title><rect x="1176.4" y="355.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="366.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="1176.4" y="339.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1177.5" y="371.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1177.5" y="355.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1177.5" y="339.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1177.5" y="323.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1177.5" y="307.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1177.5" y="291.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1177.5" y="275.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1177.5" y="259.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1177.5" y="243.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1177.5" y="227.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="238.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1177.5" y="211.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="222.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1177.5" y="195.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="206.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1177.5" y="179.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1177.5" y="163.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1177.5" y="147.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.10%)</title><rect x="1177.5" y="131.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="142.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::GrowableArray(Arena*, int, int, ciTypeFlow::Block* const&amp;) (1 samples, 0.10%)</title><rect x="1177.5" y="115.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="126.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.10%)</title><rect x="1177.5" y="99.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.7" y="211.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.7" y="195.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.7" y="179.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.7" y="163.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.7" y="147.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="158.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.10%)</title><rect x="1178.7" y="131.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="142.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.10%)</title><rect x="1178.7" y="115.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="126.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*) (1 samples, 0.10%)</title><rect x="1178.7" y="99.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1178.7" y="83.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="94.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1178.7" y="67.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="78.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.10%)</title><rect x="1178.7" y="51.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="62.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1179.8" y="211.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.8" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1179.8" y="195.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1179.8" y="179.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.8" y="190.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1179.8" y="163.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="174.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1179.8" y="147.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.8" y="158.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1179.8" y="131.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="142.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, methodHandle, KlassHandle, KlassHandle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1179.8" y="115.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.8" y="126.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.10%)</title><rect x="1179.8" y="99.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="110.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.10%)</title><rect x="1179.8" y="83.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1180.9" y="691.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1180.9" y="675.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1180.9" y="659.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1180.9" y="643.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1180.9" y="627.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1180.9" y="611.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1180.9" y="595.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1180.9" y="579.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1180.9" y="563.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.9" y="547.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.9" y="531.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.9" y="515.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.9" y="499.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.9" y="483.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.9" y="467.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.9" y="451.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.9" y="435.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.9" y="419.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.9" y="403.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.9" y="387.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.9" y="371.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.9" y="355.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.9" y="339.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.9" y="323.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.9" y="307.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.9" y="291.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.9" y="275.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.9" y="259.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.9" y="243.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.9" y="227.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1180.9" y="211.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1180.9" y="195.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="206.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1180.9" y="179.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="190.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.10%)</title><rect x="1180.9" y="163.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="174.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.10%)</title><rect x="1180.9" y="147.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="158.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.10%)</title><rect x="1180.9" y="131.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.10%)</title><rect x="1182.1" y="547.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1182.1" y="531.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="542.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1182.1" y="515.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.2" y="787.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.2" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.2" y="755.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.2" y="739.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.2" y="723.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.2" y="707.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1183.2" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="702.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.10%)</title><rect x="1183.2" y="675.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="686.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.10%)</title><rect x="1183.2" y="659.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="670.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.10%)</title><rect x="1183.2" y="643.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="654.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.10%)</title><rect x="1183.2" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="638.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.10%)</title><rect x="1184.3" y="883.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="894.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.10%)</title><rect x="1184.3" y="867.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1184.3" y="851.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="862.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1185.5" y="915.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.5" y="926.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1185.5" y="899.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.5" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1185.5" y="883.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1185.5" y="867.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="878.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.10%)</title><rect x="1185.5" y="851.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.5" y="862.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1185.5" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="846.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.10%)</title><rect x="1185.5" y="819.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.5" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.10%)</title><rect x="1185.5" y="803.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.5" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1185.5" y="787.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1185.5" y="771.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1185.5" y="755.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.5" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1185.5" y="739.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.5" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1185.5" y="723.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1185.5" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.5" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1185.5" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1185.5" y="675.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.5" y="686.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.29%)</title><rect x="1186.6" y="979.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.6" y="990.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.29%)</title><rect x="1186.6" y="963.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="974.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.10%)</title><rect x="1186.6" y="947.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.10%)</title><rect x="1186.6" y="931.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.6" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.10%)</title><rect x="1186.6" y="915.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.6" y="926.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1186.6" y="899.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="910.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1186.6" y="883.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1186.6" y="867.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="878.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1186.6" y="851.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="862.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.19%)</title><rect x="1187.7" y="947.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.7" y="958.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.19%)</title><rect x="1187.7" y="931.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="942.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.19%)</title><rect x="1187.7" y="915.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.7" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.19%)</title><rect x="1187.7" y="899.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.7" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (2 samples, 0.19%)</title><rect x="1187.7" y="883.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.7" y="894.0"></text>
</g>
<g>
<title>G1RemSet::cleanup_after_oops_into_collection_set_do() (1 samples, 0.10%)</title><rect x="1187.7" y="867.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::cleanUpCardTable() (1 samples, 0.10%)</title><rect x="1187.7" y="851.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="1187.7" y="835.0" width="1.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1190.7" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="1187.7" y="819.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1190.7" y="830.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.10%)</title><rect x="1188.9" y="867.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="878.0"></text>
</g>
</g>
</svg>
