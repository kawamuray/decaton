<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1430" onload="init(evt)" viewBox="0 0 1200 1430" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1413"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1413"> </text>
<g id="frames">
<g>
<title>all (280 samples, 100.00%)</title><rect x="10.0" y="1379.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1390.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.36%)</title><rect x="10.0" y="1363.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 7.50%)</title><rect x="14.2" y="1363.0" width="88.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1374.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.71%)</title><rect x="14.2" y="1347.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.71%)</title><rect x="14.2" y="1331.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.71%)</title><rect x="14.2" y="1315.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.71%)</title><rect x="14.2" y="1299.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.71%)</title><rect x="14.2" y="1283.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.71%)</title><rect x="14.2" y="1267.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.71%)</title><rect x="14.2" y="1251.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.71%)</title><rect x="14.2" y="1235.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.36%)</title><rect x="14.2" y="1219.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.36%)</title><rect x="14.2" y="1203.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.36%)</title><rect x="14.2" y="1187.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.36%)</title><rect x="14.2" y="1171.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.36%)</title><rect x="14.2" y="1155.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.36%)</title><rect x="14.2" y="1139.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.36%)</title><rect x="14.2" y="1123.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.36%)</title><rect x="14.2" y="1107.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.36%)</title><rect x="14.2" y="1091.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.36%)</title><rect x="14.2" y="1075.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.address (1 samples, 0.36%)</title><rect x="14.2" y="1059.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.36%)</title><rect x="18.4" y="1219.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.36%)</title><rect x="18.4" y="1203.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.36%)</title><rect x="18.4" y="1187.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.36%)</title><rect x="18.4" y="1171.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.36%)</title><rect x="18.4" y="1155.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.36%)</title><rect x="18.4" y="1139.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.36%)</title><rect x="18.4" y="1123.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.4" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.36%)</title><rect x="18.4" y="1107.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.4" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (1 samples, 0.36%)</title><rect x="18.4" y="1091.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (19 samples, 6.79%)</title><rect x="22.6" y="1347.0" width="80.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.6" y="1358.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.71%)</title><rect x="22.6" y="1331.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.6" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.36%)</title><rect x="22.6" y="1315.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.6" y="1326.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.36%)</title><rect x="22.6" y="1299.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.6" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.36%)</title><rect x="22.6" y="1283.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.6" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.36%)</title><rect x="22.6" y="1267.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.6" y="1278.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.36%)</title><rect x="22.6" y="1251.0" width="4.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="25.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.36%)</title><rect x="26.9" y="1315.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.36%)</title><rect x="26.9" y="1299.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.9" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.36%)</title><rect x="26.9" y="1283.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="29.9" y="1294.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.36%)</title><rect x="26.9" y="1267.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="29.9" y="1278.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle, int, Thread*) (1 samples, 0.36%)</title><rect x="26.9" y="1251.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="29.9" y="1262.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.36%)</title><rect x="26.9" y="1235.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="29.9" y="1246.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.36%)</title><rect x="26.9" y="1219.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="29.9" y="1230.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.36%)</title><rect x="26.9" y="1203.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="29.9" y="1214.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.36%)</title><rect x="26.9" y="1187.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="29.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.71%)</title><rect x="31.1" y="1331.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.1" y="1342.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.36%)</title><rect x="31.1" y="1315.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.1" y="1326.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.36%)</title><rect x="31.1" y="1299.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.1" y="1310.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_1 (1 samples, 0.36%)</title><rect x="31.1" y="1283.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.1" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.36%)</title><rect x="35.3" y="1315.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.3" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.36%)</title><rect x="35.3" y="1299.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="38.3" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="35.3" y="1283.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.3" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.36%)</title><rect x="35.3" y="1267.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="38.3" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="35.3" y="1251.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.3" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.36%)</title><rect x="35.3" y="1235.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.3" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.36%)</title><rect x="35.3" y="1219.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="38.3" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.36%)</title><rect x="35.3" y="1203.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="38.3" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.36%)</title><rect x="35.3" y="1187.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.3" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.36%)</title><rect x="35.3" y="1171.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/1143647063.get (1 samples, 0.36%)</title><rect x="35.3" y="1155.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 2.50%)</title><rect x="39.5" y="1331.0" width="29.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.5" y="1342.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1576067393.accept (6 samples, 2.14%)</title><rect x="39.5" y="1315.0" width="25.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.5" y="1326.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (6 samples, 2.14%)</title><rect x="39.5" y="1299.0" width="25.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.5" y="1310.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.36%)</title><rect x="39.5" y="1283.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.36%)</title><rect x="39.5" y="1267.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="42.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.36%)</title><rect x="39.5" y="1251.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.36%)</title><rect x="39.5" y="1235.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 1.79%)</title><rect x="43.7" y="1283.0" width="21.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="46.7" y="1294.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.79%)</title><rect x="43.7" y="1267.0" width="21.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.7" y="1278.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.43%)</title><rect x="43.7" y="1251.0" width="16.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="46.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.71%)</title><rect x="47.9" y="1235.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.71%)</title><rect x="47.9" y="1219.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.9" y="1230.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.71%)</title><rect x="47.9" y="1203.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.9" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="52.1" y="1187.0" width="4.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="55.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.36%)</title><rect x="56.4" y="1235.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.4" y="1246.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="60.6" y="1251.0" width="4.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="63.6" y="1262.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.36%)</title><rect x="64.8" y="1315.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.8" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.36%)</title><rect x="64.8" y="1299.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.8" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.36%)</title><rect x="64.8" y="1283.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.8" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.36%)</title><rect x="64.8" y="1267.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.8" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.36%)</title><rect x="64.8" y="1251.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 2.86%)</title><rect x="69.0" y="1331.0" width="33.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.0" y="1342.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 2.86%)</title><rect x="69.0" y="1315.0" width="33.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.0" y="1326.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 1.79%)</title><rect x="73.2" y="1299.0" width="21.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="76.2" y="1310.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.71%)</title><rect x="73.2" y="1283.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="76.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.71%)</title><rect x="73.2" y="1267.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.71%)</title><rect x="73.2" y="1251.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.36%)</title><rect x="73.2" y="1235.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.36%)</title><rect x="73.2" y="1219.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="76.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.36%)</title><rect x="73.2" y="1203.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.36%)</title><rect x="73.2" y="1187.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.36%)</title><rect x="77.4" y="1235.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="77.4" y="1219.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="77.4" y="1203.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.36%)</title><rect x="77.4" y="1187.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.36%)</title><rect x="77.4" y="1171.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.36%)</title><rect x="77.4" y="1155.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.71%)</title><rect x="81.6" y="1283.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.71%)</title><rect x="81.6" y="1267.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.36%)</title><rect x="81.6" y="1251.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.36%)</title><rect x="81.6" y="1235.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.36%)</title><rect x="81.6" y="1219.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.36%)</title><rect x="81.6" y="1203.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.36%)</title><rect x="81.6" y="1187.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.36%)</title><rect x="81.6" y="1171.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.36%)</title><rect x="81.6" y="1155.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.36%)</title><rect x="81.6" y="1139.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.6" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="81.6" y="1123.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="84.6" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="81.6" y="1107.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="84.6" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="81.6" y="1091.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="84.6" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="81.6" y="1075.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="84.6" y="1086.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.36%)</title><rect x="81.6" y="1059.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="84.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.36%)</title><rect x="85.9" y="1251.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.36%)</title><rect x="85.9" y="1235.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.36%)</title><rect x="85.9" y="1219.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.36%)</title><rect x="85.9" y="1203.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.36%)</title><rect x="90.1" y="1283.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.36%)</title><rect x="90.1" y="1267.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.1" y="1278.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.36%)</title><rect x="90.1" y="1251.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="93.1" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="90.1" y="1235.0" width="4.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="93.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.71%)</title><rect x="94.3" y="1299.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="97.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.71%)</title><rect x="94.3" y="1283.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.71%)</title><rect x="94.3" y="1267.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.36%)</title><rect x="94.3" y="1251.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.3" y="1262.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.36%)</title><rect x="94.3" y="1235.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.3" y="1246.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.36%)</title><rect x="94.3" y="1219.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.3" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.36%)</title><rect x="94.3" y="1203.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.3" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.36%)</title><rect x="94.3" y="1187.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.3" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.36%)</title><rect x="94.3" y="1171.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="97.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.36%)</title><rect x="98.5" y="1251.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.36%)</title><rect x="98.5" y="1235.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="101.5" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.36%)</title><rect x="98.5" y="1219.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="101.5" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="98.5" y="1203.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.36%)</title><rect x="98.5" y="1187.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="101.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="98.5" y="1171.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.5" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.36%)</title><rect x="98.5" y="1155.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.36%)</title><rect x="98.5" y="1139.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.5" y="1150.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.36%)</title><rect x="98.5" y="1123.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.5" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.36%)</title><rect x="98.5" y="1107.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.5" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.36%)</title><rect x="98.5" y="1091.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.5" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.36%)</title><rect x="98.5" y="1075.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (145 samples, 51.79%)</title><rect x="102.7" y="1363.0" width="611.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.7" y="1374.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (145 samples, 51.79%)</title><rect x="102.7" y="1347.0" width="611.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.7" y="1358.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (145 samples, 51.79%)</title><rect x="102.7" y="1331.0" width="611.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.7" y="1342.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2094385904.run (140 samples, 50.00%)</title><rect x="106.9" y="1315.0" width="590.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="109.9" y="1326.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2094385904.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (140 samples, 50.00%)</title><rect x="106.9" y="1299.0" width="590.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="109.9" y="1310.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (140 samples, 50.00%)</title><rect x="106.9" y="1283.0" width="590.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.9" y="1294.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (137 samples, 48.93%)</title><rect x="106.9" y="1267.0" width="577.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="109.9" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (29 samples, 10.36%)</title><rect x="115.4" y="1251.0" width="122.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.4" y="1262.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (29 samples, 10.36%)</title><rect x="115.4" y="1235.0" width="122.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.4" y="1246.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (29 samples, 10.36%)</title><rect x="115.4" y="1219.0" width="122.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="118.4" y="1230.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (29 samples, 10.36%)</title><rect x="115.4" y="1203.0" width="122.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="118.4" y="1214.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (29 samples, 10.36%)</title><rect x="115.4" y="1187.0" width="122.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="118.4" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (29 samples, 10.36%)</title><rect x="115.4" y="1171.0" width="122.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="118.4" y="1182.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 2.50%)</title><rect x="115.4" y="1155.0" width="29.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="118.4" y="1166.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.36%)</title><rect x="136.4" y="1139.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.36%)</title><rect x="136.4" y="1123.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="139.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.36%)</title><rect x="136.4" y="1107.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.36%)</title><rect x="136.4" y="1091.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.36%)</title><rect x="136.4" y="1075.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.36%)</title><rect x="136.4" y="1059.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="139.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.36%)</title><rect x="140.6" y="1139.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.36%)</title><rect x="140.6" y="1123.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="143.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.36%)</title><rect x="140.6" y="1107.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.36%)</title><rect x="140.6" y="1091.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 6.79%)</title><rect x="144.9" y="1155.0" width="80.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="147.9" y="1166.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.36%)</title><rect x="144.9" y="1139.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.36%)</title><rect x="149.1" y="1139.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.36%)</title><rect x="149.1" y="1123.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.36%)</title><rect x="149.1" y="1107.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.36%)</title><rect x="149.1" y="1091.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="152.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (17 samples, 6.07%)</title><rect x="153.3" y="1139.0" width="71.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.3" y="1150.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.07%)</title><rect x="157.5" y="1123.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.07%)</title><rect x="157.5" y="1107.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="160.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (13 samples, 4.64%)</title><rect x="170.1" y="1123.0" width="54.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.1" y="1134.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (13 samples, 4.64%)</title><rect x="170.1" y="1107.0" width="54.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.1" y="1118.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (12 samples, 4.29%)</title><rect x="174.4" y="1091.0" width="50.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.4" y="1102.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.79%)</title><rect x="178.6" y="1075.0" width="21.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.6" y="1086.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.07%)</title><rect x="187.0" y="1059.0" width="12.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.07%)</title><rect x="187.0" y="1043.0" width="12.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="190.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.07%)</title><rect x="187.0" y="1027.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="190.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 1.07%)</title><rect x="187.0" y="1011.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.43%)</title><rect x="199.6" y="1075.0" width="16.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 1.43%)</title><rect x="199.6" y="1059.0" width="16.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.43%)</title><rect x="199.6" y="1043.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="202.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.43%)</title><rect x="199.6" y="1027.0" width="16.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 1.43%)</title><rect x="199.6" y="1011.0" width="16.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="202.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.36%)</title><rect x="216.5" y="1075.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.36%)</title><rect x="216.5" y="1059.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.36%)</title><rect x="216.5" y="1043.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.36%)</title><rect x="216.5" y="1027.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.36%)</title><rect x="216.5" y="1011.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="219.5" y="1022.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.36%)</title><rect x="216.5" y="995.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.36%)</title><rect x="220.7" y="1075.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="220.7" y="1059.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="220.7" y="1043.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 1.07%)</title><rect x="224.9" y="1155.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.9" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 1.07%)</title><rect x="224.9" y="1139.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 1.07%)</title><rect x="224.9" y="1123.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.9" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.07%)</title><rect x="224.9" y="1107.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.07%)</title><rect x="224.9" y="1091.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (99 samples, 35.36%)</title><rect x="237.6" y="1251.0" width="417.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.6" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (23 samples, 8.21%)</title><rect x="237.6" y="1235.0" width="96.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.6" y="1246.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.36%)</title><rect x="246.0" y="1219.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.0" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.36%)</title><rect x="246.0" y="1203.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="1214.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (20 samples, 7.14%)</title><rect x="250.2" y="1219.0" width="84.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.2" y="1230.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (15 samples, 5.36%)</title><rect x="271.3" y="1203.0" width="63.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.3" y="1214.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.36%)</title><rect x="275.5" y="1187.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.36%)</title><rect x="275.5" y="1171.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.36%)</title><rect x="275.5" y="1155.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.36%)</title><rect x="275.5" y="1139.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.5" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (13 samples, 4.64%)</title><rect x="279.7" y="1187.0" width="54.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.7" y="1198.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (13 samples, 4.64%)</title><rect x="279.7" y="1171.0" width="54.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.7" y="1182.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 2.50%)</title><rect x="305.0" y="1155.0" width="29.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.0" y="1166.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.71%)</title><rect x="334.5" y="1235.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.71%)</title><rect x="334.5" y="1219.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.5" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.71%)</title><rect x="334.5" y="1203.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (21 samples, 7.50%)</title><rect x="342.9" y="1235.0" width="88.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="345.9" y="1246.0">com/lineco..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="342.9" y="1219.0" width="4.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="345.9" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="342.9" y="1203.0" width="4.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="345.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (20 samples, 7.14%)</title><rect x="347.1" y="1219.0" width="84.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.1" y="1230.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 2.50%)</title><rect x="351.4" y="1203.0" width="29.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="354.4" y="1214.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.14%)</title><rect x="351.4" y="1187.0" width="25.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.4" y="1198.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.14%)</title><rect x="351.4" y="1171.0" width="25.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="354.4" y="1182.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.43%)</title><rect x="359.8" y="1155.0" width="16.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.43%)</title><rect x="359.8" y="1139.0" width="16.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="362.8" y="1150.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.43%)</title><rect x="359.8" y="1123.0" width="16.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="362.8" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.71%)</title><rect x="368.2" y="1107.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="371.2" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.36%)</title><rect x="368.2" y="1091.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="371.2" y="1102.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.36%)</title><rect x="368.2" y="1075.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="371.2" y="1086.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.36%)</title><rect x="368.2" y="1059.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="371.2" y="1070.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.36%)</title><rect x="368.2" y="1043.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="371.2" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.36%)</title><rect x="368.2" y="1027.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="371.2" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.36%)</title><rect x="372.4" y="1091.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="375.4" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.36%)</title><rect x="372.4" y="1075.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="375.4" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="376.6" y="1187.0" width="4.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="379.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.36%)</title><rect x="380.9" y="1203.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.36%)</title><rect x="380.9" y="1187.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="383.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.36%)</title><rect x="380.9" y="1171.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="383.9" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 3.93%)</title><rect x="385.1" y="1203.0" width="46.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.1" y="1214.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 3.93%)</title><rect x="385.1" y="1187.0" width="46.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.1" y="1198.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.36%)</title><rect x="385.1" y="1171.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.36%)</title><rect x="385.1" y="1155.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.36%)</title><rect x="385.1" y="1139.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.36%)</title><rect x="385.1" y="1123.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 3.57%)</title><rect x="389.3" y="1171.0" width="42.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="392.3" y="1182.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 3.57%)</title><rect x="389.3" y="1155.0" width="42.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="392.3" y="1166.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 2.14%)</title><rect x="406.1" y="1139.0" width="25.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.1" y="1150.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.71%)</title><rect x="418.8" y="1123.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.8" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="423.0" y="1107.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="426.0" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="423.0" y="1091.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="426.0" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="423.0" y="1075.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="426.0" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="423.0" y="1059.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="426.0" y="1070.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.36%)</title><rect x="423.0" y="1043.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="426.0" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.36%)</title><rect x="423.0" y="1027.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="426.0" y="1038.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.36%)</title><rect x="427.2" y="1123.0" width="4.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="430.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (47 samples, 16.79%)</title><rect x="431.4" y="1235.0" width="198.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.4" y="1246.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.36%)</title><rect x="431.4" y="1219.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="434.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (46 samples, 16.43%)</title><rect x="435.6" y="1219.0" width="193.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.6" y="1230.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1222552541.process (36 samples, 12.86%)</title><rect x="439.9" y="1203.0" width="151.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.9" y="1214.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (36 samples, 12.86%)</title><rect x="439.9" y="1187.0" width="151.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="442.9" y="1198.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (36 samples, 12.86%)</title><rect x="439.9" y="1171.0" width="151.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.9" y="1182.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (36 samples, 12.86%)</title><rect x="439.9" y="1155.0" width="151.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="442.9" y="1166.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/lang/Thread.sleep (36 samples, 12.86%)</title><rect x="439.9" y="1139.0" width="151.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="442.9" y="1150.0">java/lang/Thread.sl..</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.36%)</title><rect x="456.7" y="1123.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="459.7" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.36%)</title><rect x="456.7" y="1107.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="459.7" y="1118.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="456.7" y="1091.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="459.7" y="1102.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="456.7" y="1075.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="459.7" y="1086.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.36%)</title><rect x="456.7" y="1059.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="459.7" y="1070.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.36%)</title><rect x="456.7" y="1043.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="459.7" y="1054.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.36%)</title><rect x="456.7" y="1027.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="459.7" y="1038.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle) (1 samples, 0.36%)</title><rect x="456.7" y="1011.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="459.7" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.36%)</title><rect x="456.7" y="995.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="459.7" y="1006.0"></text>
</g>
<g>
<title>nmethod::new_native_nmethod(methodHandle, int, CodeBuffer*, int, int, int, int, int, OopMapSet*) (1 samples, 0.36%)</title><rect x="456.7" y="979.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="459.7" y="990.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.36%)</title><rect x="456.7" y="963.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="459.7" y="974.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.36%)</title><rect x="456.7" y="947.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="459.7" y="958.0"></text>
</g>
<g>
<title>JVM_Sleep (31 samples, 11.07%)</title><rect x="460.9" y="1123.0" width="130.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="463.9" y="1134.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.71%)</title><rect x="473.6" y="1107.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="476.6" y="1118.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.36%)</title><rect x="482.0" y="1107.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="485.0" y="1118.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.36%)</title><rect x="486.2" y="1107.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="489.2" y="1118.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (24 samples, 8.57%)</title><rect x="490.4" y="1107.0" width="101.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="493.4" y="1118.0">os::sleep(Th..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.71%)</title><rect x="524.1" y="1091.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="527.1" y="1102.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.36%)</title><rect x="528.4" y="1075.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="531.4" y="1086.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.71%)</title><rect x="532.6" y="1091.0" width="8.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="535.6" y="1102.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 3.21%)</title><rect x="541.0" y="1091.0" width="37.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="544.0" y="1102.0">__p..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.36%)</title><rect x="578.9" y="1091.0" width="4.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="581.9" y="1102.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.36%)</title><rect x="583.1" y="1091.0" width="4.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="586.1" y="1102.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.36%)</title><rect x="587.4" y="1091.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="590.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 1.07%)</title><rect x="591.6" y="1203.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="594.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 1.07%)</title><rect x="591.6" y="1187.0" width="12.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="594.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/326715981.get$Lambda (3 samples, 1.07%)</title><rect x="591.6" y="1171.0" width="12.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="594.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/326715981.&lt;init&gt; (2 samples, 0.71%)</title><rect x="595.8" y="1155.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="598.8" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.36%)</title><rect x="604.2" y="1203.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="607.2" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.36%)</title><rect x="604.2" y="1187.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="607.2" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.36%)</title><rect x="604.2" y="1171.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="607.2" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.07%)</title><rect x="608.4" y="1203.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="611.4" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.07%)</title><rect x="608.4" y="1187.0" width="12.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="611.4" y="1198.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.36%)</title><rect x="608.4" y="1171.0" width="4.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="611.4" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.71%)</title><rect x="612.6" y="1171.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="615.6" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.36%)</title><rect x="621.1" y="1203.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="624.1" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.36%)</title><rect x="621.1" y="1187.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="624.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.36%)</title><rect x="625.3" y="1203.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="628.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.36%)</title><rect x="629.5" y="1235.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.5" y="1246.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.36%)</title><rect x="629.5" y="1219.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.5" y="1230.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="629.5" y="1203.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="632.5" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="629.5" y="1187.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="632.5" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="629.5" y="1171.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="632.5" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="629.5" y="1155.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="632.5" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="629.5" y="1139.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="632.5" y="1150.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.36%)</title><rect x="629.5" y="1123.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="632.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.79%)</title><rect x="633.7" y="1235.0" width="21.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.7" y="1246.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.36%)</title><rect x="650.6" y="1219.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="653.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.36%)</title><rect x="650.6" y="1203.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="653.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/289045929.accept (1 samples, 0.36%)</title><rect x="650.6" y="1187.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.36%)</title><rect x="650.6" y="1171.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="653.6" y="1182.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.36%)</title><rect x="650.6" y="1155.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="653.6" y="1166.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.36%)</title><rect x="650.6" y="1139.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.50%)</title><rect x="654.8" y="1251.0" width="29.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.8" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.50%)</title><rect x="654.8" y="1235.0" width="29.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.8" y="1246.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.50%)</title><rect x="654.8" y="1219.0" width="29.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="657.8" y="1230.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1461961977.accept (7 samples, 2.50%)</title><rect x="654.8" y="1203.0" width="29.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.8" y="1214.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (7 samples, 2.50%)</title><rect x="654.8" y="1187.0" width="29.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="657.8" y="1198.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/670828877.complete (7 samples, 2.50%)</title><rect x="654.8" y="1171.0" width="29.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.8" y="1182.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (7 samples, 2.50%)</title><rect x="654.8" y="1155.0" width="29.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="657.8" y="1166.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 2.50%)</title><rect x="654.8" y="1139.0" width="29.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="657.8" y="1150.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 2.50%)</title><rect x="654.8" y="1123.0" width="29.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="657.8" y="1134.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 2.50%)</title><rect x="654.8" y="1107.0" width="29.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.8" y="1118.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 2.50%)</title><rect x="654.8" y="1091.0" width="29.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.8" y="1102.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (7 samples, 2.50%)</title><rect x="654.8" y="1075.0" width="29.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.8" y="1086.0">ch..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.07%)</title><rect x="684.3" y="1267.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="687.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.43%)</title><rect x="696.9" y="1315.0" width="16.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="699.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.07%)</title><rect x="701.1" y="1299.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="704.1" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.71%)</title><rect x="701.1" y="1283.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="704.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.71%)</title><rect x="701.1" y="1267.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="704.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.71%)</title><rect x="701.1" y="1251.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="704.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.36%)</title><rect x="709.6" y="1283.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.36%)</title><rect x="709.6" y="1267.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="712.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.36%)</title><rect x="709.6" y="1251.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="712.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.36%)</title><rect x="709.6" y="1235.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="712.6" y="1246.0"></text>
</g>
<g>
<title>start_thread (113 samples, 40.36%)</title><rect x="713.8" y="1363.0" width="476.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="716.8" y="1374.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (113 samples, 40.36%)</title><rect x="713.8" y="1347.0" width="476.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="716.8" y="1358.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 2.86%)</title><rect x="713.8" y="1331.0" width="33.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="716.8" y="1342.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 2.86%)</title><rect x="713.8" y="1315.0" width="33.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="716.8" y="1326.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 2.50%)</title><rect x="713.8" y="1299.0" width="29.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="716.8" y="1310.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 2.50%)</title><rect x="713.8" y="1283.0" width="29.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="716.8" y="1294.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.79%)</title><rect x="722.2" y="1267.0" width="21.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="725.2" y="1278.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.36%)</title><rect x="739.1" y="1251.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="742.1" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.36%)</title><rect x="743.3" y="1299.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="746.3" y="1310.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.36%)</title><rect x="743.3" y="1283.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="746.3" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.36%)</title><rect x="743.3" y="1267.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="746.3" y="1278.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.36%)</title><rect x="743.3" y="1251.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="746.3" y="1262.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.36%)</title><rect x="743.3" y="1235.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="746.3" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.36%)</title><rect x="743.3" y="1219.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="746.3" y="1230.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.36%)</title><rect x="743.3" y="1203.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="746.3" y="1214.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.36%)</title><rect x="743.3" y="1187.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="746.3" y="1198.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.36%)</title><rect x="743.3" y="1171.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="746.3" y="1182.0"></text>
</g>
<g>
<title>JavaThread::run() (105 samples, 37.50%)</title><rect x="747.5" y="1331.0" width="442.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="750.5" y="1342.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (105 samples, 37.50%)</title><rect x="747.5" y="1315.0" width="442.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="750.5" y="1326.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (105 samples, 37.50%)</title><rect x="747.5" y="1299.0" width="442.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="750.5" y="1310.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (105 samples, 37.50%)</title><rect x="747.5" y="1283.0" width="442.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="750.5" y="1294.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.36%)</title><rect x="747.5" y="1267.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="750.5" y="1278.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.36%)</title><rect x="747.5" y="1251.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="750.5" y="1262.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.36%)</title><rect x="747.5" y="1235.0" width="4.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="750.5" y="1246.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (103 samples, 36.79%)</title><rect x="751.7" y="1267.0" width="434.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="754.7" y="1278.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (103 samples, 36.79%)</title><rect x="751.7" y="1251.0" width="434.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="754.7" y="1262.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 21.43%)</title><rect x="751.7" y="1235.0" width="252.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="754.7" y="1246.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.71%)</title><rect x="751.7" y="1219.0" width="8.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="754.7" y="1230.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.71%)</title><rect x="751.7" y="1203.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="754.7" y="1214.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.71%)</title><rect x="760.1" y="1219.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="763.1" y="1230.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.71%)</title><rect x="760.1" y="1203.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="763.1" y="1214.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_safepoint(int, OopMap*) (1 samples, 0.36%)</title><rect x="760.1" y="1187.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="763.1" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.36%)</title><rect x="764.4" y="1187.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="767.4" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="764.4" y="1171.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="767.4" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 2.86%)</title><rect x="768.6" y="1219.0" width="33.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="771.6" y="1230.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 2.86%)</title><rect x="768.6" y="1203.0" width="33.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="771.6" y="1214.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (5 samples, 1.79%)</title><rect x="772.8" y="1187.0" width="21.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="775.8" y="1198.0">A..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.71%)</title><rect x="793.9" y="1187.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="796.9" y="1198.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.71%)</title><rect x="793.9" y="1171.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="796.9" y="1182.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.36%)</title><rect x="793.9" y="1155.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="796.9" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.36%)</title><rect x="793.9" y="1139.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="796.9" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.36%)</title><rect x="793.9" y="1123.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="796.9" y="1134.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.36%)</title><rect x="798.1" y="1155.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="801.1" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.71%)</title><rect x="802.3" y="1219.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="805.3" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.71%)</title><rect x="802.3" y="1203.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="805.3" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.36%)</title><rect x="802.3" y="1187.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="805.3" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.36%)</title><rect x="802.3" y="1171.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="805.3" y="1182.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.36%)</title><rect x="802.3" y="1155.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="805.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.36%)</title><rect x="806.5" y="1187.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="809.5" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.36%)</title><rect x="806.5" y="1171.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="809.5" y="1182.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.36%)</title><rect x="806.5" y="1155.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="809.5" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (46 samples, 16.43%)</title><rect x="810.7" y="1219.0" width="193.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="813.7" y="1230.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.71%)</title><rect x="810.7" y="1203.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="813.7" y="1214.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.36%)</title><rect x="819.1" y="1203.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="822.1" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.43%)</title><rect x="823.4" y="1203.0" width="16.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="826.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.36%)</title><rect x="831.8" y="1187.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="834.8" y="1198.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.36%)</title><rect x="836.0" y="1187.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="839.0" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.07%)</title><rect x="840.2" y="1203.0" width="12.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="843.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 1.07%)</title><rect x="840.2" y="1187.0" width="12.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="843.2" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="848.6" y="1171.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="851.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.43%)</title><rect x="852.9" y="1203.0" width="16.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.9" y="1214.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.36%)</title><rect x="865.5" y="1187.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="868.5" y="1198.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.36%)</title><rect x="865.5" y="1171.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="868.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.50%)</title><rect x="869.7" y="1203.0" width="29.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="872.7" y="1214.0">Ph..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.71%)</title><rect x="869.7" y="1187.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="872.7" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="878.1" y="1187.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="881.1" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.43%)</title><rect x="882.4" y="1187.0" width="16.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="885.4" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="895.0" y="1171.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="898.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.36%)</title><rect x="899.2" y="1203.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="902.2" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.36%)</title><rect x="899.2" y="1187.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="902.2" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.71%)</title><rect x="903.4" y="1203.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="906.4" y="1214.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.36%)</title><rect x="907.6" y="1187.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="910.6" y="1198.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.36%)</title><rect x="907.6" y="1171.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="910.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.71%)</title><rect x="911.9" y="1203.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="914.9" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.36%)</title><rect x="916.1" y="1187.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="919.1" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.07%)</title><rect x="920.3" y="1203.0" width="12.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="923.3" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.36%)</title><rect x="928.7" y="1187.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="931.7" y="1198.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 3.57%)</title><rect x="932.9" y="1203.0" width="42.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="935.9" y="1214.0">Phas..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 3.57%)</title><rect x="932.9" y="1187.0" width="42.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="935.9" y="1198.0">Phas..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 3.57%)</title><rect x="932.9" y="1171.0" width="42.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="935.9" y="1182.0">Phas..</text>
</g>
<g>
<title>IndexSet::swap(IndexSet*) (1 samples, 0.36%)</title><rect x="932.9" y="1155.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="935.9" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.36%)</title><rect x="937.1" y="1155.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="940.1" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 1.07%)</title><rect x="941.4" y="1155.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="944.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (5 samples, 1.79%)</title><rect x="954.0" y="1155.0" width="21.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="957.0" y="1166.0">P..</text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.36%)</title><rect x="975.1" y="1203.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.1" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="975.1" y="1187.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="978.1" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 2.14%)</title><rect x="979.3" y="1203.0" width="25.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="982.3" y="1214.0">P..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.36%)</title><rect x="983.5" y="1187.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="986.5" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 1.43%)</title><rect x="987.7" y="1187.0" width="16.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.7" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="1000.4" y="1171.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1003.4" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (34 samples, 12.14%)</title><rect x="1004.6" y="1235.0" width="143.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1007.6" y="1246.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.36%)</title><rect x="1004.6" y="1219.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.36%)</title><rect x="1004.6" y="1203.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1007.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1187.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1007.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1171.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1155.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1139.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1123.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1007.6" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1107.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1091.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1007.6" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1075.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1007.6" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1059.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1043.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1007.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1027.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1007.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="1011.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1007.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="995.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="979.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1007.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="963.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1007.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="947.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1007.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="931.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1007.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="915.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1007.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="899.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1007.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="883.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1007.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="867.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1007.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="851.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1007.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="835.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1007.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="819.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="803.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1007.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="787.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1007.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="771.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.36%)</title><rect x="1004.6" y="755.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.6" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.36%)</title><rect x="1008.8" y="1219.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1011.8" y="1230.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.36%)</title><rect x="1008.8" y="1203.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.8" y="1214.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.36%)</title><rect x="1008.8" y="1187.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1011.8" y="1198.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.36%)</title><rect x="1008.8" y="1171.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1011.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (25 samples, 8.93%)</title><rect x="1013.0" y="1219.0" width="105.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1016.0" y="1230.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.36%)</title><rect x="1013.0" y="1203.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1016.0" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 6.43%)</title><rect x="1017.2" y="1203.0" width="75.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1020.2" y="1214.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 5.71%)</title><rect x="1025.6" y="1187.0" width="67.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.6" y="1198.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (16 samples, 5.71%)</title><rect x="1025.6" y="1171.0" width="67.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.6" y="1182.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.36%)</title><rect x="1084.6" y="1155.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1087.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.36%)</title><rect x="1088.9" y="1155.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.36%)</title><rect x="1088.9" y="1139.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.71%)</title><rect x="1093.1" y="1203.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.1" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 1.43%)</title><rect x="1101.5" y="1203.0" width="16.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.5" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.36%)</title><rect x="1101.5" y="1187.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 1.07%)</title><rect x="1105.7" y="1187.0" width="12.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca(Node*, Node*) const (1 samples, 0.36%)</title><rect x="1105.7" y="1171.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.36%)</title><rect x="1105.7" y="1155.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.36%)</title><rect x="1105.7" y="1139.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.36%)</title><rect x="1109.9" y="1171.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.36%)</title><rect x="1114.1" y="1171.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.36%)</title><rect x="1118.4" y="1219.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.36%)</title><rect x="1118.4" y="1203.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.43%)</title><rect x="1122.6" y="1219.0" width="16.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.43%)</title><rect x="1122.6" y="1203.0" width="16.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.6" y="1214.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.71%)</title><rect x="1126.8" y="1187.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.8" y="1198.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1135.2" y="1187.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.2" y="1198.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1135.2" y="1171.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.2" y="1182.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.36%)</title><rect x="1135.2" y="1155.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.2" y="1166.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.36%)</title><rect x="1135.2" y="1139.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.2" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.36%)</title><rect x="1135.2" y="1123.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.2" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.36%)</title><rect x="1139.4" y="1219.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.4" y="1230.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.36%)</title><rect x="1139.4" y="1203.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.36%)</title><rect x="1139.4" y="1187.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.36%)</title><rect x="1139.4" y="1171.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.4" y="1182.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.36%)</title><rect x="1139.4" y="1155.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.4" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.36%)</title><rect x="1143.6" y="1219.0" width="4.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1146.6" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.14%)</title><rect x="1147.9" y="1235.0" width="25.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.9" y="1246.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.14%)</title><rect x="1147.9" y="1219.0" width="25.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.9" y="1230.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.14%)</title><rect x="1147.9" y="1203.0" width="25.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.9" y="1214.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.14%)</title><rect x="1147.9" y="1187.0" width="25.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.9" y="1198.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.14%)</title><rect x="1147.9" y="1171.0" width="25.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.9" y="1182.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.14%)</title><rect x="1147.9" y="1155.0" width="25.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.9" y="1166.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.14%)</title><rect x="1147.9" y="1139.0" width="25.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.9" y="1150.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.14%)</title><rect x="1147.9" y="1123.0" width="25.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.9" y="1134.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.14%)</title><rect x="1147.9" y="1107.0" width="25.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.9" y="1118.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.14%)</title><rect x="1147.9" y="1091.0" width="25.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.9" y="1102.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.14%)</title><rect x="1147.9" y="1075.0" width="25.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.9" y="1086.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.14%)</title><rect x="1147.9" y="1059.0" width="25.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.9" y="1070.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1147.9" y="1043.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.9" y="1054.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.36%)</title><rect x="1147.9" y="1027.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.9" y="1038.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.36%)</title><rect x="1147.9" y="1011.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.9" y="1022.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1147.9" y="995.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.9" y="1006.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.36%)</title><rect x="1147.9" y="979.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.9" y="990.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.36%)</title><rect x="1147.9" y="963.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.9" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.36%)</title><rect x="1147.9" y="947.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.9" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.36%)</title><rect x="1147.9" y="931.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.9" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1147.9" y="915.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.9" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1147.9" y="899.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.36%)</title><rect x="1147.9" y="883.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.9" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.36%)</title><rect x="1147.9" y="867.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.9" y="878.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.36%)</title><rect x="1147.9" y="851.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.9" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1147.9" y="835.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.9" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1147.9" y="819.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.9" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1147.9" y="803.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.9" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.36%)</title><rect x="1147.9" y="787.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.9" y="798.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.36%)</title><rect x="1152.1" y="1043.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.1" y="1054.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.36%)</title><rect x="1152.1" y="1027.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.1" y="1038.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.36%)</title><rect x="1152.1" y="1011.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.1" y="1022.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.36%)</title><rect x="1152.1" y="995.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.1" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.36%)</title><rect x="1152.1" y="979.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="1152.1" y="963.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.1" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1156.3" y="1043.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.3" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1156.3" y="1027.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1156.3" y="1011.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1156.3" y="995.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1156.3" y="979.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1156.3" y="963.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.3" y="974.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.36%)</title><rect x="1156.3" y="947.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.3" y="958.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.36%)</title><rect x="1156.3" y="931.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.3" y="942.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.36%)</title><rect x="1156.3" y="915.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.3" y="926.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.36%)</title><rect x="1156.3" y="899.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.3" y="910.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.36%)</title><rect x="1156.3" y="883.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.3" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.07%)</title><rect x="1160.5" y="1043.0" width="12.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.5" y="1054.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.36%)</title><rect x="1160.5" y="1027.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.5" y="1038.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.36%)</title><rect x="1160.5" y="1011.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.5" y="1022.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.36%)</title><rect x="1160.5" y="995.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.5" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1160.5" y="979.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.5" y="990.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1160.5" y="963.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.5" y="974.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.36%)</title><rect x="1160.5" y="947.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.5" y="958.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.36%)</title><rect x="1160.5" y="931.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.5" y="942.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.36%)</title><rect x="1160.5" y="915.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.5" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="1160.5" y="899.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.5" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1164.7" y="1027.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.7" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1164.7" y="1011.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1164.7" y="995.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1164.7" y="979.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1164.7" y="963.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1164.7" y="947.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.7" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1164.7" y="931.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.7" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1164.7" y="915.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1164.7" y="899.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1164.7" y="883.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1164.7" y="867.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1164.7" y="851.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1164.7" y="835.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.7" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1164.7" y="819.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1164.7" y="803.0" width="8.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1164.7" y="787.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1164.7" y="771.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1164.7" y="755.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="766.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1164.7" y="739.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="750.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.36%)</title><rect x="1164.7" y="723.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.7" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.36%)</title><rect x="1164.7" y="707.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.7" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.36%)</title><rect x="1164.7" y="691.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.36%)</title><rect x="1164.7" y="675.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.7" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1164.7" y="659.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1164.7" y="643.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.7" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.36%)</title><rect x="1164.7" y="627.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.7" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.36%)</title><rect x="1164.7" y="611.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.7" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.36%)</title><rect x="1164.7" y="595.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.7" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1164.7" y="579.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.7" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1164.7" y="563.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.7" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1164.7" y="547.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1164.7" y="531.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.7" y="542.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1164.7" y="515.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="526.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.36%)</title><rect x="1164.7" y="499.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.7" y="510.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.36%)</title><rect x="1164.7" y="483.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.7" y="494.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.36%)</title><rect x="1164.7" y="467.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="739.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.9" y="723.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.9" y="707.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.9" y="691.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.9" y="675.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1168.9" y="659.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="643.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.9" y="627.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.9" y="611.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.9" y="595.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.9" y="579.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1168.9" y="563.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="547.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.9" y="531.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.9" y="515.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.9" y="499.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.9" y="483.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1168.9" y="467.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.9" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="451.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="435.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.9" y="419.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.9" y="403.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.9" y="387.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.9" y="371.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1168.9" y="355.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="339.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.9" y="323.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.9" y="307.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.9" y="291.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.9" y="275.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1168.9" y="259.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.9" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="243.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="227.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.9" y="211.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.9" y="195.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.9" y="179.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.9" y="163.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1168.9" y="147.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.9" y="158.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="131.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="142.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.36%)</title><rect x="1168.9" y="115.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="126.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1168.9" y="99.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="110.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.36%)</title><rect x="1168.9" y="83.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.36%)</title><rect x="1168.9" y="67.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.36%)</title><rect x="1168.9" y="51.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.36%)</title><rect x="1168.9" y="35.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 1.07%)</title><rect x="1173.1" y="1235.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.1" y="1246.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.36%)</title><rect x="1173.1" y="1219.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.1" y="1230.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.36%)</title><rect x="1177.4" y="1219.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="1230.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.36%)</title><rect x="1181.6" y="1219.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.6" y="1230.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.36%)</title><rect x="1185.8" y="1267.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="1278.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.36%)</title><rect x="1185.8" y="1251.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="1262.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.36%)</title><rect x="1185.8" y="1235.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="1246.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.36%)</title><rect x="1185.8" y="1219.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.8" y="1230.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.36%)</title><rect x="1185.8" y="1203.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="1214.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.36%)</title><rect x="1185.8" y="1187.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="1198.0"></text>
</g>
<g>
<title>Instruction::as_Constant() (1 samples, 0.36%)</title><rect x="1185.8" y="1171.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.8" y="1182.0"></text>
</g>
</g>
</svg>
