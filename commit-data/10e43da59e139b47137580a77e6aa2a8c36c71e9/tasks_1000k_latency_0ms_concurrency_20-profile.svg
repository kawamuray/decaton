<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1381"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1381"> </text>
<g id="frames">
<g>
<title>all (1,208 samples, 100.00%)</title><rect x="10.0" y="1347.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (262 samples, 21.69%)</title><rect x="10.0" y="1331.0" width="255.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (261 samples, 21.61%)</title><rect x="10.0" y="1315.0" width="255.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1326.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.25%)</title><rect x="12.0" y="1299.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.0" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.25%)</title><rect x="12.0" y="1283.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2050807863.accept (3 samples, 0.25%)</title><rect x="12.0" y="1267.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.25%)</title><rect x="12.0" y="1251.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.25%)</title><rect x="12.0" y="1235.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.0" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.17%)</title><rect x="12.9" y="1219.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.08%)</title><rect x="14.9" y="1299.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="14.9" y="1283.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.9" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="14.9" y="1267.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.9" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="14.9" y="1251.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.9" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="14.9" y="1235.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.9" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="14.9" y="1219.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="14.9" y="1203.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="14.9" y="1187.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="14.9" y="1171.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="14.9" y="1155.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="14.9" y="1139.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/895331028.get (1 samples, 0.08%)</title><rect x="14.9" y="1123.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.17%)</title><rect x="15.9" y="1299.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.9" y="1310.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="16.8" y="1283.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.8" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="16.8" y="1267.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="19.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (187 samples, 15.48%)</title><rect x="17.8" y="1299.0" width="182.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.8" y="1310.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1219383282.accept (177 samples, 14.65%)</title><rect x="18.8" y="1283.0" width="172.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.8" y="1294.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (175 samples, 14.49%)</title><rect x="20.7" y="1267.0" width="171.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.7" y="1278.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="21.7" y="1251.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="24.7" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="21.7" y="1235.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="24.7" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="21.7" y="1219.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.7" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="21.7" y="1203.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="24.7" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="21.7" y="1187.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="24.7" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="21.7" y="1171.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.7" y="1182.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="21.7" y="1155.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.7" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="21.7" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="24.7" y="1150.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="21.7" y="1123.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="24.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.08%)</title><rect x="22.7" y="1251.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.7" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (141 samples, 11.67%)</title><rect x="23.7" y="1251.0" width="137.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.7" y="1262.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (141 samples, 11.67%)</title><rect x="23.7" y="1235.0" width="137.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.7" y="1246.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (141 samples, 11.67%)</title><rect x="23.7" y="1219.0" width="137.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.7" y="1230.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (141 samples, 11.67%)</title><rect x="23.7" y="1203.0" width="137.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.7" y="1214.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (141 samples, 11.67%)</title><rect x="23.7" y="1187.0" width="137.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.7" y="1198.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (141 samples, 11.67%)</title><rect x="23.7" y="1171.0" width="137.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.7" y="1182.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (95 samples, 7.86%)</title><rect x="23.7" y="1155.0" width="92.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.7" y="1166.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 1.57%)</title><rect x="23.7" y="1139.0" width="18.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 1.57%)</title><rect x="23.7" y="1123.0" width="18.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 1.08%)</title><rect x="29.5" y="1107.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (13 samples, 1.08%)</title><rect x="29.5" y="1091.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.75%)</title><rect x="42.2" y="1139.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.75%)</title><rect x="42.2" y="1123.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.17%)</title><rect x="44.2" y="1107.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.2" y="1118.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.17%)</title><rect x="44.2" y="1091.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="47.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.41%)</title><rect x="46.1" y="1107.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (67 samples, 5.55%)</title><rect x="51.0" y="1139.0" width="65.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.0" y="1150.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (67 samples, 5.55%)</title><rect x="51.0" y="1123.0" width="65.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.0" y="1134.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (66 samples, 5.46%)</title><rect x="51.0" y="1107.0" width="64.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.0" y="1118.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (66 samples, 5.46%)</title><rect x="51.0" y="1091.0" width="64.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.0" y="1102.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (65 samples, 5.38%)</title><rect x="52.0" y="1075.0" width="63.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.0" y="1086.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (55 samples, 4.55%)</title><rect x="53.0" y="1059.0" width="53.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="56.0" y="1070.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="54.0" y="1043.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="57.0" y="1054.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="54.9" y="1043.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="57.9" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="55.9" y="1043.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="58.9" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_signal (32 samples, 2.65%)</title><rect x="56.9" y="1043.0" width="31.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="59.9" y="1054.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.33%)</title><rect x="88.1" y="1043.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="91.1" y="1054.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.24%)</title><rect x="92.1" y="1043.0" width="14.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="95.1" y="1054.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 0.58%)</title><rect x="106.7" y="1059.0" width="6.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="109.7" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="113.5" y="1059.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="116.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="115.5" y="1107.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.33%)</title><rect x="116.5" y="1155.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.33%)</title><rect x="116.5" y="1139.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.33%)</title><rect x="116.5" y="1123.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (42 samples, 3.48%)</title><rect x="120.4" y="1155.0" width="41.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="123.4" y="1166.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (42 samples, 3.48%)</title><rect x="120.4" y="1139.0" width="41.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.4" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="120.4" y="1123.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="120.4" y="1107.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (41 samples, 3.39%)</title><rect x="121.4" y="1123.0" width="40.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="124.4" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="156.5" y="1107.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="159.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.25%)</title><rect x="157.5" y="1107.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.5" y="1118.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="160.4" y="1107.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="163.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.25%)</title><rect x="161.4" y="1251.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="164.4" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.25%)</title><rect x="161.4" y="1235.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="164.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.08%)</title><rect x="164.3" y="1251.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.3" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="164.3" y="1235.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="167.3" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="164.3" y="1219.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (27 samples, 2.24%)</title><rect x="165.3" y="1251.0" width="26.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="168.3" y="1262.0">c..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="165.3" y="1235.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="168.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 2.15%)</title><rect x="166.3" y="1235.0" width="25.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.3" y="1246.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.66%)</title><rect x="181.9" y="1219.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.25%)</title><rect x="181.9" y="1203.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.41%)</title><rect x="184.9" y="1203.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.9" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="189.7" y="1219.0" width="2.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="192.7" y="1230.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.25%)</title><rect x="191.7" y="1283.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="194.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.08%)</title><rect x="194.6" y="1283.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="197.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.08%)</title><rect x="194.6" y="1267.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="194.6" y="1251.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.6" y="1262.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="194.6" y="1235.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="197.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.25%)</title><rect x="195.6" y="1283.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.25%)</title><rect x="195.6" y="1267.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.25%)</title><rect x="195.6" y="1251.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.25%)</title><rect x="195.6" y="1235.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.6" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.25%)</title><rect x="195.6" y="1219.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="198.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.17%)</title><rect x="198.5" y="1283.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.17%)</title><rect x="198.5" y="1267.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.08%)</title><rect x="199.5" y="1251.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="199.5" y="1235.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="199.5" y="1219.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (66 samples, 5.46%)</title><rect x="200.5" y="1299.0" width="64.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.5" y="1310.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (66 samples, 5.46%)</title><rect x="200.5" y="1283.0" width="64.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="203.5" y="1294.0">org/apa..</text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.08%)</title><rect x="201.5" y="1267.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (35 samples, 2.90%)</title><rect x="202.4" y="1267.0" width="34.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.4" y="1278.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="202.4" y="1251.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="202.4" y="1235.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 2.81%)</title><rect x="203.4" y="1251.0" width="33.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.4" y="1262.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 2.81%)</title><rect x="203.4" y="1235.0" width="33.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.4" y="1246.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (28 samples, 2.32%)</title><rect x="203.4" y="1219.0" width="27.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.4" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (28 samples, 2.32%)</title><rect x="203.4" y="1203.0" width="27.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.4" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.83%)</title><rect x="204.4" y="1187.0" width="9.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.33%)</title><rect x="210.2" y="1171.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="213.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.33%)</title><rect x="210.2" y="1155.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.33%)</title><rect x="210.2" y="1139.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.33%)</title><rect x="210.2" y="1123.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.33%)</title><rect x="210.2" y="1107.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.33%)</title><rect x="210.2" y="1091.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="213.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.33%)</title><rect x="210.2" y="1075.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (16 samples, 1.32%)</title><rect x="214.2" y="1187.0" width="15.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="214.2" y="1171.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="217.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.24%)</title><rect x="215.1" y="1171.0" width="14.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (15 samples, 1.24%)</title><rect x="215.1" y="1155.0" width="14.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.1" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (15 samples, 1.24%)</title><rect x="215.1" y="1139.0" width="14.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.1" y="1150.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (10 samples, 0.83%)</title><rect x="220.0" y="1123.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (10 samples, 0.83%)</title><rect x="220.0" y="1107.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (10 samples, 0.83%)</title><rect x="220.0" y="1091.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (10 samples, 0.83%)</title><rect x="220.0" y="1075.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.0" y="1086.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="227.8" y="1059.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="230.8" y="1070.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="228.8" y="1059.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="231.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="229.8" y="1187.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.17%)</title><rect x="230.8" y="1219.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.17%)</title><rect x="230.8" y="1203.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="230.8" y="1187.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="230.8" y="1171.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.8" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="230.8" y="1155.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="233.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="231.7" y="1187.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="231.7" y="1171.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="231.7" y="1155.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="231.7" y="1139.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.7" y="1150.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.08%)</title><rect x="231.7" y="1123.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.7" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="231.7" y="1107.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.25%)</title><rect x="232.7" y="1219.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="235.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.25%)</title><rect x="232.7" y="1203.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.17%)</title><rect x="232.7" y="1187.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.17%)</title><rect x="232.7" y="1171.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="234.7" y="1187.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="234.7" y="1171.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.7" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="234.7" y="1155.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="237.7" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="234.7" y="1139.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="237.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.08%)</title><rect x="235.6" y="1219.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (11 samples, 0.91%)</title><rect x="236.6" y="1267.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.83%)</title><rect x="236.6" y="1251.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.75%)</title><rect x="236.6" y="1235.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.25%)</title><rect x="236.6" y="1219.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.6" y="1230.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="236.6" y="1203.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/311497529.accept (2 samples, 0.17%)</title><rect x="237.6" y="1203.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.17%)</title><rect x="237.6" y="1187.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="237.6" y="1171.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="237.6" y="1155.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.6" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="237.6" y="1139.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.6" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="237.6" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="238.6" y="1171.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="238.6" y="1155.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="238.6" y="1139.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.6" y="1150.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="239.6" y="1219.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="240.5" y="1219.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="240.5" y="1203.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="243.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="240.5" y="1187.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="240.5" y="1171.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.5" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="240.5" y="1155.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.5" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="240.5" y="1139.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.5" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="240.5" y="1123.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="240.5" y="1107.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$236/533063479.get (1 samples, 0.08%)</title><rect x="240.5" y="1091.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="241.5" y="1219.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.5" y="1230.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="241.5" y="1203.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.5" y="1214.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="241.5" y="1187.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="241.5" y="1171.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.5" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="241.5" y="1155.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="241.5" y="1139.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.08%)</title><rect x="241.5" y="1123.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="244.5" y="1134.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.08%)</title><rect x="241.5" y="1107.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="241.5" y="1091.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.25%)</title><rect x="242.5" y="1219.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.25%)</title><rect x="242.5" y="1203.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.25%)</title><rect x="242.5" y="1187.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.25%)</title><rect x="242.5" y="1171.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.5" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.08%)</title><rect x="242.5" y="1155.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.08%)</title><rect x="242.5" y="1139.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.5" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="242.5" y="1123.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="242.5" y="1107.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="242.5" y="1091.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="243.5" y="1155.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.5" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="243.5" y="1139.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.5" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="243.5" y="1123.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.5" y="1134.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="243.5" y="1107.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.5" y="1118.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="243.5" y="1091.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.5" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.08%)</title><rect x="243.5" y="1075.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.5" y="1086.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="244.4" y="1107.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.4" y="1118.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="244.4" y="1091.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="244.4" y="1075.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="244.4" y="1059.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="244.4" y="1043.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$230/2058162365.test (1 samples, 0.08%)</title><rect x="244.4" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="245.4" y="1235.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.4" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="245.4" y="1219.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="245.4" y="1203.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.getOpFlags (1 samples, 0.08%)</title><rect x="245.4" y="1187.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="246.4" y="1251.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.08%)</title><rect x="246.4" y="1235.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.08%)</title><rect x="246.4" y="1219.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="246.4" y="1203.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="247.4" y="1267.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.08%)</title><rect x="247.4" y="1251.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.08%)</title><rect x="247.4" y="1235.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.4" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="247.4" y="1219.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.4" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="247.4" y="1203.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="250.4" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="247.4" y="1187.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.41%)</title><rect x="248.3" y="1267.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.33%)</title><rect x="248.3" y="1251.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.33%)</title><rect x="248.3" y="1235.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.08%)</title><rect x="248.3" y="1219.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.3" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.08%)</title><rect x="248.3" y="1203.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.3" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="248.3" y="1187.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.3" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="248.3" y="1171.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.17%)</title><rect x="249.3" y="1219.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.08%)</title><rect x="249.3" y="1203.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.08%)</title><rect x="249.3" y="1187.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="252.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.08%)</title><rect x="249.3" y="1171.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.08%)</title><rect x="249.3" y="1155.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="252.3" y="1166.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.08%)</title><rect x="249.3" y="1139.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.3" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.08%)</title><rect x="249.3" y="1123.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.3" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.08%)</title><rect x="249.3" y="1107.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.08%)</title><rect x="250.3" y="1203.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.3" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="250.3" y="1187.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="253.3" y="1198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="250.3" y="1171.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="253.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="251.3" y="1219.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="254.3" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="251.3" y="1203.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.3" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="251.3" y="1187.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.3" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="251.3" y="1171.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.3" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.08%)</title><rect x="251.3" y="1155.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.3" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.08%)</title><rect x="251.3" y="1139.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="252.3" y="1251.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="252.3" y="1235.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="252.3" y="1219.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="252.3" y="1203.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="252.3" y="1187.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="252.3" y="1171.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="252.3" y="1155.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="252.3" y="1139.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="252.3" y="1123.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.08%)</title><rect x="252.3" y="1107.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.66%)</title><rect x="253.2" y="1267.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (8 samples, 0.66%)</title><rect x="253.2" y="1251.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="254.2" y="1235.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="254.2" y="1219.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="255.2" y="1235.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="255.2" y="1219.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="258.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="255.2" y="1203.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.2" y="1214.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeRemoval (1 samples, 0.08%)</title><rect x="255.2" y="1187.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.25%)</title><rect x="256.2" y="1235.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="256.2" y="1219.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.08%)</title><rect x="257.1" y="1219.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.08%)</title><rect x="257.1" y="1203.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="258.1" y="1219.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.1" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="258.1" y="1203.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="258.1" y="1187.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="258.1" y="1171.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="258.1" y="1155.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="258.1" y="1139.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="258.1" y="1123.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="258.1" y="1107.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="258.1" y="1091.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="258.1" y="1075.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.08%)</title><rect x="259.1" y="1235.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.08%)</title><rect x="259.1" y="1219.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="259.1" y="1203.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="259.1" y="1187.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.1" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="259.1" y="1171.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.1" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="259.1" y="1155.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="260.1" y="1235.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.1" y="1246.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="260.1" y="1219.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.1" y="1230.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="260.1" y="1203.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.1" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.08%)</title><rect x="260.1" y="1187.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.1" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.08%)</title><rect x="260.1" y="1171.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (4 samples, 0.33%)</title><rect x="261.0" y="1267.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (4 samples, 0.33%)</title><rect x="261.0" y="1251.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (4 samples, 0.33%)</title><rect x="261.0" y="1235.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="264.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.25%)</title><rect x="262.0" y="1219.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="264.0" y="1203.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="265.0" y="1315.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="268.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.08%)</title><rect x="265.0" y="1299.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/Thread.run (702 samples, 58.11%)</title><rect x="265.9" y="1331.0" width="685.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.9" y="1342.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (702 samples, 58.11%)</title><rect x="265.9" y="1315.0" width="685.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.9" y="1326.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (702 samples, 58.11%)</title><rect x="265.9" y="1299.0" width="685.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.9" y="1310.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="265.9" y="1283.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="268.9" y="1294.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="265.9" y="1267.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="268.9" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="265.9" y="1251.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="268.9" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="265.9" y="1235.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="268.9" y="1246.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="265.9" y="1219.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="268.9" y="1230.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="265.9" y="1203.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="268.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run (473 samples, 39.16%)</title><rect x="266.9" y="1283.0" width="462.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.9" y="1294.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (473 samples, 39.16%)</title><rect x="266.9" y="1267.0" width="462.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.9" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (473 samples, 39.16%)</title><rect x="266.9" y="1251.0" width="462.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.9" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="271.8" y="1235.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="274.8" y="1246.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="271.8" y="1219.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="274.8" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="272.8" y="1235.0" width="2.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="275.8" y="1246.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="272.8" y="1219.0" width="2.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="275.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (460 samples, 38.08%)</title><rect x="275.7" y="1235.0" width="449.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.7" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedul..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="285.5" y="1219.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="288.5" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.08%)</title><rect x="286.4" y="1219.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (151 samples, 12.50%)</title><rect x="287.4" y="1219.0" width="147.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.4" y="1230.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (151 samples, 12.50%)</title><rect x="287.4" y="1203.0" width="147.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.4" y="1214.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (151 samples, 12.50%)</title><rect x="287.4" y="1187.0" width="147.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.4" y="1198.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (151 samples, 12.50%)</title><rect x="287.4" y="1171.0" width="147.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.4" y="1182.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (151 samples, 12.50%)</title><rect x="287.4" y="1155.0" width="147.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.4" y="1166.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (151 samples, 12.50%)</title><rect x="287.4" y="1139.0" width="147.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.4" y="1150.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 4.30%)</title><rect x="287.4" y="1123.0" width="50.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.4" y="1134.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (14 samples, 1.16%)</title><rect x="287.4" y="1107.0" width="13.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (14 samples, 1.16%)</title><rect x="287.4" y="1091.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (12 samples, 0.99%)</title><rect x="287.4" y="1075.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.17%)</title><rect x="299.1" y="1075.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="300.1" y="1059.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (38 samples, 3.15%)</title><rect x="301.1" y="1107.0" width="37.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.1" y="1118.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (38 samples, 3.15%)</title><rect x="301.1" y="1091.0" width="37.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.1" y="1102.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (12 samples, 0.99%)</title><rect x="301.1" y="1075.0" width="11.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.08%)</title><rect x="304.0" y="1059.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="307.0" y="1070.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.08%)</title><rect x="304.0" y="1043.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="307.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (3 samples, 0.25%)</title><rect x="305.0" y="1059.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (2 samples, 0.17%)</title><rect x="307.9" y="1059.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (3 samples, 0.25%)</title><rect x="309.9" y="1059.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="312.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (13 samples, 1.08%)</title><rect x="312.8" y="1075.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.33%)</title><rect x="316.7" y="1059.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="319.7" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.33%)</title><rect x="316.7" y="1043.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="319.7" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (4 samples, 0.33%)</title><rect x="316.7" y="1027.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="319.7" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.25%)</title><rect x="317.7" y="1011.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="320.7" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.17%)</title><rect x="317.7" y="995.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="320.7" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="318.7" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="321.7" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="318.7" y="963.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="321.7" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="318.7" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="321.7" y="958.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="318.7" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="321.7" y="942.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="318.7" y="915.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="321.7" y="926.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="318.7" y="899.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="321.7" y="910.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="319.7" y="995.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="322.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 0.41%)</title><rect x="320.6" y="1059.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="323.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.41%)</title><rect x="320.6" y="1043.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (13 samples, 1.08%)</title><rect x="325.5" y="1075.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (5 samples, 0.41%)</title><rect x="331.4" y="1059.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="336.3" y="1059.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (88 samples, 7.28%)</title><rect x="338.2" y="1123.0" width="86.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="341.2" y="1134.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.41%)</title><rect x="338.2" y="1107.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="341.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.41%)</title><rect x="338.2" y="1091.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="341.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.25%)</title><rect x="338.2" y="1075.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="341.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.25%)</title><rect x="338.2" y="1059.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="341.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.17%)</title><rect x="341.1" y="1075.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="344.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.08%)</title><rect x="341.1" y="1059.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="344.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.08%)</title><rect x="342.1" y="1059.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.41%)</title><rect x="343.1" y="1107.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="346.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.41%)</title><rect x="343.1" y="1091.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="346.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.08%)</title><rect x="347.0" y="1075.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.50%)</title><rect x="348.0" y="1107.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="351.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.41%)</title><rect x="348.0" y="1091.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.33%)</title><rect x="349.0" y="1075.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="352.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.25%)</title><rect x="349.9" y="1059.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="352.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="351.9" y="1043.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="352.9" y="1091.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="352.9" y="1075.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="355.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.33%)</title><rect x="353.8" y="1107.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="356.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.33%)</title><rect x="353.8" y="1091.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="356.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (68 samples, 5.63%)</title><rect x="357.7" y="1107.0" width="66.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="360.7" y="1118.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.99%)</title><rect x="358.7" y="1091.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="361.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="365.6" y="1075.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.17%)</title><rect x="366.5" y="1075.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="369.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.17%)</title><rect x="366.5" y="1059.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.17%)</title><rect x="366.5" y="1043.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="369.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="368.5" y="1075.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="368.5" y="1059.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="371.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="369.5" y="1075.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="372.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (55 samples, 4.55%)</title><rect x="370.4" y="1091.0" width="53.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="373.4" y="1102.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (55 samples, 4.55%)</title><rect x="370.4" y="1075.0" width="53.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.4" y="1086.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (52 samples, 4.30%)</title><rect x="372.4" y="1059.0" width="50.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="375.4" y="1070.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.91%)</title><rect x="374.4" y="1043.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.17%)</title><rect x="374.4" y="1027.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.50%)</title><rect x="376.3" y="1027.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="379.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.50%)</title><rect x="376.3" y="1011.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.50%)</title><rect x="376.3" y="995.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.25%)</title><rect x="379.2" y="979.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="382.2" y="1027.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="382.2" y="1011.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="385.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="384.1" y="1027.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="387.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (17 samples, 1.41%)</title><rect x="385.1" y="1043.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="388.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (15 samples, 1.24%)</title><rect x="387.1" y="1027.0" width="14.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (14 samples, 1.16%)</title><rect x="388.0" y="1011.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="391.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (14 samples, 1.16%)</title><rect x="388.0" y="995.0" width="13.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="391.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (14 samples, 1.16%)</title><rect x="388.0" y="979.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="401.7" y="1043.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.83%)</title><rect x="402.7" y="1043.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="405.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.83%)</title><rect x="402.7" y="1027.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="405.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.83%)</title><rect x="402.7" y="1011.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="405.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.83%)</title><rect x="402.7" y="995.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="405.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.83%)</title><rect x="402.7" y="979.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="405.7" y="990.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.50%)</title><rect x="403.7" y="963.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.7" y="974.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor20.newInstance (2 samples, 0.17%)</title><rect x="409.5" y="963.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.5" y="974.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="411.5" y="963.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="414.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.33%)</title><rect x="412.5" y="1043.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.33%)</title><rect x="412.5" y="1027.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="415.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.33%)</title><rect x="412.5" y="1011.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="415.4" y="995.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (7 samples, 0.58%)</title><rect x="416.4" y="1043.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="419.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (1 samples, 0.08%)</title><rect x="423.2" y="1059.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="426.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.91%)</title><rect x="424.2" y="1123.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.91%)</title><rect x="424.2" y="1107.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.91%)</title><rect x="424.2" y="1091.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 0.91%)</title><rect x="424.2" y="1075.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.08%)</title><rect x="427.1" y="1059.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.58%)</title><rect x="428.1" y="1059.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="431.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (282 samples, 23.34%)</title><rect x="434.9" y="1219.0" width="275.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="437.9" y="1230.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (44 samples, 3.64%)</title><rect x="434.9" y="1203.0" width="43.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.9" y="1214.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="434.9" y="1187.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="437.9" y="1198.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (43 samples, 3.56%)</title><rect x="435.9" y="1187.0" width="42.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.9" y="1198.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (42 samples, 3.48%)</title><rect x="436.9" y="1171.0" width="41.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="439.9" y="1182.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (20 samples, 1.66%)</title><rect x="436.9" y="1155.0" width="19.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="439.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (20 samples, 1.66%)</title><rect x="436.9" y="1139.0" width="19.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.66%)</title><rect x="448.6" y="1123.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="451.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.66%)</title><rect x="448.6" y="1107.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="451.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (8 samples, 0.66%)</title><rect x="448.6" y="1091.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="451.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="456.4" y="1155.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="459.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="456.4" y="1139.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="459.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="456.4" y="1123.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="459.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="457.4" y="1107.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="460.4" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (20 samples, 1.66%)</title><rect x="458.4" y="1155.0" width="19.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (16 samples, 1.32%)</title><rect x="462.3" y="1139.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.3" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.58%)</title><rect x="463.2" y="1123.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="466.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.58%)</title><rect x="463.2" y="1107.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.2" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.66%)</title><rect x="470.1" y="1123.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="473.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.41%)</title><rect x="477.9" y="1203.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.41%)</title><rect x="477.9" y="1187.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.9" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.41%)</title><rect x="477.9" y="1171.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="480.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (159 samples, 13.16%)</title><rect x="482.8" y="1203.0" width="155.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.8" y="1214.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="482.8" y="1187.0" width="3.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="485.8" y="1198.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="483.8" y="1171.0" width="2.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="486.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (154 samples, 12.75%)</title><rect x="486.7" y="1187.0" width="150.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="489.7" y="1198.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (43 samples, 3.56%)</title><rect x="501.3" y="1171.0" width="42.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="504.3" y="1182.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="507.2" y="1155.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="510.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="507.2" y="1139.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="510.2" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="507.2" y="1123.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="510.2" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="507.2" y="1107.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="510.2" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="507.2" y="1091.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="510.2" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="507.2" y="1075.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="510.2" y="1086.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="507.2" y="1059.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.2" y="1070.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.08%)</title><rect x="507.2" y="1043.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="510.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (27 samples, 2.24%)</title><rect x="508.2" y="1155.0" width="26.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="511.2" y="1166.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (27 samples, 2.24%)</title><rect x="508.2" y="1139.0" width="26.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="511.2" y="1150.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (24 samples, 1.99%)</title><rect x="508.2" y="1123.0" width="23.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="511.2" y="1134.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (24 samples, 1.99%)</title><rect x="508.2" y="1107.0" width="23.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.2" y="1118.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (24 samples, 1.99%)</title><rect x="508.2" y="1091.0" width="23.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.2" y="1102.0">j..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="515.0" y="1075.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="518.0" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 0.99%)</title><rect x="516.0" y="1075.0" width="11.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="519.0" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="516.0" y="1059.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="519.0" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="517.9" y="1059.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="520.9" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="517.9" y="1043.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="520.9" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.25%)</title><rect x="518.9" y="1059.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="521.9" y="1070.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="518.9" y="1043.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="521.9" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="518.9" y="1027.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="521.9" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.17%)</title><rect x="519.9" y="1043.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="522.9" y="1054.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.17%)</title><rect x="519.9" y="1027.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="522.9" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.17%)</title><rect x="519.9" y="1011.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="522.9" y="1022.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="520.9" y="995.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="523.9" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.33%)</title><rect x="521.9" y="1059.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="524.9" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.25%)</title><rect x="522.8" y="1043.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="525.8" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="522.8" y="1027.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="525.8" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="522.8" y="1011.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="525.8" y="1022.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="522.8" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="525.8" y="1006.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="522.8" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="525.8" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="523.8" y="1027.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="526.8" y="1038.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="524.8" y="1027.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="527.8" y="1038.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.08%)</title><rect x="525.8" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="528.8" y="1070.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.08%)</title><rect x="526.7" y="1059.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="529.7" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="527.7" y="1075.0" width="3.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="530.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="531.6" y="1123.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="534.6" y="1134.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="534.6" y="1155.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="537.6" y="1166.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.66%)</title><rect x="535.5" y="1155.0" width="7.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="538.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (13 samples, 1.08%)</title><rect x="543.3" y="1171.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="546.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (7 samples, 0.58%)</title><rect x="543.3" y="1155.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (7 samples, 0.58%)</title><rect x="543.3" y="1139.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.50%)</title><rect x="550.2" y="1155.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.50%)</title><rect x="550.2" y="1139.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.2" y="1150.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="556.0" y="1171.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="559.0" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 6.79%)</title><rect x="557.0" y="1171.0" width="80.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="560.0" y="1182.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (81 samples, 6.71%)</title><rect x="558.0" y="1155.0" width="79.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.0" y="1166.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (32 samples, 2.65%)</title><rect x="558.0" y="1139.0" width="31.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="561.0" y="1150.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (32 samples, 2.65%)</title><rect x="558.0" y="1123.0" width="31.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="561.0" y="1134.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (17 samples, 1.41%)</title><rect x="572.6" y="1107.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="575.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (17 samples, 1.41%)</title><rect x="572.6" y="1091.0" width="16.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (17 samples, 1.41%)</title><rect x="572.6" y="1075.0" width="16.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="575.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="589.3" y="1139.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="592.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="589.3" y="1123.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="592.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="589.3" y="1107.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="592.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="589.3" y="1091.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="592.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (48 samples, 3.97%)</title><rect x="590.2" y="1139.0" width="46.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="593.2" y="1150.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (40 samples, 3.31%)</title><rect x="598.0" y="1123.0" width="39.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="601.0" y="1134.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.08%)</title><rect x="600.0" y="1107.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="603.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.33%)</title><rect x="601.0" y="1107.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="604.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.33%)</title><rect x="601.0" y="1091.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="604.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.73%)</title><rect x="604.9" y="1107.0" width="32.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="607.9" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.33%)</title><rect x="614.7" y="1091.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="617.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (19 samples, 1.57%)</title><rect x="618.6" y="1091.0" width="18.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="621.6" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="635.2" y="1075.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="638.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="635.2" y="1059.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="638.2" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="635.2" y="1043.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="638.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="635.2" y="1027.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="638.2" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="635.2" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="638.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="635.2" y="995.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="638.2" y="1006.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="635.2" y="979.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="638.2" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="635.2" y="963.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="638.2" y="974.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="635.2" y="947.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="638.2" y="958.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="636.1" y="1011.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="639.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="637.1" y="1187.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (51 samples, 4.22%)</title><rect x="638.1" y="1203.0" width="49.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="641.1" y="1214.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="639.1" y="1187.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (49 samples, 4.06%)</title><rect x="640.0" y="1187.0" width="47.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="643.0" y="1198.0">com/..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="642.0" y="1171.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="645.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="642.0" y="1155.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="645.0" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="642.0" y="1139.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="645.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (26 samples, 2.15%)</title><rect x="643.0" y="1171.0" width="25.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="646.0" y="1182.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (25 samples, 2.07%)</title><rect x="644.0" y="1155.0" width="24.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.0" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.66%)</title><rect x="644.9" y="1139.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="647.9" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="646.9" y="1123.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.9" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="646.9" y="1107.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="649.9" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.17%)</title><rect x="646.9" y="1091.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="649.9" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.17%)</title><rect x="646.9" y="1075.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="649.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="647.9" y="1059.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="650.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="647.9" y="1043.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="650.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.41%)</title><rect x="648.8" y="1123.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="651.8" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="649.8" y="1107.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="652.8" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.25%)</title><rect x="650.8" y="1107.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="653.8" y="1118.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="650.8" y="1091.0" width="2.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="653.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.91%)</title><rect x="653.7" y="1123.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.33%)</title><rect x="664.5" y="1139.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="667.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.25%)</title><rect x="665.4" y="1123.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="668.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.25%)</title><rect x="665.4" y="1107.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="668.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.25%)</title><rect x="665.4" y="1091.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="668.4" y="1171.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="671.4" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.08%)</title><rect x="668.4" y="1155.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="671.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 0.50%)</title><rect x="669.4" y="1171.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 0.50%)</title><rect x="669.4" y="1155.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="672.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/255325379.get$Lambda (6 samples, 0.50%)</title><rect x="669.4" y="1139.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="672.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/255325379.&lt;init&gt; (6 samples, 0.50%)</title><rect x="669.4" y="1123.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="672.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="675.2" y="1171.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.2" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="675.2" y="1155.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="678.2" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.08%)</title><rect x="675.2" y="1139.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="678.2" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.75%)</title><rect x="676.2" y="1171.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.2" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.58%)</title><rect x="678.1" y="1155.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="681.1" y="1166.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.41%)</title><rect x="678.1" y="1139.0" width="4.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="681.1" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.17%)</title><rect x="683.0" y="1139.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="686.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.25%)</title><rect x="685.0" y="1171.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="688.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="687.9" y="1203.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="690.9" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="687.9" y="1187.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="690.9" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="687.9" y="1171.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.9" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="687.9" y="1155.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="690.9" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="687.9" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="690.9" y="1150.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.08%)</title><rect x="687.9" y="1123.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="690.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.82%)</title><rect x="688.9" y="1203.0" width="21.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="691.9" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 1.82%)</title><rect x="688.9" y="1187.0" width="21.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="691.9" y="1198.0">j..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="696.7" y="1171.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="699.7" y="1182.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="698.7" y="1171.0" width="3.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="701.7" y="1182.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="698.7" y="1155.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="701.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.66%)</title><rect x="702.6" y="1171.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1472999188.accept (7 samples, 0.58%)</title><rect x="702.6" y="1155.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="705.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (7 samples, 0.58%)</title><rect x="702.6" y="1139.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="705.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (7 samples, 0.58%)</title><rect x="702.6" y="1123.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="705.6" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (7 samples, 0.58%)</title><rect x="702.6" y="1107.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="705.6" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.create (7 samples, 0.58%)</title><rect x="702.6" y="1091.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="705.6" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="707.5" y="1075.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="710.5" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="707.5" y="1059.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="710.5" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="708.4" y="1075.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="711.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/872302515.accept (1 samples, 0.08%)</title><rect x="709.4" y="1155.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="712.4" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="709.4" y="1139.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="712.4" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="709.4" y="1123.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="712.4" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="709.4" y="1107.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="712.4" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="709.4" y="1091.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="712.4" y="1102.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="709.4" y="1075.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="712.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 0.99%)</title><rect x="710.4" y="1219.0" width="11.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="713.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 0.99%)</title><rect x="710.4" y="1203.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="713.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.99%)</title><rect x="710.4" y="1187.0" width="11.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="713.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1472999188.accept (12 samples, 0.99%)</title><rect x="710.4" y="1171.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="713.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (12 samples, 0.99%)</title><rect x="710.4" y="1155.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="713.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (12 samples, 0.99%)</title><rect x="710.4" y="1139.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="713.4" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (12 samples, 0.99%)</title><rect x="710.4" y="1123.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.4" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.create (12 samples, 0.99%)</title><rect x="710.4" y="1107.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="713.4" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.25%)</title><rect x="722.1" y="1219.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="725.1" y="1230.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="722.1" y="1203.0" width="2.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="725.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="725.0" y="1235.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="728.0" y="1246.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="725.0" y="1219.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="728.0" y="1230.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="725.0" y="1203.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="728.0" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="725.0" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="728.0" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="725.0" y="1171.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="728.0" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="725.0" y="1155.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="728.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.25%)</title><rect x="726.0" y="1235.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (11 samples, 0.91%)</title><rect x="728.9" y="1283.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="731.9" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.91%)</title><rect x="728.9" y="1267.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="731.9" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.91%)</title><rect x="728.9" y="1251.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="731.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.91%)</title><rect x="728.9" y="1235.0" width="10.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.9" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="733.8" y="1219.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="736.8" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="733.8" y="1203.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="736.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (5 samples, 0.41%)</title><rect x="734.8" y="1219.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="737.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (217 samples, 17.96%)</title><rect x="739.7" y="1283.0" width="212.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="742.7" y="1294.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (217 samples, 17.96%)</title><rect x="739.7" y="1267.0" width="212.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="742.7" y="1278.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (176 samples, 14.57%)</title><rect x="770.0" y="1251.0" width="171.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="773.0" y="1262.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.25%)</title><rect x="774.9" y="1235.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="777.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.25%)</title><rect x="774.9" y="1219.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="777.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.25%)</title><rect x="774.9" y="1203.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="777.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.25%)</title><rect x="774.9" y="1187.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="777.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (167 samples, 13.82%)</title><rect x="777.8" y="1235.0" width="163.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="780.8" y="1246.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 13.82%)</title><rect x="777.8" y="1219.0" width="163.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="780.8" y="1230.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="782.7" y="1203.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="785.7" y="1214.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="783.6" y="1203.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="786.6" y="1214.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.17%)</title><rect x="784.6" y="1203.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="787.6" y="1214.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="786.6" y="1203.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="789.6" y="1214.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="787.5" y="1203.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="790.5" y="1214.0"></text>
</g>
<g>
<title>Unsafe_Park (152 samples, 12.58%)</title><rect x="788.5" y="1203.0" width="148.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="791.5" y="1214.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.25%)</title><rect x="793.4" y="1187.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="796.4" y="1198.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (36 samples, 2.98%)</title><rect x="796.3" y="1187.0" width="35.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="799.3" y="1198.0">Par..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.83%)</title><rect x="807.1" y="1171.0" width="9.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="810.1" y="1182.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.25%)</title><rect x="811.0" y="1155.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="814.0" y="1166.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.25%)</title><rect x="811.0" y="1139.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="814.0" y="1150.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="813.9" y="1155.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="816.9" y="1166.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="815.9" y="1155.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="818.9" y="1166.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="816.9" y="1171.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="819.9" y="1182.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="817.8" y="1171.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="820.8" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (11 samples, 0.91%)</title><rect x="819.8" y="1171.0" width="10.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="822.8" y="1182.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="830.5" y="1171.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="833.5" y="1182.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="831.5" y="1187.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="834.5" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="832.5" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="835.5" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="833.5" y="1187.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="836.5" y="1198.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.75%)</title><rect x="835.4" y="1187.0" width="8.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="838.4" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (22 samples, 1.82%)</title><rect x="844.2" y="1187.0" width="21.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="847.2" y="1198.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 4.72%)</title><rect x="865.7" y="1187.0" width="55.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="868.7" y="1198.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.25%)</title><rect x="921.4" y="1187.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="924.4" y="1198.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.25%)</title><rect x="924.3" y="1187.0" width="2.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="927.3" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.33%)</title><rect x="927.2" y="1187.0" width="3.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="930.2" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.33%)</title><rect x="931.1" y="1187.0" width="3.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="934.1" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="935.0" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.0" y="1198.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="936.0" y="1187.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="939.0" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="937.0" y="1203.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="940.0" y="1214.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="938.0" y="1203.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="941.0" y="1214.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="939.0" y="1203.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="942.0" y="1214.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="940.9" y="1235.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="943.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 0.83%)</title><rect x="941.9" y="1251.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="944.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.83%)</title><rect x="941.9" y="1235.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="944.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.83%)</title><rect x="941.9" y="1219.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="944.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.83%)</title><rect x="941.9" y="1203.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="944.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="951.7" y="1331.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="954.7" y="1342.0"></text>
</g>
<g>
<title>start_thread (243 samples, 20.12%)</title><rect x="952.6" y="1331.0" width="237.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="955.6" y="1342.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (243 samples, 20.12%)</title><rect x="952.6" y="1315.0" width="237.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="955.6" y="1326.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (17 samples, 1.41%)</title><rect x="952.6" y="1299.0" width="16.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="955.6" y="1310.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.50%)</title><rect x="952.6" y="1283.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="955.6" y="1294.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.50%)</title><rect x="952.6" y="1267.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="955.6" y="1278.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="952.6" y="1251.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="955.6" y="1262.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.41%)</title><rect x="953.6" y="1251.0" width="4.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="956.6" y="1262.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 0.91%)</title><rect x="958.5" y="1283.0" width="10.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.5" y="1294.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.50%)</title><rect x="958.5" y="1267.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.5" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (6 samples, 0.50%)</title><rect x="958.5" y="1251.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.5" y="1262.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.41%)</title><rect x="958.5" y="1235.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="961.5" y="1246.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="963.4" y="1235.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.4" y="1246.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="963.4" y="1219.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="966.4" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="964.4" y="1267.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.4" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="964.4" y="1251.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="967.4" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="964.4" y="1235.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="967.4" y="1246.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.33%)</title><rect x="964.4" y="1219.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="967.4" y="1230.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.33%)</title><rect x="964.4" y="1203.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="967.4" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.33%)</title><rect x="964.4" y="1187.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="967.4" y="1198.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.25%)</title><rect x="965.3" y="1171.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="968.3" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="968.3" y="1235.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="971.3" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="968.3" y="1219.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="971.3" y="1230.0"></text>
</g>
<g>
<title>JavaThread::run() (224 samples, 18.54%)</title><rect x="969.2" y="1299.0" width="218.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="972.2" y="1310.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (224 samples, 18.54%)</title><rect x="969.2" y="1283.0" width="218.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="972.2" y="1294.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (223 samples, 18.46%)</title><rect x="969.2" y="1267.0" width="217.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.2" y="1278.0">CompileBroker::compiler_threa..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (223 samples, 18.46%)</title><rect x="969.2" y="1251.0" width="217.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="972.2" y="1262.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (223 samples, 18.46%)</title><rect x="969.2" y="1235.0" width="217.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="972.2" y="1246.0">C2Compiler::compile_method(ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (223 samples, 18.46%)</title><rect x="969.2" y="1219.0" width="217.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="972.2" y="1230.0">Compile::Compile(ciEnv*, C2Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (135 samples, 11.18%)</title><rect x="969.2" y="1203.0" width="131.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.2" y="1214.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.33%)</title><rect x="969.2" y="1187.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="972.2" y="1198.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.17%)</title><rect x="969.2" y="1171.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.2" y="1182.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="970.2" y="1155.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.2" y="1166.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.08%)</title><rect x="970.2" y="1139.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="973.2" y="1150.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.17%)</title><rect x="971.2" y="1171.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="974.2" y="1182.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.08%)</title><rect x="971.2" y="1155.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="974.2" y="1166.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.08%)</title><rect x="971.2" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.2" y="1150.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.08%)</title><rect x="971.2" y="1123.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="974.2" y="1134.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="971.2" y="1107.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.2" y="1118.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="972.2" y="1155.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.2" y="1166.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="972.2" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.2" y="1150.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.08%)</title><rect x="972.2" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.2" y="1134.0"></text>
</g>
<g>
<title>Assembler::pushq(Address) (1 samples, 0.08%)</title><rect x="972.2" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.2" y="1118.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.08%)</title><rect x="972.2" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="975.2" y="1102.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.58%)</title><rect x="973.1" y="1187.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.1" y="1198.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.17%)</title><rect x="973.1" y="1171.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.1" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="973.1" y="1155.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.1" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="973.1" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.1" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="974.1" y="1155.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="977.1" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="974.1" y="1139.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="977.1" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.33%)</title><rect x="975.1" y="1171.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.1" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.33%)</title><rect x="975.1" y="1155.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="978.1" y="1166.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.08%)</title><rect x="979.0" y="1171.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="982.0" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 0.83%)</title><rect x="980.0" y="1187.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="983.0" y="1198.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="980.0" y="1171.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.0" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.75%)</title><rect x="981.0" y="1171.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="984.0" y="1182.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (5 samples, 0.41%)</title><rect x="982.9" y="1155.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.9" y="1166.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="987.8" y="1155.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="990.8" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="987.8" y="1139.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.8" y="1150.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="987.8" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.8" y="1134.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.08%)</title><rect x="987.8" y="1107.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="990.8" y="1118.0"></text>
</g>
<g>
<title>MemBarNode::match(ProjNode const*, Matcher const*) (1 samples, 0.08%)</title><rect x="988.8" y="1155.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="991.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.50%)</title><rect x="989.8" y="1187.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.8" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.50%)</title><rect x="989.8" y="1171.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.8" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.17%)</title><rect x="989.8" y="1155.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.08%)</title><rect x="989.8" y="1139.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.8" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="990.7" y="1139.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="993.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="991.7" y="1155.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="991.7" y="1139.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="994.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.08%)</title><rect x="992.7" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.17%)</title><rect x="993.7" y="1155.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="996.7" y="1166.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="994.6" y="1139.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="997.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (2 samples, 0.17%)</title><rect x="995.6" y="1187.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.6" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (106 samples, 8.77%)</title><rect x="997.6" y="1187.0" width="103.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.6" y="1198.0">PhaseChaitin..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="998.5" y="1171.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1001.5" y="1182.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (6 samples, 0.50%)</title><rect x="999.5" y="1171.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1002.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 0.50%)</title><rect x="1005.4" y="1171.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1008.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (2 samples, 0.17%)</title><rect x="1007.3" y="1155.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.17%)</title><rect x="1009.3" y="1155.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1012.3" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.41%)</title><rect x="1011.2" y="1171.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1014.2" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1012.2" y="1155.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1015.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.17%)</title><rect x="1014.2" y="1155.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (13 samples, 1.08%)</title><rect x="1016.1" y="1171.0" width="12.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1019.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1027.8" y="1155.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1027.8" y="1139.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (19 samples, 1.57%)</title><rect x="1028.8" y="1171.0" width="18.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1031.8" y="1182.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="1037.6" y="1155.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1040.6" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.58%)</title><rect x="1038.6" y="1155.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1041.6" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.25%)</title><rect x="1042.5" y="1139.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1045.5" y="1150.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.17%)</title><rect x="1045.4" y="1155.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1047.4" y="1171.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1050.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.25%)</title><rect x="1048.4" y="1171.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.4" y="1182.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (2 samples, 0.17%)</title><rect x="1048.4" y="1155.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1051.4" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1050.3" y="1155.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.3" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1051.3" y="1171.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.3" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.58%)</title><rect x="1052.3" y="1171.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.3" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.25%)</title><rect x="1056.2" y="1155.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.2" y="1166.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (21 samples, 1.74%)</title><rect x="1059.1" y="1171.0" width="20.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1062.1" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (21 samples, 1.74%)</title><rect x="1059.1" y="1155.0" width="20.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.1" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (21 samples, 1.74%)</title><rect x="1059.1" y="1139.0" width="20.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1062.1" y="1150.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (5 samples, 0.41%)</title><rect x="1059.1" y="1123.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.1" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (15 samples, 1.24%)</title><rect x="1064.0" y="1123.0" width="14.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.0" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1077.7" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.08%)</title><rect x="1078.6" y="1123.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.6" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1078.6" y="1107.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.17%)</title><rect x="1079.6" y="1171.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.33%)</title><rect x="1081.6" y="1171.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.6" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.25%)</title><rect x="1082.5" y="1155.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.17%)</title><rect x="1085.5" y="1171.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1088.5" y="1182.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1086.5" y="1155.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.5" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (10 samples, 0.83%)</title><rect x="1087.4" y="1171.0" width="9.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.4" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1095.2" y="1155.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.2" y="1166.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.08%)</title><rect x="1097.2" y="1171.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.2" y="1182.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.17%)</title><rect x="1098.2" y="1171.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1101.2" y="1182.0"></text>
</g>
<g>
<title>convI2L_reg_regNode::ideal_Opcode() const (1 samples, 0.08%)</title><rect x="1100.1" y="1171.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.1" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (70 samples, 5.79%)</title><rect x="1101.1" y="1203.0" width="68.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.1" y="1214.0">Compile..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="1101.1" y="1187.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.1" y="1198.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1101.1" y="1171.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.1" y="1182.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1187.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.1" y="1198.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1171.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.1" y="1182.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.08%)</title><rect x="1102.1" y="1155.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.1" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1102.1" y="1139.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.1" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1102.1" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.1" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1102.1" y="1107.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1102.1" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1102.1" y="1075.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1102.1" y="1059.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.1" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1102.1" y="1043.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.1" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1102.1" y="1027.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1102.1" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1102.1" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1102.1" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1102.1" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.1" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1102.1" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.1" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1102.1" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1102.1" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1102.1" y="899.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1102.1" y="883.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1105.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1102.1" y="867.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.1" y="878.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1102.1" y="851.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.1" y="862.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1102.1" y="835.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.1" y="846.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.08%)</title><rect x="1102.1" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.1" y="830.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1102.1" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.1" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1102.1" y="787.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.1" y="798.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.08%)</title><rect x="1102.1" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.25%)</title><rect x="1103.1" y="1187.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.25%)</title><rect x="1103.1" y="1171.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1103.1" y="1155.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="1139.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="1123.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="1107.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="1091.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="1075.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="1059.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="1043.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="1027.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="1011.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1107.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="995.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="947.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="931.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="915.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="899.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="883.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="867.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="851.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="835.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="659.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="627.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="611.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="579.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="563.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="547.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="531.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="515.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="499.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="451.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="435.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="419.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="403.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="387.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1104.0" y="371.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.0" y="382.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1104.0" y="355.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.0" y="366.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1105.0" y="1155.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1108.0" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.17%)</title><rect x="1106.0" y="1187.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.0" y="1198.0"></text>
</g>
<g>
<title>AddINode::add_ring(Type const*, Type const*) const (1 samples, 0.08%)</title><rect x="1107.0" y="1171.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.0" y="1182.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1107.0" y="1155.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.0" y="1166.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1107.0" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.0" y="1150.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1107.0" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.0" y="1134.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.08%)</title><rect x="1107.0" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (48 samples, 3.97%)</title><rect x="1107.9" y="1187.0" width="46.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.9" y="1198.0">Phas..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1107.9" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.9" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1107.9" y="1155.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.08%)</title><rect x="1107.9" y="1139.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1107.9" y="1123.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.9" y="1134.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1107.9" y="1107.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1110.9" y="1118.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1108.9" y="1171.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.50%)</title><rect x="1109.9" y="1171.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.9" y="1182.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.25%)</title><rect x="1112.8" y="1155.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.41%)</title><rect x="1115.8" y="1171.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.8" y="1182.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.08%)</title><rect x="1119.7" y="1155.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (28 samples, 2.32%)</title><rect x="1120.6" y="1171.0" width="27.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.6" y="1182.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (22 samples, 1.82%)</title><rect x="1126.5" y="1155.0" width="21.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.5" y="1166.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1128.5" y="1139.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (19 samples, 1.57%)</title><rect x="1129.4" y="1139.0" width="18.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.33%)</title><rect x="1144.1" y="1123.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.25%)</title><rect x="1148.0" y="1171.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1150.9" y="1171.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1150.9" y="1155.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.08%)</title><rect x="1150.9" y="1139.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1150.9" y="1123.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1151.9" y="1171.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1151.9" y="1155.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.9" y="1166.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1151.9" y="1139.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1152.9" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.9" y="1150.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1152.9" y="1123.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.9" y="1134.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1153.9" y="1171.0" width="0.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1156.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 1.08%)</title><rect x="1154.8" y="1187.0" width="12.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 1.08%)</title><rect x="1154.8" y="1171.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.8" y="1182.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1154.8" y="1155.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.8" y="1166.0"></text>
</g>
<g>
<title>IfNode::IfNode(Node*, Node*, float, float) (1 samples, 0.08%)</title><rect x="1154.8" y="1139.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.8" y="1150.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.08%)</title><rect x="1155.8" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.8" y="1150.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1156.8" y="1155.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.8" y="1166.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1156.8" y="1139.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.8" y="1150.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.08%)</title><rect x="1156.8" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.8" y="1134.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1156.8" y="1107.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="1118.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1157.8" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.8" y="1150.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1157.8" y="1123.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.8" y="1134.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1157.8" y="1107.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.8" y="1118.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1158.7" y="1155.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.17%)</title><rect x="1160.7" y="1155.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.7" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1162.6" y="1155.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="1166.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1162.6" y="1139.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="1150.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1162.6" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="1134.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.08%)</title><rect x="1162.6" y="1107.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="1118.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1163.6" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.6" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1164.6" y="1155.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.6" y="1166.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1165.6" y="1139.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.6" y="1150.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.6" y="1155.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.6" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::capture_store(StoreNode*, long, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1166.6" y="1139.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.6" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::make_raw_address(long, PhaseTransform*) (1 samples, 0.08%)</title><rect x="1166.6" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.6" y="1134.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.08%)</title><rect x="1166.6" y="1107.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.6" y="1118.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.08%)</title><rect x="1166.6" y="1091.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.6" y="1102.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.08%)</title><rect x="1166.6" y="1075.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.6" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1167.5" y="1187.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1167.5" y="1171.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1167.5" y="1155.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.5" y="1166.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1167.5" y="1139.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.5" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="1150.0"></text>
</g>
<g>
<title>CompileWrapper::~CompileWrapper() (1 samples, 0.08%)</title><rect x="1169.5" y="1203.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.5" y="1214.0"></text>
</g>
<g>
<title>BufferBlob::free(BufferBlob*) (1 samples, 0.08%)</title><rect x="1169.5" y="1187.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.5" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::deallocate(void*) (1 samples, 0.08%)</title><rect x="1169.5" y="1171.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.5" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 1.32%)</title><rect x="1170.5" y="1203.0" width="15.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.5" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 1.32%)</title><rect x="1170.5" y="1187.0" width="15.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 1.32%)</title><rect x="1170.5" y="1171.0" width="15.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 1.32%)</title><rect x="1170.5" y="1155.0" width="15.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (16 samples, 1.32%)</title><rect x="1170.5" y="1139.0" width="15.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 1.16%)</title><rect x="1170.5" y="1123.0" width="13.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.5" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.83%)</title><rect x="1170.5" y="1107.0" width="9.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.5" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.83%)</title><rect x="1170.5" y="1091.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.83%)</title><rect x="1170.5" y="1075.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.83%)</title><rect x="1170.5" y="1059.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.83%)</title><rect x="1170.5" y="1043.0" width="9.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.83%)</title><rect x="1170.5" y="1027.0" width="9.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.5" y="1038.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1170.5" y="1011.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.5" y="1022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="995.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.5" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1170.5" y="979.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.5" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1170.5" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.5" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1170.5" y="947.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.5" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1170.5" y="931.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.5" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1170.5" y="915.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.5" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1170.5" y="899.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.5" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1170.5" y="883.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.5" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="867.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.5" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1170.5" y="851.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.5" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1170.5" y="835.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.5" y="846.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1170.5" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.5" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1170.5" y="803.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.5" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1170.5" y="787.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.5" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.08%)</title><rect x="1170.5" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1171.4" y="1011.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1171.4" y="995.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1171.4" y="979.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1171.4" y="963.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1171.4" y="947.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1171.4" y="931.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.4" y="942.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1171.4" y="915.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1171.4" y="899.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1171.4" y="883.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1171.4" y="867.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.4" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1171.4" y="851.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1171.4" y="835.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1171.4" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1171.4" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1171.4" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.4" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1171.4" y="771.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.4" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1171.4" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.4" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1172.4" y="915.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1172.4" y="899.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1172.4" y="883.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1173.4" y="867.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1173.4" y="851.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1173.4" y="835.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1173.4" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1173.4" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1173.4" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1173.4" y="771.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1173.4" y="755.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1173.4" y="739.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1173.4" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.4" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1173.4" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.4" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1173.4" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.4" y="702.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1173.4" y="675.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.4" y="686.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1173.4" y="659.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.4" y="670.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1173.4" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.4" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1173.4" y="627.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.4" y="638.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.08%)</title><rect x="1173.4" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.4" y="819.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.4" y="803.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.4" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.4" y="787.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.4" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.4" y="755.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.4" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.4" y="723.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.4" y="707.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.4" y="691.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.4" y="675.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.4" y="659.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.4" y="643.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.4" y="627.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.4" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.4" y="611.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.4" y="595.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.4" y="579.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.4" y="563.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.4" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.4" y="531.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.4" y="515.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.4" y="499.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.4" y="483.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.4" y="467.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.4" y="451.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.4" y="435.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.4" y="419.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.4" y="403.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.4" y="387.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.4" y="371.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.4" y="355.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.4" y="339.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.4" y="323.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.4" y="307.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.4" y="291.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.4" y="275.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.4" y="259.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.4" y="243.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="254.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.4" y="227.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="238.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, bool, BasicType, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="211.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="222.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1174.4" y="195.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.4" y="206.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1174.4" y="179.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="190.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="163.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="174.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1174.4" y="147.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.4" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.41%)</title><rect x="1175.3" y="1011.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.41%)</title><rect x="1175.3" y="995.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.41%)</title><rect x="1175.3" y="979.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.41%)</title><rect x="1175.3" y="963.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.41%)</title><rect x="1175.3" y="947.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.41%)</title><rect x="1175.3" y="931.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.41%)</title><rect x="1175.3" y="915.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.41%)</title><rect x="1175.3" y="899.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.41%)</title><rect x="1175.3" y="883.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.41%)</title><rect x="1175.3" y="867.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.41%)</title><rect x="1175.3" y="851.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.41%)</title><rect x="1175.3" y="835.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.41%)</title><rect x="1175.3" y="819.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.3" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.41%)</title><rect x="1175.3" y="803.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.41%)</title><rect x="1175.3" y="787.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.41%)</title><rect x="1175.3" y="771.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.41%)</title><rect x="1175.3" y="755.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.41%)</title><rect x="1175.3" y="739.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.41%)</title><rect x="1175.3" y="723.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1175.3" y="707.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1175.3" y="691.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1175.3" y="675.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1175.3" y="659.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1175.3" y="643.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.25%)</title><rect x="1175.3" y="627.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1175.3" y="611.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1175.3" y="595.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1175.3" y="579.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1175.3" y="563.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1175.3" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="558.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1175.3" y="531.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="542.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.08%)</title><rect x="1175.3" y="515.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.3" y="526.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1175.3" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="510.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1175.3" y="483.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="494.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1175.3" y="467.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1176.3" y="547.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1176.3" y="531.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1176.3" y="515.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1176.3" y="499.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1176.3" y="483.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1176.3" y="467.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1176.3" y="451.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1176.3" y="435.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1176.3" y="419.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1176.3" y="403.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1176.3" y="387.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1176.3" y="371.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1176.3" y="355.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1176.3" y="339.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1176.3" y="323.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1176.3" y="307.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="318.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1176.3" y="291.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="302.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1176.3" y="275.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="286.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.3" y="259.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="270.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1176.3" y="243.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="254.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1176.3" y="227.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="238.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1176.3" y="211.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.3" y="291.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.3" y="275.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.3" y="259.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.3" y="243.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="227.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.3" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.3" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.3" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.3" y="163.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.3" y="147.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.3" y="158.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="131.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.08%)</title><rect x="1177.3" y="115.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1177.3" y="99.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.3" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1177.3" y="83.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.3" y="94.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.08%)</title><rect x="1177.3" y="67.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.3" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1177.3" y="51.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1177.3" y="35.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="627.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1178.3" y="595.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="606.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="590.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.08%)</title><rect x="1178.3" y="563.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="574.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1178.3" y="547.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="707.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="691.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.3" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.3" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="670.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1179.3" y="643.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1179.3" y="627.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="638.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="611.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="622.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1179.3" y="595.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1180.2" y="1107.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1180.2" y="1091.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1180.2" y="1075.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1180.2" y="1059.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1180.2" y="1043.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1180.2" y="1027.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1180.2" y="1011.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1180.2" y="995.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1180.2" y="979.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1180.2" y="963.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1180.2" y="947.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1180.2" y="931.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1180.2" y="915.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1180.2" y="899.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1180.2" y="883.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1180.2" y="867.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1180.2" y="851.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1180.2" y="835.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.2" y="819.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.2" y="803.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.2" y="787.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.2" y="771.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.2" y="755.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.2" y="739.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.2" y="723.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.2" y="707.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.2" y="691.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.2" y="675.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.2" y="659.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.2" y="643.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.2" y="627.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.2" y="611.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.2" y="595.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.2" y="579.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.2" y="563.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.2" y="547.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.2" y="531.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.2" y="515.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.2" y="499.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.2" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.2" y="467.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.2" y="451.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.2" y="435.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.2" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.2" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.2" y="387.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.2" y="371.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.2" y="355.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.2" y="339.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.2" y="323.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.2" y="307.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1180.2" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1180.2" y="275.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="286.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="259.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="270.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1180.2" y="243.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.2" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.2" y="515.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.2" y="499.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.2" y="483.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.2" y="467.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.2" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.2" y="435.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.2" y="419.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.2" y="403.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.2" y="387.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.2" y="371.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.2" y="355.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.2" y="339.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.2" y="323.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.2" y="307.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.2" y="291.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.2" y="275.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.2" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.2" y="243.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.2" y="227.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.2" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.2" y="195.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.2" y="179.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="190.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.08%)</title><rect x="1181.2" y="163.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="174.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.08%)</title><rect x="1181.2" y="147.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="158.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="131.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="142.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.08%)</title><rect x="1181.2" y="115.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="126.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1181.2" y="99.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.2" y="110.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="83.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="94.0"></text>
</g>
<g>
<title>TypeTuple::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1181.2" y="67.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.17%)</title><rect x="1182.2" y="819.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (2 samples, 0.17%)</title><rect x="1182.2" y="803.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (2 samples, 0.17%)</title><rect x="1182.2" y="787.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="782.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="766.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.08%)</title><rect x="1182.2" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1183.2" y="771.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.08%)</title><rect x="1184.1" y="1123.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="1134.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.08%)</title><rect x="1184.1" y="1107.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="1118.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1184.1" y="1091.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1184.1" y="1075.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="1086.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1184.1" y="1059.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.1" y="1070.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1184.1" y="1043.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.08%)</title><rect x="1185.1" y="1123.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="1134.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.08%)</title><rect x="1185.1" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="1118.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.08%)</title><rect x="1185.1" y="1091.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.1" y="1102.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1185.1" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.08%)</title><rect x="1185.1" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1185.1" y="1043.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.1" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1185.1" y="1027.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1188.1" y="1038.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1186.1" y="1203.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.1" y="1214.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1186.1" y="1187.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="1198.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1187.1" y="1267.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.1" y="1278.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1187.1" y="1251.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.1" y="1262.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1187.1" y="1235.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.1" y="1246.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.08%)</title><rect x="1187.1" y="1219.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1190.1" y="1230.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1187.1" y="1203.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.1" y="1214.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="1299.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.0" y="1310.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="1283.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.0" y="1294.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1188.0" y="1267.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.0" y="1278.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.08%)</title><rect x="1188.0" y="1251.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="1262.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.08%)</title><rect x="1188.0" y="1235.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.0" y="1246.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1188.0" y="1219.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="1230.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1188.0" y="1203.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.0" y="1214.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1188.0" y="1187.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="1198.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1188.0" y="1171.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.0" y="1182.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="1188.0" y="1155.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="1166.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="1267.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="1278.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="1251.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="1262.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="1235.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.0" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="1219.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.08%)</title><rect x="1189.0" y="1203.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="1214.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.08%)</title><rect x="1189.0" y="1187.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="1198.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1189.0" y="1171.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.0" y="1182.0"></text>
</g>
</g>
</svg>
