<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (218 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (35 samples, 16.06%)</title><rect x="10.0" y="1027.0" width="189.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.46%)</title><rect x="10.0" y="1011.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.46%)</title><rect x="10.0" y="995.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.46%)</title><rect x="10.0" y="979.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.46%)</title><rect x="10.0" y="963.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.46%)</title><rect x="10.0" y="947.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="10.0" y="931.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="10.0" y="915.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="10.0" y="899.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.46%)</title><rect x="10.0" y="883.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.46%)</title><rect x="10.0" y="867.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="10.0" y="851.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="10.0" y="835.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.46%)</title><rect x="10.0" y="819.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.46%)</title><rect x="10.0" y="803.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.46%)</title><rect x="10.0" y="787.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.46%)</title><rect x="10.0" y="771.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.46%)</title><rect x="10.0" y="755.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.46%)</title><rect x="10.0" y="739.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.46%)</title><rect x="10.0" y="723.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.46%)</title><rect x="10.0" y="707.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.46%)</title><rect x="10.0" y="691.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.46%)</title><rect x="10.0" y="675.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.46%)</title><rect x="10.0" y="659.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.46%)</title><rect x="10.0" y="643.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.46%)</title><rect x="10.0" y="627.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (34 samples, 15.60%)</title><rect x="15.4" y="1011.0" width="184.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.4" y="1022.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.46%)</title><rect x="15.4" y="995.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.46%)</title><rect x="15.4" y="979.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.4" y="990.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (18 samples, 8.26%)</title><rect x="20.8" y="995.0" width="97.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.8" y="1006.0">java/lang/I..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1209424634.accept (18 samples, 8.26%)</title><rect x="20.8" y="979.0" width="97.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.8" y="990.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (18 samples, 8.26%)</title><rect x="20.8" y="963.0" width="97.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.8" y="974.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 6.42%)</title><rect x="20.8" y="947.0" width="75.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.8" y="958.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 6.42%)</title><rect x="20.8" y="931.0" width="75.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.8" y="942.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 6.42%)</title><rect x="20.8" y="915.0" width="75.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.8" y="926.0">com/line..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (14 samples, 6.42%)</title><rect x="20.8" y="899.0" width="75.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.8" y="910.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 6.42%)</title><rect x="20.8" y="883.0" width="75.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.8" y="894.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (14 samples, 6.42%)</title><rect x="20.8" y="867.0" width="75.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.8" y="878.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 3.21%)</title><rect x="20.8" y="851.0" width="37.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.8" y="862.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.92%)</title><rect x="20.8" y="835.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.92%)</title><rect x="20.8" y="819.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.46%)</title><rect x="26.2" y="803.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetWaitStatus (1 samples, 0.46%)</title><rect x="26.2" y="787.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.29%)</title><rect x="31.7" y="835.0" width="27.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.7" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.29%)</title><rect x="31.7" y="819.0" width="27.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.7" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.29%)</title><rect x="31.7" y="803.0" width="27.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.7" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.83%)</title><rect x="37.1" y="787.0" width="21.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.1" y="798.0">j..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (4 samples, 1.83%)</title><rect x="37.1" y="771.0" width="21.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.1" y="782.0">s..</text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 1.83%)</title><rect x="37.1" y="755.0" width="21.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="40.1" y="766.0">U..</text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 1.38%)</title><rect x="37.1" y="739.0" width="16.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="40.1" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.46%)</title><rect x="53.3" y="739.0" width="5.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="56.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 2.75%)</title><rect x="58.7" y="851.0" width="32.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.7" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 2.75%)</title><rect x="58.7" y="835.0" width="32.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.7" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 2.75%)</title><rect x="58.7" y="819.0" width="32.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.7" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.46%)</title><rect x="91.2" y="851.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.46%)</title><rect x="91.2" y="835.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.46%)</title><rect x="91.2" y="819.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="94.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.83%)</title><rect x="96.6" y="947.0" width="21.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.6" y="958.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.83%)</title><rect x="96.6" y="931.0" width="21.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="99.6" y="942.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.46%)</title><rect x="112.8" y="915.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="115.8" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.46%)</title><rect x="112.8" y="899.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.8" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.46%)</title><rect x="112.8" y="883.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 6.88%)</title><rect x="118.3" y="995.0" width="81.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="121.3" y="1006.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 6.88%)</title><rect x="118.3" y="979.0" width="81.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.3" y="990.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 1.38%)</title><rect x="118.3" y="963.0" width="16.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="121.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.38%)</title><rect x="118.3" y="947.0" width="16.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="121.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.38%)</title><rect x="118.3" y="931.0" width="16.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="121.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.38%)</title><rect x="118.3" y="915.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.38%)</title><rect x="118.3" y="899.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="121.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.92%)</title><rect x="118.3" y="883.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.46%)</title><rect x="129.1" y="883.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="132.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.46%)</title><rect x="129.1" y="867.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.46%)</title><rect x="129.1" y="851.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.1" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.46%)</title><rect x="129.1" y="835.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 2.75%)</title><rect x="134.5" y="963.0" width="32.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="137.5" y="974.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 2.29%)</title><rect x="134.5" y="947.0" width="27.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="137.5" y="958.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 2.29%)</title><rect x="134.5" y="931.0" width="27.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.5" y="942.0">o..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.46%)</title><rect x="134.5" y="915.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="137.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/2124853235.accept (1 samples, 0.46%)</title><rect x="134.5" y="899.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.46%)</title><rect x="134.5" y="883.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="137.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.46%)</title><rect x="134.5" y="867.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="137.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.46%)</title><rect x="134.5" y="851.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="137.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.46%)</title><rect x="134.5" y="835.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.5" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.46%)</title><rect x="134.5" y="819.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="137.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.46%)</title><rect x="134.5" y="803.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="137.5" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.46%)</title><rect x="139.9" y="915.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.9" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.46%)</title><rect x="139.9" y="899.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.46%)</title><rect x="139.9" y="883.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.46%)</title><rect x="139.9" y="867.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.46%)</title><rect x="139.9" y="851.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.9" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.46%)</title><rect x="139.9" y="835.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="142.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.46%)</title><rect x="145.3" y="915.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.46%)</title><rect x="145.3" y="899.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="148.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.92%)</title><rect x="150.7" y="915.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.92%)</title><rect x="150.7" y="899.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (2 samples, 0.92%)</title><rect x="150.7" y="883.0" width="10.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="153.7" y="894.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.46%)</title><rect x="156.1" y="867.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.46%)</title><rect x="156.1" y="851.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.46%)</title><rect x="156.1" y="835.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.1" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.46%)</title><rect x="156.1" y="819.0" width="5.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="159.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.46%)</title><rect x="161.6" y="947.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="164.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.46%)</title><rect x="161.6" y="931.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="164.6" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.46%)</title><rect x="161.6" y="915.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.46%)</title><rect x="161.6" y="899.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.38%)</title><rect x="167.0" y="963.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.92%)</title><rect x="167.0" y="947.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.92%)</title><rect x="167.0" y="931.0" width="10.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="170.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.92%)</title><rect x="167.0" y="915.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="170.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.92%)</title><rect x="167.0" y="899.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.92%)</title><rect x="167.0" y="883.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.92%)</title><rect x="167.0" y="867.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="170.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.92%)</title><rect x="167.0" y="851.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="170.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.46%)</title><rect x="167.0" y="835.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="170.0" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.46%)</title><rect x="167.0" y="819.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="170.0" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.46%)</title><rect x="167.0" y="803.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.0" y="814.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.46%)</title><rect x="167.0" y="787.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="170.0" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.46%)</title><rect x="167.0" y="771.0" width="5.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="170.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.46%)</title><rect x="172.4" y="835.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.46%)</title><rect x="172.4" y="819.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.4" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.46%)</title><rect x="172.4" y="803.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.4" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.46%)</title><rect x="172.4" y="787.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.4" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.46%)</title><rect x="172.4" y="771.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.4" y="782.0"></text>
</g>
<g>
<title>java/nio/Bits.copyToArray (1 samples, 0.46%)</title><rect x="172.4" y="755.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.4" y="766.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.46%)</title><rect x="172.4" y="739.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.4" y="750.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.46%)</title><rect x="172.4" y="723.0" width="5.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="175.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.46%)</title><rect x="177.8" y="947.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="180.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.46%)</title><rect x="177.8" y="931.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="180.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="177.8" y="915.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="177.8" y="899.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="180.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.46%)</title><rect x="177.8" y="883.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="180.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.46%)</title><rect x="177.8" y="867.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.46%)</title><rect x="177.8" y="851.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="180.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.46%)</title><rect x="177.8" y="835.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.46%)</title><rect x="177.8" y="819.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.46%)</title><rect x="177.8" y="803.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="180.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.46%)</title><rect x="177.8" y="787.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="180.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.46%)</title><rect x="177.8" y="771.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="180.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.46%)</title><rect x="177.8" y="755.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.write (1 samples, 0.46%)</title><rect x="177.8" y="739.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.8" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putLong (1 samples, 0.46%)</title><rect x="177.8" y="723.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="180.8" y="734.0"></text>
</g>
<g>
<title>java/nio/Bits.putLong (1 samples, 0.46%)</title><rect x="177.8" y="707.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="180.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 1.38%)</title><rect x="183.2" y="963.0" width="16.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 1.38%)</title><rect x="183.2" y="947.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="186.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.46%)</title><rect x="183.2" y="931.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="186.2" y="942.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.46%)</title><rect x="183.2" y="915.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="186.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.46%)</title><rect x="188.6" y="931.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="191.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.46%)</title><rect x="194.0" y="931.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.0" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="194.0" y="915.0" width="5.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="197.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.run (62 samples, 28.44%)</title><rect x="199.4" y="1027.0" width="335.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.4" y="1038.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (62 samples, 28.44%)</title><rect x="199.4" y="1011.0" width="335.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.4" y="1022.0">java/util/concurrent/ThreadPoolExecutor$Worke..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (62 samples, 28.44%)</title><rect x="199.4" y="995.0" width="335.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.4" y="1006.0">java/util/concurrent/ThreadPoolExecutor.runWo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$278/1310786525.run (37 samples, 16.97%)</title><rect x="215.7" y="979.0" width="200.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.7" y="990.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (37 samples, 16.97%)</title><rect x="215.7" y="963.0" width="200.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.7" y="974.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (37 samples, 16.97%)</title><rect x="215.7" y="947.0" width="200.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.7" y="958.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (37 samples, 16.97%)</title><rect x="215.7" y="931.0" width="200.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.7" y="942.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (8 samples, 3.67%)</title><rect x="221.1" y="915.0" width="43.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.1" y="926.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (8 samples, 3.67%)</title><rect x="221.1" y="899.0" width="43.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.1" y="910.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 3.67%)</title><rect x="221.1" y="883.0" width="43.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.1" y="894.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 3.67%)</title><rect x="221.1" y="867.0" width="43.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.1" y="878.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 3.67%)</title><rect x="221.1" y="851.0" width="43.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.1" y="862.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 3.67%)</title><rect x="221.1" y="835.0" width="43.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.1" y="846.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 0.92%)</title><rect x="221.1" y="819.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.46%)</title><rect x="226.5" y="803.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.46%)</title><rect x="226.5" y="787.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.46%)</title><rect x="226.5" y="771.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.46%)</title><rect x="226.5" y="755.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="229.5" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.46%)</title><rect x="226.5" y="739.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="229.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.46%)</title><rect x="226.5" y="723.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="229.5" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.46%)</title><rect x="226.5" y="707.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="229.5" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.46%)</title><rect x="226.5" y="691.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="229.5" y="702.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.46%)</title><rect x="226.5" y="675.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="229.5" y="686.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.46%)</title><rect x="226.5" y="659.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="229.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 2.75%)</title><rect x="231.9" y="819.0" width="32.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.9" y="830.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.46%)</title><rect x="231.9" y="803.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.46%)</title><rect x="237.3" y="803.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.46%)</title><rect x="237.3" y="787.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 1.83%)</title><rect x="242.8" y="803.0" width="21.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="245.8" y="814.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.46%)</title><rect x="242.8" y="787.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.46%)</title><rect x="242.8" y="771.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.38%)</title><rect x="248.2" y="787.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.38%)</title><rect x="248.2" y="771.0" width="16.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.38%)</title><rect x="248.2" y="755.0" width="16.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.46%)</title><rect x="253.6" y="739.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.46%)</title><rect x="259.0" y="739.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.46%)</title><rect x="259.0" y="723.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.46%)</title><rect x="259.0" y="707.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (24 samples, 11.01%)</title><rect x="264.4" y="915.0" width="129.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.4" y="926.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.46%)</title><rect x="264.4" y="899.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.4" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.46%)</title><rect x="264.4" y="883.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.4" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.46%)</title><rect x="264.4" y="867.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.4" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.46%)</title><rect x="264.4" y="851.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.4" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.46%)</title><rect x="264.4" y="835.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.4" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.46%)</title><rect x="264.4" y="819.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.46%)</title><rect x="264.4" y="803.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.4" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.46%)</title><rect x="264.4" y="787.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (15 samples, 6.88%)</title><rect x="269.8" y="899.0" width="81.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.8" y="910.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (15 samples, 6.88%)</title><rect x="269.8" y="883.0" width="81.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.8" y="894.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 3.21%)</title><rect x="269.8" y="867.0" width="37.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.8" y="878.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.75%)</title><rect x="269.8" y="851.0" width="32.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.8" y="862.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.83%)</title><rect x="280.6" y="835.0" width="21.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.6" y="846.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.83%)</title><rect x="280.6" y="819.0" width="21.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.6" y="830.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.83%)</title><rect x="280.6" y="803.0" width="21.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.6" y="814.0">j..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.46%)</title><rect x="296.9" y="787.0" width="5.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="299.9" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.46%)</title><rect x="302.3" y="851.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.46%)</title><rect x="302.3" y="835.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.3" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.46%)</title><rect x="302.3" y="819.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="305.3" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.46%)</title><rect x="302.3" y="803.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="305.3" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.46%)</title><rect x="302.3" y="787.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="305.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.46%)</title><rect x="302.3" y="771.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="305.3" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.46%)</title><rect x="302.3" y="755.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="305.3" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 3.67%)</title><rect x="307.7" y="867.0" width="43.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.7" y="878.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 3.67%)</title><rect x="307.7" y="851.0" width="43.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.7" y="862.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.46%)</title><rect x="307.7" y="835.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.7" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.46%)</title><rect x="307.7" y="819.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.46%)</title><rect x="307.7" y="803.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.46%)</title><rect x="307.7" y="787.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.7" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 3.21%)</title><rect x="313.1" y="835.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.1" y="846.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 2.29%)</title><rect x="323.9" y="819.0" width="27.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.9" y="830.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.38%)</title><rect x="334.8" y="803.0" width="16.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.92%)</title><rect x="340.2" y="787.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (7 samples, 3.21%)</title><rect x="351.0" y="899.0" width="37.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.0" y="910.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (7 samples, 3.21%)</title><rect x="351.0" y="883.0" width="37.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="354.0" y="894.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.46%)</title><rect x="351.0" y="867.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="354.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.46%)</title><rect x="351.0" y="851.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="354.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2098216011.process (3 samples, 1.38%)</title><rect x="356.4" y="867.0" width="16.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="359.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.38%)</title><rect x="356.4" y="851.0" width="16.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="359.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (3 samples, 1.38%)</title><rect x="356.4" y="835.0" width="16.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="359.4" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.92%)</title><rect x="361.8" y="819.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="364.8" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.92%)</title><rect x="361.8" y="803.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.92%)</title><rect x="361.8" y="787.0" width="10.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="364.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.92%)</title><rect x="361.8" y="771.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="364.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.46%)</title><rect x="367.2" y="755.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="370.2" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.92%)</title><rect x="372.7" y="867.0" width="10.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="375.7" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.46%)</title><rect x="378.1" y="851.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.1" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.46%)</title><rect x="378.1" y="835.0" width="5.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="381.1" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.46%)</title><rect x="383.5" y="867.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="386.5" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.46%)</title><rect x="383.5" y="851.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.46%)</title><rect x="388.9" y="899.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.46%)</title><rect x="388.9" y="883.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="391.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.46%)</title><rect x="388.9" y="867.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="391.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1912188479.accept (1 samples, 0.46%)</title><rect x="388.9" y="851.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.46%)</title><rect x="388.9" y="835.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.9" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.46%)</title><rect x="388.9" y="819.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="391.9" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.46%)</title><rect x="388.9" y="803.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.38%)</title><rect x="394.3" y="915.0" width="16.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.38%)</title><rect x="394.3" y="899.0" width="16.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.92%)</title><rect x="399.7" y="883.0" width="10.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="402.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1912188479.accept (1 samples, 0.46%)</title><rect x="399.7" y="867.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="402.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.46%)</title><rect x="399.7" y="851.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="402.7" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.46%)</title><rect x="399.7" y="835.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="402.7" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.46%)</title><rect x="399.7" y="819.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="402.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1975923928.accept (1 samples, 0.46%)</title><rect x="405.1" y="867.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.46%)</title><rect x="405.1" y="851.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$276/226105838.complete (1 samples, 0.46%)</title><rect x="405.1" y="835.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.46%)</title><rect x="405.1" y="819.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.46%)</title><rect x="405.1" y="803.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.1" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.46%)</title><rect x="405.1" y="787.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.1" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.46%)</title><rect x="405.1" y="771.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="408.1" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.46%)</title><rect x="405.1" y="755.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="408.1" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.46%)</title><rect x="405.1" y="739.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.1" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.46%)</title><rect x="410.6" y="915.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="413.6" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="410.6" y="899.0" width="5.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="413.6" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 1.38%)</title><rect x="416.0" y="979.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="419.0" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.92%)</title><rect x="421.4" y="963.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="424.4" y="974.0"></text>
</g>
<g>
<title>BarrierSet::obj_equals(oopDesc*, oopDesc*) (1 samples, 0.46%)</title><rect x="421.4" y="947.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="424.4" y="958.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.46%)</title><rect x="426.8" y="947.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="429.8" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.46%)</title><rect x="432.2" y="979.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="435.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.92%)</title><rect x="437.6" y="979.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="440.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.92%)</title><rect x="437.6" y="963.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.46%)</title><rect x="443.0" y="947.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="446.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.46%)</title><rect x="448.4" y="979.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="451.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.46%)</title><rect x="448.4" y="963.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="451.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.46%)</title><rect x="448.4" y="947.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="451.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 6.88%)</title><rect x="453.9" y="979.0" width="81.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="456.9" y="990.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 6.88%)</title><rect x="453.9" y="963.0" width="81.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.9" y="974.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 5.96%)</title><rect x="453.9" y="947.0" width="70.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.9" y="958.0">java/uti..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.46%)</title><rect x="453.9" y="931.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 5.50%)</title><rect x="459.3" y="931.0" width="64.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="462.3" y="942.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 5.05%)</title><rect x="464.7" y="915.0" width="59.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="467.7" y="926.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Park (11 samples, 5.05%)</title><rect x="464.7" y="899.0" width="59.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="467.7" y="910.0">Unsafe..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.46%)</title><rect x="464.7" y="883.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="467.7" y="894.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.92%)</title><rect x="470.1" y="883.0" width="10.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="473.1" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.38%)</title><rect x="480.9" y="883.0" width="16.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="483.9" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 2.29%)</title><rect x="497.2" y="883.0" width="27.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="500.2" y="894.0">_..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.92%)</title><rect x="524.2" y="947.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="527.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.92%)</title><rect x="524.2" y="931.0" width="10.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="527.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.92%)</title><rect x="524.2" y="915.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="527.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.92%)</title><rect x="524.2" y="899.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="527.2" y="910.0"></text>
</g>
<g>
<title>start_thread (121 samples, 55.50%)</title><rect x="535.0" y="1027.0" width="655.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="538.0" y="1038.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (121 samples, 55.50%)</title><rect x="535.0" y="1011.0" width="655.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="538.0" y="1022.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 4.13%)</title><rect x="535.0" y="995.0" width="48.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="538.0" y="1006.0">Gang..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.38%)</title><rect x="535.0" y="979.0" width="16.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="538.0" y="990.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.38%)</title><rect x="535.0" y="963.0" width="16.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="538.0" y="974.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.38%)</title><rect x="535.0" y="947.0" width="16.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="538.0" y="958.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (6 samples, 2.75%)</title><rect x="551.3" y="979.0" width="32.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="554.3" y="990.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 2.29%)</title><rect x="551.3" y="963.0" width="27.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="554.3" y="974.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.92%)</title><rect x="556.7" y="947.0" width="10.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="559.7" y="958.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.92%)</title><rect x="556.7" y="931.0" width="10.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="559.7" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.46%)</title><rect x="556.7" y="915.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="559.7" y="926.0"></text>
</g>
<g>
<title>objArrayOopDesc::object_size(int) (1 samples, 0.46%)</title><rect x="562.1" y="915.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="565.1" y="926.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.92%)</title><rect x="567.5" y="947.0" width="10.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="570.5" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.46%)</title><rect x="578.3" y="963.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="581.3" y="974.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.46%)</title><rect x="578.3" y="947.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="581.3" y="958.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.46%)</title><rect x="578.3" y="931.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="581.3" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.46%)</title><rect x="578.3" y="915.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="581.3" y="926.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.46%)</title><rect x="578.3" y="899.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="581.3" y="910.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.46%)</title><rect x="578.3" y="883.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="581.3" y="894.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.46%)</title><rect x="578.3" y="867.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="581.3" y="878.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.46%)</title><rect x="578.3" y="851.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="581.3" y="862.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.46%)</title><rect x="578.3" y="835.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="581.3" y="846.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.46%)</title><rect x="578.3" y="819.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="581.3" y="830.0"></text>
</g>
<g>
<title>CodeRootSetTable::new_entry(nmethod*) (1 samples, 0.46%)</title><rect x="578.3" y="803.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="581.3" y="814.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (112 samples, 51.38%)</title><rect x="583.8" y="995.0" width="606.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="586.8" y="1006.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (112 samples, 51.38%)</title><rect x="583.8" y="979.0" width="606.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="586.8" y="990.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (112 samples, 51.38%)</title><rect x="583.8" y="963.0" width="606.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="586.8" y="974.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (109 samples, 50.00%)</title><rect x="583.8" y="947.0" width="590.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="586.8" y="958.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (108 samples, 49.54%)</title><rect x="583.8" y="931.0" width="584.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="586.8" y="942.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 22.48%)</title><rect x="583.8" y="915.0" width="265.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="586.8" y="926.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 1.83%)</title><rect x="583.8" y="899.0" width="21.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="586.8" y="910.0">C..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.92%)</title><rect x="583.8" y="883.0" width="10.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="586.8" y="894.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.46%)</title><rect x="589.2" y="867.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="592.2" y="878.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.92%)</title><rect x="594.6" y="883.0" width="10.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="597.6" y="894.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.46%)</title><rect x="594.6" y="867.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="597.6" y="878.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.46%)</title><rect x="594.6" y="851.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="597.6" y="862.0"></text>
</g>
<g>
<title>MemoryService::track_memory_pool_usage(MemoryPool*) (1 samples, 0.46%)</title><rect x="594.6" y="835.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="597.6" y="846.0"></text>
</g>
<g>
<title>MemoryPool::record_peak_memory_usage() (1 samples, 0.46%)</title><rect x="594.6" y="819.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="597.6" y="830.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.46%)</title><rect x="600.0" y="867.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.0" y="878.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.46%)</title><rect x="605.4" y="899.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="608.4" y="910.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.46%)</title><rect x="605.4" y="883.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="608.4" y="894.0"></text>
</g>
<g>
<title>MachCallNode::returns_pointer() const (1 samples, 0.46%)</title><rect x="605.4" y="867.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="608.4" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.38%)</title><rect x="610.8" y="899.0" width="16.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="613.8" y="910.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.92%)</title><rect x="610.8" y="883.0" width="10.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="613.8" y="894.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.46%)</title><rect x="616.2" y="867.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="619.2" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.46%)</title><rect x="621.7" y="883.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="624.7" y="894.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.46%)</title><rect x="621.7" y="867.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="624.7" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.46%)</title><rect x="627.1" y="899.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="630.1" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.46%)</title><rect x="627.1" y="883.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="630.1" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.83%)</title><rect x="632.5" y="899.0" width="21.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="635.5" y="910.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.83%)</title><rect x="632.5" y="883.0" width="21.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="635.5" y="894.0">P..</text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.46%)</title><rect x="632.5" y="867.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="635.5" y="878.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.46%)</title><rect x="632.5" y="851.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="635.5" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 1.38%)</title><rect x="637.9" y="867.0" width="16.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="640.9" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.46%)</title><rect x="643.3" y="851.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="646.3" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.46%)</title><rect x="648.7" y="851.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="651.7" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.46%)</title><rect x="654.1" y="899.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="657.1" y="910.0"></text>
</g>
<g>
<title>Block::is_Empty() const (1 samples, 0.46%)</title><rect x="654.1" y="883.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="657.1" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (34 samples, 15.60%)</title><rect x="659.5" y="899.0" width="184.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="662.5" y="910.0">PhaseChaitin::Register_A..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.46%)</title><rect x="659.5" y="883.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="662.5" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.46%)</title><rect x="665.0" y="883.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="668.0" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.46%)</title><rect x="665.0" y="867.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="668.0" y="878.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.46%)</title><rect x="665.0" y="851.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="668.0" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.92%)</title><rect x="670.4" y="883.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="673.4" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.46%)</title><rect x="675.8" y="867.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="678.8" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="675.8" y="851.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="678.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.83%)</title><rect x="681.2" y="883.0" width="21.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="684.2" y="894.0">P..</text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.46%)</title><rect x="692.0" y="867.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="695.0" y="878.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.46%)</title><rect x="692.0" y="851.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="695.0" y="862.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.46%)</title><rect x="697.4" y="867.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="700.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 4.59%)</title><rect x="702.8" y="883.0" width="54.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="705.8" y="894.0">Phase..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.46%)</title><rect x="724.5" y="867.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="727.5" y="878.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.46%)</title><rect x="729.9" y="867.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="732.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.83%)</title><rect x="735.3" y="867.0" width="21.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="738.3" y="878.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.92%)</title><rect x="746.1" y="851.0" width="10.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="749.1" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 0.92%)</title><rect x="757.0" y="883.0" width="10.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.0" y="894.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.46%)</title><rect x="762.4" y="867.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="765.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.46%)</title><rect x="767.8" y="883.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="770.8" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.92%)</title><rect x="773.2" y="883.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="776.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.92%)</title><rect x="773.2" y="867.0" width="10.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="776.2" y="878.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.46%)</title><rect x="784.0" y="883.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="787.0" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.46%)</title><rect x="784.0" y="867.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="787.0" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.46%)</title><rect x="784.0" y="851.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="787.0" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.46%)</title><rect x="784.0" y="835.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="787.0" y="846.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.46%)</title><rect x="784.0" y="819.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="787.0" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.46%)</title><rect x="789.4" y="883.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="792.4" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="789.4" y="867.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="792.4" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.46%)</title><rect x="794.9" y="883.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="797.9" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="794.9" y="867.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="797.9" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 2.75%)</title><rect x="800.3" y="883.0" width="32.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="803.3" y="894.0">Ph..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.92%)</title><rect x="816.5" y="867.0" width="10.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="819.5" y="878.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.46%)</title><rect x="816.5" y="851.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="819.5" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="821.9" y="851.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="824.9" y="862.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.46%)</title><rect x="827.3" y="867.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="830.3" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.46%)</title><rect x="832.8" y="883.0" width="5.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="835.8" y="894.0"></text>
</g>
<g>
<title>cmovI_regNode::ideal_Opcode() const (1 samples, 0.46%)</title><rect x="838.2" y="883.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="841.2" y="894.0"></text>
</g>
<g>
<title>jmpDir_shortNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.46%)</title><rect x="843.6" y="899.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="846.6" y="910.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 22.02%)</title><rect x="849.0" y="915.0" width="259.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="852.0" y="926.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.46%)</title><rect x="849.0" y="899.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="852.0" y="910.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.46%)</title><rect x="849.0" y="883.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="852.0" y="894.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.92%)</title><rect x="854.4" y="899.0" width="10.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="857.4" y="910.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.46%)</title><rect x="859.8" y="883.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="862.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 1.83%)</title><rect x="865.2" y="899.0" width="21.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="868.2" y="910.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 1.83%)</title><rect x="865.2" y="883.0" width="21.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="868.2" y="894.0">C..</text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (2 samples, 0.92%)</title><rect x="865.2" y="867.0" width="10.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="868.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.46%)</title><rect x="865.2" y="851.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="868.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::add_edge(PointsToNode*, PointsToNode*) [clone .isra.294] (1 samples, 0.46%)</title><rect x="865.2" y="835.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="868.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_init_values(JavaObjectNode*, PointsToNode*, PhaseTransform*) (1 samples, 0.46%)</title><rect x="870.6" y="851.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="873.6" y="862.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.46%)</title><rect x="870.6" y="835.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="873.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.92%)</title><rect x="876.1" y="867.0" width="10.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="876.1" y="851.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="879.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="876.1" y="835.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="879.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.46%)</title><rect x="876.1" y="819.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="879.1" y="830.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.46%)</title><rect x="876.1" y="803.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="879.1" y="814.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.46%)</title><rect x="876.1" y="787.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="879.1" y="798.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.46%)</title><rect x="876.1" y="771.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="879.1" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.46%)</title><rect x="881.5" y="851.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="884.5" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.46%)</title><rect x="881.5" y="835.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="884.5" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.46%)</title><rect x="886.9" y="899.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.9" y="910.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.46%)</title><rect x="886.9" y="883.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="889.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (34 samples, 15.60%)</title><rect x="892.3" y="899.0" width="184.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="895.3" y="910.0">PhaseIdealLoop::build_an..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.46%)</title><rect x="892.3" y="883.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="895.3" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.46%)</title><rect x="892.3" y="867.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="895.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.46%)</title><rect x="892.3" y="851.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="895.3" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.46%)</title><rect x="892.3" y="835.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="895.3" y="846.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.46%)</title><rect x="892.3" y="819.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="895.3" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.38%)</title><rect x="897.7" y="883.0" width="16.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="900.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.46%)</title><rect x="908.5" y="867.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="911.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (24 samples, 11.01%)</title><rect x="913.9" y="883.0" width="130.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="916.9" y="894.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (24 samples, 11.01%)</title><rect x="913.9" y="867.0" width="130.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="916.9" y="878.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (24 samples, 11.01%)</title><rect x="913.9" y="851.0" width="130.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.9" y="862.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.46%)</title><rect x="913.9" y="835.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.46%)</title><rect x="913.9" y="819.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="916.9" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.46%)</title><rect x="919.4" y="835.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="922.4" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (22 samples, 10.09%)</title><rect x="924.8" y="835.0" width="119.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="927.8" y="846.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.92%)</title><rect x="1043.9" y="883.0" width="10.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.92%)</title><rect x="1043.9" y="867.0" width="10.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.9" y="878.0"></text>
</g>
<g>
<title>LoadBNode::Opcode() const (1 samples, 0.46%)</title><rect x="1043.9" y="851.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.46%)</title><rect x="1049.3" y="851.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1052.3" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.38%)</title><rect x="1054.7" y="883.0" width="16.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.7" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.38%)</title><rect x="1054.7" y="867.0" width="16.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.7" y="878.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1054.7" y="851.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.7" y="862.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1054.7" y="835.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.7" y="846.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.46%)</title><rect x="1060.1" y="851.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.1" y="862.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.46%)</title><rect x="1060.1" y="835.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1063.1" y="846.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1065.5" y="851.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.5" y="862.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.46%)</title><rect x="1065.5" y="835.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1068.5" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.46%)</title><rect x="1065.5" y="819.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.5" y="830.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.46%)</title><rect x="1065.5" y="803.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.5" y="814.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.46%)</title><rect x="1065.5" y="787.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1068.5" y="798.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.46%)</title><rect x="1065.5" y="771.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.5" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.46%)</title><rect x="1065.5" y="755.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.5" y="766.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.46%)</title><rect x="1070.9" y="883.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.9" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.29%)</title><rect x="1076.3" y="899.0" width="27.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.3" y="910.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.29%)</title><rect x="1076.3" y="883.0" width="27.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.3" y="894.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1076.3" y="867.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.3" y="878.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1081.7" y="867.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.7" y="878.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.46%)</title><rect x="1081.7" y="851.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.7" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.46%)</title><rect x="1081.7" y="835.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.7" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.46%)</title><rect x="1081.7" y="819.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.7" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.46%)</title><rect x="1087.2" y="867.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.2" y="878.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1092.6" y="867.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.6" y="878.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.46%)</title><rect x="1092.6" y="851.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.6" y="862.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1098.0" y="867.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.0" y="878.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.46%)</title><rect x="1098.0" y="851.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.0" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="835.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.0" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="819.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.0" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="803.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.0" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="787.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.0" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="771.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.0" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="755.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.0" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="739.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.0" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="723.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="707.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="691.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.0" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="675.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.0" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="659.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.0" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.46%)</title><rect x="1098.0" y="643.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1101.0" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.46%)</title><rect x="1098.0" y="627.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.0" y="638.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.46%)</title><rect x="1103.4" y="899.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.4" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.46%)</title><rect x="1103.4" y="883.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.4" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.46%)</title><rect x="1103.4" y="867.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.46%)</title><rect x="1103.4" y="851.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.4" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.67%)</title><rect x="1108.8" y="915.0" width="43.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.8" y="926.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.67%)</title><rect x="1108.8" y="899.0" width="43.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.8" y="910.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.67%)</title><rect x="1108.8" y="883.0" width="43.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.8" y="894.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 3.67%)</title><rect x="1108.8" y="867.0" width="43.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.8" y="878.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 3.67%)</title><rect x="1108.8" y="851.0" width="43.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.8" y="862.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.21%)</title><rect x="1108.8" y="835.0" width="37.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.8" y="846.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1114.2" y="819.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.2" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1114.2" y="803.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.2" y="814.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.46%)</title><rect x="1114.2" y="787.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.2" y="798.0"></text>
</g>
<g>
<title>ciMethod::interpreter_call_site_count(int) (1 samples, 0.46%)</title><rect x="1114.2" y="771.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.2" y="782.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.46%)</title><rect x="1114.2" y="755.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.2" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.29%)</title><rect x="1119.6" y="819.0" width="27.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.6" y="830.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.29%)</title><rect x="1119.6" y="803.0" width="27.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.6" y="814.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.29%)</title><rect x="1119.6" y="787.0" width="27.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.6" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.29%)</title><rect x="1119.6" y="771.0" width="27.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.6" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.29%)</title><rect x="1119.6" y="755.0" width="27.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.6" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.29%)</title><rect x="1119.6" y="739.0" width="27.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.6" y="750.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.83%)</title><rect x="1119.6" y="723.0" width="21.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.6" y="734.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.83%)</title><rect x="1119.6" y="707.0" width="21.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.6" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.83%)</title><rect x="1119.6" y="691.0" width="21.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.6" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.83%)</title><rect x="1119.6" y="675.0" width="21.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.6" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.83%)</title><rect x="1119.6" y="659.0" width="21.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.6" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.83%)</title><rect x="1119.6" y="643.0" width="21.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.6" y="654.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.83%)</title><rect x="1119.6" y="627.0" width="21.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.6" y="638.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.83%)</title><rect x="1119.6" y="611.0" width="21.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.6" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.83%)</title><rect x="1119.6" y="595.0" width="21.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.6" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.83%)</title><rect x="1119.6" y="579.0" width="21.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.6" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.83%)</title><rect x="1119.6" y="563.0" width="21.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.6" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.92%)</title><rect x="1119.6" y="547.0" width="10.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.92%)</title><rect x="1119.6" y="531.0" width="10.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.92%)</title><rect x="1119.6" y="515.0" width="10.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.92%)</title><rect x="1119.6" y="499.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.92%)</title><rect x="1119.6" y="483.0" width="10.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.92%)</title><rect x="1119.6" y="467.0" width="10.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1119.6" y="451.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1119.6" y="435.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1119.6" y="419.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1119.6" y="403.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1119.6" y="387.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1119.6" y="371.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1119.6" y="355.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.6" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1119.6" y="339.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1119.6" y="323.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1119.6" y="307.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1119.6" y="291.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1119.6" y="275.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1119.6" y="259.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1119.6" y="243.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1119.6" y="227.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.6" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1119.6" y="211.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1119.6" y="195.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1119.6" y="179.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1119.6" y="163.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1119.6" y="147.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.6" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1119.6" y="131.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.6" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1119.6" y="115.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.46%)</title><rect x="1119.6" y="99.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.6" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.46%)</title><rect x="1119.6" y="83.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.6" y="94.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1119.6" y="67.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.6" y="78.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.46%)</title><rect x="1119.6" y="51.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.6" y="62.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.46%)</title><rect x="1119.6" y="35.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.46%)</title><rect x="1125.0" y="451.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.0" y="462.0"></text>
</g>
<g>
<title>ciKlass::is_subclass_of(ciKlass*) (1 samples, 0.46%)</title><rect x="1125.0" y="435.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.46%)</title><rect x="1130.5" y="547.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.5" y="558.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.46%)</title><rect x="1130.5" y="531.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.5" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1130.5" y="515.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.5" y="526.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.46%)</title><rect x="1130.5" y="499.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.5" y="510.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.46%)</title><rect x="1130.5" y="483.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.5" y="494.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.46%)</title><rect x="1130.5" y="467.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.5" y="478.0"></text>
</g>
<g>
<title>TypeOopPtr::eq_speculative(TypeOopPtr const*) const (1 samples, 0.46%)</title><rect x="1130.5" y="451.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.46%)</title><rect x="1135.9" y="547.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.9" y="558.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.46%)</title><rect x="1135.9" y="531.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.9" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1141.3" y="723.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1141.3" y="707.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1141.3" y="691.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1141.3" y="675.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1141.3" y="659.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1141.3" y="643.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1141.3" y="627.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1141.3" y="611.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1141.3" y="595.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="606.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 0.46%)</title><rect x="1141.3" y="579.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.3" y="590.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.46%)</title><rect x="1141.3" y="563.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.3" y="574.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_receiver_data_from(ProfileData const*) (1 samples, 0.46%)</title><rect x="1141.3" y="547.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.3" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.46%)</title><rect x="1141.3" y="531.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="542.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (1 samples, 0.46%)</title><rect x="1141.3" y="515.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.46%)</title><rect x="1146.7" y="835.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.46%)</title><rect x="1146.7" y="819.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.7" y="830.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.46%)</title><rect x="1146.7" y="803.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.7" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory_call(Node*, bool) (1 samples, 0.46%)</title><rect x="1146.7" y="787.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.7" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.46%)</title><rect x="1146.7" y="771.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.7" y="782.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.46%)</title><rect x="1146.7" y="755.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.7" y="766.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.46%)</title><rect x="1146.7" y="739.0" width="5.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1149.7" y="750.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 1.38%)</title><rect x="1152.1" y="915.0" width="16.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="926.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.92%)</title><rect x="1152.1" y="899.0" width="10.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="910.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.46%)</title><rect x="1162.9" y="899.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.9" y="910.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.46%)</title><rect x="1168.3" y="931.0" width="5.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1171.3" y="942.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.92%)</title><rect x="1173.8" y="947.0" width="10.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.8" y="958.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.92%)</title><rect x="1173.8" y="931.0" width="10.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.8" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.92%)</title><rect x="1173.8" y="915.0" width="10.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.46%)</title><rect x="1173.8" y="899.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="910.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.46%)</title><rect x="1173.8" y="883.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="894.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.46%)</title><rect x="1173.8" y="867.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="878.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.46%)</title><rect x="1173.8" y="851.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.46%)</title><rect x="1173.8" y="835.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="846.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.46%)</title><rect x="1173.8" y="819.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="830.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.46%)</title><rect x="1173.8" y="803.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="814.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.46%)</title><rect x="1173.8" y="787.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="798.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.46%)</title><rect x="1179.2" y="899.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="910.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.46%)</title><rect x="1179.2" y="883.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.2" y="894.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.46%)</title><rect x="1179.2" y="867.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="878.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.46%)</title><rect x="1179.2" y="851.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="862.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.46%)</title><rect x="1179.2" y="835.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.2" y="846.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.46%)</title><rect x="1184.6" y="947.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.6" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.46%)</title><rect x="1184.6" y="931.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.6" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.46%)</title><rect x="1184.6" y="915.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.6" y="926.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (1 samples, 0.46%)</title><rect x="1184.6" y="899.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.6" y="910.0"></text>
</g>
</g>
</svg>
