<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1173"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1173"> </text>
<g id="frames">
<g>
<title>all (169 samples, 100.00%)</title><rect x="10.0" y="1139.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (33 samples, 19.53%)</title><rect x="10.0" y="1123.0" width="230.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1134.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (32 samples, 18.93%)</title><rect x="17.0" y="1107.0" width="223.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.0" y="1118.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.59%)</title><rect x="17.0" y="1091.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.59%)</title><rect x="17.0" y="1075.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.59%)</title><rect x="17.0" y="1059.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.59%)</title><rect x="17.0" y="1043.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.59%)</title><rect x="17.0" y="1027.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.59%)</title><rect x="24.0" y="1091.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.59%)</title><rect x="24.0" y="1075.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.59%)</title><rect x="24.0" y="1059.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.59%)</title><rect x="24.0" y="1043.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.59%)</title><rect x="24.0" y="1027.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.59%)</title><rect x="24.0" y="1011.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.59%)</title><rect x="24.0" y="995.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.59%)</title><rect x="24.0" y="979.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.59%)</title><rect x="24.0" y="963.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$268/1718709820.test (1 samples, 0.59%)</title><rect x="24.0" y="947.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.0" y="958.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (22 samples, 13.02%)</title><rect x="30.9" y="1091.0" width="153.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.9" y="1102.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/828474339.accept (20 samples, 11.83%)</title><rect x="37.9" y="1075.0" width="139.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.9" y="1086.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (20 samples, 11.83%)</title><rect x="37.9" y="1059.0" width="139.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.9" y="1070.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 9.47%)</title><rect x="37.9" y="1043.0" width="111.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.9" y="1054.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 9.47%)</title><rect x="37.9" y="1027.0" width="111.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.9" y="1038.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (16 samples, 9.47%)</title><rect x="37.9" y="1011.0" width="111.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.9" y="1022.0">com/linecorp/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (16 samples, 9.47%)</title><rect x="37.9" y="995.0" width="111.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.9" y="1006.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 9.47%)</title><rect x="37.9" y="979.0" width="111.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.9" y="990.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (16 samples, 9.47%)</title><rect x="37.9" y="963.0" width="111.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.9" y="974.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 4.73%)</title><rect x="37.9" y="947.0" width="55.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.9" y="958.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.18%)</title><rect x="37.9" y="931.0" width="14.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.18%)</title><rect x="37.9" y="915.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.59%)</title><rect x="44.9" y="899.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.59%)</title><rect x="44.9" y="883.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 3.55%)</title><rect x="51.9" y="931.0" width="41.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="54.9" y="942.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 3.55%)</title><rect x="51.9" y="915.0" width="41.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.9" y="926.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 3.55%)</title><rect x="51.9" y="899.0" width="41.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.9" y="910.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 3.55%)</title><rect x="51.9" y="883.0" width="41.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.9" y="894.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 3.55%)</title><rect x="51.9" y="867.0" width="41.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.9" y="878.0">sun..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.59%)</title><rect x="51.9" y="851.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="54.9" y="862.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 2.96%)</title><rect x="58.9" y="851.0" width="34.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="61.9" y="862.0">Un..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.37%)</title><rect x="58.9" y="835.0" width="27.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="61.9" y="846.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.59%)</title><rect x="86.8" y="835.0" width="7.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="89.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 4.14%)</title><rect x="93.8" y="947.0" width="48.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.8" y="958.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 4.14%)</title><rect x="93.8" y="931.0" width="48.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.8" y="942.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 4.14%)</title><rect x="93.8" y="915.0" width="48.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.8" y="926.0">java..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.59%)</title><rect x="135.7" y="899.0" width="7.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="138.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.59%)</title><rect x="142.7" y="947.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.59%)</title><rect x="142.7" y="931.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="145.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.59%)</title><rect x="142.7" y="915.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="145.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 2.37%)</title><rect x="149.6" y="1043.0" width="28.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.6" y="1054.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.37%)</title><rect x="149.6" y="1027.0" width="28.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="152.6" y="1038.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.59%)</title><rect x="163.6" y="1011.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="166.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.59%)</title><rect x="163.6" y="995.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="166.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.59%)</title><rect x="163.6" y="979.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="166.6" y="990.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.59%)</title><rect x="170.6" y="1011.0" width="7.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="173.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.59%)</title><rect x="177.6" y="1075.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.59%)</title><rect x="177.6" y="1059.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.59%)</title><rect x="177.6" y="1043.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.59%)</title><rect x="177.6" y="1027.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="180.6" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.59%)</title><rect x="177.6" y="1011.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.59%)</title><rect x="177.6" y="995.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.73%)</title><rect x="184.6" y="1091.0" width="55.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.6" y="1102.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.73%)</title><rect x="184.6" y="1075.0" width="55.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.6" y="1086.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.18%)</title><rect x="184.6" y="1059.0" width="13.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.18%)</title><rect x="184.6" y="1043.0" width="13.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="187.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.18%)</title><rect x="184.6" y="1027.0" width="13.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.59%)</title><rect x="184.6" y="1011.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="187.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.59%)</title><rect x="184.6" y="995.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="187.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.59%)</title><rect x="184.6" y="979.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.59%)</title><rect x="191.5" y="1011.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.59%)</title><rect x="191.5" y="995.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="194.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.59%)</title><rect x="191.5" y="979.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.5" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.59%)</title><rect x="191.5" y="963.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="194.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.59%)</title><rect x="191.5" y="947.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="194.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.59%)</title><rect x="191.5" y="931.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 2.37%)</title><rect x="198.5" y="1059.0" width="27.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.5" y="1070.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 2.37%)</title><rect x="198.5" y="1043.0" width="27.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="201.5" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.78%)</title><rect x="198.5" y="1027.0" width="21.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 1.18%)</title><rect x="198.5" y="1011.0" width="14.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 1.18%)</title><rect x="198.5" y="995.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (2 samples, 1.18%)</title><rect x="198.5" y="979.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="201.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.59%)</title><rect x="205.5" y="963.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.59%)</title><rect x="205.5" y="947.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.5" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.59%)</title><rect x="205.5" y="931.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.59%)</title><rect x="212.5" y="1011.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.59%)</title><rect x="212.5" y="995.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.5" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.59%)</title><rect x="212.5" y="979.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.59%)</title><rect x="212.5" y="963.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.59%)</title><rect x="212.5" y="947.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.59%)</title><rect x="212.5" y="931.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.59%)</title><rect x="212.5" y="915.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.59%)</title><rect x="219.5" y="1027.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.59%)</title><rect x="219.5" y="1011.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.59%)</title><rect x="219.5" y="995.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.59%)</title><rect x="219.5" y="979.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="222.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.59%)</title><rect x="219.5" y="963.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.59%)</title><rect x="219.5" y="947.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.59%)</title><rect x="219.5" y="931.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.5" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.59%)</title><rect x="219.5" y="915.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.5" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.59%)</title><rect x="219.5" y="899.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.5" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.59%)</title><rect x="219.5" y="883.0" width="6.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="222.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.18%)</title><rect x="226.4" y="1059.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.59%)</title><rect x="226.4" y="1043.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.59%)</title><rect x="226.4" y="1027.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="229.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.59%)</title><rect x="226.4" y="1011.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.isConnected (1 samples, 0.59%)</title><rect x="226.4" y="995.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.isConnected (1 samples, 0.59%)</title><rect x="226.4" y="979.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.59%)</title><rect x="233.4" y="1043.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.59%)</title><rect x="233.4" y="1027.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.59%)</title><rect x="233.4" y="1011.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.59%)</title><rect x="233.4" y="995.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.59%)</title><rect x="233.4" y="979.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.59%)</title><rect x="233.4" y="963.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.59%)</title><rect x="233.4" y="947.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.59%)</title><rect x="233.4" y="931.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.59%)</title><rect x="233.4" y="915.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.59%)</title><rect x="233.4" y="899.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.59%)</title><rect x="233.4" y="883.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.4" y="894.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.59%)</title><rect x="233.4" y="867.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.4" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (63 samples, 37.28%)</title><rect x="240.4" y="1123.0" width="439.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.4" y="1134.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (63 samples, 37.28%)</title><rect x="240.4" y="1107.0" width="439.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.4" y="1118.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (63 samples, 37.28%)</title><rect x="240.4" y="1091.0" width="439.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.4" y="1102.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.59%)</title><rect x="254.4" y="1075.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="257.4" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.59%)</title><rect x="254.4" y="1059.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="257.4" y="1070.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.59%)</title><rect x="254.4" y="1043.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="257.4" y="1054.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_back_branch_event(methodHandle, methodHandle, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.59%)</title><rect x="254.4" y="1027.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="257.4" y="1038.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) [clone .part.149] (1 samples, 0.59%)</title><rect x="254.4" y="1011.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="257.4" y="1022.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.59%)</title><rect x="254.4" y="995.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="257.4" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.59%)</title><rect x="254.4" y="979.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="257.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1111488829.run (37 samples, 21.89%)</title><rect x="261.4" y="1075.0" width="258.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.4" y="1086.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (37 samples, 21.89%)</title><rect x="261.4" y="1059.0" width="258.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.4" y="1070.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (37 samples, 21.89%)</title><rect x="261.4" y="1043.0" width="258.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.4" y="1054.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (37 samples, 21.89%)</title><rect x="261.4" y="1027.0" width="258.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.4" y="1038.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (13 samples, 7.69%)</title><rect x="268.3" y="1011.0" width="90.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.3" y="1022.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (13 samples, 7.69%)</title><rect x="268.3" y="995.0" width="90.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.3" y="1006.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (13 samples, 7.69%)</title><rect x="268.3" y="979.0" width="90.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.3" y="990.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 7.69%)</title><rect x="268.3" y="963.0" width="90.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.3" y="974.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 7.69%)</title><rect x="268.3" y="947.0" width="90.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="271.3" y="958.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (13 samples, 7.69%)</title><rect x="268.3" y="931.0" width="90.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.3" y="942.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 4.73%)</title><rect x="268.3" y="915.0" width="55.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.3" y="926.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 2.96%)</title><rect x="268.3" y="899.0" width="35.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.3" y="910.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 2.96%)</title><rect x="268.3" y="883.0" width="35.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.3" y="894.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 2.96%)</title><rect x="268.3" y="867.0" width="35.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="271.3" y="878.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (5 samples, 2.96%)</title><rect x="268.3" y="851.0" width="35.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.3" y="862.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.78%)</title><rect x="303.3" y="899.0" width="20.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="306.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.78%)</title><rect x="303.3" y="883.0" width="20.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.59%)</title><rect x="303.3" y="867.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.18%)</title><rect x="310.2" y="867.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="313.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.59%)</title><rect x="317.2" y="851.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="320.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.59%)</title><rect x="317.2" y="835.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="320.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.96%)</title><rect x="324.2" y="915.0" width="34.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.2" y="926.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.59%)</title><rect x="324.2" y="899.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.59%)</title><rect x="324.2" y="883.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.59%)</title><rect x="331.2" y="899.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.59%)</title><rect x="331.2" y="883.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.59%)</title><rect x="331.2" y="867.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.59%)</title><rect x="331.2" y="851.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.78%)</title><rect x="338.2" y="899.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.59%)</title><rect x="338.2" y="883.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="341.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.59%)</title><rect x="338.2" y="867.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="341.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.59%)</title><rect x="338.2" y="851.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.59%)</title><rect x="338.2" y="835.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.18%)</title><rect x="345.1" y="883.0" width="14.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.18%)</title><rect x="345.1" y="867.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="348.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.18%)</title><rect x="345.1" y="851.0" width="14.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="348.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.59%)</title><rect x="345.1" y="835.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.59%)</title><rect x="345.1" y="819.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.59%)</title><rect x="345.1" y="803.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.59%)</title><rect x="345.1" y="787.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="348.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.59%)</title><rect x="345.1" y="771.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.59%)</title><rect x="345.1" y="755.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="348.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.59%)</title><rect x="345.1" y="739.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.59%)</title><rect x="345.1" y="723.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.59%)</title><rect x="352.1" y="835.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="355.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.59%)</title><rect x="352.1" y="819.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.59%)</title><rect x="352.1" y="803.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="355.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.59%)</title><rect x="352.1" y="787.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.59%)</title><rect x="352.1" y="771.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (23 samples, 13.61%)</title><rect x="359.1" y="1011.0" width="160.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="362.1" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.18%)</title><rect x="359.1" y="995.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.1" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.18%)</title><rect x="359.1" y="979.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="362.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.18%)</title><rect x="359.1" y="963.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="362.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.59%)</title><rect x="366.1" y="947.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="369.1" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.59%)</title><rect x="366.1" y="931.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.1" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.59%)</title><rect x="366.1" y="915.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="369.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.59%)</title><rect x="366.1" y="899.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="369.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 8.28%)</title><rect x="373.1" y="995.0" width="97.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.1" y="1006.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (12 samples, 7.10%)</title><rect x="387.0" y="979.0" width="83.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="390.0" y="990.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 3.55%)</title><rect x="387.0" y="963.0" width="41.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.0" y="974.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.96%)</title><rect x="387.0" y="947.0" width="35.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="390.0" y="958.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.78%)</title><rect x="394.0" y="931.0" width="21.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="397.0" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.18%)</title><rect x="401.0" y="915.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.0" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.18%)</title><rect x="401.0" y="899.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.59%)</title><rect x="408.0" y="883.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="411.0" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.59%)</title><rect x="408.0" y="867.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="411.0" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.59%)</title><rect x="408.0" y="851.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="411.0" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.59%)</title><rect x="415.0" y="931.0" width="7.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="418.0" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.59%)</title><rect x="422.0" y="947.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.0" y="958.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.59%)</title><rect x="422.0" y="931.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.0" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.59%)</title><rect x="422.0" y="915.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="425.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.59%)</title><rect x="422.0" y="899.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="425.0" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.59%)</title><rect x="422.0" y="883.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="425.0" y="894.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.55%)</title><rect x="428.9" y="963.0" width="41.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="431.9" y="974.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.55%)</title><rect x="428.9" y="947.0" width="41.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.9" y="958.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.59%)</title><rect x="442.9" y="931.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="445.9" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.59%)</title><rect x="442.9" y="915.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.59%)</title><rect x="442.9" y="899.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.9" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.78%)</title><rect x="449.9" y="931.0" width="20.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="452.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.18%)</title><rect x="456.9" y="915.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.18%)</title><rect x="456.9" y="899.0" width="13.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.9" y="910.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.59%)</title><rect x="463.8" y="883.0" width="7.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="466.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 2.96%)</title><rect x="470.8" y="995.0" width="34.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="473.8" y="1006.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 2.96%)</title><rect x="470.8" y="979.0" width="34.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="473.8" y="990.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/231573059.process (1 samples, 0.59%)</title><rect x="477.8" y="963.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="480.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.59%)</title><rect x="477.8" y="947.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.59%)</title><rect x="477.8" y="931.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.59%)</title><rect x="477.8" y="915.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.8" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.59%)</title><rect x="477.8" y="899.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.59%)</title><rect x="477.8" y="883.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.8" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.59%)</title><rect x="484.8" y="963.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="487.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.59%)</title><rect x="484.8" y="947.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="487.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1951820019.get$Lambda (1 samples, 0.59%)</title><rect x="484.8" y="931.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="487.8" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.59%)</title><rect x="484.8" y="915.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="487.8" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.59%)</title><rect x="491.8" y="963.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="494.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.59%)</title><rect x="491.8" y="947.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="494.8" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.59%)</title><rect x="491.8" y="931.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="494.8" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.59%)</title><rect x="491.8" y="915.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="494.8" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.59%)</title><rect x="491.8" y="899.0" width="7.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="494.8" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.59%)</title><rect x="498.8" y="963.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="501.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.59%)</title><rect x="498.8" y="947.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.8" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1033566789.linkToTargetMethod (1 samples, 0.59%)</title><rect x="505.7" y="995.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.59%)</title><rect x="505.7" y="979.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="508.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/277898483.get$Lambda (1 samples, 0.59%)</title><rect x="505.7" y="963.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="508.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.59%)</title><rect x="512.7" y="995.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.59%)</title><rect x="512.7" y="979.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="515.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.59%)</title><rect x="512.7" y="963.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="515.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/277898483.accept (1 samples, 0.59%)</title><rect x="512.7" y="947.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="515.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.59%)</title><rect x="512.7" y="931.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.59%)</title><rect x="512.7" y="915.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="515.7" y="926.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.59%)</title><rect x="512.7" y="899.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="515.7" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.59%)</title><rect x="512.7" y="883.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="515.7" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.59%)</title><rect x="512.7" y="867.0" width="7.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="515.7" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.59%)</title><rect x="512.7" y="851.0" width="7.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="515.7" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.59%)</title><rect x="519.7" y="1075.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="522.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.59%)</title><rect x="519.7" y="1059.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="522.7" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.272] (1 samples, 0.59%)</title><rect x="519.7" y="1043.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="522.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 1.78%)</title><rect x="526.7" y="1075.0" width="20.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="529.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 1.78%)</title><rect x="526.7" y="1059.0" width="20.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="529.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 1.18%)</title><rect x="533.7" y="1043.0" width="13.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="536.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.59%)</title><rect x="540.7" y="1027.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="543.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (19 samples, 11.24%)</title><rect x="547.6" y="1075.0" width="132.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="550.6" y="1086.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (18 samples, 10.65%)</title><rect x="554.6" y="1059.0" width="125.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="557.6" y="1070.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (16 samples, 9.47%)</title><rect x="561.6" y="1043.0" width="111.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="564.6" y="1054.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 1.18%)</title><rect x="575.6" y="1027.0" width="13.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="578.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.59%)</title><rect x="575.6" y="1011.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.59%)</title><rect x="582.5" y="1011.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="585.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.59%)</title><rect x="582.5" y="995.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="585.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.59%)</title><rect x="582.5" y="979.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="585.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 7.10%)</title><rect x="589.5" y="1027.0" width="83.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="592.5" y="1038.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (12 samples, 7.10%)</title><rect x="589.5" y="1011.0" width="83.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="592.5" y="1022.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 5.92%)</title><rect x="596.5" y="995.0" width="69.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="599.5" y="1006.0">Unsafe_..</text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.78%)</title><rect x="596.5" y="979.0" width="21.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="599.5" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.78%)</title><rect x="617.5" y="979.0" width="20.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="620.5" y="990.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 1.18%)</title><rect x="638.4" y="979.0" width="14.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="641.4" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.59%)</title><rect x="652.4" y="979.0" width="6.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="655.4" y="990.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.59%)</title><rect x="659.3" y="979.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="662.3" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.59%)</title><rect x="666.3" y="995.0" width="7.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="669.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.59%)</title><rect x="673.3" y="1043.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="676.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.59%)</title><rect x="673.3" y="1027.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="676.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.59%)</title><rect x="673.3" y="1011.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="676.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.59%)</title><rect x="673.3" y="995.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="676.3" y="1006.0"></text>
</g>
<g>
<title>start_thread (73 samples, 43.20%)</title><rect x="680.3" y="1123.0" width="509.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="683.3" y="1134.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (73 samples, 43.20%)</title><rect x="680.3" y="1107.0" width="509.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="683.3" y="1118.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 7.69%)</title><rect x="680.3" y="1091.0" width="90.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="683.3" y="1102.0">GangWorker..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 2.37%)</title><rect x="680.3" y="1075.0" width="27.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="683.3" y="1086.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.37%)</title><rect x="680.3" y="1059.0" width="27.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="683.3" y="1070.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.18%)</title><rect x="680.3" y="1043.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="683.3" y="1054.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.18%)</title><rect x="694.3" y="1043.0" width="13.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="697.3" y="1054.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (9 samples, 5.33%)</title><rect x="708.2" y="1075.0" width="62.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="711.2" y="1086.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 4.14%)</title><rect x="708.2" y="1059.0" width="48.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="711.2" y="1070.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.78%)</title><rect x="708.2" y="1043.0" width="21.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="711.2" y="1054.0"></text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.59%)</title><rect x="715.2" y="1027.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="718.2" y="1038.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.59%)</title><rect x="722.2" y="1027.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="725.2" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.59%)</title><rect x="722.2" y="1011.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="725.2" y="1022.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.59%)</title><rect x="722.2" y="995.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="725.2" y="1006.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.78%)</title><rect x="729.2" y="1043.0" width="20.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="732.2" y="1054.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.59%)</title><rect x="750.1" y="1043.0" width="7.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="753.1" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.59%)</title><rect x="757.1" y="1059.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="760.1" y="1070.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.59%)</title><rect x="757.1" y="1043.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="760.1" y="1054.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.59%)</title><rect x="757.1" y="1027.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="760.1" y="1038.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.59%)</title><rect x="757.1" y="1011.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="760.1" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.59%)</title><rect x="764.1" y="1059.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="767.1" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.59%)</title><rect x="764.1" y="1043.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="767.1" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.59%)</title><rect x="764.1" y="1027.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="767.1" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.59%)</title><rect x="764.1" y="1011.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="767.1" y="1022.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.59%)</title><rect x="764.1" y="995.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="767.1" y="1006.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.59%)</title><rect x="764.1" y="979.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.1" y="990.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.59%)</title><rect x="764.1" y="963.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="767.1" y="974.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.59%)</title><rect x="764.1" y="947.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="767.1" y="958.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.59%)</title><rect x="764.1" y="931.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="767.1" y="942.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.59%)</title><rect x="764.1" y="915.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="767.1" y="926.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (60 samples, 35.50%)</title><rect x="771.1" y="1091.0" width="418.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.1" y="1102.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (60 samples, 35.50%)</title><rect x="771.1" y="1075.0" width="418.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="774.1" y="1086.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (60 samples, 35.50%)</title><rect x="771.1" y="1059.0" width="418.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="774.1" y="1070.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (57 samples, 33.73%)</title><rect x="771.1" y="1043.0" width="398.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="774.1" y="1054.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (57 samples, 33.73%)</title><rect x="771.1" y="1027.0" width="398.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="774.1" y="1038.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (34 samples, 20.12%)</title><rect x="771.1" y="1011.0" width="237.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="774.1" y="1022.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.18%)</title><rect x="771.1" y="995.0" width="13.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="774.1" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.59%)</title><rect x="771.1" y="979.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.1" y="990.0"></text>
</g>
<g>
<title>ConstantOopWriteValue::write_on(DebugInfoWriteStream*) (1 samples, 0.59%)</title><rect x="771.1" y="963.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="774.1" y="974.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.59%)</title><rect x="778.0" y="979.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="781.0" y="990.0"></text>
</g>
<g>
<title>Assembler::movl(Address, RegisterImpl*) (1 samples, 0.59%)</title><rect x="778.0" y="963.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="781.0" y="974.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) [clone .constprop.172] (1 samples, 0.59%)</title><rect x="778.0" y="947.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="781.0" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.78%)</title><rect x="785.0" y="995.0" width="21.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.0" y="1006.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.59%)</title><rect x="785.0" y="979.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="788.0" y="990.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.59%)</title><rect x="792.0" y="979.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="795.0" y="990.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.59%)</title><rect x="799.0" y="979.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="802.0" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 2.37%)</title><rect x="806.0" y="995.0" width="27.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="809.0" y="1006.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 2.37%)</title><rect x="806.0" y="979.0" width="27.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="809.0" y="990.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.18%)</title><rect x="806.0" y="963.0" width="13.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="809.0" y="974.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.59%)</title><rect x="806.0" y="947.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="809.0" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.59%)</title><rect x="813.0" y="947.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="816.0" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 1.18%)</title><rect x="819.9" y="963.0" width="14.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="822.9" y="974.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.59%)</title><rect x="826.9" y="947.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="829.9" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 14.79%)</title><rect x="833.9" y="995.0" width="174.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="836.9" y="1006.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.18%)</title><rect x="833.9" y="979.0" width="14.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.59%)</title><rect x="847.9" y="979.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="850.9" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.59%)</title><rect x="847.9" y="963.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="850.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.78%)</title><rect x="854.9" y="979.0" width="20.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="857.9" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.18%)</title><rect x="861.8" y="963.0" width="14.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="864.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.59%)</title><rect x="875.8" y="979.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="878.8" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 4.14%)</title><rect x="882.8" y="979.0" width="48.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="885.8" y="990.0">Phas..</text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.59%)</title><rect x="910.7" y="963.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="913.7" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.59%)</title><rect x="917.7" y="963.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.7" y="974.0"></text>
</g>
<g>
<title>addL_rReg_immNode::rule() const (1 samples, 0.59%)</title><rect x="924.7" y="963.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="927.7" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.78%)</title><rect x="931.7" y="979.0" width="20.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.7" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.59%)</title><rect x="945.6" y="963.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="948.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 1.18%)</title><rect x="952.6" y="979.0" width="14.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="955.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.59%)</title><rect x="966.6" y="979.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="969.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.59%)</title><rect x="966.6" y="963.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.59%)</title><rect x="966.6" y="947.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="969.6" y="958.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.59%)</title><rect x="966.6" y="931.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="969.6" y="942.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.18%)</title><rect x="973.6" y="979.0" width="13.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.6" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.18%)</title><rect x="973.6" y="963.0" width="13.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="976.6" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.59%)</title><rect x="973.6" y="947.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.6" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.59%)</title><rect x="980.5" y="947.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="983.5" y="958.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.59%)</title><rect x="980.5" y="931.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.5" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.59%)</title><rect x="987.5" y="979.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.5" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.18%)</title><rect x="994.5" y="979.0" width="14.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="997.5" y="990.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.59%)</title><rect x="1001.5" y="963.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1004.5" y="974.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 10.06%)</title><rect x="1008.5" y="1011.0" width="118.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1011.5" y="1022.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 1.18%)</title><rect x="1008.5" y="995.0" width="13.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1011.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.18%)</title><rect x="1008.5" y="979.0" width="13.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.18%)</title><rect x="1008.5" y="963.0" width="13.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1011.5" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 1.18%)</title><rect x="1008.5" y="947.0" width="13.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1011.5" y="958.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.59%)</title><rect x="1008.5" y="931.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.5" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.59%)</title><rect x="1008.5" y="915.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1011.5" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.59%)</title><rect x="1008.5" y="899.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1011.5" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.59%)</title><rect x="1008.5" y="883.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1011.5" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.59%)</title><rect x="1008.5" y="867.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.5" y="878.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.59%)</title><rect x="1015.4" y="931.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1018.4" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.59%)</title><rect x="1015.4" y="915.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1018.4" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.59%)</title><rect x="1015.4" y="899.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1018.4" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 1.18%)</title><rect x="1022.4" y="995.0" width="14.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1025.4" y="1006.0"></text>
</g>
<g>
<title>CatchNode::Value(PhaseTransform*) const (1 samples, 0.59%)</title><rect x="1022.4" y="979.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.4" y="990.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.59%)</title><rect x="1022.4" y="963.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.4" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.59%)</title><rect x="1022.4" y="947.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1025.4" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.59%)</title><rect x="1022.4" y="931.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1025.4" y="942.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.59%)</title><rect x="1022.4" y="915.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.4" y="926.0"></text>
</g>
<g>
<title>TypeTuple::make(unsigned int, Type const**) (1 samples, 0.59%)</title><rect x="1029.4" y="979.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.4" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.59%)</title><rect x="1036.4" y="995.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.4" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.59%)</title><rect x="1036.4" y="979.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.4" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.59%)</title><rect x="1036.4" y="963.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (9 samples, 5.33%)</title><rect x="1043.4" y="995.0" width="62.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1046.4" y="1006.0">PhaseI..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.59%)</title><rect x="1043.4" y="979.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1046.4" y="990.0"></text>
</g>
<g>
<title>Node::pinned() const (2 samples, 1.18%)</title><rect x="1050.4" y="979.0" width="13.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1053.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.78%)</title><rect x="1064.3" y="979.0" width="21.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1067.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 1.18%)</title><rect x="1071.3" y="963.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.59%)</title><rect x="1085.3" y="979.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.3" y="990.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.59%)</title><rect x="1085.3" y="963.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.3" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.18%)</title><rect x="1092.2" y="979.0" width="14.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.2" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.18%)</title><rect x="1092.2" y="963.0" width="14.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.2" y="974.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.59%)</title><rect x="1092.2" y="947.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.2" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.59%)</title><rect x="1092.2" y="931.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1095.2" y="942.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.59%)</title><rect x="1092.2" y="915.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.2" y="926.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.59%)</title><rect x="1099.2" y="947.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.2" y="958.0"></text>
</g>
<g>
<title>AddINode::Opcode() const (1 samples, 0.59%)</title><rect x="1099.2" y="931.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.2" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.78%)</title><rect x="1106.2" y="995.0" width="21.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.78%)</title><rect x="1106.2" y="979.0" width="21.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.2" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.59%)</title><rect x="1106.2" y="963.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.2" y="974.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.59%)</title><rect x="1106.2" y="947.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.2" y="958.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseTransform*) const (1 samples, 0.59%)</title><rect x="1113.2" y="963.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.2" y="974.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.59%)</title><rect x="1120.2" y="963.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.2" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.96%)</title><rect x="1127.2" y="1011.0" width="34.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.2" y="1022.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.96%)</title><rect x="1127.2" y="995.0" width="34.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.2" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.96%)</title><rect x="1127.2" y="979.0" width="34.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.2" y="990.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.96%)</title><rect x="1127.2" y="963.0" width="34.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.2" y="974.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.96%)</title><rect x="1127.2" y="947.0" width="34.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.2" y="958.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.96%)</title><rect x="1127.2" y="931.0" width="34.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.2" y="942.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.37%)</title><rect x="1127.2" y="915.0" width="27.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="926.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.37%)</title><rect x="1127.2" y="899.0" width="27.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.2" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.37%)</title><rect x="1127.2" y="883.0" width="27.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.2" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.37%)</title><rect x="1127.2" y="867.0" width="27.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.37%)</title><rect x="1127.2" y="851.0" width="27.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="862.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.37%)</title><rect x="1127.2" y="835.0" width="27.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.2" y="846.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.37%)</title><rect x="1127.2" y="819.0" width="27.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="830.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.37%)</title><rect x="1127.2" y="803.0" width="27.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.2" y="814.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.37%)</title><rect x="1127.2" y="787.0" width="27.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.2" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.37%)</title><rect x="1127.2" y="771.0" width="27.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.2" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.37%)</title><rect x="1127.2" y="755.0" width="27.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.2" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.37%)</title><rect x="1127.2" y="739.0" width="27.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.2" y="750.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.37%)</title><rect x="1127.2" y="723.0" width="27.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="734.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.37%)</title><rect x="1127.2" y="707.0" width="27.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.2" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.37%)</title><rect x="1127.2" y="691.0" width="27.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.37%)</title><rect x="1127.2" y="675.0" width="27.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="686.0">P..</text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.59%)</title><rect x="1127.2" y="659.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.78%)</title><rect x="1134.1" y="659.0" width="21.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.78%)</title><rect x="1134.1" y="643.0" width="21.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.18%)</title><rect x="1134.1" y="627.0" width="14.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.18%)</title><rect x="1134.1" y="611.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.18%)</title><rect x="1134.1" y="595.0" width="14.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.18%)</title><rect x="1134.1" y="579.0" width="14.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.18%)</title><rect x="1134.1" y="563.0" width="14.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.18%)</title><rect x="1134.1" y="547.0" width="14.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.1" y="558.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1134.1" y="531.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.1" y="542.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.59%)</title><rect x="1134.1" y="515.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.1" y="526.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.59%)</title><rect x="1134.1" y="499.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.1" y="510.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.59%)</title><rect x="1134.1" y="483.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1141.1" y="531.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1141.1" y="515.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1141.1" y="499.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1141.1" y="483.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1141.1" y="467.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1141.1" y="451.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1141.1" y="435.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1141.1" y="419.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1141.1" y="403.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1141.1" y="387.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1141.1" y="371.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1141.1" y="355.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.1" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.59%)</title><rect x="1141.1" y="339.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.1" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.59%)</title><rect x="1141.1" y="323.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.1" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.59%)</title><rect x="1141.1" y="307.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.1" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.59%)</title><rect x="1141.1" y="291.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.1" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.59%)</title><rect x="1141.1" y="275.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.59%)</title><rect x="1141.1" y="259.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.59%)</title><rect x="1141.1" y="243.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.1" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.59%)</title><rect x="1141.1" y="227.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.1" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.59%)</title><rect x="1141.1" y="211.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.1" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.59%)</title><rect x="1141.1" y="195.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.1" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.59%)</title><rect x="1141.1" y="179.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.1" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.59%)</title><rect x="1141.1" y="163.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.1" y="174.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.59%)</title><rect x="1141.1" y="147.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.1" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.59%)</title><rect x="1141.1" y="131.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.1" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.59%)</title><rect x="1141.1" y="115.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.1" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.59%)</title><rect x="1141.1" y="99.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.1" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.59%)</title><rect x="1141.1" y="83.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.1" y="94.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.59%)</title><rect x="1141.1" y="67.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.1" y="78.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.59%)</title><rect x="1141.1" y="51.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="62.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.59%)</title><rect x="1141.1" y="35.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1148.1" y="627.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1148.1" y="611.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1148.1" y="595.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.1" y="606.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 0.59%)</title><rect x="1148.1" y="579.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.1" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.59%)</title><rect x="1148.1" y="563.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.1" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.59%)</title><rect x="1148.1" y="547.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.1" y="558.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.59%)</title><rect x="1148.1" y="531.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.1" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1155.1" y="915.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.1" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1155.1" y="899.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.1" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1155.1" y="883.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1155.1" y="867.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1155.1" y="851.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1155.1" y="835.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1155.1" y="819.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1155.1" y="803.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.1" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1155.1" y="787.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1155.1" y="771.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1155.1" y="755.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1155.1" y="739.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1155.1" y="723.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.1" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1155.1" y="707.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.1" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1155.1" y="691.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1155.1" y="675.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1155.1" y="659.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1155.1" y="643.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1155.1" y="627.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.1" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1155.1" y="611.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.1" y="622.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.59%)</title><rect x="1155.1" y="595.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.1" y="606.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.59%)</title><rect x="1155.1" y="579.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.1" y="590.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.59%)</title><rect x="1155.1" y="563.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.1" y="574.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.59%)</title><rect x="1155.1" y="547.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.1" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.59%)</title><rect x="1155.1" y="531.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.1" y="542.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.59%)</title><rect x="1155.1" y="515.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.1" y="526.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.59%)</title><rect x="1162.1" y="1011.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.1" y="1022.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.59%)</title><rect x="1162.1" y="995.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.1" y="1006.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.78%)</title><rect x="1169.1" y="1043.0" width="20.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="1054.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.78%)</title><rect x="1169.1" y="1027.0" width="20.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.1" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.78%)</title><rect x="1169.1" y="1011.0" width="20.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.1" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.78%)</title><rect x="1169.1" y="995.0" width="20.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.1" y="1006.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.18%)</title><rect x="1169.1" y="979.0" width="13.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.1" y="990.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.59%)</title><rect x="1169.1" y="963.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.1" y="974.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.59%)</title><rect x="1169.1" y="947.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.1" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.59%)</title><rect x="1169.1" y="931.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.1" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.59%)</title><rect x="1169.1" y="915.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.1" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.59%)</title><rect x="1169.1" y="899.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.1" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.59%)</title><rect x="1169.1" y="883.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.1" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.59%)</title><rect x="1169.1" y="867.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.1" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.59%)</title><rect x="1169.1" y="851.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.1" y="862.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.59%)</title><rect x="1169.1" y="835.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.1" y="846.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.59%)</title><rect x="1169.1" y="819.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.1" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.59%)</title><rect x="1169.1" y="803.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.1" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.59%)</title><rect x="1169.1" y="787.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.1" y="798.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.59%)</title><rect x="1169.1" y="771.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.1" y="782.0"></text>
</g>
<g>
<title>RangeCheckElimination::eliminate(IR*) (1 samples, 0.59%)</title><rect x="1176.0" y="963.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.0" y="974.0"></text>
</g>
<g>
<title>RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*) (1 samples, 0.59%)</title><rect x="1176.0" y="947.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="958.0"></text>
</g>
<g>
<title>RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*) (1 samples, 0.59%)</title><rect x="1176.0" y="931.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.0" y="942.0"></text>
</g>
<g>
<title>RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*) (1 samples, 0.59%)</title><rect x="1176.0" y="915.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.0" y="926.0"></text>
</g>
<g>
<title>RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*) (1 samples, 0.59%)</title><rect x="1176.0" y="899.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="910.0"></text>
</g>
<g>
<title>RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*) (1 samples, 0.59%)</title><rect x="1176.0" y="883.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="894.0"></text>
</g>
<g>
<title>Instruction::negate(Instruction::Condition) (1 samples, 0.59%)</title><rect x="1176.0" y="867.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="878.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.59%)</title><rect x="1183.0" y="979.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.0" y="990.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.59%)</title><rect x="1183.0" y="963.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="974.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.59%)</title><rect x="1183.0" y="947.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.0" y="958.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.59%)</title><rect x="1183.0" y="931.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="942.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.59%)</title><rect x="1183.0" y="915.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="926.0"></text>
</g>
<g>
<title>OopMap::OopMap(int, int) (1 samples, 0.59%)</title><rect x="1183.0" y="899.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="910.0"></text>
</g>
<g>
<title>CompressedWriteStream::CompressedWriteStream(int) (1 samples, 0.59%)</title><rect x="1183.0" y="883.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.0" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.59%)</title><rect x="1183.0" y="867.0" width="7.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1186.0" y="878.0"></text>
</g>
</g>
</svg>
