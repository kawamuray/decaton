<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1093"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1093"> </text>
<g id="frames">
<g>
<title>all (243 samples, 100.00%)</title><rect x="10.0" y="1059.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1070.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.41%)</title><rect x="10.0" y="1043.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.41%)</title><rect x="10.0" y="1027.0" width="4.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.41%)</title><rect x="10.0" y="1011.0" width="4.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (18 samples, 7.41%)</title><rect x="14.9" y="1043.0" width="87.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.9" y="1054.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (5 samples, 2.06%)</title><rect x="14.9" y="1027.0" width="24.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.9" y="1038.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (5 samples, 2.06%)</title><rect x="14.9" y="1011.0" width="24.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.9" y="1022.0">c..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (5 samples, 2.06%)</title><rect x="14.9" y="995.0" width="24.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.9" y="1006.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (5 samples, 2.06%)</title><rect x="14.9" y="979.0" width="24.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.9" y="990.0">o..</text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.41%)</title><rect x="19.7" y="963.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.41%)</title><rect x="19.7" y="947.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.size (1 samples, 0.41%)</title><rect x="19.7" y="931.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (3 samples, 1.23%)</title><rect x="24.6" y="963.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.41%)</title><rect x="24.6" y="947.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData$OffsetCommitRequestPartition.setPartitionIndex (1 samples, 0.41%)</title><rect x="24.6" y="931.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.82%)</title><rect x="29.4" y="947.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.82%)</title><rect x="29.4" y="931.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.82%)</title><rect x="29.4" y="915.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.41%)</title><rect x="29.4" y="899.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.41%)</title><rect x="29.4" y="883.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.41%)</title><rect x="29.4" y="867.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.41%)</title><rect x="29.4" y="851.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="29.4" y="835.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.41%)</title><rect x="29.4" y="819.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="29.4" y="803.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="29.4" y="787.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.41%)</title><rect x="29.4" y="771.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="29.4" y="755.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="29.4" y="739.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.read (1 samples, 0.41%)</title><rect x="29.4" y="723.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.41%)</title><rect x="34.3" y="899.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.41%)</title><rect x="34.3" y="883.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeyIterator.next (1 samples, 0.41%)</title><rect x="34.3" y="867.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (13 samples, 5.35%)</title><rect x="39.1" y="1027.0" width="63.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.1" y="1038.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.41%)</title><rect x="39.1" y="1011.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.41%)</title><rect x="44.0" y="1011.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.41%)</title><rect x="44.0" y="995.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.41%)</title><rect x="44.0" y="979.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.41%)</title><rect x="44.0" y="963.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.41%)</title><rect x="44.0" y="947.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.41%)</title><rect x="44.0" y="931.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.41%)</title><rect x="44.0" y="915.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.41%)</title><rect x="48.8" y="1011.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.41%)</title><rect x="48.8" y="995.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.41%)</title><rect x="48.8" y="979.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.8" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.resolveOrFail (1 samples, 0.41%)</title><rect x="48.8" y="963.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolveOrFail (1 samples, 0.41%)</title><rect x="48.8" y="947.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.8" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolve (1 samples, 0.41%)</title><rect x="48.8" y="931.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.8" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.resolve (1 samples, 0.41%)</title><rect x="48.8" y="915.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.8" y="926.0"></text>
</g>
<g>
<title>MHN_resolve_Mem (1 samples, 0.41%)</title><rect x="48.8" y="899.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="51.8" y="910.0"></text>
</g>
<g>
<title>MethodHandles::resolve_MemberName(Handle, KlassHandle, Thread*) (1 samples, 0.41%)</title><rect x="48.8" y="883.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="51.8" y="894.0"></text>
</g>
<g>
<title>java_lang_invoke_MethodType::as_signature(oopDesc*, bool, Thread*) (1 samples, 0.41%)</title><rect x="48.8" y="867.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="51.8" y="878.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.41%)</title><rect x="48.8" y="851.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="51.8" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.82%)</title><rect x="53.7" y="1011.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1950086458.accept (2 samples, 0.82%)</title><rect x="53.7" y="995.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (2 samples, 0.82%)</title><rect x="53.7" y="979.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.41%)</title><rect x="53.7" y="963.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.41%)</title><rect x="53.7" y="947.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.41%)</title><rect x="58.6" y="963.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.29%)</title><rect x="63.4" y="1011.0" width="38.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.4" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.29%)</title><rect x="63.4" y="995.0" width="38.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.4" y="1006.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 1.23%)</title><rect x="63.4" y="979.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.41%)</title><rect x="63.4" y="963.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.41%)</title><rect x="63.4" y="947.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.41%)</title><rect x="63.4" y="931.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.41%)</title><rect x="63.4" y="915.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="66.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.41%)</title><rect x="63.4" y="899.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.41%)</title><rect x="63.4" y="883.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.41%)</title><rect x="63.4" y="867.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.41%)</title><rect x="63.4" y="851.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.41%)</title><rect x="63.4" y="835.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.41%)</title><rect x="63.4" y="819.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.41%)</title><rect x="63.4" y="803.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.validate (1 samples, 0.41%)</title><rect x="63.4" y="787.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.82%)</title><rect x="68.3" y="963.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.41%)</title><rect x="68.3" y="947.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="71.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.41%)</title><rect x="73.1" y="947.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.41%)</title><rect x="73.1" y="931.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.41%)</title><rect x="73.1" y="915.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.41%)</title><rect x="73.1" y="899.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.41%)</title><rect x="73.1" y="883.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.41%)</title><rect x="73.1" y="867.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.1" y="878.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.41%)</title><rect x="73.1" y="851.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.23%)</title><rect x="78.0" y="979.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.23%)</title><rect x="78.0" y="963.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.23%)</title><rect x="78.0" y="947.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="81.0" y="958.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.82%)</title><rect x="78.0" y="931.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/2082997585.accept (2 samples, 0.82%)</title><rect x="78.0" y="915.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.82%)</title><rect x="78.0" y="899.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.82%)</title><rect x="78.0" y="883.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.41%)</title><rect x="82.8" y="867.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.41%)</title><rect x="82.8" y="851.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="85.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.41%)</title><rect x="87.7" y="931.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.41%)</title><rect x="87.7" y="915.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="90.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.41%)</title><rect x="87.7" y="899.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.41%)</title><rect x="87.7" y="883.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.41%)</title><rect x="87.7" y="867.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.41%)</title><rect x="87.7" y="851.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="90.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.41%)</title><rect x="87.7" y="835.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.7" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.41%)</title><rect x="87.7" y="819.0" width="4.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="90.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.82%)</title><rect x="92.6" y="979.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="95.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.41%)</title><rect x="92.6" y="963.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="95.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.41%)</title><rect x="92.6" y="947.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.41%)</title><rect x="92.6" y="931.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.41%)</title><rect x="92.6" y="915.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="92.6" y="899.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.41%)</title><rect x="92.6" y="883.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="92.6" y="867.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="95.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="92.6" y="851.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="95.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.41%)</title><rect x="92.6" y="835.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="92.6" y="819.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="92.6" y="803.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.41%)</title><rect x="92.6" y="787.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.41%)</title><rect x="92.6" y="771.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="95.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.readableRecords (1 samples, 0.41%)</title><rect x="92.6" y="755.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="95.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.&lt;init&gt; (1 samples, 0.41%)</title><rect x="92.6" y="739.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.6" y="750.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.41%)</title><rect x="92.6" y="723.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="95.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.41%)</title><rect x="97.4" y="963.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.41%)</title><rect x="97.4" y="947.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.41%)</title><rect x="97.4" y="931.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.41%)</title><rect x="97.4" y="915.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.41%)</title><rect x="97.4" y="899.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.41%)</title><rect x="97.4" y="883.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="100.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.41%)</title><rect x="97.4" y="867.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.41%)</title><rect x="97.4" y="851.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="100.4" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.41%)</title><rect x="97.4" y="835.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="100.4" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.41%)</title><rect x="97.4" y="819.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="100.4" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.41%)</title><rect x="97.4" y="803.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="100.4" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.41%)</title><rect x="97.4" y="787.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="100.4" y="798.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.41%)</title><rect x="97.4" y="771.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="100.4" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.41%)</title><rect x="97.4" y="755.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="100.4" y="766.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.41%)</title><rect x="97.4" y="739.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="100.4" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (122 samples, 50.21%)</title><rect x="102.3" y="1043.0" width="592.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.3" y="1054.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (122 samples, 50.21%)</title><rect x="102.3" y="1027.0" width="592.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.3" y="1038.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (122 samples, 50.21%)</title><rect x="102.3" y="1011.0" width="592.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.3" y="1022.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1726595460.run (117 samples, 48.15%)</title><rect x="102.3" y="995.0" width="568.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="105.3" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1726595460.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (117 samples, 48.15%)</title><rect x="102.3" y="979.0" width="568.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.3" y="990.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (117 samples, 48.15%)</title><rect x="102.3" y="963.0" width="568.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="105.3" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (114 samples, 46.91%)</title><rect x="102.3" y="947.0" width="553.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.3" y="958.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (19 samples, 7.82%)</title><rect x="107.1" y="931.0" width="92.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.1" y="942.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (16 samples, 6.58%)</title><rect x="116.8" y="915.0" width="77.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="119.8" y="926.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (16 samples, 6.58%)</title><rect x="116.8" y="899.0" width="77.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="119.8" y="910.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 6.58%)</title><rect x="116.8" y="883.0" width="77.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.8" y="894.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 6.58%)</title><rect x="116.8" y="867.0" width="77.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.8" y="878.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (16 samples, 6.58%)</title><rect x="116.8" y="851.0" width="77.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="119.8" y="862.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 1.65%)</title><rect x="116.8" y="835.0" width="19.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="119.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.41%)</title><rect x="116.8" y="819.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.41%)</title><rect x="116.8" y="803.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="119.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.41%)</title><rect x="116.8" y="787.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="119.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.41%)</title><rect x="116.8" y="771.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.41%)</title><rect x="116.8" y="755.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="119.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.23%)</title><rect x="121.7" y="819.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="124.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.82%)</title><rect x="126.5" y="803.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="129.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.41%)</title><rect x="126.5" y="787.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.41%)</title><rect x="126.5" y="771.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="129.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.41%)</title><rect x="131.4" y="787.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="134.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 4.53%)</title><rect x="136.3" y="835.0" width="53.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.3" y="846.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.82%)</title><rect x="136.3" y="819.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.82%)</title><rect x="136.3" y="803.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="139.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 3.70%)</title><rect x="146.0" y="819.0" width="43.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.0" y="830.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.23%)</title><rect x="146.0" y="803.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="149.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.41%)</title><rect x="146.0" y="787.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.41%)</title><rect x="146.0" y="771.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.41%)</title><rect x="146.0" y="755.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="149.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.82%)</title><rect x="150.8" y="787.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.47%)</title><rect x="160.5" y="803.0" width="29.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.5" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.47%)</title><rect x="160.5" y="787.0" width="29.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.5" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.47%)</title><rect x="160.5" y="771.0" width="29.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.5" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.41%)</title><rect x="180.0" y="755.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="183.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.41%)</title><rect x="180.0" y="739.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.41%)</title><rect x="180.0" y="723.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.41%)</title><rect x="180.0" y="707.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.41%)</title><rect x="180.0" y="691.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="183.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.41%)</title><rect x="180.0" y="675.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.41%)</title><rect x="180.0" y="659.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.41%)</title><rect x="184.8" y="755.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="187.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.41%)</title><rect x="184.8" y="739.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="187.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.41%)</title><rect x="184.8" y="723.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="187.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.41%)</title><rect x="189.7" y="835.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.41%)</title><rect x="189.7" y="819.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="192.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.41%)</title><rect x="189.7" y="803.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.41%)</title><rect x="189.7" y="787.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="192.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.41%)</title><rect x="189.7" y="771.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.41%)</title><rect x="189.7" y="755.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.41%)</title><rect x="194.5" y="915.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (1 samples, 0.41%)</title><rect x="194.5" y="899.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.41%)</title><rect x="194.5" y="883.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.5" y="894.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.41%)</title><rect x="194.5" y="867.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.5" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.41%)</title><rect x="194.5" y="851.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.5" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.41%)</title><rect x="194.5" y="835.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (1 samples, 0.41%)</title><rect x="194.5" y="819.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (81 samples, 33.33%)</title><rect x="199.4" y="931.0" width="393.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.4" y="942.0">com/linecorp/decaton/processor/runtime/ProcessPipeline..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (16 samples, 6.58%)</title><rect x="199.4" y="915.0" width="77.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.4" y="926.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 5.76%)</title><rect x="209.1" y="899.0" width="68.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.1" y="910.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 4.94%)</title><rect x="218.8" y="883.0" width="58.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.8" y="894.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.82%)</title><rect x="228.5" y="867.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.82%)</title><rect x="228.5" y="851.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.82%)</title><rect x="228.5" y="835.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.82%)</title><rect x="228.5" y="819.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.5" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.41%)</title><rect x="233.4" y="803.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.41%)</title><rect x="233.4" y="787.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.4" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 3.29%)</title><rect x="238.2" y="867.0" width="38.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.2" y="878.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 3.29%)</title><rect x="238.2" y="851.0" width="38.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.2" y="862.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 2.06%)</title><rect x="252.8" y="835.0" width="24.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.8" y="846.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.82%)</title><rect x="277.1" y="915.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.82%)</title><rect x="277.1" y="899.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.1" y="910.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.82%)</title><rect x="277.1" y="883.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 5.76%)</title><rect x="286.8" y="915.0" width="68.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.8" y="926.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 5.76%)</title><rect x="286.8" y="899.0" width="68.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.8" y="910.0">com/lin..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.41%)</title><rect x="286.8" y="883.0" width="4.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="289.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 2.47%)</title><rect x="291.6" y="883.0" width="29.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.6" y="894.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.06%)</title><rect x="296.5" y="867.0" width="24.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.5" y="878.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.06%)</title><rect x="296.5" y="851.0" width="24.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.5" y="862.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.65%)</title><rect x="301.4" y="835.0" width="19.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.4" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.65%)</title><rect x="301.4" y="819.0" width="19.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="304.4" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.65%)</title><rect x="301.4" y="803.0" width="19.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="304.4" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.82%)</title><rect x="301.4" y="787.0" width="9.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="304.4" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.82%)</title><rect x="301.4" y="771.0" width="9.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="304.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.82%)</title><rect x="301.4" y="755.0" width="9.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="304.4" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.41%)</title><rect x="311.1" y="787.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="314.1" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.41%)</title><rect x="315.9" y="787.0" width="4.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="318.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.41%)</title><rect x="320.8" y="883.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.8" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.41%)</title><rect x="320.8" y="867.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.8" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.41%)</title><rect x="320.8" y="851.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.8" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.47%)</title><rect x="325.6" y="883.0" width="29.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="328.6" y="894.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 2.47%)</title><rect x="325.6" y="867.0" width="29.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="328.6" y="878.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.47%)</title><rect x="325.6" y="851.0" width="29.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="328.6" y="862.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.47%)</title><rect x="325.6" y="835.0" width="29.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="328.6" y="846.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 2.06%)</title><rect x="330.5" y="819.0" width="24.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.5" y="830.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.41%)</title><rect x="349.9" y="803.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 18.52%)</title><rect x="354.8" y="915.0" width="218.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="357.8" y="926.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 18.52%)</title><rect x="354.8" y="899.0" width="218.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="357.8" y="910.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1066778873.process (38 samples, 15.64%)</title><rect x="364.5" y="883.0" width="184.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="367.5" y="894.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (38 samples, 15.64%)</title><rect x="364.5" y="867.0" width="184.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="367.5" y="878.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (38 samples, 15.64%)</title><rect x="364.5" y="851.0" width="184.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="367.5" y="862.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (36 samples, 14.81%)</title><rect x="369.3" y="835.0" width="174.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="372.3" y="846.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>java/lang/Thread.sleep (35 samples, 14.40%)</title><rect x="369.3" y="819.0" width="170.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.3" y="830.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (30 samples, 12.35%)</title><rect x="388.8" y="803.0" width="145.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="391.8" y="814.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.23%)</title><rect x="393.6" y="787.0" width="14.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="396.6" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.23%)</title><rect x="408.2" y="787.0" width="14.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="411.2" y="798.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.82%)</title><rect x="413.0" y="771.0" width="9.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="416.0" y="782.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (23 samples, 9.47%)</title><rect x="422.8" y="787.0" width="111.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="425.8" y="798.0">os::sleep(Thr..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.65%)</title><rect x="442.2" y="771.0" width="19.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="445.2" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.82%)</title><rect x="451.9" y="755.0" width="9.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="454.9" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.41%)</title><rect x="461.6" y="771.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="464.6" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.82%)</title><rect x="466.5" y="771.0" width="9.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="469.5" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.41%)</title><rect x="476.2" y="771.0" width="4.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="479.2" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 3.29%)</title><rect x="481.0" y="771.0" width="38.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="484.0" y="782.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.41%)</title><rect x="519.9" y="771.0" width="4.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="522.9" y="782.0"></text>
</g>
<g>
<title>_init (1 samples, 0.41%)</title><rect x="524.7" y="771.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="527.7" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.41%)</title><rect x="529.6" y="771.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="532.6" y="782.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.41%)</title><rect x="534.4" y="803.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="537.4" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.41%)</title><rect x="539.3" y="819.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="542.3" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.41%)</title><rect x="539.3" y="803.0" width="4.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="542.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.41%)</title><rect x="544.2" y="835.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="547.2" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.82%)</title><rect x="549.0" y="883.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="552.0" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.82%)</title><rect x="549.0" y="867.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="552.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/1264048487.get$Lambda (2 samples, 0.82%)</title><rect x="549.0" y="851.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="552.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/1264048487.&lt;init&gt; (2 samples, 0.82%)</title><rect x="549.0" y="835.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="552.0" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.82%)</title><rect x="558.7" y="883.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="561.7" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.82%)</title><rect x="558.7" y="867.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="561.7" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.41%)</title><rect x="563.6" y="851.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="566.6" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.41%)</title><rect x="568.4" y="883.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="571.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.65%)</title><rect x="573.3" y="915.0" width="19.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="576.3" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="583.0" y="899.0" width="4.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="586.0" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.41%)</title><rect x="583.0" y="883.0" width="4.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="586.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.41%)</title><rect x="587.9" y="899.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="590.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.41%)</title><rect x="587.9" y="883.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="590.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1018372123.accept (1 samples, 0.41%)</title><rect x="587.9" y="867.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="590.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.41%)</title><rect x="587.9" y="851.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="590.9" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.41%)</title><rect x="587.9" y="835.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="590.9" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.41%)</title><rect x="587.9" y="819.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="590.9" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="587.9" y="803.0" width="4.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="590.9" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.41%)</title><rect x="587.9" y="787.0" width="4.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="590.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 4.53%)</title><rect x="592.7" y="931.0" width="53.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="595.7" y="942.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 4.12%)</title><rect x="597.6" y="915.0" width="48.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="600.6" y="926.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 3.70%)</title><rect x="602.4" y="899.0" width="43.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.4" y="910.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/699148914.accept (9 samples, 3.70%)</title><rect x="602.4" y="883.0" width="43.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="605.4" y="894.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (9 samples, 3.70%)</title><rect x="602.4" y="867.0" width="43.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="605.4" y="878.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/186000008.complete (9 samples, 3.70%)</title><rect x="602.4" y="851.0" width="43.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.4" y="862.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (9 samples, 3.70%)</title><rect x="602.4" y="835.0" width="43.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="605.4" y="846.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (9 samples, 3.70%)</title><rect x="602.4" y="819.0" width="43.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="605.4" y="830.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 3.70%)</title><rect x="602.4" y="803.0" width="43.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="605.4" y="814.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 3.70%)</title><rect x="602.4" y="787.0" width="43.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="605.4" y="798.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (9 samples, 3.70%)</title><rect x="602.4" y="771.0" width="43.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.4" y="782.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (9 samples, 3.70%)</title><rect x="602.4" y="755.0" width="43.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="605.4" y="766.0">ch/q..</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.82%)</title><rect x="646.1" y="931.0" width="9.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="649.1" y="942.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.82%)</title><rect x="646.1" y="915.0" width="9.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="649.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.23%)</title><rect x="655.8" y="947.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="658.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 2.06%)</title><rect x="670.4" y="995.0" width="24.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="673.4" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.65%)</title><rect x="675.3" y="979.0" width="19.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="678.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.82%)</title><rect x="675.3" y="963.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="678.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.82%)</title><rect x="675.3" y="947.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="678.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.82%)</title><rect x="675.3" y="931.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="678.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.82%)</title><rect x="675.3" y="915.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="678.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.82%)</title><rect x="675.3" y="899.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="678.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.82%)</title><rect x="685.0" y="963.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="688.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.82%)</title><rect x="685.0" y="947.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="688.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.82%)</title><rect x="685.0" y="931.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="688.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.82%)</title><rect x="685.0" y="915.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="688.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.41%)</title><rect x="694.7" y="1043.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="697.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.41%)</title><rect x="694.7" y="1027.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="697.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.41%)</title><rect x="694.7" y="1011.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="697.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.41%)</title><rect x="694.7" y="995.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="697.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.41%)</title><rect x="694.7" y="979.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="697.7" y="990.0"></text>
</g>
<g>
<title>start_thread (101 samples, 41.56%)</title><rect x="699.5" y="1043.0" width="490.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="702.5" y="1054.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (101 samples, 41.56%)</title><rect x="699.5" y="1027.0" width="490.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="702.5" y="1038.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 3.70%)</title><rect x="699.5" y="1011.0" width="43.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="702.5" y="1022.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 3.70%)</title><rect x="699.5" y="995.0" width="43.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="702.5" y="1006.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 3.70%)</title><rect x="699.5" y="979.0" width="43.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="702.5" y="990.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 2.88%)</title><rect x="699.5" y="963.0" width="34.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="702.5" y="974.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.23%)</title><rect x="704.4" y="947.0" width="14.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="707.4" y="958.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.41%)</title><rect x="714.1" y="931.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="717.1" y="942.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.41%)</title><rect x="714.1" y="915.0" width="4.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="717.1" y="926.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 1.23%)</title><rect x="719.0" y="947.0" width="14.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="722.0" y="958.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.41%)</title><rect x="733.5" y="963.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="736.5" y="974.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.41%)</title><rect x="738.4" y="963.0" width="4.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="741.4" y="974.0"></text>
</g>
<g>
<title>JavaThread::run() (92 samples, 37.86%)</title><rect x="743.3" y="1011.0" width="446.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="746.3" y="1022.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (92 samples, 37.86%)</title><rect x="743.3" y="995.0" width="446.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="746.3" y="1006.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (92 samples, 37.86%)</title><rect x="743.3" y="979.0" width="446.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="746.3" y="990.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (91 samples, 37.45%)</title><rect x="743.3" y="963.0" width="441.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="746.3" y="974.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (88 samples, 36.21%)</title><rect x="743.3" y="947.0" width="427.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="746.3" y="958.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (88 samples, 36.21%)</title><rect x="743.3" y="931.0" width="427.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="746.3" y="942.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (52 samples, 21.40%)</title><rect x="743.3" y="915.0" width="252.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="746.3" y="926.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.41%)</title><rect x="743.3" y="899.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="746.3" y="910.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.41%)</title><rect x="743.3" y="883.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="746.3" y="894.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.82%)</title><rect x="748.1" y="899.0" width="9.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="751.1" y="910.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.82%)</title><rect x="748.1" y="883.0" width="9.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="751.1" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.82%)</title><rect x="748.1" y="867.0" width="9.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="751.1" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.41%)</title><rect x="748.1" y="851.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="751.1" y="862.0"></text>
</g>
<g>
<title>ObjectValue::write_on(DebugInfoWriteStream*) (1 samples, 0.41%)</title><rect x="753.0" y="851.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="756.0" y="862.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.65%)</title><rect x="757.8" y="899.0" width="19.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="760.8" y="910.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.65%)</title><rect x="757.8" y="883.0" width="19.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="760.8" y="894.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 1.65%)</title><rect x="757.8" y="867.0" width="19.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="760.8" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.65%)</title><rect x="777.2" y="899.0" width="19.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="780.2" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.65%)</title><rect x="777.2" y="883.0" width="19.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="780.2" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 1.65%)</title><rect x="777.2" y="867.0" width="19.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="780.2" y="878.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.41%)</title><rect x="777.2" y="851.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="780.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.41%)</title><rect x="782.1" y="851.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="785.1" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.41%)</title><rect x="787.0" y="851.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="790.0" y="862.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.41%)</title><rect x="791.8" y="851.0" width="4.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="794.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (41 samples, 16.87%)</title><rect x="796.7" y="899.0" width="199.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="799.7" y="910.0">PhaseChaitin::Register_All..</text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.41%)</title><rect x="801.5" y="883.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="804.5" y="894.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.41%)</title><rect x="806.4" y="883.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="809.4" y="894.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.41%)</title><rect x="811.2" y="883.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="814.2" y="894.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.82%)</title><rect x="816.1" y="883.0" width="9.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="819.1" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.65%)</title><rect x="825.8" y="883.0" width="19.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="828.8" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 1.23%)</title><rect x="825.8" y="867.0" width="14.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="828.8" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.23%)</title><rect x="825.8" y="851.0" width="14.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="828.8" y="862.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.41%)</title><rect x="840.4" y="867.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="843.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.23%)</title><rect x="845.2" y="883.0" width="14.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="848.2" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.41%)</title><rect x="845.2" y="867.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="848.2" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.82%)</title><rect x="850.1" y="867.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="853.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.06%)</title><rect x="859.8" y="883.0" width="24.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="862.8" y="894.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.65%)</title><rect x="884.1" y="883.0" width="19.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="887.1" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.82%)</title><rect x="888.9" y="867.0" width="9.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="891.9" y="878.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.41%)</title><rect x="898.6" y="867.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="901.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.41%)</title><rect x="903.5" y="883.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="906.5" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.23%)</title><rect x="908.4" y="883.0" width="14.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="911.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.82%)</title><rect x="913.2" y="867.0" width="9.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="916.2" y="878.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (9 samples, 3.70%)</title><rect x="922.9" y="883.0" width="43.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="925.9" y="894.0">Phas..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 3.29%)</title><rect x="927.8" y="867.0" width="38.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="930.8" y="878.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (8 samples, 3.29%)</title><rect x="927.8" y="851.0" width="38.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="930.8" y="862.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 1.23%)</title><rect x="927.8" y="835.0" width="14.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="930.8" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 2.06%)</title><rect x="942.3" y="835.0" width="24.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="945.3" y="846.0">P..</text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.41%)</title><rect x="966.6" y="883.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="969.6" y="894.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.41%)</title><rect x="966.6" y="867.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="969.6" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.41%)</title><rect x="971.5" y="883.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="974.5" y="894.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.41%)</title><rect x="971.5" y="867.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="974.5" y="878.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.41%)</title><rect x="971.5" y="851.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.5" y="862.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.41%)</title><rect x="971.5" y="835.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="974.5" y="846.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.41%)</title><rect x="971.5" y="819.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.5" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.23%)</title><rect x="976.3" y="883.0" width="14.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="979.3" y="894.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.23%)</title><rect x="976.3" y="867.0" width="14.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="979.3" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.82%)</title><rect x="981.2" y="851.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.2" y="862.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.41%)</title><rect x="990.9" y="883.0" width="4.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="993.9" y="894.0"></text>
</g>
<g>
<title>Compile::Optimize() (30 samples, 12.35%)</title><rect x="995.8" y="915.0" width="145.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="998.8" y="926.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.41%)</title><rect x="995.8" y="899.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="998.8" y="910.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.41%)</title><rect x="995.8" y="883.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="998.8" y="894.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.41%)</title><rect x="1000.6" y="899.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1003.6" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.41%)</title><rect x="1000.6" y="883.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1003.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.41%)</title><rect x="1005.5" y="899.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1008.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.41%)</title><rect x="1005.5" y="883.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1008.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.41%)</title><rect x="1005.5" y="867.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1008.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.41%)</title><rect x="1005.5" y="851.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1008.5" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.41%)</title><rect x="1005.5" y="835.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1008.5" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.41%)</title><rect x="1005.5" y="819.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1008.5" y="830.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.41%)</title><rect x="1005.5" y="803.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.5" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.41%)</title><rect x="1005.5" y="787.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 9.47%)</title><rect x="1010.3" y="899.0" width="111.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1013.3" y="910.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.41%)</title><rect x="1010.3" y="883.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.3" y="894.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.41%)</title><rect x="1010.3" y="867.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.23%)</title><rect x="1015.2" y="883.0" width="14.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1018.2" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.41%)</title><rect x="1024.9" y="867.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1027.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.41%)</title><rect x="1024.9" y="851.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 7.00%)</title><rect x="1029.8" y="883.0" width="82.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1032.8" y="894.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 6.17%)</title><rect x="1039.5" y="867.0" width="72.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.5" y="878.0">PhaseIde..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.41%)</title><rect x="1039.5" y="851.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1042.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.82%)</title><rect x="1044.3" y="851.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.3" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (12 samples, 4.94%)</title><rect x="1054.0" y="851.0" width="58.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.0" y="862.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.82%)</title><rect x="1097.7" y="835.0" width="9.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1100.7" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.41%)</title><rect x="1107.4" y="835.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.4" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.41%)</title><rect x="1112.3" y="883.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.3" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.41%)</title><rect x="1112.3" y="867.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.3" y="878.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.41%)</title><rect x="1112.3" y="851.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.3" y="862.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.41%)</title><rect x="1112.3" y="835.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.3" y="846.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.41%)</title><rect x="1117.2" y="883.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.2" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.23%)</title><rect x="1122.0" y="899.0" width="14.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.0" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.23%)</title><rect x="1122.0" y="883.0" width="14.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.0" y="894.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.41%)</title><rect x="1122.0" y="867.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.0" y="878.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.41%)</title><rect x="1122.0" y="851.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.0" y="862.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.41%)</title><rect x="1126.9" y="867.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.9" y="878.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.41%)</title><rect x="1126.9" y="851.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.9" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.41%)</title><rect x="1126.9" y="835.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.9" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="1126.9" y="819.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.9" y="830.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.41%)</title><rect x="1131.7" y="867.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.7" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.41%)</title><rect x="1136.6" y="899.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.6" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.41%)</title><rect x="1136.6" y="883.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.6" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.41%)</title><rect x="1136.6" y="867.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.6" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.41%)</title><rect x="1136.6" y="851.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.6" y="862.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.41%)</title><rect x="1136.6" y="835.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.47%)</title><rect x="1141.4" y="915.0" width="29.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.4" y="926.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.47%)</title><rect x="1141.4" y="899.0" width="29.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.4" y="910.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.47%)</title><rect x="1141.4" y="883.0" width="29.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.4" y="894.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.47%)</title><rect x="1141.4" y="867.0" width="29.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.4" y="878.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1141.4" y="851.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.06%)</title><rect x="1146.3" y="851.0" width="24.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.3" y="862.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.06%)</title><rect x="1146.3" y="835.0" width="24.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.3" y="846.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.06%)</title><rect x="1146.3" y="819.0" width="24.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.3" y="830.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.06%)</title><rect x="1146.3" y="803.0" width="24.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.3" y="814.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.06%)</title><rect x="1146.3" y="787.0" width="24.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.3" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.06%)</title><rect x="1146.3" y="771.0" width="24.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.3" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.06%)</title><rect x="1146.3" y="755.0" width="24.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.3" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.06%)</title><rect x="1146.3" y="739.0" width="24.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.3" y="750.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.23%)</title><rect x="1146.3" y="723.0" width="14.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.23%)</title><rect x="1146.3" y="707.0" width="14.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.23%)</title><rect x="1146.3" y="691.0" width="14.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.23%)</title><rect x="1146.3" y="675.0" width="14.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.23%)</title><rect x="1146.3" y="659.0" width="14.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.23%)</title><rect x="1146.3" y="643.0" width="14.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.23%)</title><rect x="1146.3" y="627.0" width="14.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.23%)</title><rect x="1146.3" y="611.0" width="14.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.23%)</title><rect x="1146.3" y="595.0" width="14.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.23%)</title><rect x="1146.3" y="579.0" width="14.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.41%)</title><rect x="1146.3" y="563.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.3" y="574.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.41%)</title><rect x="1146.3" y="547.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1151.2" y="563.0" width="9.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1151.2" y="547.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1151.2" y="531.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1151.2" y="515.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1151.2" y="499.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1151.2" y="483.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1151.2" y="467.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1151.2" y="451.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.2" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.41%)</title><rect x="1151.2" y="435.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.2" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.41%)</title><rect x="1151.2" y="419.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.2" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.41%)</title><rect x="1151.2" y="403.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.2" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.41%)</title><rect x="1151.2" y="387.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.2" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.41%)</title><rect x="1151.2" y="371.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.2" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1151.2" y="355.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.2" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1151.2" y="339.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.2" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.41%)</title><rect x="1151.2" y="323.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.2" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.41%)</title><rect x="1151.2" y="307.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.2" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.41%)</title><rect x="1151.2" y="291.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.2" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1151.2" y="275.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.2" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1151.2" y="259.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.2" y="270.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.41%)</title><rect x="1151.2" y="243.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.2" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.41%)</title><rect x="1151.2" y="227.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.2" y="238.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1151.2" y="211.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.2" y="222.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.41%)</title><rect x="1151.2" y="195.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.2" y="206.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.41%)</title><rect x="1151.2" y="179.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.2" y="190.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.41%)</title><rect x="1151.2" y="163.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.2" y="174.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.41%)</title><rect x="1156.0" y="547.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="558.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.41%)</title><rect x="1156.0" y="531.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="542.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.41%)</title><rect x="1156.0" y="515.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1160.9" y="723.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1160.9" y="707.0" width="9.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.82%)</title><rect x="1160.9" y="691.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.82%)</title><rect x="1160.9" y="675.0" width="9.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.82%)</title><rect x="1160.9" y="659.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1160.9" y="643.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.82%)</title><rect x="1160.9" y="627.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1160.9" y="611.0" width="9.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.82%)</title><rect x="1160.9" y="595.0" width="9.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.82%)</title><rect x="1160.9" y="579.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.82%)</title><rect x="1160.9" y="563.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1160.9" y="547.0" width="9.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.82%)</title><rect x="1160.9" y="531.0" width="9.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1160.9" y="515.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.82%)</title><rect x="1160.9" y="499.0" width="9.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.82%)</title><rect x="1160.9" y="483.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.82%)</title><rect x="1160.9" y="467.0" width="9.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1160.9" y="451.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.82%)</title><rect x="1160.9" y="435.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1160.9" y="419.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.82%)</title><rect x="1160.9" y="403.0" width="9.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.82%)</title><rect x="1160.9" y="387.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.82%)</title><rect x="1160.9" y="371.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1160.9" y="355.0" width="9.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.82%)</title><rect x="1160.9" y="339.0" width="9.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1160.9" y="323.0" width="9.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.82%)</title><rect x="1160.9" y="307.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.82%)</title><rect x="1160.9" y="291.0" width="9.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.82%)</title><rect x="1160.9" y="275.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1160.9" y="259.0" width="9.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.82%)</title><rect x="1160.9" y="243.0" width="9.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1160.9" y="227.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.82%)</title><rect x="1160.9" y="211.0" width="9.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.82%)</title><rect x="1160.9" y="195.0" width="9.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.82%)</title><rect x="1160.9" y="179.0" width="9.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1160.9" y="163.0" width="9.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1160.9" y="147.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.9" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1160.9" y="131.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.9" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1160.9" y="115.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1160.9" y="99.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1160.9" y="83.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1160.9" y="67.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.9" y="78.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.41%)</title><rect x="1160.9" y="51.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.9" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.41%)</title><rect x="1160.9" y="35.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.41%)</title><rect x="1165.7" y="147.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.7" y="158.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.41%)</title><rect x="1165.7" y="131.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="142.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.41%)</title><rect x="1165.7" y="115.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.7" y="126.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.41%)</title><rect x="1165.7" y="99.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.7" y="110.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.41%)</title><rect x="1165.7" y="83.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.7" y="94.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.41%)</title><rect x="1165.7" y="67.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.7" y="78.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.23%)</title><rect x="1170.6" y="947.0" width="14.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.6" y="958.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.23%)</title><rect x="1170.6" y="931.0" width="14.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.6" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.23%)</title><rect x="1170.6" y="915.0" width="14.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.6" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.82%)</title><rect x="1170.6" y="899.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.6" y="910.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.41%)</title><rect x="1170.6" y="883.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.6" y="894.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.41%)</title><rect x="1170.6" y="867.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.6" y="878.0"></text>
</g>
<g>
<title>LIR_OpLock::emit_code(LIR_Assembler*) (1 samples, 0.41%)</title><rect x="1170.6" y="851.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.6" y="862.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lock(LIR_OpLock*) (1 samples, 0.41%)</title><rect x="1170.6" y="835.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.6" y="846.0"></text>
</g>
<g>
<title>C1_MacroAssembler::lock_object(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, Label&amp;) (1 samples, 0.41%)</title><rect x="1170.6" y="819.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.6" y="830.0"></text>
</g>
<g>
<title>Label::patch_instructions(MacroAssembler*) (1 samples, 0.41%)</title><rect x="1170.6" y="803.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.6" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.41%)</title><rect x="1175.4" y="883.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.4" y="894.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.41%)</title><rect x="1175.4" y="867.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.4" y="878.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.41%)</title><rect x="1175.4" y="851.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.4" y="862.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.41%)</title><rect x="1175.4" y="835.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.4" y="846.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.41%)</title><rect x="1180.3" y="899.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="910.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.41%)</title><rect x="1180.3" y="883.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="894.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.41%)</title><rect x="1180.3" y="867.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="878.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.41%)</title><rect x="1180.3" y="851.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="862.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.41%)</title><rect x="1180.3" y="835.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="846.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.41%)</title><rect x="1185.1" y="963.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="974.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.41%)</title><rect x="1185.1" y="947.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.1" y="958.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.41%)</title><rect x="1185.1" y="931.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.1" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.41%)</title><rect x="1185.1" y="915.0" width="4.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1188.1" y="926.0"></text>
</g>
</g>
</svg>
