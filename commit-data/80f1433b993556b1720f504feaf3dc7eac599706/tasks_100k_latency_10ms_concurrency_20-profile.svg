<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1269"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1269"> </text>
<g id="frames">
<g>
<title>all (292 samples, 100.00%)</title><rect x="10.0" y="1235.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 6.85%)</title><rect x="10.0" y="1219.0" width="80.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.34%)</title><rect x="14.0" y="1203.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.34%)</title><rect x="14.0" y="1187.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.34%)</title><rect x="14.0" y="1171.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.34%)</title><rect x="14.0" y="1155.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.34%)</title><rect x="14.0" y="1139.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.34%)</title><rect x="14.0" y="1123.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.34%)</title><rect x="14.0" y="1107.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.34%)</title><rect x="14.0" y="1091.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.34%)</title><rect x="14.0" y="1075.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.34%)</title><rect x="14.0" y="1059.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.0" y="1070.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.34%)</title><rect x="14.0" y="1043.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/1592852698.get (1 samples, 0.34%)</title><rect x="14.0" y="1027.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (18 samples, 6.16%)</title><rect x="18.1" y="1203.0" width="72.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.1" y="1214.0">com/line..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.71%)</title><rect x="22.1" y="1187.0" width="20.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1219383282.accept (5 samples, 1.71%)</title><rect x="22.1" y="1171.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (5 samples, 1.71%)</title><rect x="22.1" y="1155.0" width="20.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.68%)</title><rect x="22.1" y="1139.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.68%)</title><rect x="22.1" y="1123.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.68%)</title><rect x="22.1" y="1107.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.68%)</title><rect x="22.1" y="1091.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.68%)</title><rect x="22.1" y="1075.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.68%)</title><rect x="22.1" y="1059.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.68%)</title><rect x="22.1" y="1043.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.68%)</title><rect x="22.1" y="1027.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.68%)</title><rect x="22.1" y="1011.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.1" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="26.2" y="995.0" width="4.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="29.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.03%)</title><rect x="30.2" y="1139.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.03%)</title><rect x="30.2" y="1123.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.68%)</title><rect x="34.2" y="1107.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.34%)</title><rect x="34.2" y="1091.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.34%)</title><rect x="34.2" y="1075.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.2" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.34%)</title><rect x="34.2" y="1059.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="38.3" y="1091.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.11%)</title><rect x="42.3" y="1187.0" width="48.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.3" y="1198.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.11%)</title><rect x="42.3" y="1171.0" width="48.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.3" y="1182.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.40%)</title><rect x="42.3" y="1155.0" width="28.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.3" y="1166.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.37%)</title><rect x="42.3" y="1139.0" width="16.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.37%)</title><rect x="42.3" y="1123.0" width="16.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$260/244819236.shouldBlock (1 samples, 0.34%)</title><rect x="42.3" y="1107.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.34%)</title><rect x="42.3" y="1091.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.34%)</title><rect x="42.3" y="1075.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.34%)</title><rect x="42.3" y="1059.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.34%)</title><rect x="42.3" y="1043.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.34%)</title><rect x="46.4" y="1107.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.iterator (1 samples, 0.34%)</title><rect x="46.4" y="1091.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.34%)</title><rect x="50.4" y="1107.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.34%)</title><rect x="50.4" y="1091.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.34%)</title><rect x="50.4" y="1075.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.4" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.34%)</title><rect x="50.4" y="1059.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.4" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.34%)</title><rect x="50.4" y="1043.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.4" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.34%)</title><rect x="50.4" y="1027.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="53.4" y="1038.0"></text>
</g>
<g>
<title>__write (1 samples, 0.34%)</title><rect x="50.4" y="1011.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="53.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.34%)</title><rect x="54.5" y="1107.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.34%)</title><rect x="54.5" y="1091.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="57.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="54.5" y="1075.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="54.5" y="1059.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="57.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.34%)</title><rect x="54.5" y="1043.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="57.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.34%)</title><rect x="54.5" y="1027.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.34%)</title><rect x="54.5" y="1011.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.34%)</title><rect x="54.5" y="995.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.34%)</title><rect x="54.5" y="979.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.sizeOf (1 samples, 0.34%)</title><rect x="54.5" y="963.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.03%)</title><rect x="58.5" y="1139.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.03%)</title><rect x="58.5" y="1123.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="61.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.03%)</title><rect x="58.5" y="1107.0" width="12.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="61.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.03%)</title><rect x="58.5" y="1091.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.5" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.34%)</title><rect x="58.5" y="1075.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.5" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.34%)</title><rect x="58.5" y="1059.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.5" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.34%)</title><rect x="58.5" y="1043.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.5" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.34%)</title><rect x="58.5" y="1027.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.5" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.34%)</title><rect x="58.5" y="1011.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.34%)</title><rect x="62.5" y="1075.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.34%)</title><rect x="66.6" y="1075.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.34%)</title><rect x="66.6" y="1059.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="69.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.34%)</title><rect x="66.6" y="1043.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.6" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.34%)</title><rect x="66.6" y="1027.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.6" y="1038.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.34%)</title><rect x="66.6" y="1011.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.34%)</title><rect x="66.6" y="995.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.34%)</title><rect x="66.6" y="979.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.34%)</title><rect x="66.6" y="963.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.6" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="66.6" y="947.0" width="4.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="69.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.03%)</title><rect x="70.6" y="1155.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.68%)</title><rect x="70.6" y="1139.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.68%)</title><rect x="70.6" y="1123.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="73.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.34%)</title><rect x="70.6" y="1107.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="73.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/311497529.accept (1 samples, 0.34%)</title><rect x="70.6" y="1091.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.34%)</title><rect x="70.6" y="1075.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.34%)</title><rect x="70.6" y="1059.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.34%)</title><rect x="70.6" y="1043.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.34%)</title><rect x="74.7" y="1107.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="74.7" y="1091.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.34%)</title><rect x="74.7" y="1075.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="77.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="74.7" y="1059.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="74.7" y="1043.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.34%)</title><rect x="74.7" y="1027.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.7" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.34%)</title><rect x="74.7" y="1011.0" width="4.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="77.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.34%)</title><rect x="78.7" y="1139.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.34%)</title><rect x="78.7" y="1123.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.34%)</title><rect x="78.7" y="1107.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.34%)</title><rect x="82.7" y="1155.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.34%)</title><rect x="82.7" y="1139.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.34%)</title><rect x="82.7" y="1123.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.34%)</title><rect x="82.7" y="1107.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="85.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.34%)</title><rect x="82.7" y="1091.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.34%)</title><rect x="82.7" y="1075.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.34%)</title><rect x="82.7" y="1059.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.34%)</title><rect x="82.7" y="1043.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="82.7" y="1027.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="82.7" y="1011.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="85.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.34%)</title><rect x="86.8" y="1155.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="89.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.34%)</title><rect x="86.8" y="1139.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.34%)</title><rect x="86.8" y="1123.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.34%)</title><rect x="86.8" y="1107.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.8" y="1118.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.34%)</title><rect x="86.8" y="1091.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.34%)</title><rect x="86.8" y="1075.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="89.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.34%)</title><rect x="86.8" y="1059.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="89.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.34%)</title><rect x="86.8" y="1043.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.34%)</title><rect x="86.8" y="1027.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.run (150 samples, 51.37%)</title><rect x="90.8" y="1219.0" width="606.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="93.8" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (150 samples, 51.37%)</title><rect x="90.8" y="1203.0" width="606.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="93.8" y="1214.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (150 samples, 51.37%)</title><rect x="90.8" y="1187.0" width="606.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.8" y="1198.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run (141 samples, 48.29%)</title><rect x="98.9" y="1171.0" width="569.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.9" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (141 samples, 48.29%)</title><rect x="98.9" y="1155.0" width="569.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="101.9" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (141 samples, 48.29%)</title><rect x="98.9" y="1139.0" width="569.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.9" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (138 samples, 47.26%)</title><rect x="98.9" y="1123.0" width="557.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.9" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (37 samples, 12.67%)</title><rect x="107.0" y="1107.0" width="149.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.0" y="1118.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (37 samples, 12.67%)</title><rect x="107.0" y="1091.0" width="149.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.0" y="1102.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (37 samples, 12.67%)</title><rect x="107.0" y="1075.0" width="149.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.0" y="1086.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 12.67%)</title><rect x="107.0" y="1059.0" width="149.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.0" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 12.67%)</title><rect x="107.0" y="1043.0" width="149.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.0" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (37 samples, 12.67%)</title><rect x="107.0" y="1027.0" width="149.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.0" y="1038.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 3.08%)</title><rect x="107.0" y="1011.0" width="36.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="110.0" y="1022.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.71%)</title><rect x="107.0" y="995.0" width="20.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.37%)</title><rect x="107.0" y="979.0" width="16.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="110.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.34%)</title><rect x="119.1" y="963.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="122.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.34%)</title><rect x="119.1" y="947.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.1" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.34%)</title><rect x="119.1" y="931.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.1" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.34%)</title><rect x="119.1" y="915.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="123.2" y="979.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="126.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.34%)</title><rect x="123.2" y="963.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.37%)</title><rect x="127.2" y="995.0" width="16.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="130.2" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="131.2" y="979.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="134.2" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="131.2" y="963.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="134.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="131.2" y="947.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="134.2" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="131.2" y="931.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="134.2" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.34%)</title><rect x="131.2" y="915.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="134.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.68%)</title><rect x="135.3" y="979.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.34%)</title><rect x="135.3" y="963.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="138.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.34%)</title><rect x="135.3" y="947.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.34%)</title><rect x="139.3" y="963.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="142.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (24 samples, 8.22%)</title><rect x="143.4" y="1011.0" width="96.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.4" y="1022.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.68%)</title><rect x="143.4" y="995.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.68%)</title><rect x="143.4" y="979.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.34%)</title><rect x="147.4" y="963.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="150.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.68%)</title><rect x="151.4" y="995.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.68%)</title><rect x="151.4" y="979.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.68%)</title><rect x="151.4" y="963.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.68%)</title><rect x="151.4" y="947.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="154.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="155.5" y="931.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="158.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (20 samples, 6.85%)</title><rect x="159.5" y="995.0" width="80.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.5" y="1006.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.37%)</title><rect x="159.5" y="979.0" width="16.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.68%)</title><rect x="159.5" y="963.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="162.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.68%)</title><rect x="159.5" y="947.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="162.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.68%)</title><rect x="159.5" y="931.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="162.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.68%)</title><rect x="167.6" y="963.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (16 samples, 5.48%)</title><rect x="175.7" y="979.0" width="64.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="178.7" y="990.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (16 samples, 5.48%)</title><rect x="175.7" y="963.0" width="64.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="178.7" y="974.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (16 samples, 5.48%)</title><rect x="175.7" y="947.0" width="64.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.7" y="958.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.05%)</title><rect x="183.8" y="931.0" width="24.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.8" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 1.03%)</title><rect x="187.8" y="915.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.34%)</title><rect x="199.9" y="915.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="202.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.34%)</title><rect x="199.9" y="899.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.34%)</title><rect x="199.9" y="883.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.34%)</title><rect x="199.9" y="867.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.34%)</title><rect x="204.0" y="915.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.34%)</title><rect x="204.0" y="899.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.34%)</title><rect x="204.0" y="883.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.03%)</title><rect x="208.0" y="931.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 1.03%)</title><rect x="208.0" y="915.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.03%)</title><rect x="208.0" y="899.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="211.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.03%)</title><rect x="208.0" y="883.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 1.03%)</title><rect x="208.0" y="867.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 1.71%)</title><rect x="220.1" y="931.0" width="20.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 1.71%)</title><rect x="220.1" y="915.0" width="20.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 1.71%)</title><rect x="220.1" y="899.0" width="20.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 1.71%)</title><rect x="220.1" y="883.0" width="20.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.1" y="894.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 1.71%)</title><rect x="220.1" y="867.0" width="20.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.1" y="878.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 1.03%)</title><rect x="228.2" y="851.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.37%)</title><rect x="240.3" y="1011.0" width="16.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 1.37%)</title><rect x="240.3" y="995.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 1.37%)</title><rect x="240.3" y="979.0" width="16.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.34%)</title><rect x="240.3" y="963.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.03%)</title><rect x="244.4" y="963.0" width="12.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.03%)</title><rect x="244.4" y="947.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (94 samples, 32.19%)</title><rect x="256.5" y="1107.0" width="379.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.5" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (22 samples, 7.53%)</title><rect x="256.5" y="1091.0" width="88.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.5" y="1102.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (19 samples, 6.51%)</title><rect x="268.6" y="1075.0" width="76.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.6" y="1086.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (18 samples, 6.16%)</title><rect x="272.7" y="1059.0" width="72.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.7" y="1070.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.03%)</title><rect x="284.8" y="1043.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.03%)</title><rect x="284.8" y="1027.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.03%)</title><rect x="284.8" y="1011.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.03%)</title><rect x="284.8" y="995.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.34%)</title><rect x="292.9" y="979.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.9" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.34%)</title><rect x="292.9" y="963.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.9" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 4.11%)</title><rect x="296.9" y="1043.0" width="48.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.9" y="1054.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 2.74%)</title><rect x="313.1" y="1027.0" width="32.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.1" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 2.74%)</title><rect x="313.1" y="1011.0" width="32.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.1" y="1022.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (15 samples, 5.14%)</title><rect x="345.4" y="1091.0" width="60.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.4" y="1102.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (15 samples, 5.14%)</title><rect x="345.4" y="1075.0" width="60.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="348.4" y="1086.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 2.05%)</title><rect x="345.4" y="1059.0" width="24.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="348.4" y="1070.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.03%)</title><rect x="353.5" y="1043.0" width="12.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="356.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.03%)</title><rect x="353.5" y="1027.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="356.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.34%)</title><rect x="353.5" y="1011.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.34%)</title><rect x="353.5" y="995.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.34%)</title><rect x="353.5" y="979.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.5" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="353.5" y="963.0" width="4.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="356.5" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="357.5" y="1011.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.34%)</title><rect x="361.6" y="1011.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="364.6" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="365.6" y="1043.0" width="4.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="368.6" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 3.08%)</title><rect x="369.7" y="1059.0" width="36.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="372.7" y="1070.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 3.08%)</title><rect x="369.7" y="1043.0" width="36.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="372.7" y="1054.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.34%)</title><rect x="369.7" y="1027.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="372.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.34%)</title><rect x="369.7" y="1011.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="372.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.34%)</title><rect x="369.7" y="995.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="372.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.34%)</title><rect x="369.7" y="979.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="372.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.34%)</title><rect x="369.7" y="963.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="372.7" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 2.74%)</title><rect x="373.7" y="1027.0" width="32.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.7" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.40%)</title><rect x="377.7" y="1011.0" width="28.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.7" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.68%)</title><rect x="397.9" y="995.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="400.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.34%)</title><rect x="397.9" y="979.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.9" y="990.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.34%)</title><rect x="402.0" y="979.0" width="4.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="405.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (52 samples, 17.81%)</title><rect x="406.0" y="1091.0" width="210.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="409.0" y="1102.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (52 samples, 17.81%)</title><rect x="406.0" y="1075.0" width="210.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.0" y="1086.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (50 samples, 17.12%)</title><rect x="410.1" y="1059.0" width="202.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="413.1" y="1070.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (50 samples, 17.12%)</title><rect x="410.1" y="1043.0" width="202.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="413.1" y="1054.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (49 samples, 16.78%)</title><rect x="410.1" y="1027.0" width="198.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="413.1" y="1038.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.68%)</title><rect x="410.1" y="1011.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="413.1" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.68%)</title><rect x="410.1" y="995.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="413.1" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.68%)</title><rect x="410.1" y="979.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.34%)</title><rect x="414.1" y="963.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.34%)</title><rect x="414.1" y="947.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.34%)</title><rect x="414.1" y="931.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="417.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (44 samples, 15.07%)</title><rect x="418.2" y="1011.0" width="177.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="421.2" y="1022.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>java/lang/Thread.sleep (44 samples, 15.07%)</title><rect x="418.2" y="995.0" width="177.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.2" y="1006.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (41 samples, 14.04%)</title><rect x="430.3" y="979.0" width="165.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="433.3" y="990.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.03%)</title><rect x="446.4" y="963.0" width="12.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="449.4" y="974.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.34%)</title><rect x="458.6" y="963.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="461.6" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.03%)</title><rect x="462.6" y="963.0" width="12.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="465.6" y="974.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="466.6" y="947.0" width="8.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="469.6" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.34%)</title><rect x="474.7" y="963.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="477.7" y="974.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 9.93%)</title><rect x="478.8" y="963.0" width="117.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="481.8" y="974.0">os::sleep(Thre..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="499.0" y="947.0" width="4.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="502.0" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="499.0" y="931.0" width="4.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="502.0" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.03%)</title><rect x="503.0" y="947.0" width="12.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="506.0" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.68%)</title><rect x="515.1" y="947.0" width="8.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="518.1" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 4.45%)</title><rect x="523.2" y="947.0" width="52.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="526.2" y="958.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.34%)</title><rect x="575.8" y="947.0" width="4.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="578.8" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.03%)</title><rect x="579.8" y="947.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="582.8" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.34%)</title><rect x="591.9" y="947.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="594.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.34%)</title><rect x="596.0" y="1011.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="599.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.34%)</title><rect x="600.0" y="1011.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.34%)</title><rect x="600.0" y="995.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="603.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.34%)</title><rect x="604.0" y="1011.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.34%)</title><rect x="608.1" y="1027.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="611.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.34%)</title><rect x="608.1" y="1011.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="611.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.34%)</title><rect x="608.1" y="995.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.34%)</title><rect x="608.1" y="979.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="611.1" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.34%)</title><rect x="612.1" y="1059.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="615.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.34%)</title><rect x="612.1" y="1043.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="615.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/147450891.get$Lambda (1 samples, 0.34%)</title><rect x="612.1" y="1027.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="615.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/147450891.&lt;init&gt; (1 samples, 0.34%)</title><rect x="612.1" y="1011.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="615.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.71%)</title><rect x="616.2" y="1091.0" width="20.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="619.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.71%)</title><rect x="616.2" y="1075.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="619.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.34%)</title><rect x="632.3" y="1059.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="635.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/908807010.accept (1 samples, 0.34%)</title><rect x="632.3" y="1043.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.34%)</title><rect x="632.3" y="1027.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="635.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.34%)</title><rect x="632.3" y="1011.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.3" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.34%)</title><rect x="632.3" y="995.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="635.3" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.34%)</title><rect x="632.3" y="979.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="635.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.37%)</title><rect x="636.4" y="1107.0" width="16.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="639.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.37%)</title><rect x="636.4" y="1091.0" width="16.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.68%)</title><rect x="644.5" y="1075.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/908807010.accept (2 samples, 0.68%)</title><rect x="644.5" y="1059.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (2 samples, 0.68%)</title><rect x="644.5" y="1043.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="647.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.68%)</title><rect x="644.5" y="1027.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.5" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.68%)</title><rect x="644.5" y="1011.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.5" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.68%)</title><rect x="644.5" y="995.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="647.5" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.34%)</title><rect x="652.5" y="1107.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.5" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.34%)</title><rect x="652.5" y="1091.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="655.5" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.34%)</title><rect x="652.5" y="1075.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.34%)</title><rect x="652.5" y="1059.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="655.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.34%)</title><rect x="652.5" y="1043.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="655.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.34%)</title><rect x="652.5" y="1027.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="655.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.34%)</title><rect x="652.5" y="1011.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="655.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.03%)</title><rect x="656.6" y="1123.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.40%)</title><rect x="668.7" y="1171.0" width="28.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="671.7" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.05%)</title><rect x="672.7" y="1155.0" width="24.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="675.7" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.68%)</title><rect x="672.7" y="1139.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="675.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.68%)</title><rect x="672.7" y="1123.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.68%)</title><rect x="672.7" y="1107.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="675.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.68%)</title><rect x="672.7" y="1091.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="675.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.68%)</title><rect x="672.7" y="1075.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="675.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.37%)</title><rect x="680.8" y="1139.0" width="16.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="683.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.37%)</title><rect x="680.8" y="1123.0" width="16.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="683.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.37%)</title><rect x="680.8" y="1107.0" width="16.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="683.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.37%)</title><rect x="680.8" y="1091.0" width="16.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="683.8" y="1102.0"></text>
</g>
<g>
<title>start_thread (122 samples, 41.78%)</title><rect x="697.0" y="1219.0" width="493.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="700.0" y="1230.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (122 samples, 41.78%)</title><rect x="697.0" y="1203.0" width="493.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="700.0" y="1214.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 2.74%)</title><rect x="697.0" y="1187.0" width="32.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="700.0" y="1198.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.68%)</title><rect x="697.0" y="1171.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="700.0" y="1182.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.34%)</title><rect x="697.0" y="1155.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="700.0" y="1166.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.34%)</title><rect x="697.0" y="1139.0" width="4.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="700.0" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, ReferenceProcessor*) (1 samples, 0.34%)</title><rect x="701.0" y="1155.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="704.0" y="1166.0"></text>
</g>
<g>
<title>G1ParGCAllocator::create_allocator(G1CollectedHeap*) (1 samples, 0.34%)</title><rect x="701.0" y="1139.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="704.0" y="1150.0"></text>
</g>
<g>
<title>ParGCAllocBuffer::ParGCAllocBuffer(unsigned long) (1 samples, 0.34%)</title><rect x="701.0" y="1123.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="704.0" y="1134.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.05%)</title><rect x="705.1" y="1171.0" width="24.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="708.1" y="1182.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.05%)</title><rect x="705.1" y="1155.0" width="24.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="708.1" y="1166.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.37%)</title><rect x="705.1" y="1139.0" width="16.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="708.1" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.34%)</title><rect x="717.2" y="1123.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="720.2" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.34%)</title><rect x="717.2" y="1107.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="720.2" y="1118.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.34%)</title><rect x="721.2" y="1139.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="724.2" y="1150.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.34%)</title><rect x="725.3" y="1139.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="728.3" y="1150.0"></text>
</g>
<g>
<title>JavaThread::run() (114 samples, 39.04%)</title><rect x="729.3" y="1187.0" width="460.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="732.3" y="1198.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (114 samples, 39.04%)</title><rect x="729.3" y="1171.0" width="460.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="732.3" y="1182.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (113 samples, 38.70%)</title><rect x="729.3" y="1155.0" width="456.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="732.3" y="1166.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (112 samples, 38.36%)</title><rect x="729.3" y="1139.0" width="452.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="732.3" y="1150.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (109 samples, 37.33%)</title><rect x="729.3" y="1123.0" width="440.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="732.3" y="1134.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (109 samples, 37.33%)</title><rect x="729.3" y="1107.0" width="440.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="732.3" y="1118.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (67 samples, 22.95%)</title><rect x="729.3" y="1091.0" width="270.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="732.3" y="1102.0">Compile::Code_Gen()</text>
</g>
<g>
<title>AbstractAssembler::bind(Label&amp;) (1 samples, 0.34%)</title><rect x="729.3" y="1075.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="732.3" y="1086.0"></text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.68%)</title><rect x="733.4" y="1075.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="736.4" y="1086.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.68%)</title><rect x="733.4" y="1059.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="736.4" y="1070.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.68%)</title><rect x="733.4" y="1043.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="736.4" y="1054.0"></text>
</g>
<g>
<title>MachSpillCopyNode::bottom_type() const (1 samples, 0.34%)</title><rect x="733.4" y="1027.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="736.4" y="1038.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.34%)</title><rect x="737.4" y="1027.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="740.4" y="1038.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.34%)</title><rect x="741.4" y="1075.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="744.4" y="1086.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.34%)</title><rect x="741.4" y="1059.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="744.4" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.34%)</title><rect x="741.4" y="1043.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="744.4" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.34%)</title><rect x="741.4" y="1027.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="744.4" y="1038.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.34%)</title><rect x="745.5" y="1075.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="748.5" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.71%)</title><rect x="749.5" y="1075.0" width="20.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="752.5" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.71%)</title><rect x="749.5" y="1059.0" width="20.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="752.5" y="1070.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.68%)</title><rect x="753.6" y="1043.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="756.6" y="1054.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.34%)</title><rect x="761.6" y="1043.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="764.6" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.34%)</title><rect x="765.7" y="1043.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="768.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.37%)</title><rect x="769.7" y="1075.0" width="16.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="772.7" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.37%)</title><rect x="769.7" y="1059.0" width="16.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="772.7" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.34%)</title><rect x="769.7" y="1043.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="772.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.34%)</title><rect x="769.7" y="1027.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="772.7" y="1038.0"></text>
</g>
<g>
<title>testI_regNode::pipeline() const (1 samples, 0.34%)</title><rect x="769.7" y="1011.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="772.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.68%)</title><rect x="773.8" y="1043.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="776.8" y="1054.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.34%)</title><rect x="777.8" y="1027.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="780.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.34%)</title><rect x="781.8" y="1043.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;) (1 samples, 0.34%)</title><rect x="785.9" y="1075.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="788.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (52 samples, 17.81%)</title><rect x="789.9" y="1075.0" width="210.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="792.9" y="1086.0">PhaseChaitin::Register_Alloc..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.34%)</title><rect x="798.0" y="1059.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="801.0" y="1070.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.34%)</title><rect x="802.1" y="1059.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="805.1" y="1070.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.34%)</title><rect x="806.1" y="1059.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="809.1" y="1070.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.68%)</title><rect x="810.1" y="1059.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="813.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.37%)</title><rect x="818.2" y="1059.0" width="16.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="821.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.34%)</title><rect x="818.2" y="1043.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="821.2" y="1054.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.34%)</title><rect x="818.2" y="1027.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="821.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.68%)</title><rect x="822.3" y="1043.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="825.3" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="826.3" y="1027.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="829.3" y="1038.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.34%)</title><rect x="830.3" y="1043.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="833.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 1.37%)</title><rect x="834.4" y="1059.0" width="16.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="837.4" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.34%)</title><rect x="838.4" y="1043.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="841.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.68%)</title><rect x="842.5" y="1043.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="845.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.03%)</title><rect x="850.5" y="1059.0" width="12.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="853.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.34%)</title><rect x="858.6" y="1043.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="861.6" y="1054.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.34%)</title><rect x="858.6" y="1027.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="861.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 2.74%)</title><rect x="862.7" y="1059.0" width="32.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="865.7" y="1070.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="870.8" y="1043.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="873.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.37%)</title><rect x="874.8" y="1043.0" width="16.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="877.8" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="886.9" y="1027.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="889.9" y="1038.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.34%)</title><rect x="891.0" y="1043.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="894.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.34%)</title><rect x="895.0" y="1059.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="898.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.34%)</title><rect x="895.0" y="1043.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="898.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.68%)</title><rect x="899.0" y="1059.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="902.0" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.34%)</title><rect x="903.1" y="1043.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="906.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.03%)</title><rect x="907.1" y="1059.0" width="12.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="910.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.68%)</title><rect x="911.2" y="1043.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="914.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 2.74%)</title><rect x="919.2" y="1059.0" width="32.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="922.2" y="1070.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 2.74%)</title><rect x="919.2" y="1043.0" width="32.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.2" y="1054.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (8 samples, 2.74%)</title><rect x="919.2" y="1027.0" width="32.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="922.2" y="1038.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.68%)</title><rect x="919.2" y="1011.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.2" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 2.05%)</title><rect x="927.3" y="1011.0" width="24.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="930.3" y="1022.0">P..</text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 1.03%)</title><rect x="951.6" y="1059.0" width="12.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="954.6" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.68%)</title><rect x="955.6" y="1043.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="958.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.34%)</title><rect x="963.7" y="1059.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.7" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="963.7" y="1043.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="966.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.34%)</title><rect x="967.7" y="1059.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.7" y="1070.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.34%)</title><rect x="967.7" y="1043.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="970.7" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 2.40%)</title><rect x="971.8" y="1059.0" width="28.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="974.8" y="1070.0">Ph..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.34%)</title><rect x="992.0" y="1043.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="995.0" y="1054.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.34%)</title><rect x="996.0" y="1043.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.0" y="1054.0"></text>
</g>
<g>
<title>Compile::Optimize() (33 samples, 11.30%)</title><rect x="1000.1" y="1091.0" width="133.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1003.1" y="1102.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.34%)</title><rect x="1000.1" y="1075.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1003.1" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.34%)</title><rect x="1000.1" y="1059.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1003.1" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.34%)</title><rect x="1000.1" y="1043.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1003.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.34%)</title><rect x="1004.1" y="1075.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1007.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.34%)</title><rect x="1004.1" y="1059.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1007.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="1043.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1007.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="1027.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1007.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="1011.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1007.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="995.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1007.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="979.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1007.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="963.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="947.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="931.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1007.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="915.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="899.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1007.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="883.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1007.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="867.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="851.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1007.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="835.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1007.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="819.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1007.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="803.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="787.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1007.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="771.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="755.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="739.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1007.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="723.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1007.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="707.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1007.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.34%)</title><rect x="1004.1" y="691.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1007.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (24 samples, 8.22%)</title><rect x="1008.2" y="1075.0" width="96.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1011.2" y="1086.0">PhaseIdealL..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.34%)</title><rect x="1008.2" y="1059.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1011.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.68%)</title><rect x="1012.2" y="1059.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1015.2" y="1070.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.34%)</title><rect x="1016.2" y="1043.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1019.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1020.3" y="1059.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1023.3" y="1070.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.34%)</title><rect x="1020.3" y="1043.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1023.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 5.82%)</title><rect x="1024.3" y="1059.0" width="68.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1027.3" y="1070.0">PhaseId..</text>
</g>
<g>
<title>LoadPNode::Opcode() const (1 samples, 0.34%)</title><rect x="1028.4" y="1043.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 5.14%)</title><rect x="1032.4" y="1043.0" width="60.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.4" y="1054.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.34%)</title><rect x="1040.5" y="1027.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1043.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (12 samples, 4.11%)</title><rect x="1044.5" y="1027.0" width="48.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1047.5" y="1038.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 1.71%)</title><rect x="1072.8" y="1011.0" width="20.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1075.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.03%)</title><rect x="1093.0" y="1059.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.0" y="1070.0"></text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 0.34%)</title><rect x="1097.1" y="1043.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.34%)</title><rect x="1101.1" y="1043.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.34%)</title><rect x="1101.1" y="1027.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.34%)</title><rect x="1101.1" y="1011.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.71%)</title><rect x="1105.1" y="1075.0" width="20.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.71%)</title><rect x="1105.1" y="1059.0" width="20.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.1" y="1070.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1109.2" y="1043.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.2" y="1054.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1109.2" y="1027.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.2" y="1038.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.34%)</title><rect x="1109.2" y="1011.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.2" y="1022.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.34%)</title><rect x="1109.2" y="995.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.2" y="1006.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.34%)</title><rect x="1109.2" y="979.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.2" y="990.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.34%)</title><rect x="1113.2" y="1043.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.2" y="1054.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1117.3" y="1043.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.3" y="1054.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.34%)</title><rect x="1117.3" y="1027.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.3" y="1038.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1121.3" y="1043.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.3" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.34%)</title><rect x="1121.3" y="1027.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.3" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="1011.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.3" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="995.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.3" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="979.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.3" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="963.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.3" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="947.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.3" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="931.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.3" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="915.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.3" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="899.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.3" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="883.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.3" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="867.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.3" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="851.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.3" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.34%)</title><rect x="1121.3" y="835.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.3" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.34%)</title><rect x="1121.3" y="819.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.3" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.34%)</title><rect x="1125.3" y="1075.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.3" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.34%)</title><rect x="1125.3" y="1059.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.3" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1125.3" y="1043.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.3" y="1054.0"></text>
</g>
<g>
<title>Node::replace_edges_in_range(Node*, Node*, int, int) (1 samples, 0.34%)</title><rect x="1125.3" y="1027.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.3" y="1038.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.34%)</title><rect x="1129.4" y="1075.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.4" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.74%)</title><rect x="1133.4" y="1091.0" width="32.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.4" y="1102.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.74%)</title><rect x="1133.4" y="1075.0" width="32.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.4" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.74%)</title><rect x="1133.4" y="1059.0" width="32.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.4" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.74%)</title><rect x="1133.4" y="1043.0" width="32.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.4" y="1054.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.74%)</title><rect x="1133.4" y="1027.0" width="32.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.4" y="1038.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.74%)</title><rect x="1133.4" y="1011.0" width="32.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.4" y="1022.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.05%)</title><rect x="1133.4" y="995.0" width="24.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.4" y="1006.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.05%)</title><rect x="1133.4" y="979.0" width="24.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.4" y="990.0">P..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.34%)</title><rect x="1133.4" y="963.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.4" y="974.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.34%)</title><rect x="1133.4" y="947.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.4" y="958.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.34%)</title><rect x="1133.4" y="931.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.4" y="942.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.34%)</title><rect x="1133.4" y="915.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.4" y="926.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.34%)</title><rect x="1133.4" y="899.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.71%)</title><rect x="1137.5" y="963.0" width="20.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.71%)</title><rect x="1137.5" y="947.0" width="20.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.71%)</title><rect x="1137.5" y="931.0" width="20.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.71%)</title><rect x="1137.5" y="915.0" width="20.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.03%)</title><rect x="1137.5" y="899.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.03%)</title><rect x="1137.5" y="883.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.03%)</title><rect x="1137.5" y="867.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.03%)</title><rect x="1137.5" y="851.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.03%)</title><rect x="1137.5" y="835.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.03%)</title><rect x="1137.5" y="819.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.5" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.03%)</title><rect x="1137.5" y="803.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.03%)</title><rect x="1137.5" y="787.0" width="12.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.03%)</title><rect x="1137.5" y="771.0" width="12.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.03%)</title><rect x="1137.5" y="755.0" width="12.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.5" y="766.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.34%)</title><rect x="1137.5" y="739.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1141.5" y="739.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1141.5" y="723.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1141.5" y="707.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1141.5" y="691.0" width="8.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1141.5" y="675.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1141.5" y="659.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1141.5" y="643.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.68%)</title><rect x="1141.5" y="627.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.34%)</title><rect x="1141.5" y="611.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.5" y="622.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.34%)</title><rect x="1141.5" y="595.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.5" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.34%)</title><rect x="1141.5" y="579.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.5" y="590.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.34%)</title><rect x="1141.5" y="563.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.5" y="574.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.34%)</title><rect x="1141.5" y="547.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.5" y="558.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.34%)</title><rect x="1141.5" y="531.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.34%)</title><rect x="1145.5" y="611.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.5" y="622.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.34%)</title><rect x="1145.5" y="595.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.5" y="606.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.34%)</title><rect x="1145.5" y="579.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.5" y="590.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.34%)</title><rect x="1145.5" y="563.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.5" y="574.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.34%)</title><rect x="1145.5" y="547.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.5" y="558.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.34%)</title><rect x="1145.5" y="531.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.5" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1149.6" y="899.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.6" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1149.6" y="883.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.6" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1149.6" y="867.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1149.6" y="851.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1149.6" y="835.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1149.6" y="819.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1149.6" y="803.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1149.6" y="787.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1149.6" y="771.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1149.6" y="755.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1149.6" y="739.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1149.6" y="723.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1149.6" y="707.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1149.6" y="691.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1149.6" y="675.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1149.6" y="659.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1149.6" y="643.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1149.6" y="627.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1149.6" y="611.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1149.6" y="595.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1149.6" y="579.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1149.6" y="563.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1149.6" y="547.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1149.6" y="531.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1149.6" y="515.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1149.6" y="499.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1149.6" y="483.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1149.6" y="467.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1149.6" y="451.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1149.6" y="435.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1149.6" y="419.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1149.6" y="403.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1149.6" y="387.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1149.6" y="371.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1149.6" y="355.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1149.6" y="339.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1149.6" y="323.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1149.6" y="307.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1149.6" y="291.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1149.6" y="275.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1149.6" y="259.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1149.6" y="243.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1149.6" y="227.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.6" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1149.6" y="211.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.6" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1149.6" y="195.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1149.6" y="179.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1149.6" y="163.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1149.6" y="147.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1149.6" y="131.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.6" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1149.6" y="115.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.6" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1149.6" y="99.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1149.6" y="83.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.6" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1149.6" y="67.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.6" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1149.6" y="51.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.6" y="62.0"></text>
</g>
<g>
<title>PreserveJVMState::~PreserveJVMState() (1 samples, 0.34%)</title><rect x="1149.6" y="35.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.34%)</title><rect x="1153.6" y="659.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.6" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1153.6" y="643.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.6" y="654.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.34%)</title><rect x="1153.6" y="627.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1157.7" y="995.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.7" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1157.7" y="979.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.7" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1157.7" y="963.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1157.7" y="947.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1157.7" y="931.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1157.7" y="915.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1157.7" y="899.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1157.7" y="883.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1157.7" y="867.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1157.7" y="851.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1157.7" y="835.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1157.7" y="819.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1157.7" y="803.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1157.7" y="787.0" width="8.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1157.7" y="771.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1157.7" y="755.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1157.7" y="739.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1157.7" y="723.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1157.7" y="707.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1157.7" y="691.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1157.7" y="675.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1157.7" y="659.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1157.7" y="643.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1157.7" y="627.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1157.7" y="611.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1157.7" y="595.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1157.7" y="579.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1157.7" y="563.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1157.7" y="547.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1157.7" y="531.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1157.7" y="515.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1157.7" y="499.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.7" y="510.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1157.7" y="483.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.7" y="494.0"></text>
</g>
<g>
<title>pass_initial_checks(ciMethod*, int, ciMethod*) (1 samples, 0.34%)</title><rect x="1157.7" y="467.0" width="4.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1160.7" y="478.0"></text>
</g>
<g>
<title>ciMethod::should_exclude() (1 samples, 0.34%)</title><rect x="1157.7" y="451.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1161.7" y="611.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.34%)</title><rect x="1161.7" y="595.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.7" y="606.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.34%)</title><rect x="1161.7" y="579.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.7" y="590.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.34%)</title><rect x="1161.7" y="563.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.7" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.34%)</title><rect x="1161.7" y="547.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.7" y="558.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.34%)</title><rect x="1161.7" y="531.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.7" y="542.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.34%)</title><rect x="1161.7" y="515.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.7" y="526.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.34%)</title><rect x="1165.8" y="1091.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.8" y="1102.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.34%)</title><rect x="1165.8" y="1075.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.8" y="1086.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.03%)</title><rect x="1169.8" y="1123.0" width="12.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.8" y="1134.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.03%)</title><rect x="1169.8" y="1107.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.8" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.03%)</title><rect x="1169.8" y="1091.0" width="12.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.8" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.03%)</title><rect x="1169.8" y="1075.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.8" y="1086.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.34%)</title><rect x="1169.8" y="1059.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.8" y="1070.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.34%)</title><rect x="1169.8" y="1043.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.8" y="1054.0"></text>
</g>
<g>
<title>ValueMap::ValueMap(ValueMap*) (1 samples, 0.34%)</title><rect x="1169.8" y="1027.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.8" y="1038.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.68%)</title><rect x="1173.8" y="1059.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="1070.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.68%)</title><rect x="1173.8" y="1043.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="1054.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.34%)</title><rect x="1173.8" y="1027.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="1038.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.34%)</title><rect x="1173.8" y="1011.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="1022.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.34%)</title><rect x="1173.8" y="995.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="1006.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.34%)</title><rect x="1173.8" y="979.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="990.0"></text>
</g>
<g>
<title>LinearScanWalker::set_use_pos(Interval*, int, bool) (1 samples, 0.34%)</title><rect x="1173.8" y="963.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="974.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.34%)</title><rect x="1177.9" y="1027.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="1038.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.34%)</title><rect x="1181.9" y="1139.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.9" y="1150.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.34%)</title><rect x="1181.9" y="1123.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="1134.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.34%)</title><rect x="1181.9" y="1107.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.34%)</title><rect x="1181.9" y="1091.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.9" y="1102.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.34%)</title><rect x="1181.9" y="1075.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.9" y="1086.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.34%)</title><rect x="1186.0" y="1155.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="1166.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.34%)</title><rect x="1186.0" y="1139.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.0" y="1150.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.34%)</title><rect x="1186.0" y="1123.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.0" y="1134.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.34%)</title><rect x="1186.0" y="1107.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="1118.0"></text>
</g>
</g>
</svg>
