<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1173"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1173"> </text>
<g id="frames">
<g>
<title>all (220 samples, 100.00%)</title><rect x="10.0" y="1139.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 12.73%)</title><rect x="10.0" y="1123.0" width="150.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1134.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 12.27%)</title><rect x="15.4" y="1107.0" width="144.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.4" y="1118.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 1.36%)</title><rect x="15.4" y="1091.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 1.36%)</title><rect x="15.4" y="1075.0" width="16.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 1.36%)</title><rect x="15.4" y="1059.0" width="16.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 1.36%)</title><rect x="15.4" y="1043.0" width="16.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 1.36%)</title><rect x="15.4" y="1027.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 1.36%)</title><rect x="15.4" y="1011.0" width="16.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.91%)</title><rect x="15.4" y="995.0" width="10.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.45%)</title><rect x="15.4" y="979.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.45%)</title><rect x="15.4" y="963.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/1242162548.test (1 samples, 0.45%)</title><rect x="15.4" y="947.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.45%)</title><rect x="20.7" y="979.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.7" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.45%)</title><rect x="20.7" y="963.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.7" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.45%)</title><rect x="20.7" y="947.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.45%)</title><rect x="20.7" y="931.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.7" y="942.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.45%)</title><rect x="20.7" y="915.0" width="5.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="23.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.45%)</title><rect x="26.1" y="995.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.45%)</title><rect x="26.1" y="979.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.45%)</title><rect x="26.1" y="963.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.1" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.45%)</title><rect x="26.1" y="947.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.1" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.45%)</title><rect x="26.1" y="931.0" width="5.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="29.1" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 8.64%)</title><rect x="31.5" y="1091.0" width="101.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.5" y="1102.0">java/lang/It..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1209424634.accept (18 samples, 8.18%)</title><rect x="31.5" y="1075.0" width="96.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.5" y="1086.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (18 samples, 8.18%)</title><rect x="31.5" y="1059.0" width="96.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.5" y="1070.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 6.36%)</title><rect x="31.5" y="1043.0" width="75.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.5" y="1054.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 6.36%)</title><rect x="31.5" y="1027.0" width="75.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.5" y="1038.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 6.36%)</title><rect x="31.5" y="1011.0" width="75.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.5" y="1022.0">com/line..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (14 samples, 6.36%)</title><rect x="31.5" y="995.0" width="75.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.5" y="1006.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 6.36%)</title><rect x="31.5" y="979.0" width="75.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.5" y="990.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 5.45%)</title><rect x="42.2" y="963.0" width="64.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.2" y="974.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 5.00%)</title><rect x="42.2" y="947.0" width="59.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.2" y="958.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.91%)</title><rect x="42.2" y="931.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.91%)</title><rect x="42.2" y="915.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.91%)</title><rect x="42.2" y="899.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.91%)</title><rect x="42.2" y="883.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 4.09%)</title><rect x="52.9" y="931.0" width="48.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.9" y="942.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 4.09%)</title><rect x="52.9" y="915.0" width="48.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.9" y="926.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 4.09%)</title><rect x="52.9" y="899.0" width="48.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.9" y="910.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 4.09%)</title><rect x="52.9" y="883.0" width="48.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.9" y="894.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (9 samples, 4.09%)</title><rect x="52.9" y="867.0" width="48.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.9" y="878.0">sun/..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 3.18%)</title><rect x="52.9" y="851.0" width="37.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="55.9" y="862.0">Uns..</text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 3.18%)</title><rect x="52.9" y="835.0" width="37.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="55.9" y="846.0">__p..</text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.91%)</title><rect x="90.5" y="851.0" width="10.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="93.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.45%)</title><rect x="101.2" y="947.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="104.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.82%)</title><rect x="106.5" y="1043.0" width="21.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.5" y="1054.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.82%)</title><rect x="106.5" y="1027.0" width="21.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.5" y="1038.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.91%)</title><rect x="117.3" y="1011.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="120.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.45%)</title><rect x="122.6" y="995.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="125.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.45%)</title><rect x="122.6" y="979.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="125.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.45%)</title><rect x="128.0" y="1075.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="131.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.45%)</title><rect x="128.0" y="1059.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.45%)</title><rect x="128.0" y="1043.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="131.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.45%)</title><rect x="128.0" y="1027.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="131.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.27%)</title><rect x="133.4" y="1091.0" width="26.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.4" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.27%)</title><rect x="133.4" y="1075.0" width="26.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.4" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 1.36%)</title><rect x="133.4" y="1059.0" width="16.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="136.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.36%)</title><rect x="133.4" y="1043.0" width="16.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1200 (1 samples, 0.45%)</title><rect x="133.4" y="1027.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.91%)</title><rect x="138.7" y="1027.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.45%)</title><rect x="138.7" y="1011.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="141.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.45%)</title><rect x="138.7" y="995.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.45%)</title><rect x="138.7" y="979.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.45%)</title><rect x="138.7" y="963.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.45%)</title><rect x="138.7" y="947.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="141.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.45%)</title><rect x="138.7" y="931.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="141.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.45%)</title><rect x="138.7" y="915.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.45%)</title><rect x="138.7" y="899.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.45%)</title><rect x="138.7" y="883.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.45%)</title><rect x="138.7" y="867.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.45%)</title><rect x="144.1" y="1011.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="147.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.45%)</title><rect x="144.1" y="995.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="147.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.45%)</title><rect x="144.1" y="979.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.1" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.45%)</title><rect x="144.1" y="963.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.1" y="974.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.45%)</title><rect x="144.1" y="947.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="147.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.45%)</title><rect x="144.1" y="931.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.1" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.45%)</title><rect x="144.1" y="915.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.1" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.45%)</title><rect x="144.1" y="899.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.1" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.45%)</title><rect x="144.1" y="883.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="147.1" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.45%)</title><rect x="144.1" y="867.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="147.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.45%)</title><rect x="149.5" y="1059.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.45%)</title><rect x="149.5" y="1043.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.45%)</title><rect x="149.5" y="1027.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.45%)</title><rect x="149.5" y="1011.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.5" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.45%)</title><rect x="149.5" y="995.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="152.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.45%)</title><rect x="154.8" y="1059.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="157.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.45%)</title><rect x="154.8" y="1043.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.45%)</title><rect x="154.8" y="1027.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="157.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.45%)</title><rect x="154.8" y="1011.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.45%)</title><rect x="154.8" y="995.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="157.8" y="1006.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.45%)</title><rect x="154.8" y="979.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="157.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.run (53 samples, 24.09%)</title><rect x="160.2" y="1123.0" width="284.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.2" y="1134.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (53 samples, 24.09%)</title><rect x="160.2" y="1107.0" width="284.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="163.2" y="1118.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (53 samples, 24.09%)</title><rect x="160.2" y="1091.0" width="284.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.2" y="1102.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2069414408.run (29 samples, 13.18%)</title><rect x="170.9" y="1075.0" width="155.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.9" y="1086.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (29 samples, 13.18%)</title><rect x="170.9" y="1059.0" width="155.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.9" y="1070.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (29 samples, 13.18%)</title><rect x="170.9" y="1043.0" width="155.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="173.9" y="1054.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (29 samples, 13.18%)</title><rect x="170.9" y="1027.0" width="155.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.9" y="1038.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (9 samples, 4.09%)</title><rect x="176.3" y="1011.0" width="48.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.3" y="1022.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (9 samples, 4.09%)</title><rect x="176.3" y="995.0" width="48.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.3" y="1006.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (9 samples, 4.09%)</title><rect x="176.3" y="979.0" width="48.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.3" y="990.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (9 samples, 4.09%)</title><rect x="176.3" y="963.0" width="48.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.3" y="974.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (9 samples, 4.09%)</title><rect x="176.3" y="947.0" width="48.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.3" y="958.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (9 samples, 4.09%)</title><rect x="176.3" y="931.0" width="48.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.3" y="942.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.36%)</title><rect x="176.3" y="915.0" width="16.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.45%)</title><rect x="176.3" y="899.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.45%)</title><rect x="176.3" y="883.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="179.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.91%)</title><rect x="181.6" y="899.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="184.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.91%)</title><rect x="181.6" y="883.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="184.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.45%)</title><rect x="187.0" y="867.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="190.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.45%)</title><rect x="187.0" y="851.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="190.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 2.73%)</title><rect x="192.4" y="915.0" width="32.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.4" y="926.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 2.73%)</title><rect x="192.4" y="899.0" width="32.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.4" y="910.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.45%)</title><rect x="192.4" y="883.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.45%)</title><rect x="192.4" y="867.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.45%)</title><rect x="192.4" y="851.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.45%)</title><rect x="192.4" y="835.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="195.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.27%)</title><rect x="197.7" y="883.0" width="26.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.7" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.27%)</title><rect x="197.7" y="867.0" width="26.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.7" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.27%)</title><rect x="197.7" y="851.0" width="26.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.7" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.45%)</title><rect x="203.1" y="835.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.45%)</title><rect x="203.1" y="819.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="206.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.45%)</title><rect x="203.1" y="803.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.45%)</title><rect x="203.1" y="787.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.36%)</title><rect x="208.5" y="835.0" width="16.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.91%)</title><rect x="213.8" y="819.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.91%)</title><rect x="213.8" y="803.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.91%)</title><rect x="213.8" y="787.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.91%)</title><rect x="213.8" y="771.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (19 samples, 8.64%)</title><rect x="224.5" y="1011.0" width="102.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.5" y="1022.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 0.91%)</title><rect x="224.5" y="995.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.5" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 0.91%)</title><rect x="224.5" y="979.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.5" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 0.91%)</title><rect x="224.5" y="963.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.5" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.91%)</title><rect x="224.5" y="947.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 6.36%)</title><rect x="235.3" y="995.0" width="75.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.3" y="1006.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 6.36%)</title><rect x="235.3" y="979.0" width="75.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.3" y="990.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 3.18%)</title><rect x="246.0" y="963.0" width="37.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="249.0" y="974.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.45%)</title><rect x="256.7" y="947.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.7" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.45%)</title><rect x="256.7" y="931.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.7" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.45%)</title><rect x="256.7" y="915.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="259.7" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.45%)</title><rect x="256.7" y="899.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="259.7" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.45%)</title><rect x="256.7" y="883.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="259.7" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.91%)</title><rect x="262.1" y="947.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.1" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.91%)</title><rect x="262.1" y="931.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="265.1" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.91%)</title><rect x="262.1" y="915.0" width="10.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.1" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.91%)</title><rect x="262.1" y="899.0" width="10.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.1" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.91%)</title><rect x="272.8" y="947.0" width="10.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="275.8" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.27%)</title><rect x="283.5" y="963.0" width="26.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.5" y="974.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 2.27%)</title><rect x="283.5" y="947.0" width="26.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.5" y="958.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.27%)</title><rect x="283.5" y="931.0" width="26.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.5" y="942.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.36%)</title><rect x="294.3" y="915.0" width="16.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 0.91%)</title><rect x="310.4" y="995.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.91%)</title><rect x="310.4" y="979.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2098216011.process (1 samples, 0.45%)</title><rect x="310.4" y="963.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.45%)</title><rect x="310.4" y="947.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.45%)</title><rect x="310.4" y="931.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.4" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.45%)</title><rect x="310.4" y="915.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.4" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.45%)</title><rect x="310.4" y="899.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.4" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.45%)</title><rect x="310.4" y="883.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.45%)</title><rect x="315.7" y="963.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.7" y="974.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.45%)</title><rect x="315.7" y="947.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="318.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.45%)</title><rect x="321.1" y="995.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.45%)</title><rect x="321.1" y="979.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.45%)</title><rect x="321.1" y="963.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1358877908.accept (1 samples, 0.45%)</title><rect x="321.1" y="947.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.45%)</title><rect x="321.1" y="931.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.1" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.45%)</title><rect x="321.1" y="915.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.1" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.45%)</title><rect x="321.1" y="899.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.1" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.45%)</title><rect x="321.1" y="883.0" width="5.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="324.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.45%)</title><rect x="321.1" y="867.0" width="5.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="324.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.45%)</title><rect x="326.5" y="1075.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.91%)</title><rect x="331.8" y="1075.0" width="10.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="334.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.45%)</title><rect x="337.2" y="1059.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="340.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.45%)</title><rect x="342.5" y="1075.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="345.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (18 samples, 8.18%)</title><rect x="347.9" y="1075.0" width="96.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="350.9" y="1086.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (18 samples, 8.18%)</title><rect x="347.9" y="1059.0" width="96.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.9" y="1070.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (1 samples, 0.45%)</title><rect x="347.9" y="1043.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="350.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 6.82%)</title><rect x="353.3" y="1043.0" width="80.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.3" y="1054.0">java/util..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.91%)</title><rect x="358.6" y="1027.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 5.45%)</title><rect x="369.4" y="1027.0" width="64.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.4" y="1038.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (12 samples, 5.45%)</title><rect x="369.4" y="1011.0" width="64.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="372.4" y="1022.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Park (12 samples, 5.45%)</title><rect x="369.4" y="995.0" width="64.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="372.4" y="1006.0">Unsafe_..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.45%)</title><rect x="374.7" y="979.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="377.7" y="990.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 1.36%)</title><rect x="380.1" y="979.0" width="16.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="383.1" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 2.27%)</title><rect x="396.2" y="979.0" width="26.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="399.2" y="990.0">_..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.45%)</title><rect x="423.0" y="979.0" width="5.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="426.0" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.45%)</title><rect x="428.4" y="979.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="431.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.45%)</title><rect x="433.7" y="1043.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="436.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.45%)</title><rect x="433.7" y="1027.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="436.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.45%)</title><rect x="433.7" y="1011.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.45%)</title><rect x="439.1" y="1043.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="442.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.45%)</title><rect x="439.1" y="1027.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="442.1" y="1038.0"></text>
</g>
<g>
<title>start_thread (139 samples, 63.18%)</title><rect x="444.5" y="1123.0" width="745.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="447.5" y="1134.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (139 samples, 63.18%)</title><rect x="444.5" y="1107.0" width="745.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="447.5" y="1118.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 5.00%)</title><rect x="444.5" y="1091.0" width="59.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="447.5" y="1102.0">GangWo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.45%)</title><rect x="444.5" y="1075.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="447.5" y="1086.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.45%)</title><rect x="444.5" y="1059.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="447.5" y="1070.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.45%)</title><rect x="444.5" y="1043.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="447.5" y="1054.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 4.55%)</title><rect x="449.8" y="1075.0" width="53.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="452.8" y="1086.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 4.09%)</title><rect x="449.8" y="1059.0" width="48.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="452.8" y="1070.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.82%)</title><rect x="449.8" y="1043.0" width="21.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="452.8" y="1054.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.91%)</title><rect x="455.2" y="1027.0" width="10.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="458.2" y="1038.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.45%)</title><rect x="460.5" y="1011.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="463.5" y="1022.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.45%)</title><rect x="460.5" y="995.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="463.5" y="1006.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_range_nv(oopDesc*, G1ParScanClosure*, int, int) (1 samples, 0.45%)</title><rect x="465.9" y="1027.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="468.9" y="1038.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.45%)</title><rect x="471.3" y="1043.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="474.3" y="1054.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.45%)</title><rect x="476.6" y="1043.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="479.6" y="1054.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.91%)</title><rect x="482.0" y="1043.0" width="10.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="485.0" y="1054.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.45%)</title><rect x="492.7" y="1043.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="495.7" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.45%)</title><rect x="498.1" y="1059.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="501.1" y="1070.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.45%)</title><rect x="498.1" y="1043.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="501.1" y="1054.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (128 samples, 58.18%)</title><rect x="503.5" y="1091.0" width="686.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="506.5" y="1102.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (128 samples, 58.18%)</title><rect x="503.5" y="1075.0" width="686.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="506.5" y="1086.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (128 samples, 58.18%)</title><rect x="503.5" y="1059.0" width="686.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="506.5" y="1070.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (125 samples, 56.82%)</title><rect x="503.5" y="1043.0" width="670.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="506.5" y="1054.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (125 samples, 56.82%)</title><rect x="503.5" y="1027.0" width="670.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="506.5" y="1038.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (65 samples, 29.55%)</title><rect x="503.5" y="1011.0" width="348.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="506.5" y="1022.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.45%)</title><rect x="503.5" y="995.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="506.5" y="1006.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.45%)</title><rect x="503.5" y="979.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="506.5" y="990.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.45%)</title><rect x="503.5" y="963.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="506.5" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.91%)</title><rect x="508.8" y="995.0" width="10.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="511.8" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.45%)</title><rect x="508.8" y="979.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="511.8" y="990.0"></text>
</g>
<g>
<title>MachSpillCopyNode::bottom_type() const (1 samples, 0.45%)</title><rect x="508.8" y="963.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="511.8" y="974.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.45%)</title><rect x="514.2" y="979.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="517.2" y="990.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 3.64%)</title><rect x="519.5" y="995.0" width="43.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="522.5" y="1006.0">Matc..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.45%)</title><rect x="519.5" y="979.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="522.5" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 2.73%)</title><rect x="524.9" y="979.0" width="32.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="527.9" y="990.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.91%)</title><rect x="541.0" y="963.0" width="10.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="544.0" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.45%)</title><rect x="551.7" y="963.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="554.7" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.45%)</title><rect x="551.7" y="947.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="554.7" y="958.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.45%)</title><rect x="551.7" y="931.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="554.7" y="942.0"></text>
</g>
<g>
<title>State::_sub_Op_StoreL(Node const*) (1 samples, 0.45%)</title><rect x="551.7" y="915.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="554.7" y="926.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.45%)</title><rect x="557.1" y="979.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="560.1" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.91%)</title><rect x="562.5" y="995.0" width="10.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="565.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.91%)</title><rect x="562.5" y="979.0" width="10.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="565.5" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.91%)</title><rect x="562.5" y="963.0" width="10.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="565.5" y="974.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.91%)</title><rect x="562.5" y="947.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="565.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (51 samples, 23.18%)</title><rect x="573.2" y="995.0" width="273.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="576.2" y="1006.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.45%)</title><rect x="573.2" y="979.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="576.2" y="990.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.45%)</title><rect x="578.5" y="979.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="581.5" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.45%)</title><rect x="583.9" y="979.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="586.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (7 samples, 3.18%)</title><rect x="589.3" y="979.0" width="37.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="592.3" y="990.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.45%)</title><rect x="605.4" y="963.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="608.4" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.45%)</title><rect x="610.7" y="963.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="613.7" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.91%)</title><rect x="616.1" y="963.0" width="10.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="619.1" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.45%)</title><rect x="621.5" y="947.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="624.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.45%)</title><rect x="626.8" y="979.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="629.8" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.45%)</title><rect x="626.8" y="963.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="629.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 3.18%)</title><rect x="632.2" y="979.0" width="37.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="635.2" y="990.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.45%)</title><rect x="664.4" y="963.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="667.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.45%)</title><rect x="664.4" y="947.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="667.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 5.00%)</title><rect x="669.7" y="979.0" width="59.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="672.7" y="990.0">PhaseC..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.36%)</title><rect x="696.5" y="963.0" width="16.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="699.5" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.91%)</title><rect x="701.9" y="947.0" width="10.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="704.9" y="958.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.45%)</title><rect x="712.6" y="963.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="715.6" y="974.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.45%)</title><rect x="718.0" y="963.0" width="5.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="721.0" y="974.0"></text>
</g>
<g>
<title>lower_pressure(LRG*, unsigned int, Block*, unsigned int*, unsigned int*) [clone .isra.134] (1 samples, 0.45%)</title><rect x="723.4" y="963.0" width="5.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="726.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.45%)</title><rect x="728.7" y="979.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="731.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.45%)</title><rect x="728.7" y="963.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="731.7" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.45%)</title><rect x="728.7" y="947.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="731.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.45%)</title><rect x="734.1" y="979.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="737.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.45%)</title><rect x="739.5" y="979.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="742.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (2 samples, 0.91%)</title><rect x="744.8" y="979.0" width="10.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="747.8" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.45%)</title><rect x="755.5" y="979.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="758.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.45%)</title><rect x="760.9" y="979.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="763.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.45%)</title><rect x="766.3" y="979.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="769.3" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.45%)</title><rect x="771.6" y="979.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="774.6" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.45%)</title><rect x="771.6" y="963.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="774.6" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 1.36%)</title><rect x="777.0" y="979.0" width="16.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="780.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.91%)</title><rect x="782.4" y="963.0" width="10.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="785.4" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 1.82%)</title><rect x="793.1" y="979.0" width="21.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="796.1" y="990.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.36%)</title><rect x="798.5" y="963.0" width="16.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="801.5" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 2.27%)</title><rect x="814.5" y="979.0" width="26.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="817.5" y="990.0">P..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.45%)</title><rect x="836.0" y="963.0" width="5.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="839.0" y="974.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.45%)</title><rect x="841.4" y="979.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="844.4" y="990.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.45%)</title><rect x="846.7" y="995.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="849.7" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 21.82%)</title><rect x="852.1" y="1011.0" width="257.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="855.1" y="1022.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.45%)</title><rect x="852.1" y="995.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="855.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.91%)</title><rect x="857.5" y="995.0" width="10.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="860.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.91%)</title><rect x="857.5" y="979.0" width="10.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="860.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ideal_graph(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.45%)</title><rect x="857.5" y="963.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="860.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ptr_compare(Node*) (1 samples, 0.45%)</title><rect x="857.5" y="947.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="860.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.45%)</title><rect x="862.8" y="963.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="865.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.45%)</title><rect x="862.8" y="947.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="865.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.45%)</title><rect x="862.8" y="931.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="865.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.45%)</title><rect x="862.8" y="915.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="865.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.45%)</title><rect x="862.8" y="899.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="865.8" y="910.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.45%)</title><rect x="862.8" y="883.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="865.8" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.45%)</title><rect x="868.2" y="995.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="871.2" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.91%)</title><rect x="873.5" y="995.0" width="10.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="876.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.91%)</title><rect x="873.5" y="979.0" width="10.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="876.5" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.45%)</title><rect x="873.5" y="963.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="876.5" y="974.0"></text>
</g>
<g>
<title>RegionNode::bottom_type() const (1 samples, 0.45%)</title><rect x="878.9" y="963.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="881.9" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (34 samples, 15.45%)</title><rect x="884.3" y="995.0" width="182.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="887.3" y="1006.0">PhaseIdealLoop::build_an..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.45%)</title><rect x="884.3" y="979.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="887.3" y="990.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.45%)</title><rect x="889.6" y="979.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="892.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.91%)</title><rect x="895.0" y="979.0" width="10.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="898.0" y="990.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.45%)</title><rect x="900.4" y="963.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.36%)</title><rect x="905.7" y="979.0" width="16.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="908.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.45%)</title><rect x="916.5" y="963.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="919.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 9.55%)</title><rect x="921.8" y="979.0" width="112.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="924.8" y="990.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 7.27%)</title><rect x="948.6" y="963.0" width="85.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="951.6" y="974.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 6.82%)</title><rect x="954.0" y="947.0" width="80.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="957.0" y="958.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (14 samples, 6.36%)</title><rect x="959.4" y="931.0" width="75.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.4" y="942.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 1.36%)</title><rect x="1034.5" y="979.0" width="16.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.45%)</title><rect x="1045.2" y="963.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1048.2" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.45%)</title><rect x="1050.5" y="979.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1053.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.45%)</title><rect x="1050.5" y="963.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.45%)</title><rect x="1050.5" y="947.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.5" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.45%)</title><rect x="1050.5" y="931.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1053.5" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.45%)</title><rect x="1055.9" y="979.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1058.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.45%)</title><rect x="1055.9" y="963.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1058.9" y="974.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.45%)</title><rect x="1055.9" y="947.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1058.9" y="958.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.45%)</title><rect x="1055.9" y="931.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.9" y="942.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.45%)</title><rect x="1061.3" y="979.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.3" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 3.64%)</title><rect x="1066.6" y="995.0" width="42.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.6" y="1006.0">Phas..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 3.18%)</title><rect x="1072.0" y="979.0" width="37.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.0" y="990.0">Pha..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.45%)</title><rect x="1072.0" y="963.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.0" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.45%)</title><rect x="1077.4" y="963.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.4" y="974.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.45%)</title><rect x="1077.4" y="947.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.4" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.45%)</title><rect x="1077.4" y="931.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.4" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.45%)</title><rect x="1082.7" y="963.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.7" y="974.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.45%)</title><rect x="1088.1" y="963.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.1" y="974.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 1.36%)</title><rect x="1093.5" y="963.0" width="16.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.91%)</title><rect x="1098.8" y="947.0" width="10.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.8" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="931.0" width="10.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.8" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="915.0" width="10.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.8" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="899.0" width="10.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.8" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="883.0" width="10.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.8" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="867.0" width="10.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.8" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="851.0" width="10.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.8" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="835.0" width="10.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.8" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="819.0" width="10.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.8" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="803.0" width="10.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.8" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="787.0" width="10.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.8" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="771.0" width="10.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.8" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="755.0" width="10.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.8" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="739.0" width="10.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.8" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="723.0" width="10.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.8" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="707.0" width="10.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.8" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="691.0" width="10.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.8" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="675.0" width="10.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.8" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.91%)</title><rect x="1098.8" y="659.0" width="10.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.8" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.45%)</title><rect x="1098.8" y="643.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.8" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.45%)</title><rect x="1098.8" y="627.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.8" y="638.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.45%)</title><rect x="1098.8" y="611.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.8" y="622.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.45%)</title><rect x="1098.8" y="595.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.8" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.45%)</title><rect x="1104.2" y="643.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.2" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.45%)</title><rect x="1104.2" y="627.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.2" y="638.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.45%)</title><rect x="1109.5" y="1011.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.5" y="1022.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.45%)</title><rect x="1109.5" y="995.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.5" y="1006.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.45%)</title><rect x="1109.5" y="979.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 4.55%)</title><rect x="1114.9" y="1011.0" width="53.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.9" y="1022.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 4.55%)</title><rect x="1114.9" y="995.0" width="53.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.9" y="1006.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 4.55%)</title><rect x="1114.9" y="979.0" width="53.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.9" y="990.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 4.55%)</title><rect x="1114.9" y="963.0" width="53.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.9" y="974.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 4.55%)</title><rect x="1114.9" y="947.0" width="53.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.9" y="958.0">Parse..</text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.45%)</title><rect x="1114.9" y="931.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.9" y="942.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.45%)</title><rect x="1114.9" y="915.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.9" y="926.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.45%)</title><rect x="1114.9" y="899.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 4.09%)</title><rect x="1120.3" y="931.0" width="48.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.3" y="942.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.45%)</title><rect x="1120.3" y="915.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.3" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.45%)</title><rect x="1120.3" y="899.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.3" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.45%)</title><rect x="1120.3" y="883.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.3" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.45%)</title><rect x="1120.3" y="867.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.3" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.45%)</title><rect x="1120.3" y="851.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.3" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.45%)</title><rect x="1120.3" y="835.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.3" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.45%)</title><rect x="1120.3" y="819.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.45%)</title><rect x="1120.3" y="803.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.3" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.45%)</title><rect x="1120.3" y="787.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.3" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.45%)</title><rect x="1120.3" y="771.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.3" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.45%)</title><rect x="1120.3" y="755.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.3" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.45%)</title><rect x="1120.3" y="739.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.3" y="750.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.45%)</title><rect x="1120.3" y="723.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.3" y="734.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.45%)</title><rect x="1120.3" y="707.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.18%)</title><rect x="1125.6" y="915.0" width="37.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.6" y="926.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.18%)</title><rect x="1125.6" y="899.0" width="37.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.6" y="910.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.18%)</title><rect x="1125.6" y="883.0" width="37.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.6" y="894.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.18%)</title><rect x="1125.6" y="867.0" width="37.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.6" y="878.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.18%)</title><rect x="1125.6" y="851.0" width="37.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.6" y="862.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.18%)</title><rect x="1125.6" y="835.0" width="37.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.6" y="846.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.18%)</title><rect x="1125.6" y="819.0" width="37.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.6" y="830.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.18%)</title><rect x="1125.6" y="803.0" width="37.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.6" y="814.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.18%)</title><rect x="1125.6" y="787.0" width="37.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.6" y="798.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.18%)</title><rect x="1125.6" y="771.0" width="37.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.6" y="782.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.18%)</title><rect x="1125.6" y="755.0" width="37.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.6" y="766.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.18%)</title><rect x="1125.6" y="739.0" width="37.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.6" y="750.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.18%)</title><rect x="1125.6" y="723.0" width="37.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.6" y="734.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.18%)</title><rect x="1125.6" y="707.0" width="37.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.6" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.18%)</title><rect x="1125.6" y="691.0" width="37.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.6" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.18%)</title><rect x="1125.6" y="675.0" width="37.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.6" y="686.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.18%)</title><rect x="1125.6" y="659.0" width="37.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.6" y="670.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.18%)</title><rect x="1125.6" y="643.0" width="37.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.6" y="654.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.45%)</title><rect x="1125.6" y="627.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.6" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.45%)</title><rect x="1125.6" y="611.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.6" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.45%)</title><rect x="1125.6" y="595.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.6" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.45%)</title><rect x="1125.6" y="579.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.6" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.45%)</title><rect x="1125.6" y="563.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.6" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.45%)</title><rect x="1125.6" y="547.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.6" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.45%)</title><rect x="1125.6" y="531.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.6" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.45%)</title><rect x="1125.6" y="515.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.6" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.45%)</title><rect x="1125.6" y="499.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.6" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.45%)</title><rect x="1125.6" y="483.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.6" y="494.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.45%)</title><rect x="1125.6" y="467.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.6" y="478.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.45%)</title><rect x="1125.6" y="451.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.27%)</title><rect x="1131.0" y="627.0" width="26.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.0" y="638.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.27%)</title><rect x="1131.0" y="611.0" width="26.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.0" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.27%)</title><rect x="1131.0" y="595.0" width="26.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.0" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.27%)</title><rect x="1131.0" y="579.0" width="26.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.0" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.27%)</title><rect x="1131.0" y="563.0" width="26.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.0" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.82%)</title><rect x="1131.0" y="547.0" width="21.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.0" y="558.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.45%)</title><rect x="1131.0" y="531.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.0" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.45%)</title><rect x="1131.0" y="515.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.0" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.45%)</title><rect x="1131.0" y="499.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.0" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.45%)</title><rect x="1131.0" y="483.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.0" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.45%)</title><rect x="1131.0" y="467.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.0" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.45%)</title><rect x="1131.0" y="451.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.0" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.45%)</title><rect x="1131.0" y="435.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.0" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.45%)</title><rect x="1131.0" y="419.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.0" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.45%)</title><rect x="1131.0" y="403.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.0" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.45%)</title><rect x="1131.0" y="387.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.0" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.45%)</title><rect x="1131.0" y="371.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.0" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.45%)</title><rect x="1131.0" y="355.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.0" y="366.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.45%)</title><rect x="1131.0" y="339.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.0" y="350.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.45%)</title><rect x="1131.0" y="323.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.0" y="334.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.45%)</title><rect x="1131.0" y="307.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.0" y="318.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.45%)</title><rect x="1131.0" y="291.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.0" y="302.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.45%)</title><rect x="1131.0" y="275.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.0" y="286.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.45%)</title><rect x="1131.0" y="259.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.0" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.91%)</title><rect x="1136.4" y="531.0" width="10.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.91%)</title><rect x="1136.4" y="515.0" width="10.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.91%)</title><rect x="1136.4" y="499.0" width="10.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.91%)</title><rect x="1136.4" y="483.0" width="10.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.91%)</title><rect x="1136.4" y="467.0" width="10.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1136.4" y="451.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1136.4" y="435.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1136.4" y="419.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1136.4" y="403.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1136.4" y="387.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1136.4" y="371.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.45%)</title><rect x="1136.4" y="355.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.4" y="366.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.45%)</title><rect x="1136.4" y="339.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.4" y="350.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.45%)</title><rect x="1136.4" y="323.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.4" y="334.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.45%)</title><rect x="1136.4" y="307.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.45%)</title><rect x="1141.7" y="451.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.7" y="462.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.45%)</title><rect x="1141.7" y="435.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.7" y="446.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.45%)</title><rect x="1141.7" y="419.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.7" y="430.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.45%)</title><rect x="1141.7" y="403.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.7" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1147.1" y="531.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1147.1" y="515.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1147.1" y="499.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1147.1" y="483.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1147.1" y="467.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1147.1" y="451.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1147.1" y="435.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.1" y="446.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1147.1" y="419.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.1" y="430.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.45%)</title><rect x="1147.1" y="403.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.1" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.45%)</title><rect x="1147.1" y="387.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.1" y="398.0"></text>
</g>
<g>
<title>ConPNode::Opcode() const (1 samples, 0.45%)</title><rect x="1147.1" y="371.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.45%)</title><rect x="1152.5" y="547.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="558.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.45%)</title><rect x="1152.5" y="531.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.5" y="542.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.45%)</title><rect x="1152.5" y="515.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="526.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.45%)</title><rect x="1152.5" y="499.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.5" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.45%)</title><rect x="1152.5" y="483.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.5" y="494.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.45%)</title><rect x="1152.5" y="467.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.5" y="478.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.45%)</title><rect x="1152.5" y="451.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.5" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1157.8" y="627.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1157.8" y="611.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1157.8" y="595.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1157.8" y="579.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1157.8" y="563.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1157.8" y="547.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1157.8" y="531.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1157.8" y="515.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1157.8" y="499.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1157.8" y="483.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1157.8" y="467.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1157.8" y="451.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1157.8" y="435.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1157.8" y="419.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1157.8" y="403.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1157.8" y="387.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1157.8" y="371.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1157.8" y="355.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1157.8" y="339.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1157.8" y="323.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1157.8" y="307.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1157.8" y="291.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1157.8" y="275.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1157.8" y="259.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1157.8" y="243.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1157.8" y="227.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1157.8" y="211.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1157.8" y="195.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1157.8" y="179.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1157.8" y="163.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.45%)</title><rect x="1157.8" y="147.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.45%)</title><rect x="1157.8" y="131.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.8" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.45%)</title><rect x="1157.8" y="115.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.8" y="126.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.45%)</title><rect x="1157.8" y="99.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.8" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.45%)</title><rect x="1157.8" y="83.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.8" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.45%)</title><rect x="1157.8" y="67.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.8" y="78.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.45%)</title><rect x="1157.8" y="51.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.8" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.45%)</title><rect x="1157.8" y="35.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1163.2" y="915.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.2" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1163.2" y="899.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1163.2" y="883.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1163.2" y="867.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1163.2" y="851.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1163.2" y="835.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1163.2" y="819.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1163.2" y="803.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1163.2" y="787.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1163.2" y="771.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1163.2" y="755.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1163.2" y="739.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1163.2" y="723.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1163.2" y="707.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1163.2" y="691.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1163.2" y="675.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1163.2" y="659.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1163.2" y="643.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.45%)</title><rect x="1163.2" y="627.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.45%)</title><rect x="1163.2" y="611.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="622.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.45%)</title><rect x="1163.2" y="595.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.2" y="606.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.45%)</title><rect x="1163.2" y="579.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="590.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.45%)</title><rect x="1163.2" y="563.0" width="5.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1166.2" y="574.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.45%)</title><rect x="1168.5" y="1011.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.5" y="1022.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.45%)</title><rect x="1168.5" y="995.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.5" y="1006.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.36%)</title><rect x="1173.9" y="1043.0" width="16.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.9" y="1054.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.36%)</title><rect x="1173.9" y="1027.0" width="16.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.36%)</title><rect x="1173.9" y="1011.0" width="16.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.36%)</title><rect x="1173.9" y="995.0" width="16.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="1006.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.45%)</title><rect x="1173.9" y="979.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="990.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.45%)</title><rect x="1173.9" y="963.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="974.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.45%)</title><rect x="1173.9" y="947.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.45%)</title><rect x="1173.9" y="931.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="942.0"></text>
</g>
<g>
<title>PhiSimplifier::PhiSimplifier(BlockBegin*) (1 samples, 0.45%)</title><rect x="1173.9" y="915.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.9" y="926.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.45%)</title><rect x="1173.9" y="899.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="910.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.45%)</title><rect x="1173.9" y="883.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="894.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.45%)</title><rect x="1173.9" y="867.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="878.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.45%)</title><rect x="1173.9" y="851.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="862.0"></text>
</g>
<g>
<title>Intrinsic::input_values_do(ValueVisitor*) (1 samples, 0.45%)</title><rect x="1173.9" y="835.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="846.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.91%)</title><rect x="1179.3" y="979.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.45%)</title><rect x="1179.3" y="963.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op2(LIR_Op2*) (1 samples, 0.45%)</title><rect x="1179.3" y="947.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="958.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.45%)</title><rect x="1184.6" y="963.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.6" y="974.0"></text>
</g>
<g>
<title>ImplicitNullCheckStub::emit_code(LIR_Assembler*) (1 samples, 0.45%)</title><rect x="1184.6" y="947.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="958.0"></text>
</g>
<g>
<title>ImplicitExceptionTable::append(unsigned int, unsigned int) (1 samples, 0.45%)</title><rect x="1184.6" y="931.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.6" y="942.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.45%)</title><rect x="1184.6" y="915.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="926.0"></text>
</g>
</g>
</svg>
