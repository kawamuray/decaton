<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1381"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1381"> </text>
<g id="frames">
<g>
<title>all (178 samples, 100.00%)</title><rect x="10.0" y="1347.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (31 samples, 17.42%)</title><rect x="10.0" y="1331.0" width="205.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (31 samples, 17.42%)</title><rect x="10.0" y="1315.0" width="205.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1326.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.56%)</title><rect x="10.0" y="1299.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (20 samples, 11.24%)</title><rect x="16.6" y="1299.0" width="132.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.6" y="1310.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/828474339.accept (19 samples, 10.67%)</title><rect x="23.3" y="1283.0" width="125.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.3" y="1294.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (18 samples, 10.11%)</title><rect x="29.9" y="1267.0" width="119.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.9" y="1278.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 7.30%)</title><rect x="29.9" y="1251.0" width="86.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.9" y="1262.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 7.30%)</title><rect x="29.9" y="1235.0" width="86.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.9" y="1246.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 7.30%)</title><rect x="29.9" y="1219.0" width="86.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="32.9" y="1230.0">com/lineco..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (12 samples, 6.74%)</title><rect x="29.9" y="1203.0" width="79.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.9" y="1214.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 6.74%)</title><rect x="29.9" y="1187.0" width="79.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.9" y="1198.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 6.74%)</title><rect x="29.9" y="1171.0" width="79.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.9" y="1182.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 6.18%)</title><rect x="29.9" y="1155.0" width="72.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.9" y="1166.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.56%)</title><rect x="29.9" y="1139.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.56%)</title><rect x="29.9" y="1123.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.56%)</title><rect x="29.9" y="1107.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 5.62%)</title><rect x="36.5" y="1139.0" width="66.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="39.5" y="1150.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 5.62%)</title><rect x="36.5" y="1123.0" width="66.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.5" y="1134.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 5.62%)</title><rect x="36.5" y="1107.0" width="66.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.5" y="1118.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 5.62%)</title><rect x="36.5" y="1091.0" width="66.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.5" y="1102.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (10 samples, 5.62%)</title><rect x="36.5" y="1075.0" width="66.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.5" y="1086.0">sun/mis..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.56%)</title><rect x="43.1" y="1059.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="46.1" y="1070.0"></text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 4.49%)</title><rect x="49.8" y="1059.0" width="53.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="52.8" y="1070.0">Unsaf..</text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 3.93%)</title><rect x="49.8" y="1043.0" width="46.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="52.8" y="1054.0">__pt..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.56%)</title><rect x="96.2" y="1043.0" width="6.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="99.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.56%)</title><rect x="102.8" y="1155.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.56%)</title><rect x="102.8" y="1139.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.56%)</title><rect x="102.8" y="1123.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="105.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.56%)</title><rect x="102.8" y="1107.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.8" y="1118.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.56%)</title><rect x="109.4" y="1203.0" width="6.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="112.4" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 2.81%)</title><rect x="116.1" y="1251.0" width="33.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="119.1" y="1262.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.81%)</title><rect x="116.1" y="1235.0" width="33.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.1" y="1246.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.12%)</title><rect x="129.3" y="1219.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.3" y="1230.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.56%)</title><rect x="142.6" y="1219.0" width="6.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="145.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.62%)</title><rect x="149.2" y="1299.0" width="66.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.2" y="1310.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.62%)</title><rect x="149.2" y="1283.0" width="66.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.2" y="1294.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.25%)</title><rect x="149.2" y="1267.0" width="26.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.2" y="1278.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.25%)</title><rect x="149.2" y="1251.0" width="26.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.2" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.25%)</title><rect x="149.2" y="1235.0" width="26.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="152.2" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.12%)</title><rect x="149.2" y="1219.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.12%)</title><rect x="149.2" y="1203.0" width="13.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="152.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.12%)</title><rect x="149.2" y="1187.0" width="13.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="152.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.56%)</title><rect x="149.2" y="1171.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.56%)</title><rect x="149.2" y="1155.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.56%)</title><rect x="149.2" y="1139.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.56%)</title><rect x="149.2" y="1123.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.56%)</title><rect x="149.2" y="1107.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.56%)</title><rect x="149.2" y="1091.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.56%)</title><rect x="149.2" y="1075.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="152.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.56%)</title><rect x="155.8" y="1171.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="158.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.56%)</title><rect x="155.8" y="1155.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 1.12%)</title><rect x="162.5" y="1219.0" width="13.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 1.12%)</title><rect x="162.5" y="1203.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.56%)</title><rect x="162.5" y="1187.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.56%)</title><rect x="162.5" y="1171.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="165.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.56%)</title><rect x="162.5" y="1155.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.56%)</title><rect x="162.5" y="1139.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="165.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.56%)</title><rect x="162.5" y="1123.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.56%)</title><rect x="162.5" y="1107.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.56%)</title><rect x="162.5" y="1091.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.5" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.56%)</title><rect x="162.5" y="1075.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="165.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.56%)</title><rect x="169.1" y="1187.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.56%)</title><rect x="169.1" y="1171.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="172.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.56%)</title><rect x="169.1" y="1155.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.56%)</title><rect x="169.1" y="1139.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="172.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.56%)</title><rect x="169.1" y="1123.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="172.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.12%)</title><rect x="175.7" y="1267.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.12%)</title><rect x="175.7" y="1251.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.56%)</title><rect x="175.7" y="1235.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.56%)</title><rect x="175.7" y="1219.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/359256075.accept (1 samples, 0.56%)</title><rect x="175.7" y="1203.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.56%)</title><rect x="175.7" y="1187.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.56%)</title><rect x="175.7" y="1171.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.56%)</title><rect x="175.7" y="1155.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.56%)</title><rect x="175.7" y="1139.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="178.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.56%)</title><rect x="182.4" y="1235.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.4" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.56%)</title><rect x="182.4" y="1219.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.56%)</title><rect x="182.4" y="1203.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.56%)</title><rect x="182.4" y="1187.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.4" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.56%)</title><rect x="182.4" y="1171.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.4" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.56%)</title><rect x="182.4" y="1155.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.56%)</title><rect x="182.4" y="1139.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.56%)</title><rect x="182.4" y="1123.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.56%)</title><rect x="182.4" y="1107.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.4" y="1118.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.56%)</title><rect x="182.4" y="1091.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.56%)</title><rect x="182.4" y="1075.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.56%)</title><rect x="182.4" y="1059.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchKind.access$000 (1 samples, 0.56%)</title><rect x="182.4" y="1043.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.4" y="1054.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.56%)</title><rect x="182.4" y="1027.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="185.4" y="1038.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.56%)</title><rect x="182.4" y="1011.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="185.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.69%)</title><rect x="189.0" y="1267.0" width="19.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.69%)</title><rect x="189.0" y="1251.0" width="19.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 1.69%)</title><rect x="189.0" y="1235.0" width="19.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="192.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 1.12%)</title><rect x="189.0" y="1219.0" width="13.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 1.12%)</title><rect x="189.0" y="1203.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 1.12%)</title><rect x="189.0" y="1187.0" width="13.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="192.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 1.12%)</title><rect x="189.0" y="1171.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="192.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 1.12%)</title><rect x="189.0" y="1155.0" width="13.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.56%)</title><rect x="189.0" y="1139.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.0" y="1150.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.56%)</title><rect x="189.0" y="1123.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="192.0" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.56%)</title><rect x="189.0" y="1107.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.56%)</title><rect x="195.6" y="1139.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.6" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.56%)</title><rect x="195.6" y="1123.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.6" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.56%)</title><rect x="195.6" y="1107.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.6" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.56%)</title><rect x="195.6" y="1091.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.56%)</title><rect x="195.6" y="1075.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/Bits.copyToArray (1 samples, 0.56%)</title><rect x="195.6" y="1059.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="198.6" y="1070.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.56%)</title><rect x="195.6" y="1043.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.6" y="1054.0"></text>
</g>
<g>
<title>acs_CopyRight (1 samples, 0.56%)</title><rect x="195.6" y="1027.0" width="6.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="198.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.56%)</title><rect x="202.2" y="1219.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.2" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.56%)</title><rect x="202.2" y="1203.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.2" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.56%)</title><rect x="202.2" y="1187.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.2" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.56%)</title><rect x="202.2" y="1171.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.56%)</title><rect x="208.9" y="1267.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.56%)</title><rect x="208.9" y="1251.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.56%)</title><rect x="208.9" y="1235.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="211.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.56%)</title><rect x="208.9" y="1219.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="211.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.56%)</title><rect x="208.9" y="1203.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.56%)</title><rect x="208.9" y="1187.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.56%)</title><rect x="208.9" y="1171.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.56%)</title><rect x="208.9" y="1155.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.56%)</title><rect x="208.9" y="1139.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.56%)</title><rect x="208.9" y="1123.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.56%)</title><rect x="208.9" y="1107.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.9" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.56%)</title><rect x="208.9" y="1091.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$229/949146752.apply (1 samples, 0.56%)</title><rect x="208.9" y="1075.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.56%)</title><rect x="208.9" y="1059.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.run (62 samples, 34.83%)</title><rect x="215.5" y="1331.0" width="411.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.5" y="1342.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (62 samples, 34.83%)</title><rect x="215.5" y="1315.0" width="411.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.5" y="1326.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (62 samples, 34.83%)</title><rect x="215.5" y="1299.0" width="411.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.5" y="1310.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1111488829.run (31 samples, 17.42%)</title><rect x="242.0" y="1283.0" width="205.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.0" y="1294.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (31 samples, 17.42%)</title><rect x="242.0" y="1267.0" width="205.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.0" y="1278.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (31 samples, 17.42%)</title><rect x="242.0" y="1251.0" width="205.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.0" y="1262.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="242.0" y="1235.0" width="6.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="245.0" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="248.7" y="1235.0" width="6.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="251.7" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="248.7" y="1219.0" width="6.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="251.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (28 samples, 15.73%)</title><rect x="255.3" y="1235.0" width="185.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.3" y="1246.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (2 samples, 1.12%)</title><rect x="268.5" y="1219.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.5" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (2 samples, 1.12%)</title><rect x="268.5" y="1203.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (2 samples, 1.12%)</title><rect x="268.5" y="1187.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (2 samples, 1.12%)</title><rect x="268.5" y="1171.0" width="13.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="271.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (2 samples, 1.12%)</title><rect x="268.5" y="1155.0" width="13.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (2 samples, 1.12%)</title><rect x="268.5" y="1139.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.56%)</title><rect x="268.5" y="1123.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.56%)</title><rect x="268.5" y="1107.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.56%)</title><rect x="268.5" y="1091.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 0.56%)</title><rect x="275.2" y="1123.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (1 samples, 0.56%)</title><rect x="275.2" y="1107.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.56%)</title><rect x="275.2" y="1091.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.56%)</title><rect x="275.2" y="1075.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.56%)</title><rect x="275.2" y="1059.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.56%)</title><rect x="275.2" y="1043.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.56%)</title><rect x="275.2" y="1027.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.56%)</title><rect x="275.2" y="1011.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.56%)</title><rect x="275.2" y="995.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.56%)</title><rect x="275.2" y="979.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.2" y="990.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.56%)</title><rect x="275.2" y="963.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.2" y="974.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.56%)</title><rect x="275.2" y="947.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (22 samples, 12.36%)</title><rect x="281.8" y="1219.0" width="145.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.8" y="1230.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 2.25%)</title><rect x="281.8" y="1203.0" width="26.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="1214.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.25%)</title><rect x="281.8" y="1187.0" width="26.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.8" y="1198.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.25%)</title><rect x="281.8" y="1171.0" width="26.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.8" y="1182.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.25%)</title><rect x="281.8" y="1155.0" width="26.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.8" y="1166.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.12%)</title><rect x="295.1" y="1139.0" width="13.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.1" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.12%)</title><rect x="295.1" y="1123.0" width="13.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.56%)</title><rect x="308.3" y="1203.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (9 samples, 5.06%)</title><rect x="314.9" y="1203.0" width="59.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.9" y="1214.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (9 samples, 5.06%)</title><rect x="314.9" y="1187.0" width="59.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.9" y="1198.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.25%)</title><rect x="314.9" y="1171.0" width="26.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="317.9" y="1182.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.25%)</title><rect x="314.9" y="1155.0" width="26.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.9" y="1166.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 2.25%)</title><rect x="314.9" y="1139.0" width="26.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.9" y="1150.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 2.25%)</title><rect x="314.9" y="1123.0" width="26.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.9" y="1134.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.69%)</title><rect x="321.6" y="1107.0" width="19.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.6" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.56%)</title><rect x="334.8" y="1091.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="337.8" y="1102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.56%)</title><rect x="334.8" y="1075.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="337.8" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.56%)</title><rect x="334.8" y="1059.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="337.8" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.56%)</title><rect x="334.8" y="1043.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="337.8" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.56%)</title><rect x="334.8" y="1027.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="337.8" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.56%)</title><rect x="334.8" y="1011.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="337.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 1.12%)</title><rect x="341.5" y="1171.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.56%)</title><rect x="348.1" y="1155.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="351.1" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.69%)</title><rect x="354.7" y="1171.0" width="19.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.7" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.69%)</title><rect x="354.7" y="1155.0" width="19.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="357.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.69%)</title><rect x="354.7" y="1139.0" width="19.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.12%)</title><rect x="361.3" y="1123.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.56%)</title><rect x="368.0" y="1107.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="371.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.56%)</title><rect x="368.0" y="1091.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="371.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 2.81%)</title><rect x="374.6" y="1203.0" width="33.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="377.6" y="1214.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 2.81%)</title><rect x="374.6" y="1187.0" width="33.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.6" y="1198.0">co..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.56%)</title><rect x="381.2" y="1171.0" width="6.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="384.2" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.56%)</title><rect x="381.2" y="1155.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="384.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/231573059.process (1 samples, 0.56%)</title><rect x="387.9" y="1171.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.56%)</title><rect x="387.9" y="1155.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.56%)</title><rect x="387.9" y="1139.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.56%)</title><rect x="387.9" y="1123.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.56%)</title><rect x="387.9" y="1107.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.56%)</title><rect x="394.5" y="1171.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="397.5" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.56%)</title><rect x="394.5" y="1155.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.56%)</title><rect x="401.1" y="1171.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.56%)</title><rect x="401.1" y="1155.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1033566789.linkToTargetMethod (1 samples, 0.56%)</title><rect x="407.8" y="1203.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.56%)</title><rect x="407.8" y="1187.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1765612916.get$Lambda (1 samples, 0.56%)</title><rect x="407.8" y="1171.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1765612916.&lt;init&gt; (1 samples, 0.56%)</title><rect x="407.8" y="1155.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="410.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.12%)</title><rect x="414.4" y="1203.0" width="13.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.12%)</title><rect x="414.4" y="1187.0" width="13.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.12%)</title><rect x="414.4" y="1171.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="417.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1765612916.accept (2 samples, 1.12%)</title><rect x="414.4" y="1155.0" width="13.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="417.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (2 samples, 1.12%)</title><rect x="414.4" y="1139.0" width="13.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="417.4" y="1150.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 1.12%)</title><rect x="414.4" y="1123.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.4" y="1134.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 1.12%)</title><rect x="414.4" y="1107.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.4" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="421.0" y="1091.0" width="6.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="424.0" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="421.0" y="1075.0" width="6.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="424.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.12%)</title><rect x="427.6" y="1219.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="430.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.12%)</title><rect x="427.6" y="1203.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="430.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.12%)</title><rect x="427.6" y="1187.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="430.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1874362208.accept (2 samples, 1.12%)</title><rect x="427.6" y="1171.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="430.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (2 samples, 1.12%)</title><rect x="427.6" y="1155.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="430.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1901378046.complete (2 samples, 1.12%)</title><rect x="427.6" y="1139.0" width="13.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="430.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (2 samples, 1.12%)</title><rect x="427.6" y="1123.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="430.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 1.12%)</title><rect x="427.6" y="1107.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="430.6" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 1.12%)</title><rect x="427.6" y="1091.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="430.6" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 1.12%)</title><rect x="427.6" y="1075.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="430.6" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 1.12%)</title><rect x="427.6" y="1059.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="430.6" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 1.12%)</title><rect x="427.6" y="1043.0" width="13.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="430.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.56%)</title><rect x="440.9" y="1235.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="443.9" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="440.9" y="1219.0" width="6.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="443.9" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="440.9" y="1203.0" width="6.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="443.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 1.69%)</title><rect x="447.5" y="1283.0" width="19.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="450.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.12%)</title><rect x="454.2" y="1267.0" width="13.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="457.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.56%)</title><rect x="454.2" y="1251.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.56%)</title><rect x="460.8" y="1251.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.56%)</title><rect x="460.8" y="1235.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="463.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (24 samples, 13.48%)</title><rect x="467.4" y="1283.0" width="159.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="470.4" y="1294.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (24 samples, 13.48%)</title><rect x="467.4" y="1267.0" width="159.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="470.4" y="1278.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (20 samples, 11.24%)</title><rect x="467.4" y="1251.0" width="132.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.4" y="1262.0">java/util/concur..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 1.69%)</title><rect x="467.4" y="1235.0" width="19.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (17 samples, 9.55%)</title><rect x="487.3" y="1235.0" width="112.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.3" y="1246.0">java/util/conc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (17 samples, 9.55%)</title><rect x="487.3" y="1219.0" width="112.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="490.3" y="1230.0">sun/misc/Unsaf..</text>
</g>
<g>
<title>Unsafe_Park (16 samples, 8.99%)</title><rect x="493.9" y="1203.0" width="106.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="496.9" y="1214.0">Unsafe_Park</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.56%)</title><rect x="493.9" y="1187.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="496.9" y="1198.0"></text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.56%)</title><rect x="500.6" y="1187.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="503.6" y="1198.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.56%)</title><rect x="507.2" y="1187.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="510.2" y="1198.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.12%)</title><rect x="513.8" y="1187.0" width="13.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="516.8" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.69%)</title><rect x="527.1" y="1187.0" width="19.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="530.1" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_wait (8 samples, 4.49%)</title><rect x="547.0" y="1187.0" width="53.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="550.0" y="1198.0">__pth..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 2.25%)</title><rect x="600.0" y="1251.0" width="26.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="603.0" y="1262.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 2.25%)</title><rect x="600.0" y="1235.0" width="26.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="603.0" y="1246.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 2.25%)</title><rect x="600.0" y="1219.0" width="26.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.0" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 2.25%)</title><rect x="600.0" y="1203.0" width="26.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.0" y="1214.0">j..</text>
</g>
<g>
<title>start_thread (85 samples, 47.75%)</title><rect x="626.5" y="1331.0" width="563.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="629.5" y="1342.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (85 samples, 47.75%)</title><rect x="626.5" y="1315.0" width="563.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="629.5" y="1326.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 6.18%)</title><rect x="626.5" y="1299.0" width="72.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="629.5" y="1310.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (11 samples, 6.18%)</title><rect x="626.5" y="1283.0" width="72.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="629.5" y="1294.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 5.62%)</title><rect x="626.5" y="1267.0" width="66.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="629.5" y="1278.0">G1ParEv..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.69%)</title><rect x="646.4" y="1251.0" width="19.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="649.4" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.12%)</title><rect x="653.0" y="1235.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="656.0" y="1246.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.12%)</title><rect x="666.3" y="1251.0" width="13.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="669.3" y="1262.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.12%)</title><rect x="679.6" y="1251.0" width="13.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="682.6" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.56%)</title><rect x="692.8" y="1267.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="695.8" y="1278.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.56%)</title><rect x="692.8" y="1251.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="695.8" y="1262.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.56%)</title><rect x="692.8" y="1235.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="695.8" y="1246.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.56%)</title><rect x="692.8" y="1219.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="695.8" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.56%)</title><rect x="692.8" y="1203.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="695.8" y="1214.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (74 samples, 41.57%)</title><rect x="699.4" y="1299.0" width="490.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="702.4" y="1310.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (74 samples, 41.57%)</title><rect x="699.4" y="1283.0" width="490.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="702.4" y="1294.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (73 samples, 41.01%)</title><rect x="699.4" y="1267.0" width="484.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="702.4" y="1278.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (69 samples, 38.76%)</title><rect x="699.4" y="1251.0" width="457.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="702.4" y="1262.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (69 samples, 38.76%)</title><rect x="699.4" y="1235.0" width="457.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="702.4" y="1246.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, boo..</text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 21.91%)</title><rect x="699.4" y="1219.0" width="258.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="702.4" y="1230.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.69%)</title><rect x="699.4" y="1203.0" width="19.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="702.4" y="1214.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.56%)</title><rect x="699.4" y="1187.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="702.4" y="1198.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 1.12%)</title><rect x="706.1" y="1187.0" width="13.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="709.1" y="1198.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 1.12%)</title><rect x="706.1" y="1171.0" width="13.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="709.1" y="1182.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.56%)</title><rect x="712.7" y="1155.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="715.7" y="1166.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.56%)</title><rect x="712.7" y="1139.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="715.7" y="1150.0"></text>
</g>
<g>
<title>MacroAssembler::call(AddressLiteral) (1 samples, 0.56%)</title><rect x="712.7" y="1123.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="715.7" y="1134.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.69%)</title><rect x="719.3" y="1203.0" width="19.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="722.3" y="1214.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 1.12%)</title><rect x="719.3" y="1187.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="722.3" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 1.12%)</title><rect x="719.3" y="1171.0" width="13.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="722.3" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (2 samples, 1.12%)</title><rect x="719.3" y="1155.0" width="13.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="722.3" y="1166.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.56%)</title><rect x="732.6" y="1187.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="735.6" y="1198.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.12%)</title><rect x="739.2" y="1203.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="742.2" y="1214.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.56%)</title><rect x="739.2" y="1187.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="742.2" y="1198.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.56%)</title><rect x="745.8" y="1187.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="748.8" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.69%)</title><rect x="752.5" y="1203.0" width="19.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="755.5" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.69%)</title><rect x="752.5" y="1187.0" width="19.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="755.5" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.56%)</title><rect x="759.1" y="1171.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="762.1" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.56%)</title><rect x="759.1" y="1155.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="762.1" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.56%)</title><rect x="765.7" y="1171.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="768.7" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::needed_for_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.56%)</title><rect x="765.7" y="1155.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="768.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.56%)</title><rect x="765.7" y="1139.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="768.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 15.73%)</title><rect x="772.4" y="1203.0" width="185.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="775.4" y="1214.0">PhaseChaitin::Register_A..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.12%)</title><rect x="772.4" y="1187.0" width="13.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="775.4" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.12%)</title><rect x="772.4" y="1171.0" width="13.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="775.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.56%)</title><rect x="785.6" y="1187.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="788.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.56%)</title><rect x="785.6" y="1171.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="788.6" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="785.6" y="1155.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="788.6" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.69%)</title><rect x="792.2" y="1187.0" width="19.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="795.2" y="1198.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.56%)</title><rect x="805.5" y="1171.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="808.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 4.49%)</title><rect x="812.1" y="1187.0" width="53.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="815.1" y="1198.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="832.0" y="1171.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="835.0" y="1182.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 1.12%)</title><rect x="838.7" y="1171.0" width="13.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="841.7" y="1182.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.56%)</title><rect x="845.3" y="1155.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="848.3" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.12%)</title><rect x="851.9" y="1171.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="854.9" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.56%)</title><rect x="865.2" y="1187.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.2" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.12%)</title><rect x="871.8" y="1187.0" width="13.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="874.8" y="1198.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.56%)</title><rect x="878.4" y="1171.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="881.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.69%)</title><rect x="885.1" y="1187.0" width="19.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.1" y="1198.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.56%)</title><rect x="891.7" y="1171.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="894.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.56%)</title><rect x="898.3" y="1171.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.3" y="1182.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 2.25%)</title><rect x="904.9" y="1187.0" width="26.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="907.9" y="1198.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 1.12%)</title><rect x="904.9" y="1171.0" width="13.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="907.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.56%)</title><rect x="911.6" y="1155.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.6" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.12%)</title><rect x="918.2" y="1171.0" width="13.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="921.2" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 1.12%)</title><rect x="918.2" y="1155.0" width="13.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="921.2" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 1.12%)</title><rect x="918.2" y="1139.0" width="13.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="921.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.56%)</title><rect x="931.5" y="1187.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.5" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="931.5" y="1171.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.5" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.69%)</title><rect x="938.1" y="1187.0" width="19.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="941.1" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.56%)</title><rect x="951.3" y="1171.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="954.3" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 11.24%)</title><rect x="958.0" y="1219.0" width="132.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="961.0" y="1230.0">Compile::Optimiz..</text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.56%)</title><rect x="958.0" y="1203.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="961.0" y="1214.0"></text>
</g>
<g>
<title>CastPPNode::Opcode() const (1 samples, 0.56%)</title><rect x="964.6" y="1203.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="967.6" y="1214.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.56%)</title><rect x="971.2" y="1203.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="974.2" y="1214.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.56%)</title><rect x="971.2" y="1187.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.2" y="1198.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.56%)</title><rect x="971.2" y="1171.0" width="6.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="974.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 6.18%)</title><rect x="977.9" y="1203.0" width="72.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="980.9" y="1214.0">PhaseIde..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.56%)</title><rect x="977.9" y="1187.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.56%)</title><rect x="984.5" y="1187.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.5" y="1198.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.56%)</title><rect x="984.5" y="1171.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.12%)</title><rect x="991.1" y="1187.0" width="13.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="994.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.56%)</title><rect x="997.8" y="1171.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 2.81%)</title><rect x="1004.4" y="1187.0" width="33.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1007.4" y="1198.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.69%)</title><rect x="1017.6" y="1171.0" width="19.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1020.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.69%)</title><rect x="1017.6" y="1155.0" width="19.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1020.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.56%)</title><rect x="1017.6" y="1139.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1020.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.12%)</title><rect x="1024.3" y="1139.0" width="13.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1027.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.56%)</title><rect x="1037.5" y="1187.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.56%)</title><rect x="1044.2" y="1187.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.56%)</title><rect x="1044.2" y="1171.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.2" y="1182.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.56%)</title><rect x="1044.2" y="1155.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1047.2" y="1166.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.56%)</title><rect x="1044.2" y="1139.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1047.2" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.56%)</title><rect x="1044.2" y="1123.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.2" y="1134.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.56%)</title><rect x="1044.2" y="1107.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.81%)</title><rect x="1050.8" y="1203.0" width="33.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1053.8" y="1214.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.81%)</title><rect x="1050.8" y="1187.0" width="33.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1053.8" y="1198.0">Ph..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 1.12%)</title><rect x="1050.8" y="1171.0" width="13.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.8" y="1182.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1050.8" y="1155.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1053.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.56%)</title><rect x="1057.4" y="1155.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.4" y="1166.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.56%)</title><rect x="1064.0" y="1171.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.0" y="1182.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.56%)</title><rect x="1064.0" y="1155.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.0" y="1166.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.56%)</title><rect x="1070.7" y="1171.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.7" y="1182.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1077.3" y="1171.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.3" y="1182.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.56%)</title><rect x="1077.3" y="1155.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.3" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.56%)</title><rect x="1083.9" y="1203.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.56%)</title><rect x="1083.9" y="1187.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.56%)</title><rect x="1083.9" y="1171.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1086.9" y="1182.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.56%)</title><rect x="1083.9" y="1155.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1086.9" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 5.62%)</title><rect x="1090.6" y="1219.0" width="66.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.6" y="1230.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 5.62%)</title><rect x="1090.6" y="1203.0" width="66.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.6" y="1214.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 5.62%)</title><rect x="1090.6" y="1187.0" width="66.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.6" y="1198.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 5.62%)</title><rect x="1090.6" y="1171.0" width="66.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.6" y="1182.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 5.62%)</title><rect x="1090.6" y="1155.0" width="66.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.6" y="1166.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (10 samples, 5.62%)</title><rect x="1090.6" y="1139.0" width="66.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.6" y="1150.0">Parse::..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 4.49%)</title><rect x="1097.2" y="1123.0" width="53.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1100.2" y="1134.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 4.49%)</title><rect x="1097.2" y="1107.0" width="53.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.2" y="1118.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 4.49%)</title><rect x="1097.2" y="1091.0" width="53.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1100.2" y="1102.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 4.49%)</title><rect x="1097.2" y="1075.0" width="53.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1100.2" y="1086.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 4.49%)</title><rect x="1097.2" y="1059.0" width="53.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.2" y="1070.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.93%)</title><rect x="1097.2" y="1043.0" width="46.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.2" y="1054.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.37%)</title><rect x="1097.2" y="1027.0" width="39.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1100.2" y="1038.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.37%)</title><rect x="1097.2" y="1011.0" width="39.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.2" y="1022.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.37%)</title><rect x="1097.2" y="995.0" width="39.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.2" y="1006.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.37%)</title><rect x="1097.2" y="979.0" width="39.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.2" y="990.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.37%)</title><rect x="1097.2" y="963.0" width="39.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1100.2" y="974.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.81%)</title><rect x="1097.2" y="947.0" width="33.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1100.2" y="958.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.81%)</title><rect x="1097.2" y="931.0" width="33.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.2" y="942.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.81%)</title><rect x="1097.2" y="915.0" width="33.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1100.2" y="926.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.81%)</title><rect x="1097.2" y="899.0" width="33.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.2" y="910.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.81%)</title><rect x="1097.2" y="883.0" width="33.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.2" y="894.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.81%)</title><rect x="1097.2" y="867.0" width="33.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1100.2" y="878.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.81%)</title><rect x="1097.2" y="851.0" width="33.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1100.2" y="862.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.81%)</title><rect x="1097.2" y="835.0" width="33.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1100.2" y="846.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.81%)</title><rect x="1097.2" y="819.0" width="33.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.2" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.81%)</title><rect x="1097.2" y="803.0" width="33.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.2" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.81%)</title><rect x="1097.2" y="787.0" width="33.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1100.2" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.81%)</title><rect x="1097.2" y="771.0" width="33.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1100.2" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.81%)</title><rect x="1097.2" y="755.0" width="33.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1100.2" y="766.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.69%)</title><rect x="1097.2" y="739.0" width="19.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.2" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.69%)</title><rect x="1097.2" y="723.0" width="19.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.69%)</title><rect x="1097.2" y="707.0" width="19.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.69%)</title><rect x="1097.2" y="691.0" width="19.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1100.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.69%)</title><rect x="1097.2" y="675.0" width="19.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.2" y="686.0"></text>
</g>
<g>
<title>GraphKit::round_double_result(ciMethod*) (1 samples, 0.56%)</title><rect x="1097.2" y="659.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1103.8" y="659.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.8" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1103.8" y="643.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1103.8" y="627.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1103.8" y="611.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1103.8" y="595.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1103.8" y="579.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1103.8" y="563.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1103.8" y="547.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1103.8" y="531.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1103.8" y="515.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1103.8" y="499.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1103.8" y="483.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1103.8" y="467.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1103.8" y="451.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1103.8" y="435.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1103.8" y="419.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1103.8" y="403.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1103.8" y="387.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1103.8" y="371.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1103.8" y="355.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1103.8" y="339.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1103.8" y="323.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1103.8" y="307.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1103.8" y="291.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1103.8" y="275.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1103.8" y="259.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1103.8" y="243.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.8" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1103.8" y="227.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1103.8" y="211.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1103.8" y="195.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1103.8" y="179.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1103.8" y="163.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.8" y="174.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1103.8" y="147.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.8" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.56%)</title><rect x="1103.8" y="131.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.8" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_getClass() (1 samples, 0.56%)</title><rect x="1103.8" y="115.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.8" y="126.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.56%)</title><rect x="1103.8" y="99.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.8" y="110.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.56%)</title><rect x="1103.8" y="83.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.56%)</title><rect x="1103.8" y="67.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.8" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.56%)</title><rect x="1103.8" y="51.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.8" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.56%)</title><rect x="1103.8" y="35.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.8" y="46.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.56%)</title><rect x="1110.4" y="659.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.4" y="670.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.56%)</title><rect x="1110.4" y="643.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.4" y="654.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.56%)</title><rect x="1110.4" y="627.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.4" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.56%)</title><rect x="1110.4" y="611.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.4" y="622.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1110.4" y="595.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.4" y="606.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1110.4" y="579.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.4" y="590.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.56%)</title><rect x="1110.4" y="563.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.4" y="574.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.56%)</title><rect x="1110.4" y="547.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.4" y="558.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.56%)</title><rect x="1110.4" y="531.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.4" y="542.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.56%)</title><rect x="1110.4" y="515.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.4" y="526.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.56%)</title><rect x="1110.4" y="499.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.4" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1117.1" y="739.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1117.1" y="723.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.1" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1117.1" y="707.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1117.1" y="691.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1117.1" y="675.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1117.1" y="659.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1117.1" y="643.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1117.1" y="627.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1117.1" y="611.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1117.1" y="595.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1117.1" y="579.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1117.1" y="563.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1117.1" y="547.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1117.1" y="531.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1117.1" y="515.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1117.1" y="499.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1117.1" y="483.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.1" y="494.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.56%)</title><rect x="1123.7" y="739.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.56%)</title><rect x="1130.3" y="947.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.56%)</title><rect x="1130.3" y="931.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.3" y="942.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.56%)</title><rect x="1130.3" y="915.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.3" y="926.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.56%)</title><rect x="1130.3" y="899.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.3" y="910.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.56%)</title><rect x="1130.3" y="883.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.3" y="894.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.56%)</title><rect x="1130.3" y="867.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.3" y="878.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.56%)</title><rect x="1130.3" y="851.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.3" y="862.0"></text>
</g>
<g>
<title>IdealKit::delay_transform(Node*) (1 samples, 0.56%)</title><rect x="1130.3" y="835.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.3" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1137.0" y="1027.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.0" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1137.0" y="1011.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.0" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1137.0" y="995.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.0" y="1006.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.56%)</title><rect x="1137.0" y="979.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.0" y="990.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.56%)</title><rect x="1143.6" y="1043.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.6" y="1054.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.56%)</title><rect x="1143.6" y="1027.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.6" y="1038.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.56%)</title><rect x="1150.2" y="1123.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.2" y="1134.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 2.25%)</title><rect x="1156.9" y="1251.0" width="26.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.9" y="1262.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 2.25%)</title><rect x="1156.9" y="1235.0" width="26.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.9" y="1246.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 2.25%)</title><rect x="1156.9" y="1219.0" width="26.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.9" y="1230.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 2.25%)</title><rect x="1156.9" y="1203.0" width="26.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.9" y="1214.0">C..</text>
</g>
<g>
<title>Compilation::emit_code_body() (3 samples, 1.69%)</title><rect x="1156.9" y="1187.0" width="19.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.9" y="1198.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (3 samples, 1.69%)</title><rect x="1156.9" y="1171.0" width="19.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.9" y="1182.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.56%)</title><rect x="1156.9" y="1155.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.9" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.56%)</title><rect x="1156.9" y="1139.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.9" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.56%)</title><rect x="1156.9" y="1123.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.9" y="1134.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.56%)</title><rect x="1156.9" y="1107.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.9" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::logic_op(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*) (1 samples, 0.56%)</title><rect x="1163.5" y="1155.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.5" y="1166.0"></text>
</g>
<g>
<title>Assembler::andl(RegisterImpl*, int) (1 samples, 0.56%)</title><rect x="1163.5" y="1139.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.5" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.56%)</title><rect x="1170.1" y="1155.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.56%)</title><rect x="1170.1" y="1139.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.1" y="1150.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.56%)</title><rect x="1176.7" y="1187.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1198.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.56%)</title><rect x="1176.7" y="1171.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="1182.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.56%)</title><rect x="1176.7" y="1155.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="1166.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.56%)</title><rect x="1176.7" y="1139.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="1150.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.56%)</title><rect x="1176.7" y="1123.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="1134.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.56%)</title><rect x="1176.7" y="1107.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="1118.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.56%)</title><rect x="1183.4" y="1267.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="1278.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.56%)</title><rect x="1183.4" y="1251.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.4" y="1262.0"></text>
</g>
</g>
</svg>
