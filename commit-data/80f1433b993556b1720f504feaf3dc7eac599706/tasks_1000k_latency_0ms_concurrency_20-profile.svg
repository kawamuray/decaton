<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1381"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1381"> </text>
<g id="frames">
<g>
<title>all (1,225 samples, 100.00%)</title><rect x="10.0" y="1347.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="11.0" y="1331.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.0" y="1342.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="11.0" y="1315.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (223 samples, 18.20%)</title><rect x="11.9" y="1331.0" width="214.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.9" y="1342.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.16%)</title><rect x="11.9" y="1315.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.9" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.08%)</title><rect x="11.9" y="1299.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.08%)</title><rect x="11.9" y="1283.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.08%)</title><rect x="11.9" y="1267.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.08%)</title><rect x="11.9" y="1251.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.08%)</title><rect x="11.9" y="1235.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.compose (1 samples, 0.08%)</title><rect x="11.9" y="1219.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.9" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="12.9" y="1299.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (221 samples, 18.04%)</title><rect x="13.9" y="1315.0" width="212.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.9" y="1326.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.16%)</title><rect x="14.8" y="1299.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.16%)</title><rect x="14.8" y="1283.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.8" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1588348470.accept (2 samples, 0.16%)</title><rect x="14.8" y="1267.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.16%)</title><rect x="14.8" y="1251.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.8" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.08%)</title><rect x="14.8" y="1235.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.08%)</title><rect x="15.8" y="1235.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.08%)</title><rect x="15.8" y="1219.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.33%)</title><rect x="16.7" y="1299.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.7" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.33%)</title><rect x="16.7" y="1283.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.33%)</title><rect x="16.7" y="1267.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.7" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.33%)</title><rect x="16.7" y="1251.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.33%)</title><rect x="16.7" y="1235.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.7" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.24%)</title><rect x="16.7" y="1219.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="16.7" y="1203.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.7" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="16.7" y="1187.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="16.7" y="1171.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/813546890.test (1 samples, 0.08%)</title><rect x="16.7" y="1155.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="1166.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="17.7" y="1155.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="20.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.08%)</title><rect x="18.7" y="1203.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="18.7" y="1187.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="18.7" y="1171.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="18.7" y="1155.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="19.6" y="1219.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="19.6" y="1203.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="19.6" y="1187.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.16%)</title><rect x="20.6" y="1299.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.6" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.16%)</title><rect x="20.6" y="1283.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.6" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="20.6" y="1267.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.6" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="20.6" y="1251.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.6" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="20.6" y="1235.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.6" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="20.6" y="1219.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="20.6" y="1203.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.6" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="20.6" y="1187.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="21.6" y="1171.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.6" y="1182.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="21.6" y="1155.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="24.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (160 samples, 13.06%)</title><rect x="22.5" y="1299.0" width="154.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.5" y="1310.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1153836912.accept (152 samples, 12.41%)</title><rect x="22.5" y="1283.0" width="146.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.5" y="1294.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (152 samples, 12.41%)</title><rect x="22.5" y="1267.0" width="146.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.5" y="1278.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (117 samples, 9.55%)</title><rect x="23.5" y="1251.0" width="112.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.5" y="1262.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (117 samples, 9.55%)</title><rect x="23.5" y="1235.0" width="112.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.5" y="1246.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (117 samples, 9.55%)</title><rect x="23.5" y="1219.0" width="112.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.5" y="1230.0">com/linecorp/d..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (117 samples, 9.55%)</title><rect x="23.5" y="1203.0" width="112.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.5" y="1214.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (117 samples, 9.55%)</title><rect x="23.5" y="1187.0" width="112.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.5" y="1198.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (117 samples, 9.55%)</title><rect x="23.5" y="1171.0" width="112.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.5" y="1182.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (79 samples, 6.45%)</title><rect x="55.3" y="1155.0" width="76.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.3" y="1166.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (15 samples, 1.22%)</title><rect x="60.1" y="1139.0" width="14.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (15 samples, 1.22%)</title><rect x="60.1" y="1123.0" width="14.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 1.22%)</title><rect x="60.1" y="1107.0" width="14.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (59 samples, 4.82%)</title><rect x="74.5" y="1139.0" width="56.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.5" y="1150.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (59 samples, 4.82%)</title><rect x="74.5" y="1123.0" width="56.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="77.5" y="1134.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (59 samples, 4.82%)</title><rect x="74.5" y="1107.0" width="56.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.5" y="1118.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (59 samples, 4.82%)</title><rect x="74.5" y="1091.0" width="56.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="77.5" y="1102.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (58 samples, 4.73%)</title><rect x="75.5" y="1075.0" width="55.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.5" y="1086.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (54 samples, 4.41%)</title><rect x="75.5" y="1059.0" width="52.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="78.5" y="1070.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="77.4" y="1043.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="80.4" y="1054.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.24%)</title><rect x="78.4" y="1043.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="81.4" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_signal (34 samples, 2.78%)</title><rect x="81.3" y="1043.0" width="32.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="84.3" y="1054.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="114.0" y="1043.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="117.0" y="1054.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.06%)</title><rect x="115.0" y="1043.0" width="12.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="118.0" y="1054.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.16%)</title><rect x="127.5" y="1059.0" width="1.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="130.5" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="129.4" y="1059.0" width="2.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="132.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="131.4" y="1155.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="134.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.08%)</title><rect x="131.4" y="1139.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.08%)</title><rect x="131.4" y="1123.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.08%)</title><rect x="131.4" y="1107.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.24%)</title><rect x="132.3" y="1155.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="135.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.24%)</title><rect x="132.3" y="1139.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="135.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.24%)</title><rect x="132.3" y="1123.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="135.2" y="1155.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="138.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="135.2" y="1139.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="138.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="135.2" y="1123.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="135.2" y="1107.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="138.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.08%)</title><rect x="136.2" y="1251.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.08%)</title><rect x="136.2" y="1235.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.2" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.24%)</title><rect x="137.2" y="1251.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="140.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.24%)</title><rect x="137.2" y="1235.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="140.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="137.2" y="1219.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="140.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 2.29%)</title><rect x="140.0" y="1251.0" width="27.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.0" y="1262.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 2.29%)</title><rect x="140.0" y="1235.0" width="27.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.0" y="1246.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 1.06%)</title><rect x="153.5" y="1219.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="156.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.57%)</title><rect x="159.3" y="1203.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="162.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.57%)</title><rect x="159.3" y="1187.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="162.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.57%)</title><rect x="159.3" y="1171.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.3" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="163.2" y="1155.0" width="2.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="166.2" y="1166.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="166.0" y="1219.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="169.0" y="1230.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="167.0" y="1251.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="170.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.65%)</title><rect x="168.9" y="1283.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="171.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (8 samples, 0.65%)</title><rect x="168.9" y="1267.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.65%)</title><rect x="168.9" y="1251.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="171.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.65%)</title><rect x="168.9" y="1235.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.9" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (5 samples, 0.41%)</title><rect x="171.8" y="1219.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 4.24%)</title><rect x="176.6" y="1299.0" width="50.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.6" y="1310.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 4.16%)</title><rect x="176.6" y="1283.0" width="49.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.6" y="1294.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (29 samples, 2.37%)</title><rect x="177.6" y="1267.0" width="27.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="180.6" y="1278.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (29 samples, 2.37%)</title><rect x="177.6" y="1251.0" width="27.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="180.6" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (29 samples, 2.37%)</title><rect x="177.6" y="1235.0" width="27.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="180.6" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (24 samples, 1.96%)</title><rect x="177.6" y="1219.0" width="23.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="180.6" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (24 samples, 1.96%)</title><rect x="177.6" y="1203.0" width="23.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="180.6" y="1214.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.08%)</title><rect x="178.6" y="1187.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.6" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="178.6" y="1171.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="181.6" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.08%)</title><rect x="178.6" y="1155.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="181.6" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.08%)</title><rect x="178.6" y="1139.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.6" y="1150.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="178.6" y="1123.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="181.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (8 samples, 0.65%)</title><rect x="179.5" y="1187.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="182.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.08%)</title><rect x="185.3" y="1171.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="188.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.08%)</title><rect x="185.3" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.08%)</title><rect x="185.3" y="1139.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="188.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.08%)</title><rect x="185.3" y="1123.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="188.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.08%)</title><rect x="185.3" y="1107.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="188.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.08%)</title><rect x="185.3" y="1091.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.08%)</title><rect x="185.3" y="1075.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="186.3" y="1171.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="189.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="186.3" y="1155.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.08%)</title><rect x="186.3" y="1139.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.08%)</title><rect x="186.3" y="1123.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readVarint (1 samples, 0.08%)</title><rect x="186.3" y="1107.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readUnsignedVarint (1 samples, 0.08%)</title><rect x="186.3" y="1091.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.3" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.08%)</title><rect x="186.3" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="186.3" y="1059.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="189.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.14%)</title><rect x="187.2" y="1187.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="187.2" y="1171.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (13 samples, 1.06%)</title><rect x="188.2" y="1171.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="191.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.57%)</title><rect x="189.2" y="1155.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="192.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.57%)</title><rect x="189.2" y="1139.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="192.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.08%)</title><rect x="194.9" y="1123.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 0.41%)</title><rect x="195.9" y="1155.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.9" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.24%)</title><rect x="197.8" y="1139.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.8" y="1150.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="199.8" y="1123.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="202.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="200.7" y="1219.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="203.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="200.7" y="1203.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="200.7" y="1187.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="200.7" y="1171.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="203.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="200.7" y="1155.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="203.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="200.7" y="1139.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.24%)</title><rect x="201.7" y="1219.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.24%)</title><rect x="201.7" y="1203.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="201.7" y="1187.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="201.7" y="1171.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.7" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="201.7" y="1155.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="204.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="202.7" y="1187.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="202.7" y="1171.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="202.7" y="1155.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="202.7" y="1139.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="203.6" y="1139.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="203.6" y="1123.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.08%)</title><rect x="203.6" y="1107.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="206.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.08%)</title><rect x="204.6" y="1219.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.65%)</title><rect x="205.5" y="1267.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.41%)</title><rect x="205.5" y="1251.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.41%)</title><rect x="205.5" y="1235.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="206.5" y="1219.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="206.5" y="1203.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="206.5" y="1187.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="206.5" y="1171.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="209.5" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="206.5" y="1155.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.5" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="206.5" y="1139.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="209.5" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="206.5" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="206.5" y="1107.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$236/1450750555.get (1 samples, 0.08%)</title><rect x="206.5" y="1091.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="209.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.16%)</title><rect x="207.5" y="1219.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.5" y="1230.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.16%)</title><rect x="207.5" y="1203.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.5" y="1214.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="208.4" y="1187.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="208.4" y="1171.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.4" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="208.4" y="1155.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="208.4" y="1139.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.08%)</title><rect x="208.4" y="1123.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="209.4" y="1219.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="209.4" y="1203.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="212.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="209.4" y="1187.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.4" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="209.4" y="1171.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.4" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="209.4" y="1155.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="209.4" y="1139.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="209.4" y="1123.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="209.4" y="1107.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="209.4" y="1091.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="209.4" y="1075.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="209.4" y="1059.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$55/2136288211.get (1 samples, 0.08%)</title><rect x="209.4" y="1043.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (3 samples, 0.24%)</title><rect x="210.4" y="1251.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (2 samples, 0.16%)</title><rect x="210.4" y="1235.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="213.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (2 samples, 0.16%)</title><rect x="210.4" y="1219.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (2 samples, 0.16%)</title><rect x="210.4" y="1203.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="210.4" y="1187.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.08%)</title><rect x="210.4" y="1171.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="210.4" y="1155.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.08%)</title><rect x="210.4" y="1139.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="211.3" y="1187.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="211.3" y="1171.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.3" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="211.3" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.3" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="211.3" y="1139.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.08%)</title><rect x="212.3" y="1235.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.49%)</title><rect x="213.2" y="1267.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.41%)</title><rect x="213.2" y="1251.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="213.2" y="1235.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="213.2" y="1219.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/ResponseHeader.parse (1 samples, 0.08%)</title><rect x="213.2" y="1203.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.&lt;init&gt; (1 samples, 0.08%)</title><rect x="213.2" y="1187.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.read (1 samples, 0.08%)</title><rect x="213.2" y="1171.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ByteBufferAccessor.readInt (1 samples, 0.08%)</title><rect x="213.2" y="1155.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.2" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.08%)</title><rect x="213.2" y="1139.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.2" y="1150.0"></text>
</g>
<g>
<title>java/nio/Bits.getInt (1 samples, 0.08%)</title><rect x="213.2" y="1123.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/Bits.getIntB (1 samples, 0.08%)</title><rect x="213.2" y="1107.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.33%)</title><rect x="214.2" y="1235.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.33%)</title><rect x="214.2" y="1219.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.16%)</title><rect x="214.2" y="1203.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="214.2" y="1187.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.16%)</title><rect x="214.2" y="1171.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.16%)</title><rect x="214.2" y="1155.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.16%)</title><rect x="214.2" y="1139.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.2" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.16%)</title><rect x="214.2" y="1123.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.2" y="1134.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="214.2" y="1107.0" width="1.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="217.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (2 samples, 0.16%)</title><rect x="216.1" y="1203.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="219.1" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="216.1" y="1187.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="219.1" y="1198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="216.1" y="1171.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="219.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="218.1" y="1251.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="218.1" y="1235.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="218.1" y="1219.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="218.1" y="1203.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="218.1" y="1187.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="218.1" y="1171.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.08%)</title><rect x="218.1" y="1155.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.08%)</title><rect x="218.1" y="1139.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="221.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.08%)</title><rect x="218.1" y="1123.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type.isArray (1 samples, 0.08%)</title><rect x="218.1" y="1107.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.49%)</title><rect x="219.0" y="1267.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.49%)</title><rect x="219.0" y="1251.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="219.0" y="1235.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/386210345.accept (2 samples, 0.16%)</title><rect x="219.0" y="1219.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.16%)</title><rect x="219.0" y="1203.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="219.0" y="1187.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="219.0" y="1171.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="219.0" y="1155.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="219.0" y="1139.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="220.0" y="1187.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="220.0" y="1171.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="223.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="220.0" y="1155.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="221.0" y="1235.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.0" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.setValue (1 samples, 0.08%)</title><rect x="221.0" y="1219.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.16%)</title><rect x="221.9" y="1235.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.16%)</title><rect x="221.9" y="1219.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (2 samples, 0.16%)</title><rect x="221.9" y="1203.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.9" y="1214.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.16%)</title><rect x="221.9" y="1187.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.9" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.spliterator (1 samples, 0.08%)</title><rect x="221.9" y="1171.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.9" y="1182.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (1 samples, 0.08%)</title><rect x="221.9" y="1155.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="221.9" y="1139.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="222.9" y="1171.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="222.9" y="1155.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="223.8" y="1235.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.8" y="1246.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="223.8" y="1219.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.8" y="1230.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="223.8" y="1203.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.8" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.08%)</title><rect x="223.8" y="1187.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="224.8" y="1267.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="224.8" y="1251.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="224.8" y="1235.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="224.8" y="1219.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="225.8" y="1283.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 0.08%)</title><rect x="225.8" y="1267.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.8" y="1278.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.08%)</title><rect x="226.7" y="1331.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="229.7" y="1342.0"></text>
</g>
<g>
<title>java/lang/Thread.run (661 samples, 53.96%)</title><rect x="227.7" y="1331.0" width="636.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.7" y="1342.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (661 samples, 53.96%)</title><rect x="227.7" y="1315.0" width="636.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.7" y="1326.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (661 samples, 53.96%)</title><rect x="227.7" y="1299.0" width="636.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.7" y="1310.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/495376973.run (434 samples, 35.43%)</title><rect x="228.7" y="1283.0" width="418.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.7" y="1294.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (434 samples, 35.43%)</title><rect x="228.7" y="1267.0" width="418.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.7" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (434 samples, 35.43%)</title><rect x="228.7" y="1251.0" width="418.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.7" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (428 samples, 34.94%)</title><rect x="228.7" y="1235.0" width="412.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.7" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.s..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="235.4" y="1219.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="238.4" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="237.3" y="1219.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (142 samples, 11.59%)</title><rect x="238.3" y="1219.0" width="136.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="241.3" y="1230.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (142 samples, 11.59%)</title><rect x="238.3" y="1203.0" width="136.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.3" y="1214.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (142 samples, 11.59%)</title><rect x="238.3" y="1187.0" width="136.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.3" y="1198.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (142 samples, 11.59%)</title><rect x="238.3" y="1171.0" width="136.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.3" y="1182.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (142 samples, 11.59%)</title><rect x="238.3" y="1155.0" width="136.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.3" y="1166.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (142 samples, 11.59%)</title><rect x="238.3" y="1139.0" width="136.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.3" y="1150.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (48 samples, 3.92%)</title><rect x="238.3" y="1123.0" width="46.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.3" y="1134.0">com/..</text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="249.9" y="1107.0" width="2.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="252.9" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="252.7" y="1107.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="255.7" y="1118.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="252.7" y="1091.0" width="4.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="255.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.57%)</title><rect x="257.6" y="1107.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 0.41%)</title><rect x="259.5" y="1091.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="262.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.41%)</title><rect x="259.5" y="1075.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="262.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="259.5" y="1059.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.41%)</title><rect x="259.5" y="1043.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.41%)</title><rect x="259.5" y="1027.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="262.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 1.71%)</title><rect x="264.3" y="1107.0" width="20.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (10 samples, 0.82%)</title><rect x="274.9" y="1091.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (6 samples, 0.49%)</title><rect x="274.9" y="1075.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (6 samples, 0.49%)</title><rect x="274.9" y="1059.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.24%)</title><rect x="280.7" y="1075.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.24%)</title><rect x="280.7" y="1059.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.16%)</title><rect x="280.7" y="1043.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.7" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="280.7" y="1027.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="283.7" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="280.7" y="1011.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="283.7" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="280.7" y="995.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="283.7" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="281.6" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="284.6" y="990.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="281.6" y="963.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="284.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="282.6" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.6" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="282.6" y="1027.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="285.6" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="282.6" y="1011.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="285.6" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="282.6" y="995.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="285.6" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="282.6" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="285.6" y="990.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="282.6" y="963.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="285.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.08%)</title><rect x="283.6" y="1075.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.6" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="283.6" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="286.6" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="283.6" y="1043.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="286.6" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="283.6" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="286.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (79 samples, 6.45%)</title><rect x="284.5" y="1123.0" width="76.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.5" y="1134.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.33%)</title><rect x="285.5" y="1107.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.08%)</title><rect x="289.3" y="1107.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.33%)</title><rect x="290.3" y="1107.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.33%)</title><rect x="290.3" y="1091.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.49%)</title><rect x="294.2" y="1107.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.49%)</title><rect x="294.2" y="1091.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.33%)</title><rect x="295.1" y="1075.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.33%)</title><rect x="295.1" y="1059.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="299.0" y="1075.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.49%)</title><rect x="299.9" y="1107.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.24%)</title><rect x="302.8" y="1091.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (53 samples, 4.33%)</title><rect x="305.7" y="1107.0" width="51.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.7" y="1118.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.39%)</title><rect x="306.7" y="1091.0" width="16.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="309.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.41%)</title><rect x="307.6" y="1075.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.41%)</title><rect x="307.6" y="1059.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.41%)</title><rect x="307.6" y="1043.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.65%)</title><rect x="312.5" y="1075.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="315.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="320.2" y="1075.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="320.2" y="1059.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.16%)</title><rect x="321.1" y="1075.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="324.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (35 samples, 2.86%)</title><rect x="323.1" y="1091.0" width="33.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="326.1" y="1102.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (35 samples, 2.86%)</title><rect x="323.1" y="1075.0" width="33.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.1" y="1086.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="323.1" y="1059.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="326.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (34 samples, 2.78%)</title><rect x="324.0" y="1059.0" width="32.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.0" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.98%)</title><rect x="325.0" y="1043.0" width="11.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="328.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.41%)</title><rect x="328.8" y="1027.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="331.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.41%)</title><rect x="328.8" y="1011.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.41%)</title><rect x="328.8" y="995.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.24%)</title><rect x="330.8" y="979.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="333.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.16%)</title><rect x="333.7" y="1027.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="336.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="335.6" y="1027.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="338.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="335.6" y="1011.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="338.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.41%)</title><rect x="336.5" y="1043.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.24%)</title><rect x="338.5" y="1027.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="341.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.24%)</title><rect x="338.5" y="1011.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="341.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.24%)</title><rect x="338.5" y="995.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="341.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.24%)</title><rect x="338.5" y="979.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="341.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="341.4" y="1043.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="344.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.49%)</title><rect x="342.3" y="1043.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="345.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.49%)</title><rect x="342.3" y="1027.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.49%)</title><rect x="342.3" y="1011.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="345.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.49%)</title><rect x="342.3" y="995.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="345.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.49%)</title><rect x="342.3" y="979.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.3" y="990.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.49%)</title><rect x="342.3" y="963.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="345.3" y="974.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (6 samples, 0.49%)</title><rect x="342.3" y="947.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="345.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.24%)</title><rect x="348.1" y="1043.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="351.1" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.24%)</title><rect x="348.1" y="1027.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="351.1" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="348.1" y="1011.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="350.0" y="995.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.49%)</title><rect x="351.0" y="1043.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 0.16%)</title><rect x="356.8" y="1107.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.16%)</title><rect x="358.7" y="1107.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="361.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (15 samples, 1.22%)</title><rect x="360.6" y="1123.0" width="14.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="363.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.06%)</title><rect x="362.6" y="1107.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="365.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.06%)</title><rect x="362.6" y="1091.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (13 samples, 1.06%)</title><rect x="362.6" y="1075.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (13 samples, 1.06%)</title><rect x="362.6" y="1059.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (258 samples, 21.06%)</title><rect x="375.1" y="1219.0" width="248.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="378.1" y="1230.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (54 samples, 4.41%)</title><rect x="375.1" y="1203.0" width="52.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.1" y="1214.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (54 samples, 4.41%)</title><rect x="375.1" y="1187.0" width="52.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="378.1" y="1198.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (51 samples, 4.16%)</title><rect x="377.0" y="1171.0" width="49.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="380.0" y="1182.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (11 samples, 0.90%)</title><rect x="380.9" y="1155.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="383.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.08%)</title><rect x="381.8" y="1139.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="384.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="382.8" y="1139.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="382.8" y="1123.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="385.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="382.8" y="1107.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.57%)</title><rect x="384.7" y="1139.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="387.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.49%)</title><rect x="385.7" y="1123.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.49%)</title><rect x="385.7" y="1107.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.7" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.08%)</title><rect x="391.5" y="1155.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="394.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 1.06%)</title><rect x="392.4" y="1155.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="395.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="403.0" y="1139.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="403.0" y="1123.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (22 samples, 1.80%)</title><rect x="404.9" y="1155.0" width="21.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="407.9" y="1166.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 0.57%)</title><rect x="419.4" y="1139.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="422.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.57%)</title><rect x="419.4" y="1123.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="422.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.16%)</title><rect x="424.2" y="1107.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="427.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="426.1" y="1171.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="429.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.33%)</title><rect x="427.1" y="1203.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="430.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.24%)</title><rect x="428.1" y="1187.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="431.1" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.24%)</title><rect x="428.1" y="1171.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (141 samples, 11.51%)</title><rect x="430.9" y="1203.0" width="135.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.9" y="1214.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (141 samples, 11.51%)</title><rect x="430.9" y="1187.0" width="135.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.9" y="1198.0">com/linecorp/deca..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.24%)</title><rect x="437.7" y="1171.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="440.7" y="1182.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="437.7" y="1155.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="440.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (42 samples, 3.43%)</title><rect x="440.6" y="1171.0" width="40.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="443.6" y="1182.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.16%)</title><rect x="440.6" y="1155.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.16%)</title><rect x="440.6" y="1139.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="443.6" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="441.5" y="1123.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="444.5" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="441.5" y="1107.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="444.5" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="441.5" y="1091.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="444.5" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="441.5" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="444.5" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="441.5" y="1059.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="444.5" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="441.5" y="1043.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="444.5" y="1054.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="441.5" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="444.5" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="441.5" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="444.5" y="1022.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="441.5" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="444.5" y="1006.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="441.5" y="979.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="444.5" y="990.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="441.5" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="444.5" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 3.18%)</title><rect x="442.5" y="1155.0" width="37.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="445.5" y="1166.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (32 samples, 2.61%)</title><rect x="446.4" y="1139.0" width="30.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.4" y="1150.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (17 samples, 1.39%)</title><rect x="454.1" y="1123.0" width="16.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="457.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (17 samples, 1.39%)</title><rect x="454.1" y="1107.0" width="16.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="457.1" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (17 samples, 1.39%)</title><rect x="454.1" y="1091.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="457.1" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.57%)</title><rect x="459.8" y="1075.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="462.8" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="459.8" y="1059.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="462.8" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="459.8" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="462.8" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.16%)</title><rect x="460.8" y="1059.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="463.8" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="460.8" y="1043.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="463.8" y="1054.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.16%)</title><rect x="460.8" y="1027.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="463.8" y="1038.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="461.8" y="1011.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="464.8" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.33%)</title><rect x="462.7" y="1059.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="465.7" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.24%)</title><rect x="462.7" y="1043.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="465.7" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="463.7" y="1027.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="466.7" y="1038.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="464.7" y="1027.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="467.7" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="464.7" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="467.7" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="465.6" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="468.6" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="466.6" y="1075.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="469.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.41%)</title><rect x="470.4" y="1123.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="473.4" y="1134.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="475.3" y="1123.0" width="1.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="478.3" y="1134.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="477.2" y="1139.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="480.2" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="478.1" y="1139.0" width="2.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="481.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="480.1" y="1155.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.1" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="480.1" y="1139.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="483.1" y="1150.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="480.1" y="1123.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="483.1" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="480.1" y="1107.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="483.1" y="1118.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="480.1" y="1091.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="483.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="481.0" y="1171.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="484.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.49%)</title><rect x="482.0" y="1171.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="485.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.08%)</title><rect x="482.0" y="1155.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="485.0" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="482.0" y="1139.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="485.0" y="1150.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="482.0" y="1123.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="485.0" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="482.0" y="1107.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="485.0" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="482.0" y="1091.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="485.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.41%)</title><rect x="483.0" y="1155.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.41%)</title><rect x="483.0" y="1139.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="486.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="486.8" y="1123.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.8" y="1134.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 6.69%)</title><rect x="487.8" y="1171.0" width="79.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.8" y="1182.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (80 samples, 6.53%)</title><rect x="489.7" y="1155.0" width="77.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="492.7" y="1166.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.57%)</title><rect x="489.7" y="1139.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.57%)</title><rect x="489.7" y="1123.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.57%)</title><rect x="489.7" y="1107.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.57%)</title><rect x="489.7" y="1091.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="496.4" y="1139.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="496.4" y="1123.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="499.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="496.4" y="1107.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="499.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.16%)</title><rect x="496.4" y="1091.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (71 samples, 5.80%)</title><rect x="498.4" y="1139.0" width="68.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="501.4" y="1150.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (58 samples, 4.73%)</title><rect x="510.9" y="1123.0" width="55.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="513.9" y="1134.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 2.94%)</title><rect x="532.1" y="1107.0" width="34.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="535.1" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.16%)</title><rect x="551.4" y="1091.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="554.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.90%)</title><rect x="553.3" y="1091.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="556.3" y="1102.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.24%)</title><rect x="563.9" y="1091.0" width="2.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="566.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (39 samples, 3.18%)</title><rect x="566.8" y="1203.0" width="37.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="569.8" y="1214.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (38 samples, 3.10%)</title><rect x="567.7" y="1187.0" width="36.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="570.7" y="1198.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/843490530.process (16 samples, 1.31%)</title><rect x="568.7" y="1171.0" width="15.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (16 samples, 1.31%)</title><rect x="568.7" y="1155.0" width="15.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="571.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.31%)</title><rect x="568.7" y="1139.0" width="15.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="571.7" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="575.4" y="1123.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="578.4" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="575.4" y="1107.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="578.4" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="575.4" y="1091.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.4" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="576.4" y="1075.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="576.4" y="1059.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="579.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.41%)</title><rect x="577.4" y="1123.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="580.4" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.41%)</title><rect x="577.4" y="1107.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="580.4" y="1118.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="578.3" y="1091.0" width="3.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="581.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="582.2" y="1123.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="583.1" y="1123.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="586.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="583.1" y="1107.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="586.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="583.1" y="1091.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="586.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.33%)</title><rect x="584.1" y="1171.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="587.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.33%)</title><rect x="584.1" y="1155.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="587.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (5 samples, 0.41%)</title><rect x="588.0" y="1171.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (5 samples, 0.41%)</title><rect x="588.0" y="1155.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="591.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/1829233257.get$Lambda (5 samples, 0.41%)</title><rect x="588.0" y="1139.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="591.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/1829233257.&lt;init&gt; (3 samples, 0.24%)</title><rect x="589.9" y="1123.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="592.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.65%)</title><rect x="592.8" y="1171.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="595.8" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.57%)</title><rect x="593.7" y="1155.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="596.7" y="1166.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.41%)</title><rect x="593.7" y="1139.0" width="4.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="596.7" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.16%)</title><rect x="598.6" y="1139.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="601.6" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.33%)</title><rect x="600.5" y="1171.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="603.5" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="603.4" y="1155.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="604.3" y="1203.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="607.3" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="604.3" y="1187.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="607.3" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="604.3" y="1171.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="607.3" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="604.3" y="1155.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="607.3" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="604.3" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="607.3" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="604.3" y="1123.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="607.3" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="604.3" y="1107.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="607.3" y="1118.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="604.3" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="607.3" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="604.3" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="607.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.08%)</title><rect x="605.3" y="1203.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="608.3" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="605.3" y="1187.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="608.3" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="605.3" y="1171.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="608.3" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="605.3" y="1155.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="608.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.47%)</title><rect x="606.3" y="1203.0" width="17.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="609.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.47%)</title><rect x="606.3" y="1187.0" width="17.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="609.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="608.2" y="1171.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="611.2" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="608.2" y="1155.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="611.2" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.57%)</title><rect x="609.2" y="1171.0" width="6.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="612.2" y="1182.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.57%)</title><rect x="609.2" y="1155.0" width="6.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="612.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.65%)</title><rect x="615.9" y="1171.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="618.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/146362179.accept (8 samples, 0.65%)</title><rect x="615.9" y="1155.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="618.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (8 samples, 0.65%)</title><rect x="615.9" y="1139.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="618.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.65%)</title><rect x="615.9" y="1123.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="618.9" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.65%)</title><rect x="615.9" y="1107.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="618.9" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.65%)</title><rect x="615.9" y="1091.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="618.9" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="616.9" y="1075.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="619.9" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="617.8" y="1075.0" width="4.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="620.8" y="1086.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="617.8" y="1059.0" width="4.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="620.8" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="622.6" y="1075.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="625.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.82%)</title><rect x="623.6" y="1219.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="626.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.82%)</title><rect x="623.6" y="1203.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="626.6" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="623.6" y="1187.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="626.6" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="623.6" y="1171.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="626.6" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="623.6" y="1155.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="626.6" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="623.6" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="626.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.73%)</title><rect x="624.6" y="1187.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/146362179.accept (9 samples, 0.73%)</title><rect x="624.6" y="1171.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="627.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (9 samples, 0.73%)</title><rect x="624.6" y="1155.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.73%)</title><rect x="624.6" y="1139.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="627.6" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.73%)</title><rect x="624.6" y="1123.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.6" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.73%)</title><rect x="624.6" y="1107.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="627.6" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.65%)</title><rect x="633.2" y="1219.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="636.2" y="1230.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.65%)</title><rect x="633.2" y="1203.0" width="7.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="636.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.49%)</title><rect x="640.9" y="1235.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.9" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="641.9" y="1219.0" width="4.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="644.9" y="1230.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="641.9" y="1203.0" width="4.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="644.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (10 samples, 0.82%)</title><rect x="646.7" y="1283.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="649.7" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.82%)</title><rect x="646.7" y="1267.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="649.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.82%)</title><rect x="646.7" y="1251.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="649.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.82%)</title><rect x="646.7" y="1235.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="649.7" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/495376973.run (4 samples, 0.33%)</title><rect x="652.5" y="1219.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="655.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (216 samples, 17.63%)</title><rect x="656.4" y="1283.0" width="208.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="659.4" y="1294.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (213 samples, 17.39%)</title><rect x="657.3" y="1267.0" width="205.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="660.3" y="1278.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (1 samples, 0.08%)</title><rect x="666.9" y="1251.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="669.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (173 samples, 14.12%)</title><rect x="667.9" y="1251.0" width="166.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.9" y="1262.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.08%)</title><rect x="674.7" y="1235.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="677.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="674.7" y="1219.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="677.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.24%)</title><rect x="675.6" y="1235.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="678.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.16%)</title><rect x="678.5" y="1235.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="681.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.16%)</title><rect x="678.5" y="1219.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="681.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="679.5" y="1203.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="682.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="679.5" y="1187.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="682.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.57%)</title><rect x="680.4" y="1235.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="683.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.57%)</title><rect x="680.4" y="1219.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="683.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (153 samples, 12.49%)</title><rect x="687.2" y="1235.0" width="147.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.2" y="1246.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.08%)</title><rect x="687.2" y="1219.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.2" y="1230.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (152 samples, 12.41%)</title><rect x="688.1" y="1219.0" width="146.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="691.1" y="1230.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="689.1" y="1203.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="692.1" y="1214.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="690.1" y="1203.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="693.1" y="1214.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (4 samples, 0.33%)</title><rect x="691.0" y="1203.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="694.0" y="1214.0"></text>
</g>
<g>
<title>Unsafe_Park (142 samples, 11.59%)</title><rect x="694.9" y="1203.0" width="136.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="697.9" y="1214.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.24%)</title><rect x="694.9" y="1187.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="697.9" y="1198.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 1.88%)</title><rect x="697.8" y="1187.0" width="22.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="700.8" y="1198.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.33%)</title><rect x="703.6" y="1171.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="706.6" y="1182.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="705.5" y="1155.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="708.5" y="1166.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.24%)</title><rect x="707.4" y="1171.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="710.4" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.73%)</title><rect x="710.3" y="1171.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="713.3" y="1182.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="719.0" y="1171.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="722.0" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="719.9" y="1187.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="722.9" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="720.9" y="1187.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="723.9" y="1198.0"></text>
</g>
<g>
<title>__lll_lock_wait (12 samples, 0.98%)</title><rect x="722.8" y="1187.0" width="11.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="725.8" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.78%)</title><rect x="734.4" y="1187.0" width="32.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="737.4" y="1198.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (48 samples, 3.92%)</title><rect x="767.1" y="1187.0" width="46.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="770.1" y="1198.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.16%)</title><rect x="813.4" y="1187.0" width="1.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="816.4" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.16%)</title><rect x="815.3" y="1187.0" width="1.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="818.3" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="817.2" y="1187.0" width="1.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="820.2" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.33%)</title><rect x="819.1" y="1187.0" width="3.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="822.1" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="823.0" y="1187.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="826.0" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.41%)</title><rect x="824.0" y="1187.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="827.0" y="1198.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.16%)</title><rect x="828.8" y="1187.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="831.8" y="1198.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="830.7" y="1187.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="833.7" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="831.7" y="1203.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="834.7" y="1214.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="832.6" y="1203.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="835.6" y="1214.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="833.6" y="1203.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="836.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (29 samples, 2.37%)</title><rect x="834.6" y="1251.0" width="27.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="837.6" y="1262.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (28 samples, 2.29%)</title><rect x="835.5" y="1235.0" width="27.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="838.5" y="1246.0">j..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (28 samples, 2.29%)</title><rect x="835.5" y="1219.0" width="27.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="838.5" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.08%)</title><rect x="862.5" y="1267.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="865.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.08%)</title><rect x="863.5" y="1267.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="866.5" y="1278.0"></text>
</g>
<g>
<title>start_thread (338 samples, 27.59%)</title><rect x="864.4" y="1331.0" width="325.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="867.4" y="1342.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (338 samples, 27.59%)</title><rect x="864.4" y="1315.0" width="325.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="867.4" y="1326.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.55%)</title><rect x="864.4" y="1299.0" width="18.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="867.4" y="1310.0"></text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.08%)</title><rect x="864.4" y="1283.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.4" y="1294.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.49%)</title><rect x="865.4" y="1283.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="868.4" y="1294.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.49%)</title><rect x="865.4" y="1267.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="868.4" y="1278.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="865.4" y="1251.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="868.4" y="1262.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.41%)</title><rect x="866.3" y="1251.0" width="4.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="869.3" y="1262.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 0.98%)</title><rect x="871.2" y="1283.0" width="11.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="874.2" y="1294.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.08%)</title><rect x="871.2" y="1267.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.2" y="1278.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="871.2" y="1251.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="874.2" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.57%)</title><rect x="872.1" y="1267.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="875.1" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.24%)</title><rect x="872.1" y="1251.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.1" y="1262.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.16%)</title><rect x="872.1" y="1235.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="875.1" y="1246.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.16%)</title><rect x="872.1" y="1219.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.1" y="1230.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.16%)</title><rect x="872.1" y="1203.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.1" y="1214.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="874.0" y="1235.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="877.0" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.33%)</title><rect x="875.0" y="1251.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="878.0" y="1262.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.33%)</title><rect x="875.0" y="1235.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="878.0" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="878.9" y="1267.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="881.9" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="878.9" y="1251.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="881.9" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.24%)</title><rect x="878.9" y="1235.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="881.9" y="1246.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.16%)</title><rect x="878.9" y="1219.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="881.9" y="1230.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.16%)</title><rect x="878.9" y="1203.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="881.9" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.16%)</title><rect x="878.9" y="1187.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="881.9" y="1198.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.08%)</title><rect x="879.8" y="1171.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="882.8" y="1182.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="879.8" y="1155.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.8" y="1166.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.08%)</title><rect x="879.8" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="882.8" y="1150.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(unsigned int, G1RemSet*, DirtyCardQueue*) (1 samples, 0.08%)</title><rect x="880.8" y="1219.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="883.8" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="881.8" y="1235.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="884.8" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="881.8" y="1219.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="884.8" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.08%)</title><rect x="881.8" y="1203.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="884.8" y="1214.0"></text>
</g>
<g>
<title>JavaThread::run() (317 samples, 25.88%)</title><rect x="882.7" y="1299.0" width="305.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="885.7" y="1310.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (317 samples, 25.88%)</title><rect x="882.7" y="1283.0" width="305.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="885.7" y="1294.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (316 samples, 25.80%)</title><rect x="882.7" y="1267.0" width="304.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="885.7" y="1278.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (316 samples, 25.80%)</title><rect x="882.7" y="1251.0" width="304.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="885.7" y="1262.0">CompileBroker::invoke_compiler_on_method(..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (314 samples, 25.63%)</title><rect x="882.7" y="1235.0" width="302.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="885.7" y="1246.0">C2Compiler::compile_method(ciEnv*, ciMeth..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (314 samples, 25.63%)</title><rect x="882.7" y="1219.0" width="302.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="885.7" y="1230.0">Compile::Compile(ciEnv*, C2Compiler*, ciM..</text>
</g>
<g>
<title>Compile::Code_Gen() (152 samples, 12.41%)</title><rect x="882.7" y="1203.0" width="146.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="885.7" y="1214.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (8 samples, 0.65%)</title><rect x="882.7" y="1187.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="885.7" y="1198.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.24%)</title><rect x="882.7" y="1171.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="885.7" y="1182.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="884.6" y="1155.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="887.6" y="1166.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.08%)</title><rect x="884.6" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="887.6" y="1150.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (5 samples, 0.41%)</title><rect x="885.6" y="1171.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="888.6" y="1182.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.08%)</title><rect x="885.6" y="1155.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="888.6" y="1166.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.08%)</title><rect x="885.6" y="1139.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.6" y="1150.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.08%)</title><rect x="885.6" y="1123.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="888.6" y="1134.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="885.6" y="1107.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="888.6" y="1118.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (4 samples, 0.33%)</title><rect x="886.6" y="1155.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="889.6" y="1166.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (3 samples, 0.24%)</title><rect x="887.5" y="1139.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="890.5" y="1150.0"></text>
</g>
<g>
<title>loadRangeNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="889.5" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.5" y="1134.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*) const (1 samples, 0.08%)</title><rect x="889.5" y="1107.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="892.5" y="1118.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (8 samples, 0.65%)</title><rect x="890.4" y="1187.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="893.4" y="1198.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.24%)</title><rect x="890.4" y="1171.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="893.4" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="890.4" y="1155.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="893.4" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="890.4" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="893.4" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="891.4" y="1155.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="894.4" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="891.4" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="894.4" y="1150.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::append(DIR_Chunk* const&amp;) (1 samples, 0.08%)</title><rect x="891.4" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="894.4" y="1134.0"></text>
</g>
<g>
<title>GrowableArray&lt;ScopeValue*&gt;::append(ScopeValue* const&amp;) (1 samples, 0.08%)</title><rect x="892.4" y="1155.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="895.4" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.33%)</title><rect x="893.3" y="1171.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="896.3" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.33%)</title><rect x="893.3" y="1155.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="896.3" y="1166.0"></text>
</g>
<g>
<title>xorL_rRegNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="897.2" y="1171.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="900.2" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.90%)</title><rect x="898.1" y="1187.0" width="10.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="901.1" y="1198.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.08%)</title><rect x="898.1" y="1171.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="901.1" y="1182.0"></text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.08%)</title><rect x="899.1" y="1171.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="902.1" y="1182.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (1 samples, 0.08%)</title><rect x="899.1" y="1155.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="902.1" y="1166.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.73%)</title><rect x="900.1" y="1171.0" width="8.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="903.1" y="1182.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.49%)</title><rect x="900.1" y="1155.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="903.1" y="1166.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.08%)</title><rect x="905.8" y="1155.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="908.8" y="1166.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="905.8" y="1139.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="908.8" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="905.8" y="1123.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="908.8" y="1134.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.08%)</title><rect x="905.8" y="1107.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="908.8" y="1118.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.08%)</title><rect x="905.8" y="1091.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="908.8" y="1102.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="906.8" y="1155.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="909.8" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="906.8" y="1139.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="909.8" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="906.8" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="909.8" y="1134.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="907.8" y="1155.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="910.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.08%)</title><rect x="908.7" y="1187.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="911.7" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.08%)</title><rect x="908.7" y="1171.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="911.7" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.49%)</title><rect x="909.7" y="1187.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="912.7" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.49%)</title><rect x="909.7" y="1171.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="912.7" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.08%)</title><rect x="909.7" y="1155.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="912.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="910.7" y="1155.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="913.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.24%)</title><rect x="911.6" y="1155.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="914.6" y="1166.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="911.6" y="1139.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 0.16%)</title><rect x="912.6" y="1139.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="915.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="914.5" y="1155.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="917.5" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (117 samples, 9.55%)</title><rect x="915.5" y="1187.0" width="112.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="918.5" y="1198.0">PhaseChaitin::..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.08%)</title><rect x="915.5" y="1171.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="918.5" y="1182.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="916.4" y="1171.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.4" y="1182.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (7 samples, 0.57%)</title><rect x="917.4" y="1171.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.4" y="1182.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="923.2" y="1155.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (7 samples, 0.57%)</title><rect x="924.1" y="1171.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="927.1" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="925.1" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="928.1" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="926.1" y="1155.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="929.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.08%)</title><rect x="928.0" y="1155.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="931.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="929.0" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="932.0" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="929.0" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="932.0" y="1150.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.08%)</title><rect x="929.9" y="1155.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="932.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.57%)</title><rect x="930.9" y="1171.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="933.9" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="932.8" y="1155.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="935.8" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="933.8" y="1155.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="936.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.16%)</title><rect x="935.7" y="1155.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="938.7" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="936.7" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (17 samples, 1.39%)</title><rect x="937.6" y="1171.0" width="16.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="940.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.08%)</title><rect x="951.1" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="954.1" y="1166.0"></text>
</g>
<g>
<title>immIOper::clone(Compile*) const (1 samples, 0.08%)</title><rect x="951.1" y="1139.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.16%)</title><rect x="952.1" y="1155.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="955.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="953.0" y="1139.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="956.0" y="1150.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="953.0" y="1123.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="956.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (16 samples, 1.31%)</title><rect x="954.0" y="1171.0" width="15.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.0" y="1182.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="958.8" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="961.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (8 samples, 0.65%)</title><rect x="959.8" y="1155.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="962.8" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="965.6" y="1139.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="968.6" y="1150.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="967.5" y="1155.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="970.5" y="1166.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="968.4" y="1155.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.16%)</title><rect x="969.4" y="1171.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.16%)</title><rect x="969.4" y="1155.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.4" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="970.4" y="1139.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="973.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (9 samples, 0.73%)</title><rect x="971.3" y="1171.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.3" y="1182.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="975.2" y="1155.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.2" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.16%)</title><rect x="976.2" y="1155.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="979.2" y="1166.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.08%)</title><rect x="978.1" y="1155.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.1" y="1166.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.08%)</title><rect x="979.0" y="1155.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="982.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.16%)</title><rect x="980.0" y="1171.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="983.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (10 samples, 0.82%)</title><rect x="981.9" y="1171.0" width="9.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="984.9" y="1182.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="984.8" y="1155.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (6 samples, 0.49%)</title><rect x="985.8" y="1155.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.8" y="1166.0"></text>
</g>
<g>
<title>MachSpillCopyNode::in_RegMask(unsigned int) const (1 samples, 0.08%)</title><rect x="989.6" y="1139.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.08%)</title><rect x="990.6" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="993.6" y="1150.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.08%)</title><rect x="990.6" y="1123.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="993.6" y="1134.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.08%)</title><rect x="990.6" y="1107.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.6" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="991.6" y="1171.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.6" y="1182.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (16 samples, 1.31%)</title><rect x="992.5" y="1171.0" width="15.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="995.5" y="1182.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="992.5" y="1155.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.5" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (15 samples, 1.22%)</title><rect x="993.5" y="1155.0" width="14.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.5" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="993.5" y="1139.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="996.5" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (14 samples, 1.14%)</title><rect x="994.5" y="1139.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="997.5" y="1150.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.24%)</title><rect x="994.5" y="1123.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.5" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (10 samples, 0.82%)</title><rect x="997.3" y="1123.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.3" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1006.0" y="1107.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1009.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.08%)</title><rect x="1007.0" y="1123.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1010.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.33%)</title><rect x="1007.9" y="1171.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1010.9" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1010.8" y="1155.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.24%)</title><rect x="1011.8" y="1171.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.8" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1012.8" y="1155.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1015.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1014.7" y="1171.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1017.7" y="1182.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1014.7" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.7" y="1166.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1014.7" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1017.7" y="1150.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.08%)</title><rect x="1014.7" y="1123.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.7" y="1134.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1014.7" y="1107.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.7" y="1118.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.08%)</title><rect x="1014.7" y="1091.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1017.7" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.65%)</title><rect x="1015.6" y="1171.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1018.6" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.24%)</title><rect x="1020.5" y="1155.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1023.5" y="1166.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1023.4" y="1171.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.4" y="1182.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.08%)</title><rect x="1024.3" y="1171.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1027.3" y="1182.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (2 samples, 0.16%)</title><rect x="1025.3" y="1171.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.3" y="1182.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.08%)</title><rect x="1027.2" y="1171.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.2" y="1182.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.08%)</title><rect x="1028.2" y="1187.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1031.2" y="1198.0"></text>
</g>
<g>
<title>Compile::Optimize() (145 samples, 11.84%)</title><rect x="1029.1" y="1203.0" width="139.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1032.1" y="1214.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="1029.1" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1032.1" y="1198.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1029.1" y="1171.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.1" y="1182.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1030.1" y="1187.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1033.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.24%)</title><rect x="1031.1" y="1187.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.24%)</title><rect x="1031.1" y="1171.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.08%)</title><rect x="1031.1" y="1155.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.1" y="1166.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.08%)</title><rect x="1031.1" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.1" y="1150.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1031.1" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1032.0" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.08%)</title><rect x="1032.0" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1035.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.08%)</title><rect x="1032.0" y="1123.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1035.0" y="1134.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1032.0" y="1107.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.0" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1032.0" y="1091.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1035.0" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1032.0" y="1075.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1035.0" y="1086.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1032.0" y="1059.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.0" y="1155.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.0" y="1139.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.0" y="1123.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.0" y="1107.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.0" y="1091.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.0" y="1075.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1033.0" y="1059.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1036.0" y="1070.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.08%)</title><rect x="1033.0" y="1043.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.0" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.16%)</title><rect x="1034.0" y="1187.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.0" y="1198.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1034.9" y="1171.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1037.9" y="1182.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1034.9" y="1155.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.9" y="1166.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1034.9" y="1139.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1037.9" y="1150.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1034.9" y="1123.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1037.9" y="1134.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1034.9" y="1107.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.9" y="1118.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1034.9" y="1091.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1037.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (115 samples, 9.39%)</title><rect x="1035.9" y="1187.0" width="110.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1038.9" y="1198.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.41%)</title><rect x="1035.9" y="1171.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1038.9" y="1182.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1039.7" y="1155.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1042.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.49%)</title><rect x="1040.7" y="1171.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1043.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.16%)</title><rect x="1044.5" y="1155.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1045.5" y="1139.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (93 samples, 7.59%)</title><rect x="1046.5" y="1171.0" width="89.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.5" y="1182.0">PhaseIdeal..</text>
</g>
<g>
<title>Conv2BNode::Opcode() const (1 samples, 0.08%)</title><rect x="1056.1" y="1155.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1059.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (81 samples, 6.61%)</title><rect x="1057.1" y="1155.0" width="78.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1060.1" y="1166.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1059.0" y="1139.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (78 samples, 6.37%)</title><rect x="1060.0" y="1139.0" width="75.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1063.0" y="1150.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (13 samples, 1.06%)</title><rect x="1121.6" y="1123.0" width="12.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1134.1" y="1123.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.1" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.08%)</title><rect x="1135.1" y="1155.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (6 samples, 0.49%)</title><rect x="1136.1" y="1171.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.16%)</title><rect x="1139.9" y="1155.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1141.8" y="1171.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.16%)</title><rect x="1141.8" y="1155.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.16%)</title><rect x="1141.8" y="1139.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1141.8" y="1123.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.08%)</title><rect x="1142.8" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.24%)</title><rect x="1143.8" y="1171.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.16%)</title><rect x="1144.7" y="1155.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.7" y="1166.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1144.7" y="1139.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.7" y="1150.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1144.7" y="1123.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.7" y="1134.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1144.7" y="1107.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.7" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1144.7" y="1091.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.7" y="1102.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1145.7" y="1139.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.7" y="1150.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1145.7" y="1123.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 0.16%)</title><rect x="1146.7" y="1187.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1146.7" y="1171.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.7" y="1182.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.08%)</title><rect x="1147.6" y="1171.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (18 samples, 1.47%)</title><rect x="1148.6" y="1187.0" width="17.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (18 samples, 1.47%)</title><rect x="1148.6" y="1171.0" width="17.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.6" y="1182.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1150.5" y="1155.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.5" y="1166.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1151.5" y="1155.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.5" y="1166.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1151.5" y="1139.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.5" y="1150.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1151.5" y="1123.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.5" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1151.5" y="1107.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1151.5" y="1091.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.5" y="1102.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1151.5" y="1075.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1154.5" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1152.4" y="1155.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="1166.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1152.4" y="1139.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.4" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1152.4" y="1123.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.4" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1152.4" y="1107.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="1118.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.08%)</title><rect x="1152.4" y="1091.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.16%)</title><rect x="1153.4" y="1155.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.4" y="1166.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.08%)</title><rect x="1154.4" y="1139.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.4" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (5 samples, 0.41%)</title><rect x="1155.3" y="1155.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1156.3" y="1139.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1156.3" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.3" y="1134.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (3 samples, 0.24%)</title><rect x="1157.2" y="1139.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.2" y="1150.0"></text>
</g>
<g>
<title>PhiNode::simple_data_loop_check(Node*) const (1 samples, 0.08%)</title><rect x="1158.2" y="1123.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.2" y="1134.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.08%)</title><rect x="1159.2" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.2" y="1134.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1159.2" y="1107.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1162.2" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (2 samples, 0.16%)</title><rect x="1160.1" y="1155.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.1" y="1166.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1161.1" y="1139.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.1" y="1150.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1162.1" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="1166.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1163.0" y="1155.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1163.0" y="1139.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1163.0" y="1123.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.0" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1163.0" y="1107.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.0" y="1118.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1164.0" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="1150.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.0" y="1155.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.0" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1165.0" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.0" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="1123.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.0" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.0" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.0" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="1075.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.0" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="1059.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.0" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="1043.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.0" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="1027.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.0" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="1011.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="995.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.0" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="979.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.0" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="963.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.0" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="947.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.0" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="931.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.0" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="915.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.0" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="899.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.0" y="910.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1165.0" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.0" y="894.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="867.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.0" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1165.9" y="1187.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.9" y="1198.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1165.9" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.9" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1165.9" y="1155.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.9" y="1166.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="1165.9" y="1139.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.9" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.16%)</title><rect x="1166.9" y="1187.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1166.9" y="1171.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1166.9" y="1155.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.9" y="1166.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.9" y="1139.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="1150.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1166.9" y="1123.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.9" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.08%)</title><rect x="1167.8" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_slow_call(CallNode*, TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.8" y="1155.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.8" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1167.8" y="1123.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.8" y="1134.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.8" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.8" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.22%)</title><rect x="1168.8" y="1203.0" width="14.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.8" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.22%)</title><rect x="1168.8" y="1187.0" width="14.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.22%)</title><rect x="1168.8" y="1171.0" width="14.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.22%)</title><rect x="1168.8" y="1155.0" width="14.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1168.8" y="1139.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.8" y="1150.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1168.8" y="1123.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.8" y="1134.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.8" y="1107.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.8" y="1118.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1168.8" y="1091.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.8" y="1102.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1168.8" y="1075.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.8" y="1086.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1168.8" y="1059.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.8" y="1070.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1168.8" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 1.14%)</title><rect x="1169.8" y="1139.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 1.14%)</title><rect x="1169.8" y="1123.0" width="13.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.8" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.90%)</title><rect x="1169.8" y="1107.0" width="10.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.8" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.90%)</title><rect x="1169.8" y="1091.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.90%)</title><rect x="1169.8" y="1075.0" width="10.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.90%)</title><rect x="1169.8" y="1059.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.90%)</title><rect x="1169.8" y="1043.0" width="10.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.82%)</title><rect x="1169.8" y="1027.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.8" y="1038.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1169.8" y="1011.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.8" y="1022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1169.8" y="995.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.8" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1169.8" y="979.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.8" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1169.8" y="963.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.8" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1169.8" y="947.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.8" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1169.8" y="931.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.8" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1169.8" y="915.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.8" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1169.8" y="899.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.8" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1169.8" y="883.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.8" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1169.8" y="867.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.8" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1169.8" y="851.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.8" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1169.8" y="835.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.8" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1169.8" y="819.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.8" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1169.8" y="803.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.8" y="814.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1169.8" y="787.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.8" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.08%)</title><rect x="1169.8" y="771.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.57%)</title><rect x="1170.7" y="1011.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.57%)</title><rect x="1170.7" y="995.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.57%)</title><rect x="1170.7" y="979.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.7" y="990.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.08%)</title><rect x="1170.7" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.7" y="974.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.08%)</title><rect x="1170.7" y="947.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.7" y="958.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1170.7" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.7" y="942.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.7" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.7" y="926.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.08%)</title><rect x="1170.7" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.7" y="910.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1170.7" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1171.7" y="963.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1171.7" y="947.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.49%)</title><rect x="1171.7" y="931.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1171.7" y="915.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1171.7" y="899.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1171.7" y="883.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1171.7" y="867.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1171.7" y="851.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.41%)</title><rect x="1171.7" y="835.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.41%)</title><rect x="1171.7" y="819.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.41%)</title><rect x="1171.7" y="803.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.7" y="814.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1171.7" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.7" y="798.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1171.7" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.7" y="782.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1171.7" y="755.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.7" y="766.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.7" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.7" y="750.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.08%)</title><rect x="1171.7" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1172.7" y="787.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1172.7" y="771.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1172.7" y="755.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1172.7" y="739.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1172.7" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1172.7" y="707.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1172.7" y="691.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1172.7" y="675.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1172.7" y="659.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1172.7" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1172.7" y="627.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1172.7" y="611.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1172.7" y="595.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1172.7" y="579.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1172.7" y="563.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1172.7" y="547.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1172.7" y="531.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1172.7" y="515.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1172.7" y="499.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1172.7" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1172.7" y="467.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1172.7" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1172.7" y="435.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1172.7" y="419.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1172.7" y="403.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1172.7" y="387.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1172.7" y="371.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.7" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1172.7" y="355.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.7" y="366.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1172.7" y="339.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.7" y="350.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1172.7" y="323.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.7" y="334.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1172.7" y="307.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.7" y="318.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.08%)</title><rect x="1172.7" y="291.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.7" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1173.6" y="723.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1173.6" y="707.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1173.6" y="691.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1173.6" y="675.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1173.6" y="659.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1173.6" y="643.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1173.6" y="627.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1173.6" y="611.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1173.6" y="595.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1173.6" y="579.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1173.6" y="563.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1173.6" y="547.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1173.6" y="531.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1173.6" y="515.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1173.6" y="499.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1173.6" y="483.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1173.6" y="467.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1173.6" y="451.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1173.6" y="435.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1173.6" y="419.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1173.6" y="403.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1173.6" y="387.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1173.6" y="371.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1173.6" y="355.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1173.6" y="339.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.6" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1173.6" y="323.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.6" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1173.6" y="307.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.6" y="318.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1173.6" y="291.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.6" y="302.0"></text>
</g>
<g>
<title>InlineTree::should_inline(ciMethod*, ciMethod*, int, ciCallProfile&amp;, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1173.6" y="275.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="286.0"></text>
</g>
<g>
<title>ciMethod::should_inline() (1 samples, 0.08%)</title><rect x="1173.6" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.6" y="323.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.6" y="307.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.6" y="291.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.6" y="275.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.6" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.6" y="243.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.6" y="254.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.6" y="227.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="238.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, bool, BasicType, bool) (1 samples, 0.08%)</title><rect x="1174.6" y="211.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.6" y="222.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1174.6" y="195.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.6" y="206.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1174.6" y="179.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.6" y="190.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1174.6" y="163.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1175.6" y="387.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.6" y="398.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.08%)</title><rect x="1175.6" y="371.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.5" y="830.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.5" y="814.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1176.5" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.5" y="798.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="771.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.5" y="782.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.08%)</title><rect x="1176.5" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.5" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.5" y="1011.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.5" y="995.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.5" y="979.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.5" y="963.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.5" y="947.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.5" y="931.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.5" y="915.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.5" y="899.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.5" y="883.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.5" y="867.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.5" y="851.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.5" y="835.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.5" y="819.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.5" y="803.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.5" y="787.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.5" y="771.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.5" y="755.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.5" y="739.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.5" y="723.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.5" y="707.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.5" y="691.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.5" y="675.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.5" y="659.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.5" y="643.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.5" y="627.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.5" y="611.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.5" y="595.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.5" y="579.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.5" y="563.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.5" y="547.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.5" y="531.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.5" y="515.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.5" y="499.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.5" y="483.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.5" y="467.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.5" y="451.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.5" y="435.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="446.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.5" y="419.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="430.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1177.5" y="403.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="414.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1177.5" y="387.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1177.5" y="371.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1177.5" y="355.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.5" y="339.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.5" y="323.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1177.5" y="307.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1177.5" y="291.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1177.5" y="275.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.5" y="259.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.5" y="243.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="254.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1177.5" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="238.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1177.5" y="211.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="222.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1177.5" y="195.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="206.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1177.5" y="179.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.4" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.4" y="403.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.4" y="387.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.4" y="371.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.4" y="355.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.4" y="339.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.4" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.4" y="307.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.4" y="291.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.4" y="275.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.4" y="259.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.4" y="243.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.4" y="227.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.4" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.4" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.4" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.4" y="163.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.4" y="147.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1178.4" y="131.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1178.4" y="115.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.4" y="126.0"></text>
</g>
<g>
<title>Parse::push_constant(ciConstant, bool, bool, Type const*) (1 samples, 0.08%)</title><rect x="1178.4" y="99.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="110.0"></text>
</g>
<g>
<title>Type::make_from_constant(ciConstant, bool, bool) (1 samples, 0.08%)</title><rect x="1178.4" y="83.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="94.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_constant(ciObject*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.4" y="67.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="78.0"></text>
</g>
<g>
<title>ciObject::klass() (1 samples, 0.08%)</title><rect x="1178.4" y="51.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="62.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1178.4" y="35.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="46.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1179.4" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="1038.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="1022.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.08%)</title><rect x="1179.4" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="1006.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1180.4" y="1107.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1180.4" y="1091.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1180.4" y="1075.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1180.4" y="1059.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1180.4" y="1043.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1180.4" y="1027.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1180.4" y="1011.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1180.4" y="995.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1180.4" y="979.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1180.4" y="963.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1180.4" y="947.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1180.4" y="931.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1180.4" y="915.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="899.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.4" y="883.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1180.4" y="867.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1180.4" y="851.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1180.4" y="835.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.4" y="819.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::build_loop_tree(ciTypeFlow::Block*) (1 samples, 0.08%)</title><rect x="1180.4" y="803.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="883.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="851.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.3" y="803.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1181.3" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1181.3" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1181.3" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1181.3" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1181.3" y="723.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1181.3" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1181.3" y="691.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1181.3" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1181.3" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1181.3" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1181.3" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="638.0"></text>
</g>
<g>
<title>ciConstantPoolCache::insert(int, void*) (1 samples, 0.08%)</title><rect x="1181.3" y="611.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.08%)</title><rect x="1182.3" y="915.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="926.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.08%)</title><rect x="1182.3" y="899.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="910.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="894.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="878.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1182.3" y="851.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="862.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.08%)</title><rect x="1182.3" y="835.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="846.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.08%)</title><rect x="1182.3" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="830.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.16%)</title><rect x="1183.3" y="1203.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.3" y="1214.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1183.3" y="1187.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.3" y="1198.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1184.2" y="1187.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1187.2" y="1198.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1185.2" y="1235.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="1246.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1185.2" y="1219.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1185.2" y="1203.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1185.2" y="1187.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="1198.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1185.2" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="1182.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.08%)</title><rect x="1185.2" y="1155.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="1166.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.08%)</title><rect x="1185.2" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="1150.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.08%)</title><rect x="1185.2" y="1123.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="1134.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.08%)</title><rect x="1185.2" y="1107.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.2" y="1118.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.08%)</title><rect x="1185.2" y="1091.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="1102.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.08%)</title><rect x="1186.1" y="1235.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.1" y="1246.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.08%)</title><rect x="1186.1" y="1219.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.1" y="1230.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1187.1" y="1267.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.1" y="1278.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1187.1" y="1251.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.1" y="1262.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1187.1" y="1235.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="1246.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.08%)</title><rect x="1187.1" y="1219.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.1" y="1230.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1187.1" y="1203.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="1214.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.08%)</title><rect x="1187.1" y="1187.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="1198.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="1299.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.1" y="1310.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="1283.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.1" y="1294.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="1267.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.0" y="1278.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="1251.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="1262.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="1235.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="1219.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="1203.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="1214.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.08%)</title><rect x="1189.0" y="1187.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.0" y="1198.0"></text>
</g>
</g>
</svg>
