<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (283 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.35%)</title><rect x="10.0" y="1315.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.35%)</title><rect x="10.0" y="1299.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 7.77%)</title><rect x="14.2" y="1315.0" width="91.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1326.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.35%)</title><rect x="14.2" y="1299.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateCommittedOffsets (1 samples, 0.35%)</title><rect x="14.2" y="1283.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.2" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.35%)</title><rect x="14.2" y="1267.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.35%)</title><rect x="14.2" y="1251.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.35%)</title><rect x="14.2" y="1235.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 7.42%)</title><rect x="18.3" y="1299.0" width="87.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.3" y="1310.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.71%)</title><rect x="18.3" y="1283.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.3" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.35%)</title><rect x="18.3" y="1267.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.3" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="18.3" y="1251.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.3" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="18.3" y="1235.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="18.3" y="1219.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.3" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="18.3" y="1203.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.3" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="18.3" y="1187.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.35%)</title><rect x="18.3" y="1171.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.35%)</title><rect x="18.3" y="1155.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.35%)</title><rect x="18.3" y="1139.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.35%)</title><rect x="18.3" y="1123.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$253/704168787.apply (1 samples, 0.35%)</title><rect x="18.3" y="1107.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.35%)</title><rect x="22.5" y="1267.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.resume (1 samples, 0.35%)</title><rect x="22.5" y="1251.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 2.47%)</title><rect x="26.7" y="1283.0" width="29.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.7" y="1294.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/184033702.accept (6 samples, 2.12%)</title><rect x="26.7" y="1267.0" width="25.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.7" y="1278.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (6 samples, 2.12%)</title><rect x="26.7" y="1251.0" width="25.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.7" y="1262.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.71%)</title><rect x="26.7" y="1235.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.7" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.71%)</title><rect x="26.7" y="1219.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.71%)</title><rect x="26.7" y="1203.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.71%)</title><rect x="26.7" y="1187.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.71%)</title><rect x="26.7" y="1171.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.7" y="1182.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="30.8" y="1155.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="33.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.71%)</title><rect x="35.0" y="1235.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.35%)</title><rect x="39.2" y="1219.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.71%)</title><rect x="43.4" y="1235.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.71%)</title><rect x="43.4" y="1219.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.35%)</title><rect x="43.4" y="1203.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.35%)</title><rect x="47.5" y="1203.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.35%)</title><rect x="47.5" y="1187.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.35%)</title><rect x="47.5" y="1171.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.5" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.35%)</title><rect x="47.5" y="1155.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.35%)</title><rect x="51.7" y="1267.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.35%)</title><rect x="51.7" y="1251.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.35%)</title><rect x="51.7" y="1235.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.35%)</title><rect x="51.7" y="1219.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.24%)</title><rect x="55.9" y="1283.0" width="50.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.9" y="1294.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.24%)</title><rect x="55.9" y="1267.0" width="50.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.9" y="1278.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 1.77%)</title><rect x="55.9" y="1251.0" width="20.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.06%)</title><rect x="55.9" y="1235.0" width="12.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.06%)</title><rect x="55.9" y="1219.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="55.9" y="1203.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="55.9" y="1187.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.35%)</title><rect x="55.9" y="1171.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/991491413.linkToTargetMethod (1 samples, 0.35%)</title><rect x="55.9" y="1155.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/2037991182.invokeStatic_JJ_L (1 samples, 0.35%)</title><rect x="55.9" y="1139.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$$Lambda$74/1527853285.get$Lambda (1 samples, 0.35%)</title><rect x="55.9" y="1123.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.9" y="1134.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.35%)</title><rect x="55.9" y="1107.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="58.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/1714870947.shouldBlock (1 samples, 0.35%)</title><rect x="60.0" y="1203.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.35%)</title><rect x="60.0" y="1187.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.35%)</title><rect x="60.0" y="1171.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.0" y="1182.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.35%)</title><rect x="60.0" y="1155.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.0" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.35%)</title><rect x="60.0" y="1139.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (1 samples, 0.35%)</title><rect x="60.0" y="1123.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.35%)</title><rect x="60.0" y="1107.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.35%)</title><rect x="60.0" y="1091.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.35%)</title><rect x="64.2" y="1203.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.35%)</title><rect x="64.2" y="1187.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.35%)</title><rect x="64.2" y="1171.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.35%)</title><rect x="64.2" y="1155.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.35%)</title><rect x="64.2" y="1139.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.71%)</title><rect x="68.4" y="1235.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.71%)</title><rect x="68.4" y="1219.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.71%)</title><rect x="68.4" y="1203.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.71%)</title><rect x="68.4" y="1187.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.71%)</title><rect x="68.4" y="1171.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="71.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.35%)</title><rect x="72.5" y="1155.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.35%)</title><rect x="72.5" y="1139.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.35%)</title><rect x="72.5" y="1123.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.41%)</title><rect x="76.7" y="1251.0" width="16.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.06%)</title><rect x="76.7" y="1235.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.06%)</title><rect x="76.7" y="1219.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.7" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.35%)</title><rect x="76.7" y="1203.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="80.9" y="1203.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="80.9" y="1187.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="80.9" y="1171.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="83.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="80.9" y="1155.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="80.9" y="1139.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.9" y="1150.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.35%)</title><rect x="80.9" y="1123.0" width="4.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="83.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.35%)</title><rect x="85.1" y="1203.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.1" y="1214.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.35%)</title><rect x="85.1" y="1187.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.1" y="1198.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.35%)</title><rect x="85.1" y="1171.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="88.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.35%)</title><rect x="85.1" y="1155.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.1" y="1166.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.35%)</title><rect x="85.1" y="1139.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.1" y="1150.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.35%)</title><rect x="85.1" y="1123.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.35%)</title><rect x="89.2" y="1235.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.35%)</title><rect x="89.2" y="1219.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.35%)</title><rect x="89.2" y="1203.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.71%)</title><rect x="93.4" y="1251.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.71%)</title><rect x="93.4" y="1235.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.71%)</title><rect x="93.4" y="1219.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.71%)</title><rect x="93.4" y="1203.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.35%)</title><rect x="93.4" y="1187.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="93.4" y="1171.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.35%)</title><rect x="93.4" y="1155.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.35%)</title><rect x="97.6" y="1187.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.35%)</title><rect x="97.6" y="1171.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.35%)</title><rect x="97.6" y="1155.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.35%)</title><rect x="97.6" y="1139.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="100.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.35%)</title><rect x="97.6" y="1123.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.6" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.35%)</title><rect x="97.6" y="1107.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.6" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.35%)</title><rect x="97.6" y="1091.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="100.6" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.35%)</title><rect x="97.6" y="1075.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.6" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.35%)</title><rect x="97.6" y="1059.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.6" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.35%)</title><rect x="97.6" y="1043.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.6" y="1054.0"></text>
</g>
<g>
<title>__read (1 samples, 0.35%)</title><rect x="97.6" y="1027.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="100.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.35%)</title><rect x="101.7" y="1251.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="104.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.35%)</title><rect x="101.7" y="1235.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="104.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.35%)</title><rect x="101.7" y="1219.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="104.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1961591082.accept (1 samples, 0.35%)</title><rect x="101.7" y="1203.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.35%)</title><rect x="101.7" y="1187.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="104.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.35%)</title><rect x="101.7" y="1171.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="104.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.35%)</title><rect x="101.7" y="1155.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.7" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="101.7" y="1139.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="101.7" y="1123.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="104.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.run (141 samples, 49.82%)</title><rect x="105.9" y="1315.0" width="587.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.9" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (141 samples, 49.82%)</title><rect x="105.9" y="1299.0" width="587.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.9" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (141 samples, 49.82%)</title><rect x="105.9" y="1283.0" width="587.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.9" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1535483320.run (131 samples, 46.29%)</title><rect x="110.1" y="1267.0" width="546.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.1" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1535483320...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (131 samples, 46.29%)</title><rect x="110.1" y="1251.0" width="546.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.1" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (131 samples, 46.29%)</title><rect x="110.1" y="1235.0" width="546.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.1" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (122 samples, 43.11%)</title><rect x="110.1" y="1219.0" width="508.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.1" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (26 samples, 9.19%)</title><rect x="110.1" y="1203.0" width="108.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.1" y="1214.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (25 samples, 8.83%)</title><rect x="114.2" y="1187.0" width="104.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.2" y="1198.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (25 samples, 8.83%)</title><rect x="114.2" y="1171.0" width="104.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.2" y="1182.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 8.83%)</title><rect x="114.2" y="1155.0" width="104.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.2" y="1166.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 8.83%)</title><rect x="114.2" y="1139.0" width="104.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.2" y="1150.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (25 samples, 8.83%)</title><rect x="114.2" y="1123.0" width="104.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.2" y="1134.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 3.53%)</title><rect x="114.2" y="1107.0" width="41.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.2" y="1118.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.77%)</title><rect x="114.2" y="1091.0" width="20.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.77%)</title><rect x="114.2" y="1075.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 1.77%)</title><rect x="114.2" y="1059.0" width="20.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.77%)</title><rect x="114.2" y="1043.0" width="20.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="117.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.41%)</title><rect x="114.2" y="1027.0" width="16.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="117.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.71%)</title><rect x="122.6" y="1011.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="125.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.35%)</title><rect x="130.9" y="1027.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="133.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 1.77%)</title><rect x="135.1" y="1091.0" width="20.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="138.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.77%)</title><rect x="135.1" y="1075.0" width="20.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="138.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.71%)</title><rect x="135.1" y="1059.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.71%)</title><rect x="135.1" y="1043.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="138.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.06%)</title><rect x="143.4" y="1059.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 1.06%)</title><rect x="143.4" y="1043.0" width="12.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.35%)</title><rect x="143.4" y="1027.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.71%)</title><rect x="147.6" y="1027.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (1 samples, 0.35%)</title><rect x="151.8" y="1011.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (14 samples, 4.95%)</title><rect x="155.9" y="1107.0" width="58.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.9" y="1118.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.71%)</title><rect x="155.9" y="1091.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.71%)</title><rect x="155.9" y="1075.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.35%)</title><rect x="160.1" y="1059.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.71%)</title><rect x="164.3" y="1091.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.71%)</title><rect x="164.3" y="1075.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.71%)</title><rect x="164.3" y="1059.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.71%)</title><rect x="164.3" y="1043.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.71%)</title><rect x="164.3" y="1027.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.3" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.71%)</title><rect x="164.3" y="1011.0" width="8.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="167.3" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.71%)</title><rect x="164.3" y="995.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="167.3" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.71%)</title><rect x="164.3" y="979.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="167.3" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.71%)</title><rect x="164.3" y="963.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="167.3" y="974.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.35%)</title><rect x="168.4" y="947.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="171.4" y="958.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="168.4" y="931.0" width="4.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="171.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 3.53%)</title><rect x="172.6" y="1091.0" width="41.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.6" y="1102.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.12%)</title><rect x="172.6" y="1075.0" width="25.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.6" y="1086.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.35%)</title><rect x="172.6" y="1059.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="175.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.35%)</title><rect x="172.6" y="1043.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.35%)</title><rect x="172.6" y="1027.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.35%)</title><rect x="172.6" y="1011.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.35%)</title><rect x="172.6" y="995.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 1.77%)</title><rect x="176.8" y="1059.0" width="20.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.35%)</title><rect x="176.8" y="1043.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 1.41%)</title><rect x="181.0" y="1043.0" width="16.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 1.41%)</title><rect x="181.0" y="1027.0" width="16.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 1.06%)</title><rect x="185.1" y="1011.0" width="12.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="188.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 1.06%)</title><rect x="185.1" y="995.0" width="12.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="188.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 1.41%)</title><rect x="197.6" y="1075.0" width="16.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.41%)</title><rect x="197.6" y="1059.0" width="16.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.41%)</title><rect x="197.6" y="1043.0" width="16.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="197.6" y="1027.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.35%)</title><rect x="197.6" y="1011.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.35%)</title><rect x="197.6" y="995.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.35%)</title><rect x="197.6" y="979.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="200.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.35%)</title><rect x="197.6" y="963.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.35%)</title><rect x="197.6" y="947.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.35%)</title><rect x="201.8" y="1027.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.35%)</title><rect x="201.8" y="1011.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.35%)</title><rect x="201.8" y="995.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.35%)</title><rect x="201.8" y="979.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.35%)</title><rect x="201.8" y="963.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.35%)</title><rect x="206.0" y="1027.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.35%)</title><rect x="206.0" y="1011.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.35%)</title><rect x="206.0" y="995.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.35%)</title><rect x="206.0" y="979.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.0" y="990.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.35%)</title><rect x="206.0" y="963.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.0" y="974.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.35%)</title><rect x="206.0" y="947.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.35%)</title><rect x="210.1" y="1027.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.1" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="210.1" y="1011.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.1" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="210.1" y="995.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="213.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.35%)</title><rect x="214.3" y="1107.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.35%)</title><rect x="214.3" y="1091.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.35%)</title><rect x="214.3" y="1075.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.35%)</title><rect x="214.3" y="1059.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.35%)</title><rect x="214.3" y="1043.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (96 samples, 33.92%)</title><rect x="218.5" y="1203.0" width="400.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.5" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessPipeline...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (21 samples, 7.42%)</title><rect x="218.5" y="1187.0" width="87.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.5" y="1198.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.35%)</title><rect x="222.7" y="1171.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.7" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (19 samples, 6.71%)</title><rect x="226.8" y="1171.0" width="79.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.8" y="1182.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (15 samples, 5.30%)</title><rect x="243.5" y="1155.0" width="62.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.5" y="1166.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 1.77%)</title><rect x="243.5" y="1139.0" width="20.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 1.77%)</title><rect x="243.5" y="1123.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 1.77%)</title><rect x="243.5" y="1107.0" width="20.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 1.77%)</title><rect x="243.5" y="1091.0" width="20.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.71%)</title><rect x="256.0" y="1075.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.35%)</title><rect x="260.2" y="1059.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.2" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 3.53%)</title><rect x="264.3" y="1139.0" width="41.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.3" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 3.18%)</title><rect x="268.5" y="1123.0" width="37.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.5" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.06%)</title><rect x="293.5" y="1107.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.06%)</title><rect x="306.0" y="1187.0" width="12.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="309.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="314.4" y="1171.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.4" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.35%)</title><rect x="314.4" y="1155.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (25 samples, 8.83%)</title><rect x="318.6" y="1187.0" width="104.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.6" y="1198.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (25 samples, 8.83%)</title><rect x="318.6" y="1171.0" width="104.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.6" y="1182.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 5.30%)</title><rect x="318.6" y="1155.0" width="62.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="321.6" y="1166.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 5.30%)</title><rect x="318.6" y="1139.0" width="62.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="321.6" y="1150.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 3.89%)</title><rect x="331.1" y="1123.0" width="45.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.1" y="1134.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 2.47%)</title><rect x="339.4" y="1107.0" width="29.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="342.4" y="1118.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 2.12%)</title><rect x="343.6" y="1091.0" width="25.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="346.6" y="1102.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 2.12%)</title><rect x="343.6" y="1075.0" width="25.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="346.6" y="1086.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.06%)</title><rect x="347.7" y="1059.0" width="12.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="350.7" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.71%)</title><rect x="347.7" y="1043.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="350.7" y="1054.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.71%)</title><rect x="347.7" y="1027.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="350.7" y="1038.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.71%)</title><rect x="347.7" y="1011.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="350.7" y="1022.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.35%)</title><rect x="351.9" y="995.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="354.9" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="356.1" y="1043.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="359.1" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="356.1" y="1027.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="359.1" y="1038.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.35%)</title><rect x="356.1" y="1011.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="359.1" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.71%)</title><rect x="360.2" y="1059.0" width="8.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="363.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.71%)</title><rect x="368.6" y="1107.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="371.6" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="376.9" y="1123.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="379.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 1.41%)</title><rect x="381.1" y="1155.0" width="16.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.35%)</title><rect x="381.1" y="1139.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="384.1" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="381.1" y="1123.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="384.1" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="381.1" y="1107.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="384.1" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="381.1" y="1091.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="384.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 1.06%)</title><rect x="385.3" y="1139.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="388.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 1.06%)</title><rect x="385.3" y="1123.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.3" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="393.6" y="1107.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="396.6" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="393.6" y="1091.0" width="4.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="396.6" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.12%)</title><rect x="397.8" y="1155.0" width="25.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.8" y="1166.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 2.12%)</title><rect x="397.8" y="1139.0" width="25.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.8" y="1150.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.12%)</title><rect x="397.8" y="1123.0" width="25.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="400.8" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.77%)</title><rect x="401.9" y="1107.0" width="20.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.9" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.77%)</title><rect x="401.9" y="1091.0" width="20.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.35%)</title><rect x="418.6" y="1075.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (47 samples, 16.61%)</title><rect x="422.8" y="1187.0" width="196.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.8" y="1198.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (47 samples, 16.61%)</title><rect x="422.8" y="1171.0" width="196.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.8" y="1182.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.35%)</title><rect x="422.8" y="1155.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="425.8" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="422.8" y="1139.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="425.8" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="422.8" y="1123.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="425.8" y="1134.0"></text>
</g>
<g>
<title>CompiledIC_before(nmethod*, unsigned char*) (1 samples, 0.35%)</title><rect x="422.8" y="1107.0" width="4.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="425.8" y="1118.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.35%)</title><rect x="422.8" y="1091.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="425.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/954416394.process (43 samples, 15.19%)</title><rect x="427.0" y="1155.0" width="179.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="430.0" y="1166.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (43 samples, 15.19%)</title><rect x="427.0" y="1139.0" width="179.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="430.0" y="1150.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (43 samples, 15.19%)</title><rect x="427.0" y="1123.0" width="179.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="430.0" y="1134.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.35%)</title><rect x="431.1" y="1107.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.1" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.35%)</title><rect x="431.1" y="1091.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.1" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.35%)</title><rect x="431.1" y="1075.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="434.1" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.35%)</title><rect x="431.1" y="1059.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="434.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.35%)</title><rect x="431.1" y="1043.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="434.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (41 samples, 14.49%)</title><rect x="435.3" y="1107.0" width="171.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="438.3" y="1118.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>java/lang/Thread.sleep (39 samples, 13.78%)</title><rect x="439.5" y="1091.0" width="162.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="442.5" y="1102.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (31 samples, 10.95%)</title><rect x="464.5" y="1075.0" width="129.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="467.5" y="1086.0">JVM_Sleep</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.35%)</title><rect x="485.3" y="1059.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="488.3" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="489.5" y="1059.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="492.5" y="1070.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (24 samples, 8.48%)</title><rect x="493.7" y="1059.0" width="100.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="496.7" y="1070.0">os::sleep(Th..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.41%)</title><rect x="506.2" y="1043.0" width="16.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="509.2" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.35%)</title><rect x="518.7" y="1027.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="521.7" y="1038.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.35%)</title><rect x="522.9" y="1043.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="525.9" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 3.89%)</title><rect x="527.0" y="1043.0" width="45.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="530.0" y="1054.0">__pt..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.71%)</title><rect x="572.9" y="1043.0" width="8.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="575.9" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.35%)</title><rect x="581.2" y="1043.0" width="4.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="584.2" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="585.4" y="1043.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="588.4" y="1054.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.35%)</title><rect x="589.6" y="1043.0" width="4.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="592.6" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.71%)</title><rect x="593.7" y="1075.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="596.7" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.35%)</title><rect x="602.1" y="1091.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="605.1" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="602.1" y="1075.0" width="4.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="605.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.71%)</title><rect x="606.3" y="1155.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="609.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.71%)</title><rect x="606.3" y="1139.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="609.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/758541441.get$Lambda (2 samples, 0.71%)</title><rect x="606.3" y="1123.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/758541441.&lt;init&gt; (1 samples, 0.35%)</title><rect x="610.4" y="1107.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="613.4" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.35%)</title><rect x="614.6" y="1155.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="617.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.18%)</title><rect x="618.8" y="1219.0" width="37.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="621.8" y="1230.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 3.18%)</title><rect x="618.8" y="1203.0" width="37.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="621.8" y="1214.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.41%)</title><rect x="639.6" y="1187.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$279/420341481.accept (4 samples, 1.41%)</title><rect x="639.6" y="1171.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (4 samples, 1.41%)</title><rect x="639.6" y="1155.0" width="16.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="642.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 1.41%)</title><rect x="639.6" y="1139.0" width="16.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="642.6" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 1.41%)</title><rect x="639.6" y="1123.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.6" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 1.41%)</title><rect x="639.6" y="1107.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="642.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 1.06%)</title><rect x="656.3" y="1267.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="659.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.06%)</title><rect x="656.3" y="1251.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.06%)</title><rect x="656.3" y="1235.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.06%)</title><rect x="656.3" y="1219.0" width="12.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="659.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.12%)</title><rect x="668.8" y="1267.0" width="25.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="671.8" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.12%)</title><rect x="668.8" y="1251.0" width="25.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="671.8" y="1262.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.35%)</title><rect x="668.8" y="1235.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="671.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.35%)</title><rect x="668.8" y="1219.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="671.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.35%)</title><rect x="668.8" y="1203.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="671.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.35%)</title><rect x="668.8" y="1187.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="671.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.35%)</title><rect x="668.8" y="1171.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="671.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.77%)</title><rect x="673.0" y="1235.0" width="20.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="676.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.77%)</title><rect x="673.0" y="1219.0" width="20.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="676.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.77%)</title><rect x="673.0" y="1203.0" width="20.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="676.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.77%)</title><rect x="673.0" y="1187.0" width="20.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="676.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.35%)</title><rect x="693.8" y="1315.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="696.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.35%)</title><rect x="693.8" y="1299.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="696.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="693.8" y="1283.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="696.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.35%)</title><rect x="693.8" y="1267.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="696.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.35%)</title><rect x="693.8" y="1251.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="696.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.35%)</title><rect x="693.8" y="1235.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="696.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.35%)</title><rect x="693.8" y="1219.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="696.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.35%)</title><rect x="693.8" y="1203.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="696.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.35%)</title><rect x="693.8" y="1187.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="696.8" y="1198.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.35%)</title><rect x="693.8" y="1171.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="696.8" y="1182.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.35%)</title><rect x="693.8" y="1155.0" width="4.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="696.8" y="1166.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.35%)</title><rect x="693.8" y="1139.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="696.8" y="1150.0"></text>
</g>
<g>
<title>start_thread (118 samples, 41.70%)</title><rect x="698.0" y="1315.0" width="492.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="701.0" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (118 samples, 41.70%)</title><rect x="698.0" y="1299.0" width="492.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="701.0" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 3.18%)</title><rect x="698.0" y="1283.0" width="37.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="701.0" y="1294.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 3.18%)</title><rect x="698.0" y="1267.0" width="37.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="701.0" y="1278.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 2.83%)</title><rect x="698.0" y="1251.0" width="33.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="701.0" y="1262.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 2.83%)</title><rect x="698.0" y="1235.0" width="33.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="701.0" y="1246.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.06%)</title><rect x="718.8" y="1219.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="721.8" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.71%)</title><rect x="723.0" y="1203.0" width="8.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="726.0" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.35%)</title><rect x="731.3" y="1251.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="734.3" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.35%)</title><rect x="731.3" y="1235.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.3" y="1246.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.35%)</title><rect x="731.3" y="1219.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="734.3" y="1230.0"></text>
</g>
<g>
<title>JavaThread::run() (109 samples, 38.52%)</title><rect x="735.5" y="1283.0" width="454.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="738.5" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (109 samples, 38.52%)</title><rect x="735.5" y="1267.0" width="454.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="738.5" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (108 samples, 38.16%)</title><rect x="735.5" y="1251.0" width="450.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="738.5" y="1262.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (108 samples, 38.16%)</title><rect x="735.5" y="1235.0" width="450.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="738.5" y="1246.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (105 samples, 37.10%)</title><rect x="735.5" y="1219.0" width="437.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="738.5" y="1230.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (105 samples, 37.10%)</title><rect x="735.5" y="1203.0" width="437.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="738.5" y="1214.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (45 samples, 15.90%)</title><rect x="735.5" y="1187.0" width="187.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="738.5" y="1198.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.71%)</title><rect x="735.5" y="1171.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="738.5" y="1182.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.71%)</title><rect x="735.5" y="1155.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="738.5" y="1166.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.35%)</title><rect x="739.7" y="1139.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.7" y="1150.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.35%)</title><rect x="739.7" y="1123.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="742.7" y="1134.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.35%)</title><rect x="743.9" y="1171.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="746.9" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.35%)</title><rect x="743.9" y="1155.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="746.9" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.35%)</title><rect x="743.9" y="1139.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="746.9" y="1150.0"></text>
</g>
<g>
<title>MachNode::peephole(Block*, int, PhaseRegAlloc*, int&amp;, Compile*) (1 samples, 0.35%)</title><rect x="748.0" y="1171.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="751.0" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.06%)</title><rect x="752.2" y="1171.0" width="12.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="755.2" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.06%)</title><rect x="752.2" y="1155.0" width="12.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="755.2" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.06%)</title><rect x="752.2" y="1139.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="755.2" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.06%)</title><rect x="764.7" y="1171.0" width="12.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="767.7" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.06%)</title><rect x="764.7" y="1155.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="767.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 1.06%)</title><rect x="764.7" y="1139.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="767.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.35%)</title><rect x="764.7" y="1123.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="767.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.35%)</title><rect x="768.9" y="1123.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="771.9" y="1134.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.35%)</title><rect x="768.9" y="1107.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="771.9" y="1118.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.35%)</title><rect x="768.9" y="1091.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="771.9" y="1102.0"></text>
</g>
<g>
<title>storeLConditionalNode::memory_operand() const (1 samples, 0.35%)</title><rect x="768.9" y="1075.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="771.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.35%)</title><rect x="773.0" y="1123.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="776.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 12.37%)</title><rect x="777.2" y="1171.0" width="145.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="780.2" y="1182.0">PhaseChaitin::Regi..</text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.35%)</title><rect x="777.2" y="1155.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="780.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.06%)</title><rect x="781.4" y="1155.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="784.4" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.71%)</title><rect x="781.4" y="1139.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="784.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.35%)</title><rect x="789.7" y="1139.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="792.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 2.83%)</title><rect x="793.9" y="1155.0" width="33.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="796.9" y="1166.0">Ph..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.35%)</title><rect x="823.1" y="1139.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="826.1" y="1150.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.35%)</title><rect x="823.1" y="1123.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="826.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.12%)</title><rect x="827.2" y="1155.0" width="25.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="830.2" y="1166.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.35%)</title><rect x="835.6" y="1139.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="838.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.06%)</title><rect x="839.8" y="1139.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="842.8" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.71%)</title><rect x="843.9" y="1123.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="846.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.35%)</title><rect x="852.3" y="1155.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="855.3" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.35%)</title><rect x="852.3" y="1139.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="855.3" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="852.3" y="1123.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="855.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.71%)</title><rect x="856.4" y="1155.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="859.4" y="1166.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.35%)</title><rect x="860.6" y="1139.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="863.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.35%)</title><rect x="864.8" y="1155.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="867.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.35%)</title><rect x="864.8" y="1139.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="867.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.41%)</title><rect x="868.9" y="1155.0" width="16.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="871.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.06%)</title><rect x="868.9" y="1139.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="871.9" y="1150.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.35%)</title><rect x="881.4" y="1139.0" width="4.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="884.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.35%)</title><rect x="885.6" y="1155.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="888.6" y="1166.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.06%)</title><rect x="889.8" y="1155.0" width="12.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="892.8" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 1.06%)</title><rect x="889.8" y="1139.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="892.8" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.35%)</title><rect x="889.8" y="1123.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="892.8" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.71%)</title><rect x="894.0" y="1123.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="897.0" y="1134.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.35%)</title><rect x="894.0" y="1107.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="897.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.35%)</title><rect x="898.1" y="1107.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="901.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.35%)</title><rect x="902.3" y="1155.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.3" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="902.3" y="1139.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.3" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.06%)</title><rect x="906.5" y="1155.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="909.5" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.35%)</title><rect x="914.8" y="1139.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="917.8" y="1150.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.35%)</title><rect x="919.0" y="1155.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="922.0" y="1166.0"></text>
</g>
<g>
<title>Compile::Optimize() (51 samples, 18.02%)</title><rect x="923.1" y="1187.0" width="212.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.1" y="1198.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.35%)</title><rect x="923.1" y="1171.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.35%)</title><rect x="923.1" y="1155.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="926.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.35%)</title><rect x="923.1" y="1139.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_AddP(Node*, Node*) (1 samples, 0.35%)</title><rect x="923.1" y="1123.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.1" y="1134.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.35%)</title><rect x="923.1" y="1107.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.1" y="1118.0"></text>
</g>
<g>
<title>Compile::AliasType::Init(int, TypePtr const*) (1 samples, 0.35%)</title><rect x="923.1" y="1091.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.1" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_instance_id(int) const (1 samples, 0.35%)</title><rect x="923.1" y="1075.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.1" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="923.1" y="1059.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.1" y="1070.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="923.1" y="1043.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.1" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.71%)</title><rect x="927.3" y="1171.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="930.3" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.35%)</title><rect x="935.7" y="1171.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.7" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.35%)</title><rect x="935.7" y="1155.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.35%)</title><rect x="935.7" y="1139.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="938.7" y="1150.0"></text>
</g>
<g>
<title>MemNode::Ideal_common_DU_postCCP(PhaseCCP*, Node*, Node*) (1 samples, 0.35%)</title><rect x="935.7" y="1123.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="938.7" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.35%)</title><rect x="935.7" y="1107.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="938.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (40 samples, 14.13%)</title><rect x="939.8" y="1171.0" width="166.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="942.8" y="1182.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="1155.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="942.8" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="1139.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.8" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="1123.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="942.8" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="1107.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.8" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="1091.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="942.8" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="1075.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.8" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="1059.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.8" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="1043.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.8" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="1027.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.8" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="1011.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.8" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="939.8" y="995.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.71%)</title><rect x="944.0" y="1155.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="947.0" y="1166.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.35%)</title><rect x="948.2" y="1139.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.41%)</title><rect x="952.3" y="1155.0" width="16.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="955.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (27 samples, 9.54%)</title><rect x="969.0" y="1155.0" width="112.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.0" y="1166.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (25 samples, 8.83%)</title><rect x="977.3" y="1139.0" width="104.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.3" y="1150.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.35%)</title><rect x="977.3" y="1123.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (24 samples, 8.48%)</title><rect x="981.5" y="1123.0" width="100.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.5" y="1134.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.71%)</title><rect x="1073.3" y="1107.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 1.06%)</title><rect x="1081.6" y="1155.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.35%)</title><rect x="1094.1" y="1155.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="1098.3" y="1155.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="1098.3" y="1139.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.3" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1098.3" y="1123.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1101.3" y="1134.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.35%)</title><rect x="1098.3" y="1107.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.3" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="1102.4" y="1155.0" width="4.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1105.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 2.12%)</title><rect x="1106.6" y="1171.0" width="25.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.6" y="1182.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 2.12%)</title><rect x="1106.6" y="1155.0" width="25.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1109.6" y="1166.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1106.6" y="1139.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1106.6" y="1123.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.6" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="1106.6" y="1107.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1109.6" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1110.8" y="1139.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.8" y="1150.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.35%)</title><rect x="1110.8" y="1123.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.8" y="1134.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.35%)</title><rect x="1110.8" y="1107.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.8" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="1110.8" y="1091.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.8" y="1102.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.35%)</title><rect x="1114.9" y="1139.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.9" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.35%)</title><rect x="1119.1" y="1139.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.1" y="1150.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="1119.1" y="1123.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1122.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.35%)</title><rect x="1123.3" y="1139.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1127.5" y="1139.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.35%)</title><rect x="1127.5" y="1123.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.5" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.35%)</title><rect x="1127.5" y="1107.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.5" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.35%)</title><rect x="1131.6" y="1171.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="1131.6" y="1155.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="1131.6" y="1139.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1131.6" y="1123.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.6" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.83%)</title><rect x="1135.8" y="1187.0" width="33.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.8" y="1198.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.83%)</title><rect x="1135.8" y="1171.0" width="33.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.8" y="1182.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.83%)</title><rect x="1135.8" y="1155.0" width="33.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.8" y="1166.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.83%)</title><rect x="1135.8" y="1139.0" width="33.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.8" y="1150.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.83%)</title><rect x="1135.8" y="1123.0" width="33.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.8" y="1134.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.83%)</title><rect x="1135.8" y="1107.0" width="33.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.8" y="1118.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.83%)</title><rect x="1135.8" y="1091.0" width="33.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.8" y="1102.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.83%)</title><rect x="1135.8" y="1075.0" width="33.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.8" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.83%)</title><rect x="1135.8" y="1059.0" width="33.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.8" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.83%)</title><rect x="1135.8" y="1043.0" width="33.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.8" y="1054.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.83%)</title><rect x="1135.8" y="1027.0" width="33.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.8" y="1038.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.83%)</title><rect x="1135.8" y="1011.0" width="33.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.8" y="1022.0">Pa..</text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.35%)</title><rect x="1135.8" y="995.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.8" y="1006.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.35%)</title><rect x="1135.8" y="979.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.8" y="990.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.35%)</title><rect x="1135.8" y="963.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.8" y="974.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.35%)</title><rect x="1135.8" y="947.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.8" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.47%)</title><rect x="1140.0" y="995.0" width="29.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.0" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.47%)</title><rect x="1140.0" y="979.0" width="29.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.0" y="990.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.47%)</title><rect x="1140.0" y="963.0" width="29.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.0" y="974.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.47%)</title><rect x="1140.0" y="947.0" width="29.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.0" y="958.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.47%)</title><rect x="1140.0" y="931.0" width="29.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.0" y="942.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.12%)</title><rect x="1140.0" y="915.0" width="25.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.0" y="926.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1140.0" y="899.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.0" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.35%)</title><rect x="1140.0" y="883.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.0" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.35%)</title><rect x="1140.0" y="867.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.0" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.35%)</title><rect x="1140.0" y="851.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.0" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.35%)</title><rect x="1140.0" y="835.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.0" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="1140.0" y="819.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.0" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="1140.0" y="803.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.0" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.35%)</title><rect x="1140.0" y="787.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.0" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_checkcast(ciBytecodeStream*) (1 samples, 0.35%)</title><rect x="1140.0" y="771.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.0" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.35%)</title><rect x="1140.0" y="755.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.0" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1140.0" y="739.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.0" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1140.0" y="723.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.0" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.77%)</title><rect x="1144.1" y="899.0" width="20.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.1" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.77%)</title><rect x="1144.1" y="883.0" width="20.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.77%)</title><rect x="1144.1" y="867.0" width="20.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.77%)</title><rect x="1144.1" y="851.0" width="20.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.77%)</title><rect x="1144.1" y="835.0" width="20.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.77%)</title><rect x="1144.1" y="819.0" width="20.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.1" y="830.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1144.1" y="803.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.1" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.35%)</title><rect x="1144.1" y="787.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.1" y="798.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1144.1" y="771.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.1" y="782.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1144.1" y="755.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.1" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.35%)</title><rect x="1144.1" y="739.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.1" y="750.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.35%)</title><rect x="1144.1" y="723.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.1" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.41%)</title><rect x="1148.3" y="803.0" width="16.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.41%)</title><rect x="1148.3" y="787.0" width="16.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.06%)</title><rect x="1148.3" y="771.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.06%)</title><rect x="1148.3" y="755.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.06%)</title><rect x="1148.3" y="739.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.06%)</title><rect x="1148.3" y="723.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.06%)</title><rect x="1148.3" y="707.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.06%)</title><rect x="1148.3" y="691.0" width="12.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.06%)</title><rect x="1148.3" y="675.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.06%)</title><rect x="1148.3" y="659.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.06%)</title><rect x="1148.3" y="643.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.06%)</title><rect x="1148.3" y="627.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1148.3" y="611.0" width="8.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1148.3" y="595.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1148.3" y="579.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1148.3" y="563.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1148.3" y="547.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1148.3" y="531.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1148.3" y="515.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1148.3" y="499.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1148.3" y="483.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1148.3" y="467.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1148.3" y="451.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1148.3" y="435.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1148.3" y="419.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1148.3" y="403.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1148.3" y="387.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1148.3" y="371.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1148.3" y="355.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1148.3" y="339.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1148.3" y="323.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1148.3" y="307.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1148.3" y="291.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1148.3" y="275.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1148.3" y="259.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1148.3" y="243.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1148.3" y="227.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1148.3" y="211.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1148.3" y="195.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1148.3" y="179.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1148.3" y="163.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1148.3" y="147.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1148.3" y="131.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.35%)</title><rect x="1148.3" y="115.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.35%)</title><rect x="1148.3" y="99.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.3" y="110.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.35%)</title><rect x="1148.3" y="83.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.3" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.35%)</title><rect x="1148.3" y="67.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.3" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.35%)</title><rect x="1148.3" y="51.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.3" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.35%)</title><rect x="1148.3" y="35.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.3" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1152.5" y="515.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.5" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1152.5" y="499.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.5" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1152.5" y="483.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.5" y="494.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.35%)</title><rect x="1152.5" y="467.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.5" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.6" y="611.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.6" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.6" y="595.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.6" y="579.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1156.6" y="563.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1156.6" y="547.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1156.6" y="531.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1156.6" y="515.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1156.6" y="499.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.6" y="483.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1156.6" y="467.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1156.6" y="451.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1156.6" y="435.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1156.6" y="419.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1156.6" y="403.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.6" y="414.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.6" y="387.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.6" y="398.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.35%)</title><rect x="1156.6" y="371.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.6" y="382.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1156.6" y="355.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.6" y="366.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.35%)</title><rect x="1156.6" y="339.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.6" y="350.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.35%)</title><rect x="1156.6" y="323.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.6" y="334.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.35%)</title><rect x="1156.6" y="307.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.6" y="318.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.35%)</title><rect x="1156.6" y="291.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.6" y="302.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.35%)</title><rect x="1160.8" y="771.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.8" y="782.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="1160.8" y="755.0" width="4.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1163.8" y="766.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.35%)</title><rect x="1165.0" y="915.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.0" y="926.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.35%)</title><rect x="1165.0" y="899.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.0" y="910.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.35%)</title><rect x="1165.0" y="883.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.0" y="894.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="1165.0" y="867.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1168.0" y="878.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.35%)</title><rect x="1169.2" y="1187.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.2" y="1198.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.35%)</title><rect x="1169.2" y="1171.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.2" y="1182.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.35%)</title><rect x="1169.2" y="1155.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.2" y="1166.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.35%)</title><rect x="1169.2" y="1139.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="1150.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.06%)</title><rect x="1173.3" y="1219.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.3" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.06%)</title><rect x="1173.3" y="1203.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.3" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.06%)</title><rect x="1173.3" y="1187.0" width="12.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.06%)</title><rect x="1173.3" y="1171.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.3" y="1182.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.35%)</title><rect x="1173.3" y="1155.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.3" y="1166.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.35%)</title><rect x="1173.3" y="1139.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="1150.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.35%)</title><rect x="1173.3" y="1123.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.35%)</title><rect x="1173.3" y="1107.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.3" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1173.3" y="1091.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1173.3" y="1075.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1173.3" y="1059.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.3" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1173.3" y="1043.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.3" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1173.3" y="1027.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1173.3" y="1011.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1173.3" y="995.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.3" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1173.3" y="979.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.3" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1173.3" y="963.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.3" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1173.3" y="947.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.3" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1173.3" y="931.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1173.3" y="915.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.3" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1173.3" y="899.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.3" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1173.3" y="883.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.3" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1173.3" y="867.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.3" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1173.3" y="851.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1173.3" y="835.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1173.3" y="819.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="830.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1173.3" y="803.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.3" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1173.3" y="787.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.3" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1173.3" y="771.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.3" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1173.3" y="755.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.3" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1173.3" y="739.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="750.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1173.3" y="723.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.3" y="734.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.35%)</title><rect x="1173.3" y="707.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="718.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.35%)</title><rect x="1173.3" y="691.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="702.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.35%)</title><rect x="1173.3" y="675.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="686.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.35%)</title><rect x="1177.5" y="1155.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.35%)</title><rect x="1177.5" y="1139.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.35%)</title><rect x="1177.5" y="1123.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::move_op(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool) (1 samples, 0.35%)</title><rect x="1177.5" y="1107.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="1118.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.35%)</title><rect x="1181.7" y="1155.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="1166.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.35%)</title><rect x="1181.7" y="1139.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="1150.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.35%)</title><rect x="1181.7" y="1123.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="1134.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.35%)</title><rect x="1181.7" y="1107.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="1118.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.35%)</title><rect x="1185.8" y="1251.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="1262.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.35%)</title><rect x="1185.8" y="1235.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.8" y="1246.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="1185.8" y="1219.0" width="4.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1188.8" y="1230.0"></text>
</g>
</g>
</svg>
