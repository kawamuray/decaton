<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="757"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="757"> </text>
<g id="frames">
<g>
<title>all (996 samples, 100.00%)</title><rect x="10.0" y="723.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="734.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (275 samples, 27.61%)</title><rect x="10.0" y="707.0" width="325.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="718.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.10%)</title><rect x="11.2" y="691.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.commitOffsets (1 samples, 0.10%)</title><rect x="11.2" y="675.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="686.0"></text>
</g>
<g>
<title>java/util/OptionalLong.ifPresent (1 samples, 0.10%)</title><rect x="11.2" y="659.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$283/1358113382.accept (1 samples, 0.10%)</title><rect x="11.2" y="643.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$commitOffsets$41 (1 samples, 0.10%)</title><rect x="11.2" y="627.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (1 samples, 0.10%)</title><rect x="11.2" y="611.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (1 samples, 0.10%)</title><rect x="11.2" y="595.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.2" y="606.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.10%)</title><rect x="11.2" y="579.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (273 samples, 27.41%)</title><rect x="12.4" y="691.0" width="323.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.4" y="702.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.40%)</title><rect x="12.4" y="675.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.4" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.40%)</title><rect x="12.4" y="659.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1487473940.accept (4 samples, 0.40%)</title><rect x="12.4" y="643.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.40%)</title><rect x="12.4" y="627.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.40%)</title><rect x="12.4" y="611.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.4" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.40%)</title><rect x="12.4" y="595.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.4" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.10%)</title><rect x="15.9" y="579.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.30%)</title><rect x="17.1" y="675.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.30%)</title><rect x="17.1" y="659.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.30%)</title><rect x="17.1" y="643.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="17.1" y="627.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="17.1" y="611.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="17.1" y="595.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="17.1" y="579.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="17.1" y="563.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="17.1" y="547.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.1" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="18.3" y="611.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="18.3" y="595.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="18.3" y="579.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="18.3" y="563.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="18.3" y="547.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="18.3" y="531.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.3" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/161231821.test (1 samples, 0.10%)</title><rect x="18.3" y="515.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.3" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="19.5" y="563.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.5" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="19.5" y="547.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="19.5" y="531.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.5" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="19.5" y="515.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.5" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="19.5" y="499.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="22.5" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 0.30%)</title><rect x="20.7" y="675.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (3 samples, 0.30%)</title><rect x="20.7" y="659.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.30%)</title><rect x="20.7" y="643.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="20.7" y="627.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.30%)</title><rect x="20.7" y="611.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="20.7" y="595.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="20.7" y="579.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.20%)</title><rect x="20.7" y="563.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.20%)</title><rect x="20.7" y="547.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.20%)</title><rect x="20.7" y="531.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$251/1702374074.test (1 samples, 0.10%)</title><rect x="20.7" y="515.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.7" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="21.8" y="515.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="24.8" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.10%)</title><rect x="23.0" y="595.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.10%)</title><rect x="23.0" y="579.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.0" y="590.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="23.0" y="563.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="26.0" y="574.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (203 samples, 20.38%)</title><rect x="24.2" y="675.0" width="240.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.2" y="686.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1169005549.accept (199 samples, 19.98%)</title><rect x="24.2" y="659.0" width="235.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.2" y="670.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (199 samples, 19.98%)</title><rect x="24.2" y="643.0" width="235.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.2" y="654.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.10%)</title><rect x="24.2" y="627.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (158 samples, 15.86%)</title><rect x="25.4" y="627.0" width="187.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.4" y="638.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (158 samples, 15.86%)</title><rect x="25.4" y="611.0" width="187.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.4" y="622.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (158 samples, 15.86%)</title><rect x="25.4" y="595.0" width="187.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.4" y="606.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (158 samples, 15.86%)</title><rect x="25.4" y="579.0" width="187.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.4" y="590.0">java/util/concurrent/Exe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (158 samples, 15.86%)</title><rect x="25.4" y="563.0" width="187.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.4" y="574.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (142 samples, 14.26%)</title><rect x="43.2" y="547.0" width="168.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.2" y="558.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (108 samples, 10.84%)</title><rect x="43.2" y="531.0" width="127.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.2" y="542.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (108 samples, 10.84%)</title><rect x="43.2" y="515.0" width="127.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="46.2" y="526.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (108 samples, 10.84%)</title><rect x="43.2" y="499.0" width="127.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="46.2" y="510.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (108 samples, 10.84%)</title><rect x="43.2" y="483.0" width="127.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.2" y="494.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (108 samples, 10.84%)</title><rect x="43.2" y="467.0" width="127.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.2" y="478.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (71 samples, 7.13%)</title><rect x="87.0" y="451.0" width="84.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.0" y="462.0">sun/misc/U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="88.2" y="435.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="91.2" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark (61 samples, 6.12%)</title><rect x="90.6" y="435.0" width="72.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="93.6" y="446.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="91.7" y="419.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="94.7" y="430.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.30%)</title><rect x="92.9" y="419.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="95.9" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="96.5" y="419.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="99.5" y="430.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 4.02%)</title><rect x="97.7" y="419.0" width="47.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="100.7" y="430.0">__pt..</text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="145.1" y="419.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="148.1" y="430.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.10%)</title><rect x="146.2" y="419.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="149.2" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.31%)</title><rect x="147.4" y="419.0" width="15.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="150.4" y="430.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.60%)</title><rect x="162.8" y="435.0" width="7.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="165.8" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="169.9" y="435.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="172.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (34 samples, 3.41%)</title><rect x="171.1" y="531.0" width="40.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.1" y="542.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (34 samples, 3.41%)</title><rect x="171.1" y="515.0" width="40.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="174.1" y="526.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (34 samples, 3.41%)</title><rect x="171.1" y="499.0" width="40.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="174.1" y="510.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (34 samples, 3.41%)</title><rect x="171.1" y="483.0" width="40.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="174.1" y="494.0">jav..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="211.4" y="547.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="214.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.30%)</title><rect x="212.6" y="627.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.30%)</title><rect x="212.6" y="611.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.50%)</title><rect x="216.1" y="627.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.50%)</title><rect x="216.1" y="611.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.1" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.50%)</title><rect x="216.1" y="595.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (32 samples, 3.21%)</title><rect x="222.1" y="627.0" width="37.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.1" y="638.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 1.61%)</title><rect x="237.5" y="611.0" width="18.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.5" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (16 samples, 1.61%)</title><rect x="237.5" y="595.0" width="18.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.5" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 1.00%)</title><rect x="237.5" y="579.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.5" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 1.00%)</title><rect x="237.5" y="563.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.5" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 1.00%)</title><rect x="237.5" y="547.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.5" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="244.6" y="531.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="247.6" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="244.6" y="515.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="247.6" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.10%)</title><rect x="244.6" y="499.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="247.6" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="245.8" y="531.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="248.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.30%)</title><rect x="249.3" y="579.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.3" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="252.9" y="579.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.9" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="256.4" y="611.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="259.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.10%)</title><rect x="260.0" y="659.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.10%)</title><rect x="260.0" y="643.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="260.0" y="627.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.10%)</title><rect x="260.0" y="611.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="263.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.30%)</title><rect x="261.2" y="659.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="264.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.20%)</title><rect x="262.3" y="643.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.20%)</title><rect x="262.3" y="627.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.20%)</title><rect x="262.3" y="611.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.3" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.10%)</title><rect x="263.5" y="595.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.5" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="263.5" y="579.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 6.02%)</title><rect x="264.7" y="675.0" width="71.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.7" y="686.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 5.92%)</title><rect x="264.7" y="659.0" width="69.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.7" y="670.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 3.61%)</title><rect x="264.7" y="643.0" width="42.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.7" y="654.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.10%)</title><rect x="264.7" y="627.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="267.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.10%)</title><rect x="264.7" y="611.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.7" y="622.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.10%)</title><rect x="264.7" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="267.7" y="606.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.10%)</title><rect x="264.7" y="579.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="267.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 3.51%)</title><rect x="265.9" y="627.0" width="41.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.9" y="638.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 3.51%)</title><rect x="265.9" y="611.0" width="41.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.9" y="622.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 3.11%)</title><rect x="265.9" y="595.0" width="36.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.9" y="606.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (31 samples, 3.11%)</title><rect x="265.9" y="579.0" width="36.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.9" y="590.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (19 samples, 1.91%)</title><rect x="269.5" y="563.0" width="22.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.5" y="574.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.90%)</title><rect x="280.1" y="547.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.90%)</title><rect x="280.1" y="531.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.90%)</title><rect x="280.1" y="515.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.90%)</title><rect x="280.1" y="499.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.90%)</title><rect x="280.1" y="483.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.90%)</title><rect x="280.1" y="467.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.80%)</title><rect x="281.3" y="451.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.10%)</title><rect x="290.8" y="547.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.10%)</title><rect x="290.8" y="531.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.10%)</title><rect x="290.8" y="515.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.90%)</title><rect x="292.0" y="563.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 0.90%)</title><rect x="292.0" y="547.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.60%)</title><rect x="294.3" y="531.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.3" y="542.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.60%)</title><rect x="294.3" y="515.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.3" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="300.3" y="499.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="303.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.10%)</title><rect x="301.4" y="531.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="304.4" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.10%)</title><rect x="301.4" y="515.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.30%)</title><rect x="302.6" y="595.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="305.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.30%)</title><rect x="302.6" y="579.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.10%)</title><rect x="302.6" y="563.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="305.6" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="302.6" y="547.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="305.6" y="558.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="302.6" y="531.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="305.6" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="302.6" y="515.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.6" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.10%)</title><rect x="302.6" y="499.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.6" y="510.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.10%)</title><rect x="302.6" y="483.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.6" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="302.6" y="467.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.6" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="302.6" y="451.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="305.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="303.8" y="563.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="303.8" y="547.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="306.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="303.8" y="531.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="305.0" y="515.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="305.0" y="499.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.10%)</title><rect x="306.2" y="595.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="309.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="306.2" y="579.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="306.2" y="563.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="306.2" y="547.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.2" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="306.2" y="531.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="309.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 1.00%)</title><rect x="307.4" y="643.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="310.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.90%)</title><rect x="307.4" y="627.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.60%)</title><rect x="307.4" y="611.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 0.50%)</title><rect x="307.4" y="595.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1407631138.accept (5 samples, 0.50%)</title><rect x="307.4" y="579.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (4 samples, 0.40%)</title><rect x="308.6" y="563.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.20%)</title><rect x="308.6" y="547.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.20%)</title><rect x="308.6" y="531.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="308.6" y="515.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="308.6" y="499.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="311.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.10%)</title><rect x="309.7" y="515.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="309.7" y="499.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.7" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="309.7" y="483.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.20%)</title><rect x="310.9" y="547.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (2 samples, 0.20%)</title><rect x="310.9" y="531.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (2 samples, 0.20%)</title><rect x="310.9" y="515.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (2 samples, 0.20%)</title><rect x="310.9" y="499.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="313.3" y="595.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="313.3" y="579.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="313.3" y="563.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="313.3" y="547.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="313.3" y="531.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="313.3" y="515.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.3" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="313.3" y="499.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="316.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.30%)</title><rect x="314.5" y="611.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.5" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.30%)</title><rect x="314.5" y="595.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="317.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="314.5" y="579.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.5" y="590.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.30%)</title><rect x="314.5" y="563.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.5" y="574.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.30%)</title><rect x="314.5" y="547.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.30%)</title><rect x="314.5" y="531.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.5" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="314.5" y="515.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.20%)</title><rect x="314.5" y="499.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="317.5" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.20%)</title><rect x="314.5" y="483.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.5" y="494.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.10%)</title><rect x="315.7" y="467.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="318.7" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="315.7" y="451.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="318.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/25628411.apply (1 samples, 0.10%)</title><rect x="315.7" y="435.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="318.7" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.10%)</title><rect x="316.8" y="515.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.8" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.10%)</title><rect x="316.8" y="499.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.8" y="510.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="316.8" y="483.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="318.0" y="627.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.10%)</title><rect x="318.0" y="611.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="321.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.10%)</title><rect x="319.2" y="643.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.10%)</title><rect x="319.2" y="627.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.10%)</title><rect x="319.2" y="611.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.10%)</title><rect x="320.4" y="643.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.60%)</title><rect x="321.6" y="643.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.50%)</title><rect x="321.6" y="627.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="324.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.10%)</title><rect x="321.6" y="611.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.10%)</title><rect x="321.6" y="595.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="324.6" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="321.6" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="324.6" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="321.6" y="563.0" width="1.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="324.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.40%)</title><rect x="322.8" y="611.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.30%)</title><rect x="322.8" y="595.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="322.8" y="579.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.10%)</title><rect x="322.8" y="563.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.10%)</title><rect x="322.8" y="547.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.10%)</title><rect x="322.8" y="531.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="322.8" y="515.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.8" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="322.8" y="499.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.8" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="322.8" y="483.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="325.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (2 samples, 0.20%)</title><rect x="324.0" y="579.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.0" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="324.0" y="563.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="327.0" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.20%)</title><rect x="324.0" y="547.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="327.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="326.3" y="595.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="329.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="326.3" y="579.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="329.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.10%)</title><rect x="326.3" y="563.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="329.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.10%)</title><rect x="326.3" y="547.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.10%)</title><rect x="326.3" y="531.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="329.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.10%)</title><rect x="327.5" y="627.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="330.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.10%)</title><rect x="327.5" y="611.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="327.5" y="595.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="330.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="327.5" y="579.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="330.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.10%)</title><rect x="327.5" y="563.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="330.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.10%)</title><rect x="327.5" y="547.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.10%)</title><rect x="327.5" y="531.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.10%)</title><rect x="327.5" y="515.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.10%)</title><rect x="327.5" y="499.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="330.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.10%)</title><rect x="327.5" y="483.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.10%)</title><rect x="327.5" y="467.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.10%)</title><rect x="327.5" y="451.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.50%)</title><rect x="328.7" y="643.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.40%)</title><rect x="329.9" y="627.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.30%)</title><rect x="329.9" y="611.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="331.1" y="595.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="331.1" y="579.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="331.1" y="563.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="334.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="331.1" y="547.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.10%)</title><rect x="332.2" y="595.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="335.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.10%)</title><rect x="332.2" y="579.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="333.4" y="611.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.4" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="334.6" y="659.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="337.6" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="334.6" y="643.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="337.6" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (658 samples, 66.06%)</title><rect x="335.8" y="707.0" width="779.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.8" y="718.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (658 samples, 66.06%)</title><rect x="335.8" y="691.0" width="779.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.8" y="702.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (658 samples, 66.06%)</title><rect x="335.8" y="675.0" width="779.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.8" y="686.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1114762463.run (437 samples, 43.88%)</title><rect x="340.5" y="659.0" width="517.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="343.5" y="670.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/111476..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (437 samples, 43.88%)</title><rect x="340.5" y="643.0" width="517.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.5" y="654.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (437 samples, 43.88%)</title><rect x="340.5" y="627.0" width="517.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="343.5" y="638.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (417 samples, 41.87%)</title><rect x="340.5" y="611.0" width="494.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.5" y="622.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenP..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (121 samples, 12.15%)</title><rect x="340.5" y="595.0" width="143.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="343.5" y="606.0">com/linecorp/decat..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="346.5" y="579.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="349.5" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.70%)</title><rect x="347.7" y="579.0" width="8.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="350.7" y="590.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.50%)</title><rect x="350.0" y="563.0" width="5.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="353.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (108 samples, 10.84%)</title><rect x="355.9" y="579.0" width="128.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.9" y="590.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (108 samples, 10.84%)</title><rect x="355.9" y="563.0" width="128.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.9" y="574.0">com/linecorp/dec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="355.9" y="547.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="358.9" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="355.9" y="531.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="358.9" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="355.9" y="515.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="358.9" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="355.9" y="499.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="358.9" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (107 samples, 10.74%)</title><rect x="357.1" y="547.0" width="126.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.1" y="558.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (107 samples, 10.74%)</title><rect x="357.1" y="531.0" width="126.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.1" y="542.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (107 samples, 10.74%)</title><rect x="357.1" y="515.0" width="126.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.1" y="526.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (33 samples, 3.31%)</title><rect x="357.1" y="499.0" width="39.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.1" y="510.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (10 samples, 1.00%)</title><rect x="357.1" y="483.0" width="11.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="360.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (10 samples, 1.00%)</title><rect x="357.1" y="467.0" width="11.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.30%)</title><rect x="365.4" y="451.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.4" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.30%)</title><rect x="365.4" y="435.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.4" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.30%)</title><rect x="365.4" y="419.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="368.4" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.30%)</title><rect x="365.4" y="403.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (23 samples, 2.31%)</title><rect x="369.0" y="483.0" width="27.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="372.0" y="494.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (23 samples, 2.31%)</title><rect x="369.0" y="467.0" width="27.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="372.0" y="478.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (6 samples, 0.60%)</title><rect x="369.0" y="451.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (6 samples, 0.60%)</title><rect x="369.0" y="435.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="372.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.10%)</title><rect x="374.9" y="419.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="377.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (17 samples, 1.71%)</title><rect x="376.1" y="451.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (17 samples, 1.71%)</title><rect x="376.1" y="435.0" width="20.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (4 samples, 0.40%)</title><rect x="376.1" y="419.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="379.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (9 samples, 0.90%)</title><rect x="380.8" y="419.0" width="10.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="383.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (3 samples, 0.30%)</title><rect x="387.9" y="403.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (4 samples, 0.40%)</title><rect x="391.5" y="419.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="394.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (2 samples, 0.20%)</title><rect x="393.9" y="403.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (62 samples, 6.22%)</title><rect x="396.2" y="499.0" width="73.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="399.2" y="510.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.10%)</title><rect x="396.2" y="483.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="399.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.10%)</title><rect x="396.2" y="467.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="399.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.10%)</title><rect x="396.2" y="451.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="399.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.10%)</title><rect x="396.2" y="435.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="399.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.10%)</title><rect x="396.2" y="419.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="399.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.30%)</title><rect x="397.4" y="483.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="400.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.30%)</title><rect x="397.4" y="467.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 0.50%)</title><rect x="401.0" y="483.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.20%)</title><rect x="404.5" y="467.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="407.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="405.7" y="451.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.60%)</title><rect x="406.9" y="483.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.60%)</title><rect x="406.9" y="467.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.9" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="406.9" y="451.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="409.9" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="406.9" y="435.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="409.9" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="406.9" y="419.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="409.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (5 samples, 0.50%)</title><rect x="408.1" y="451.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="411.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (5 samples, 0.50%)</title><rect x="408.1" y="435.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="411.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (5 samples, 0.50%)</title><rect x="408.1" y="419.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="411.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (47 samples, 4.72%)</title><rect x="414.0" y="483.0" width="55.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.0" y="494.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.41%)</title><rect x="414.0" y="467.0" width="16.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.60%)</title><rect x="414.0" y="451.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.60%)</title><rect x="414.0" y="435.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="417.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.60%)</title><rect x="414.0" y="419.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.80%)</title><rect x="421.1" y="451.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="424.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (33 samples, 3.31%)</title><rect x="430.6" y="467.0" width="39.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.6" y="478.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (33 samples, 3.31%)</title><rect x="430.6" y="451.0" width="39.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="433.6" y="462.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.20%)</title><rect x="430.6" y="435.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (31 samples, 3.11%)</title><rect x="433.0" y="435.0" width="36.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.0" y="446.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.00%)</title><rect x="437.7" y="419.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.50%)</title><rect x="440.1" y="403.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="443.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.50%)</title><rect x="440.1" y="387.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.50%)</title><rect x="440.1" y="371.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.40%)</title><rect x="441.2" y="355.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.20%)</title><rect x="446.0" y="403.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="448.4" y="403.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="451.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="448.4" y="387.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="451.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.80%)</title><rect x="449.5" y="419.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.50%)</title><rect x="453.1" y="403.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="456.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.50%)</title><rect x="453.1" y="387.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="456.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.50%)</title><rect x="453.1" y="371.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="456.1" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.50%)</title><rect x="453.1" y="355.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="456.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.70%)</title><rect x="459.0" y="419.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="462.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.70%)</title><rect x="459.0" y="403.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="462.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.70%)</title><rect x="459.0" y="387.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.70%)</title><rect x="459.0" y="371.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="462.0" y="382.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.70%)</title><rect x="459.0" y="355.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="462.0" y="366.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.60%)</title><rect x="460.2" y="339.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="463.2" y="350.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor10.newInstance (1 samples, 0.10%)</title><rect x="466.1" y="323.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="469.1" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.20%)</title><rect x="467.3" y="419.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="470.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.20%)</title><rect x="467.3" y="403.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.20%)</title><rect x="467.3" y="387.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="470.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 1.20%)</title><rect x="469.7" y="499.0" width="14.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="472.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.20%)</title><rect x="469.7" y="483.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="472.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.20%)</title><rect x="469.7" y="467.0" width="14.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="472.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 1.20%)</title><rect x="469.7" y="451.0" width="14.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="472.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 1.20%)</title><rect x="469.7" y="435.0" width="14.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="472.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="482.7" y="419.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.7" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (296 samples, 29.72%)</title><rect x="483.9" y="595.0" width="350.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.9" y="606.0">com/linecorp/decaton/processor/runtime/ProcessPi..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (58 samples, 5.82%)</title><rect x="486.3" y="579.0" width="68.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.3" y="590.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.10%)</title><rect x="486.3" y="563.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="489.3" y="574.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (57 samples, 5.72%)</title><rect x="487.4" y="563.0" width="67.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.4" y="574.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (55 samples, 5.52%)</title><rect x="489.8" y="547.0" width="65.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="492.8" y="558.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (19 samples, 1.91%)</title><rect x="492.2" y="531.0" width="22.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="495.2" y="542.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (19 samples, 1.91%)</title><rect x="492.2" y="515.0" width="22.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="495.2" y="526.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (19 samples, 1.91%)</title><rect x="492.2" y="499.0" width="22.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="495.2" y="510.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (19 samples, 1.91%)</title><rect x="492.2" y="483.0" width="22.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="495.2" y="494.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 1.00%)</title><rect x="514.7" y="531.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="517.7" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 1.00%)</title><rect x="514.7" y="515.0" width="11.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="517.7" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 1.00%)</title><rect x="514.7" y="499.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="517.7" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (24 samples, 2.41%)</title><rect x="526.5" y="531.0" width="28.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="529.5" y="542.0">ja..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.10%)</title><rect x="539.6" y="515.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="542.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 1.20%)</title><rect x="540.8" y="515.0" width="14.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="543.8" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="540.8" y="499.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="543.8" y="510.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="540.8" y="483.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="543.8" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 1.10%)</title><rect x="541.9" y="499.0" width="13.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="544.9" y="510.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.20%)</title><rect x="552.6" y="483.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="555.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (11 samples, 1.10%)</title><rect x="555.0" y="579.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="558.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.30%)</title><rect x="557.3" y="563.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="560.3" y="574.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.30%)</title><rect x="557.3" y="547.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="560.3" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.60%)</title><rect x="560.9" y="563.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="563.9" y="574.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.60%)</title><rect x="560.9" y="547.0" width="7.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="563.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (159 samples, 15.96%)</title><rect x="568.0" y="579.0" width="188.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="571.0" y="590.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (159 samples, 15.96%)</title><rect x="568.0" y="563.0" width="188.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="571.0" y="574.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="581.0" y="547.0" width="3.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="584.0" y="558.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="581.0" y="531.0" width="3.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="584.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (39 samples, 3.92%)</title><rect x="584.6" y="547.0" width="46.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="587.6" y="558.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (34 samples, 3.41%)</title><rect x="590.5" y="531.0" width="40.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="593.5" y="542.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (33 samples, 3.31%)</title><rect x="591.7" y="515.0" width="39.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="594.7" y="526.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (17 samples, 1.71%)</title><rect x="604.7" y="499.0" width="20.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="607.7" y="510.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (17 samples, 1.71%)</title><rect x="604.7" y="483.0" width="20.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="607.7" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (17 samples, 1.71%)</title><rect x="604.7" y="467.0" width="20.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="607.7" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.60%)</title><rect x="615.4" y="451.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="618.4" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="615.4" y="435.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="618.4" y="446.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.10%)</title><rect x="615.4" y="419.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="618.4" y="430.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.20%)</title><rect x="616.6" y="435.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="619.6" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.30%)</title><rect x="619.0" y="435.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="622.0" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.30%)</title><rect x="619.0" y="419.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="622.0" y="430.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="621.3" y="403.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="624.3" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="622.5" y="451.0" width="2.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="625.5" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="624.9" y="499.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="627.9" y="510.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="628.4" y="499.0" width="2.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="631.4" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.30%)</title><rect x="630.8" y="547.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="633.8" y="558.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (15 samples, 1.51%)</title><rect x="634.4" y="547.0" width="17.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="637.4" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.toString (15 samples, 1.51%)</title><rect x="634.4" y="531.0" width="17.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="637.4" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (15 samples, 1.51%)</title><rect x="634.4" y="515.0" width="17.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.4" y="526.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="647.4" y="499.0" width="3.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="650.4" y="510.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="647.4" y="483.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="650.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="650.9" y="499.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="653.9" y="510.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (88 samples, 8.84%)</title><rect x="652.1" y="547.0" width="104.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="655.1" y="558.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (85 samples, 8.53%)</title><rect x="655.7" y="531.0" width="100.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.7" y="542.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.61%)</title><rect x="677.0" y="515.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="680.0" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (16 samples, 1.61%)</title><rect x="677.0" y="499.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="680.0" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (16 samples, 1.61%)</title><rect x="677.0" y="483.0" width="19.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="680.0" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (16 samples, 1.61%)</title><rect x="677.0" y="467.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="680.0" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.30%)</title><rect x="696.0" y="515.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.0" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.30%)</title><rect x="696.0" y="499.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="699.0" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.30%)</title><rect x="696.0" y="483.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="699.0" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.30%)</title><rect x="696.0" y="467.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="699.0" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (48 samples, 4.82%)</title><rect x="699.5" y="515.0" width="56.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="702.5" y="526.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (41 samples, 4.12%)</title><rect x="707.8" y="499.0" width="48.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="710.8" y="510.0">java..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.10%)</title><rect x="710.2" y="483.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="713.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.30%)</title><rect x="711.4" y="483.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="714.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.30%)</title><rect x="711.4" y="467.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="714.4" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 3.51%)</title><rect x="714.9" y="483.0" width="41.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="717.9" y="494.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.40%)</title><rect x="737.4" y="467.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="740.4" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.90%)</title><rect x="742.2" y="467.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="745.2" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="751.6" y="451.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="754.6" y="462.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.30%)</title><rect x="752.8" y="467.0" width="3.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="755.8" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (44 samples, 4.42%)</title><rect x="756.4" y="579.0" width="52.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="759.4" y="590.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (44 samples, 4.42%)</title><rect x="756.4" y="563.0" width="52.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="759.4" y="574.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1562673504.process (17 samples, 1.71%)</title><rect x="761.1" y="547.0" width="20.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="764.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (17 samples, 1.71%)</title><rect x="761.1" y="531.0" width="20.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="764.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (14 samples, 1.41%)</title><rect x="763.5" y="515.0" width="16.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="766.5" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.80%)</title><rect x="770.6" y="499.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.6" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="771.8" y="483.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="774.8" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="771.8" y="467.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="774.8" y="478.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.60%)</title><rect x="773.0" y="483.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="776.0" y="494.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.60%)</title><rect x="773.0" y="467.0" width="7.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="776.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="780.1" y="515.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="783.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="780.1" y="499.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="783.1" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="780.1" y="483.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="783.1" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="780.1" y="467.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="783.1" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.70%)</title><rect x="781.3" y="547.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.3" y="558.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.70%)</title><rect x="781.3" y="531.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="784.3" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.10%)</title><rect x="789.6" y="547.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="792.6" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.10%)</title><rect x="789.6" y="531.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="792.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$269/1211441696.get$Lambda (1 samples, 0.10%)</title><rect x="789.6" y="515.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="792.6" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="789.6" y="499.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="792.6" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="789.6" y="483.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="792.6" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="789.6" y="467.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="792.6" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="789.6" y="451.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="792.6" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="790.7" y="547.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="793.7" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="790.7" y="531.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="793.7" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.90%)</title><rect x="791.9" y="547.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.9" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.60%)</title><rect x="795.5" y="531.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="798.5" y="542.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.50%)</title><rect x="795.5" y="515.0" width="5.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="798.5" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.10%)</title><rect x="801.4" y="515.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="804.4" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="802.6" y="547.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="805.6" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="802.6" y="531.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="805.6" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.40%)</title><rect x="803.8" y="547.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="806.8" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.10%)</title><rect x="807.3" y="531.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="810.3" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="807.3" y="515.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="810.3" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="807.3" y="499.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="810.3" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="807.3" y="483.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="810.3" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="807.3" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="810.3" y="478.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="807.3" y="451.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="810.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 2.21%)</title><rect x="808.5" y="579.0" width="26.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="811.5" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 2.21%)</title><rect x="808.5" y="563.0" width="26.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="811.5" y="574.0">j..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.70%)</title><rect x="820.4" y="547.0" width="8.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="823.4" y="558.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.70%)</title><rect x="820.4" y="531.0" width="8.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="823.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.50%)</title><rect x="828.7" y="547.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="831.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$278/1659526106.accept (5 samples, 0.50%)</title><rect x="828.7" y="531.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="831.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (5 samples, 0.50%)</title><rect x="828.7" y="515.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="831.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (5 samples, 0.50%)</title><rect x="828.7" y="499.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="831.7" y="510.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.50%)</title><rect x="828.7" y="483.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.7" y="494.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.50%)</title><rect x="828.7" y="467.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="831.7" y="478.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.20%)</title><rect x="832.2" y="451.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="835.2" y="462.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="832.2" y="435.0" width="2.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="835.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 2.01%)</title><rect x="834.6" y="611.0" width="23.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="837.6" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 2.01%)</title><rect x="834.6" y="595.0" width="23.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="837.6" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 1.71%)</title><rect x="838.1" y="579.0" width="20.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="841.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$278/1659526106.accept (16 samples, 1.61%)</title><rect x="839.3" y="563.0" width="19.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="842.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (16 samples, 1.61%)</title><rect x="839.3" y="547.0" width="19.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="842.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (16 samples, 1.61%)</title><rect x="839.3" y="531.0" width="19.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="842.3" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (16 samples, 1.61%)</title><rect x="839.3" y="515.0" width="19.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="842.3" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.create (16 samples, 1.61%)</title><rect x="839.3" y="499.0" width="19.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="842.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (11 samples, 1.10%)</title><rect x="858.3" y="659.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="861.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 1.10%)</title><rect x="858.3" y="643.0" width="13.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="861.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 1.10%)</title><rect x="858.3" y="627.0" width="13.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="861.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 1.10%)</title><rect x="858.3" y="611.0" width="13.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="861.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1114762463.run (1 samples, 0.10%)</title><rect x="870.1" y="595.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="873.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (206 samples, 20.68%)</title><rect x="871.3" y="659.0" width="244.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="874.3" y="670.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (205 samples, 20.58%)</title><rect x="872.5" y="643.0" width="242.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="875.5" y="654.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (170 samples, 17.07%)</title><rect x="903.3" y="627.0" width="201.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="906.3" y="638.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (13 samples, 1.31%)</title><rect x="912.8" y="611.0" width="15.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="915.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.31%)</title><rect x="912.8" y="595.0" width="15.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="915.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.31%)</title><rect x="912.8" y="579.0" width="15.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="915.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.31%)</title><rect x="912.8" y="563.0" width="15.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="915.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (149 samples, 14.96%)</title><rect x="928.2" y="611.0" width="176.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="931.2" y="622.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (149 samples, 14.96%)</title><rect x="928.2" y="595.0" width="176.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="931.2" y="606.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.20%)</title><rect x="934.1" y="579.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="937.1" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="936.5" y="579.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.5" y="590.0"></text>
</g>
<g>
<title>Unsafe_Park (138 samples, 13.86%)</title><rect x="937.7" y="579.0" width="163.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="940.7" y="590.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="940.0" y="563.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="943.0" y="574.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="942.4" y="563.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="945.4" y="574.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 2.11%)</title><rect x="943.6" y="563.0" width="24.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="946.6" y="574.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.60%)</title><rect x="950.7" y="547.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="953.7" y="558.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.20%)</title><rect x="951.9" y="531.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="954.9" y="542.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.20%)</title><rect x="951.9" y="515.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="954.9" y="526.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="954.2" y="531.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="957.2" y="542.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.20%)</title><rect x="955.4" y="531.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="958.4" y="542.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="957.8" y="547.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.8" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.80%)</title><rect x="959.0" y="547.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="962.0" y="558.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="968.5" y="563.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="971.5" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.30%)</title><rect x="969.6" y="563.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.6" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.20%)</title><rect x="973.2" y="563.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="976.2" y="574.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 1.10%)</title><rect x="975.6" y="563.0" width="13.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="978.6" y="574.0"></text>
</g>
<g>
<title>__lll_unlock_wake (26 samples, 2.61%)</title><rect x="988.6" y="563.0" width="30.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="991.6" y="574.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 5.12%)</title><rect x="1019.4" y="563.0" width="60.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1022.4" y="574.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.80%)</title><rect x="1079.8" y="563.0" width="9.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1082.8" y="574.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.20%)</title><rect x="1089.3" y="563.0" width="2.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1092.3" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.10%)</title><rect x="1091.7" y="563.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1094.7" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="1092.9" y="563.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1095.9" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="1094.0" y="563.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1097.0" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="1095.2" y="563.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1098.2" y="574.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.30%)</title><rect x="1096.4" y="563.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.4" y="574.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1100.0" y="563.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1103.0" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.20%)</title><rect x="1101.1" y="579.0" width="2.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1104.1" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1103.5" y="579.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.90%)</title><rect x="1104.7" y="627.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1107.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.90%)</title><rect x="1104.7" y="611.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1107.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.90%)</title><rect x="1104.7" y="595.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1107.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.90%)</title><rect x="1104.7" y="579.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1107.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1115.4" y="707.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1118.4" y="718.0"></text>
</g>
<g>
<title>start_thread (62 samples, 6.22%)</title><rect x="1116.5" y="707.0" width="73.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1119.5" y="718.0">start_th..</text>
</g>
<g>
<title>java_start(Thread*) (62 samples, 6.22%)</title><rect x="1116.5" y="691.0" width="73.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1119.5" y="702.0">java_sta..</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.81%)</title><rect x="1116.5" y="675.0" width="21.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.5" y="686.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.70%)</title><rect x="1116.5" y="659.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.5" y="670.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.70%)</title><rect x="1116.5" y="643.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.5" y="654.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.40%)</title><rect x="1116.5" y="627.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.5" y="638.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.30%)</title><rect x="1121.3" y="627.0" width="3.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1124.3" y="638.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 1.10%)</title><rect x="1124.8" y="659.0" width="13.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.8" y="670.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.20%)</title><rect x="1124.8" y="643.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.8" y="654.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.20%)</title><rect x="1124.8" y="627.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1127.8" y="638.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.40%)</title><rect x="1127.2" y="643.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.30%)</title><rect x="1127.2" y="627.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="638.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1127.2" y="611.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="622.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1127.2" y="595.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.2" y="606.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1127.2" y="579.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.2" y="590.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.20%)</title><rect x="1128.4" y="611.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.4" y="622.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.20%)</title><rect x="1128.4" y="595.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.4" y="606.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.10%)</title><rect x="1128.4" y="579.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.4" y="590.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.10%)</title><rect x="1128.4" y="563.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.4" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.10%)</title><rect x="1128.4" y="547.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.4" y="558.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (1 samples, 0.10%)</title><rect x="1128.4" y="531.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.4" y="542.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.10%)</title><rect x="1128.4" y="515.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.4" y="526.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1129.6" y="579.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.6" y="590.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1129.6" y="563.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.6" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1130.8" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.8" y="638.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1130.8" y="611.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.8" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.50%)</title><rect x="1131.9" y="643.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.9" y="654.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.50%)</title><rect x="1131.9" y="627.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.9" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.30%)</title><rect x="1131.9" y="611.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.9" y="622.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.30%)</title><rect x="1131.9" y="595.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.9" y="606.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.30%)</title><rect x="1131.9" y="579.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.9" y="590.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.30%)</title><rect x="1131.9" y="563.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.9" y="574.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.30%)</title><rect x="1131.9" y="547.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.9" y="558.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.20%)</title><rect x="1133.1" y="531.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.1" y="542.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.20%)</title><rect x="1135.5" y="611.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.5" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.10%)</title><rect x="1135.5" y="595.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.5" y="606.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.10%)</title><rect x="1135.5" y="579.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.5" y="590.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.10%)</title><rect x="1135.5" y="563.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.5" y="574.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.10%)</title><rect x="1135.5" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.5" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_cset_region_for_worker(unsigned int) (1 samples, 0.10%)</title><rect x="1136.7" y="595.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.7" y="606.0"></text>
</g>
<g>
<title>JavaThread::run() (43 samples, 4.32%)</title><rect x="1137.9" y="675.0" width="50.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.9" y="686.0">JavaT..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (43 samples, 4.32%)</title><rect x="1137.9" y="659.0" width="50.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.9" y="670.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (43 samples, 4.32%)</title><rect x="1137.9" y="643.0" width="50.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.9" y="654.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (43 samples, 4.32%)</title><rect x="1137.9" y="627.0" width="50.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.9" y="638.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (43 samples, 4.32%)</title><rect x="1137.9" y="611.0" width="50.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="622.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (43 samples, 4.32%)</title><rect x="1137.9" y="595.0" width="50.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.9" y="606.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 2.61%)</title><rect x="1137.9" y="579.0" width="30.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.9" y="590.0">Co..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.40%)</title><rect x="1137.9" y="563.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.9" y="574.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.20%)</title><rect x="1139.1" y="547.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.1" y="558.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.20%)</title><rect x="1139.1" y="531.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.1" y="542.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.20%)</title><rect x="1139.1" y="515.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.1" y="526.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.10%)</title><rect x="1141.4" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.4" y="558.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.10%)</title><rect x="1142.6" y="563.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.6" y="574.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="1142.6" y="547.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.6" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.30%)</title><rect x="1143.8" y="563.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.8" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.30%)</title><rect x="1143.8" y="547.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.8" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1143.8" y="531.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.8" y="542.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.10%)</title><rect x="1143.8" y="515.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.8" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.20%)</title><rect x="1145.0" y="531.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.0" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1146.2" y="515.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.2" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (18 samples, 1.81%)</title><rect x="1147.3" y="563.0" width="21.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.3" y="574.0">P..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.10%)</title><rect x="1147.3" y="547.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.3" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.10%)</title><rect x="1148.5" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.5" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.10%)</title><rect x="1148.5" y="531.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.5" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.20%)</title><rect x="1149.7" y="547.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.7" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1149.7" y="531.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.7" y="542.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1150.9" y="531.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.9" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1150.9" y="515.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.9" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.40%)</title><rect x="1152.1" y="547.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.1" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.20%)</title><rect x="1154.5" y="531.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.5" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.20%)</title><rect x="1156.8" y="547.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.8" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.20%)</title><rect x="1156.8" y="531.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.8" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.10%)</title><rect x="1159.2" y="547.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.2" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.10%)</title><rect x="1160.4" y="547.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.4" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.10%)</title><rect x="1160.4" y="531.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.4" y="542.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.10%)</title><rect x="1160.4" y="515.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="526.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1161.6" y="547.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.6" y="558.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1161.6" y="531.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.6" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.10%)</title><rect x="1161.6" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.10%)</title><rect x="1162.8" y="547.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.8" y="558.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.30%)</title><rect x="1163.9" y="547.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.9" y="558.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1166.3" y="531.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.3" y="542.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.10%)</title><rect x="1166.3" y="515.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.3" y="526.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1167.5" y="547.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.5" y="558.0"></text>
</g>
<g>
<title>Compile::Optimize() (12 samples, 1.20%)</title><rect x="1168.7" y="579.0" width="14.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1168.7" y="563.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1168.7" y="547.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1168.7" y="531.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.10%)</title><rect x="1168.7" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.7" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 0.70%)</title><rect x="1169.9" y="563.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.20%)</title><rect x="1169.9" y="547.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="558.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1171.0" y="531.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.0" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="547.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.2" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1173.4" y="547.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.4" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.20%)</title><rect x="1173.4" y="531.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.4" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.20%)</title><rect x="1173.4" y="515.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.4" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.10%)</title><rect x="1174.6" y="499.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.6" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1174.6" y="483.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.6" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="547.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1175.8" y="531.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.10%)</title><rect x="1175.8" y="515.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.8" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.10%)</title><rect x="1175.8" y="499.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.8" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1177.0" y="547.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.0" y="558.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.10%)</title><rect x="1177.0" y="531.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.0" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.40%)</title><rect x="1178.2" y="563.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.30%)</title><rect x="1179.3" y="547.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="558.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1179.3" y="531.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="542.0"></text>
</g>
<g>
<title>LoadNKlassNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1180.5" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.5" y="542.0"></text>
</g>
<g>
<title>LoadNode::klass_identity_common(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1180.5" y="515.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="526.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1180.5" y="499.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="510.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1181.7" y="531.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="542.0"></text>
</g>
<g>
<title>AddNode::hash() const (1 samples, 0.10%)</title><rect x="1181.7" y="515.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.50%)</title><rect x="1182.9" y="579.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.50%)</title><rect x="1182.9" y="563.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.50%)</title><rect x="1182.9" y="547.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.50%)</title><rect x="1182.9" y="531.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.50%)</title><rect x="1182.9" y="515.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.50%)</title><rect x="1182.9" y="499.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.50%)</title><rect x="1182.9" y="483.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.50%)</title><rect x="1182.9" y="467.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.50%)</title><rect x="1182.9" y="451.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.50%)</title><rect x="1182.9" y="435.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.50%)</title><rect x="1182.9" y="419.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.40%)</title><rect x="1182.9" y="403.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1182.9" y="387.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1182.9" y="371.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1182.9" y="355.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1182.9" y="339.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1182.9" y="323.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1182.9" y="307.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="291.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="275.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="259.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="243.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="227.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1182.9" y="211.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="222.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.10%)</title><rect x="1182.9" y="195.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1182.9" y="179.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="190.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.10%)</title><rect x="1182.9" y="163.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.1" y="291.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.1" y="275.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.1" y="259.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.1" y="243.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.1" y="227.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.1" y="211.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.1" y="195.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.1" y="179.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.1" y="163.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.1" y="147.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.1" y="131.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.1" y="115.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.1" y="99.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="110.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.1" y="83.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.1" y="94.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="67.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="78.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="51.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="62.0"></text>
</g>
<g>
<title>CatchProjNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1184.1" y="35.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1185.3" y="307.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1185.3" y="291.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.3" y="302.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1185.3" y="275.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="286.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.10%)</title><rect x="1185.3" y="259.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.3" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1186.4" y="387.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1187.6" y="403.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1187.6" y="387.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.6" y="398.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.10%)</title><rect x="1187.6" y="371.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.6" y="382.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.10%)</title><rect x="1187.6" y="355.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.6" y="366.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1187.6" y="339.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.6" y="350.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.10%)</title><rect x="1188.8" y="675.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.8" y="686.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.10%)</title><rect x="1188.8" y="659.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.8" y="670.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.8" y="643.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.8" y="654.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="638.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="611.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.8" y="579.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="590.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.10%)</title><rect x="1188.8" y="563.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="574.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.10%)</title><rect x="1188.8" y="547.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.8" y="558.0"></text>
</g>
<g>
<title>PtrQueueSet::enqueue_complete_buffer(void**, unsigned long) (1 samples, 0.10%)</title><rect x="1188.8" y="531.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.8" y="542.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="1188.8" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="526.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="1188.8" y="499.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.8" y="510.0"></text>
</g>
</g>
</svg>
