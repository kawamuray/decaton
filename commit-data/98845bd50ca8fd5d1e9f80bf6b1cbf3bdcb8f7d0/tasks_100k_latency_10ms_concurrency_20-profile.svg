<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="869"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="869"> </text>
<g id="frames">
<g>
<title>all (236 samples, 100.00%)</title><rect x="10.0" y="835.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="846.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.42%)</title><rect x="10.0" y="819.0" width="5.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.42%)</title><rect x="10.0" y="803.0" width="5.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.42%)</title><rect x="10.0" y="787.0" width="5.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.42%)</title><rect x="10.0" y="771.0" width="5.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 8.90%)</title><rect x="15.0" y="819.0" width="105.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.0" y="830.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.42%)</title><rect x="15.0" y="803.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.42%)</title><rect x="15.0" y="787.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.42%)</title><rect x="15.0" y="771.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.42%)</title><rect x="15.0" y="755.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.42%)</title><rect x="15.0" y="739.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.42%)</title><rect x="15.0" y="723.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.42%)</title><rect x="15.0" y="707.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.42%)</title><rect x="15.0" y="691.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.42%)</title><rect x="15.0" y="675.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.42%)</title><rect x="15.0" y="659.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.&lt;init&gt; (1 samples, 0.42%)</title><rect x="15.0" y="643.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (1 samples, 0.42%)</title><rect x="15.0" y="627.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.fromStruct (1 samples, 0.42%)</title><rect x="15.0" y="611.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.0" y="622.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.42%)</title><rect x="15.0" y="595.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 8.47%)</title><rect x="20.0" y="803.0" width="100.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.0" y="814.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 1.69%)</title><rect x="20.0" y="787.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.42%)</title><rect x="20.0" y="771.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.42%)</title><rect x="20.0" y="755.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.42%)</title><rect x="20.0" y="739.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.0" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.42%)</title><rect x="25.0" y="771.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.0" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.42%)</title><rect x="25.0" y="755.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$289/1591010837.get$Lambda (1 samples, 0.42%)</title><rect x="25.0" y="739.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.0" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.42%)</title><rect x="30.0" y="771.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$289/1591010837.accept (1 samples, 0.42%)</title><rect x="30.0" y="755.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pausePartitions$39 (1 samples, 0.42%)</title><rect x="30.0" y="739.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pause (1 samples, 0.42%)</title><rect x="30.0" y="723.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/metrics/ValueGauge.increment (1 samples, 0.42%)</title><rect x="30.0" y="707.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.0" y="718.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.42%)</title><rect x="30.0" y="691.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.42%)</title><rect x="35.0" y="771.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.27%)</title><rect x="40.0" y="787.0" width="15.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (3 samples, 1.27%)</title><rect x="40.0" y="771.0" width="15.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (2 samples, 0.85%)</title><rect x="45.0" y="755.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.85%)</title><rect x="45.0" y="739.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.85%)</title><rect x="45.0" y="723.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.0" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.42%)</title><rect x="50.0" y="707.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.0" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.42%)</title><rect x="50.0" y="691.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.0" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.42%)</title><rect x="50.0" y="675.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.0" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.42%)</title><rect x="50.0" y="659.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.0" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.42%)</title><rect x="50.0" y="643.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="53.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 5.51%)</title><rect x="55.0" y="787.0" width="65.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.0" y="798.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 5.08%)</title><rect x="55.0" y="771.0" width="60.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.0" y="782.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 3.81%)</title><rect x="55.0" y="755.0" width="45.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.0" y="766.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.12%)</title><rect x="55.0" y="739.0" width="25.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.0" y="750.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.12%)</title><rect x="55.0" y="723.0" width="25.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.0" y="734.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.42%)</title><rect x="55.0" y="707.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.42%)</title><rect x="55.0" y="691.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.42%)</title><rect x="55.0" y="675.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.42%)</title><rect x="55.0" y="659.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.0" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.42%)</title><rect x="55.0" y="643.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.0" y="654.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.42%)</title><rect x="55.0" y="627.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/1817086732.shouldBlock (2 samples, 0.85%)</title><rect x="60.0" y="707.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.42%)</title><rect x="65.0" y="691.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="68.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.42%)</title><rect x="65.0" y="675.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.42%)</title><rect x="65.0" y="659.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.42%)</title><rect x="65.0" y="643.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.42%)</title><rect x="65.0" y="627.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.42%)</title><rect x="65.0" y="611.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.42%)</title><rect x="65.0" y="595.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.42%)</title><rect x="65.0" y="579.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.42%)</title><rect x="65.0" y="563.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.42%)</title><rect x="65.0" y="547.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="68.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.42%)</title><rect x="65.0" y="531.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.42%)</title><rect x="65.0" y="515.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$245/672323128.test (1 samples, 0.42%)</title><rect x="65.0" y="499.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$hasAvailableFetches$0 (1 samples, 0.42%)</title><rect x="65.0" y="483.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.85%)</title><rect x="70.0" y="707.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.42%)</title><rect x="70.0" y="691.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.42%)</title><rect x="70.0" y="675.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.connectionDelay (1 samples, 0.42%)</title><rect x="70.0" y="659.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.42%)</title><rect x="75.0" y="691.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="78.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.42%)</title><rect x="75.0" y="675.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.42%)</title><rect x="75.0" y="659.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.69%)</title><rect x="80.0" y="739.0" width="20.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.27%)</title><rect x="85.0" y="723.0" width="15.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.42%)</title><rect x="85.0" y="707.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.42%)</title><rect x="85.0" y="691.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.42%)</title><rect x="85.0" y="675.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.42%)</title><rect x="85.0" y="659.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.42%)</title><rect x="85.0" y="643.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.42%)</title><rect x="85.0" y="627.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.42%)</title><rect x="85.0" y="611.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.42%)</title><rect x="85.0" y="595.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.42%)</title><rect x="85.0" y="579.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.0" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.42%)</title><rect x="85.0" y="563.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.0" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.42%)</title><rect x="85.0" y="547.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.42%)</title><rect x="90.0" y="707.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="93.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.42%)</title><rect x="90.0" y="691.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.42%)</title><rect x="90.0" y="675.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="93.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.42%)</title><rect x="90.0" y="659.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.42%)</title><rect x="90.0" y="643.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.42%)</title><rect x="90.0" y="627.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="93.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.42%)</title><rect x="95.0" y="707.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="98.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.85%)</title><rect x="100.0" y="755.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.85%)</title><rect x="100.0" y="739.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.85%)</title><rect x="100.0" y="723.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.42%)</title><rect x="100.0" y="707.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1148168779.accept (1 samples, 0.42%)</title><rect x="100.0" y="691.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.42%)</title><rect x="100.0" y="675.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.42%)</title><rect x="100.0" y="659.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.42%)</title><rect x="100.0" y="643.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.42%)</title><rect x="105.0" y="707.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.42%)</title><rect x="105.0" y="691.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.42%)</title><rect x="105.0" y="675.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="108.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.42%)</title><rect x="105.0" y="659.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.42%)</title><rect x="105.0" y="643.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.0" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.42%)</title><rect x="105.0" y="627.0" width="5.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="108.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.42%)</title><rect x="110.0" y="755.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.42%)</title><rect x="110.0" y="739.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.42%)</title><rect x="110.0" y="723.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="113.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.42%)</title><rect x="110.0" y="707.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.42%)</title><rect x="110.0" y="691.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="113.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.42%)</title><rect x="110.0" y="675.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="113.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.42%)</title><rect x="110.0" y="659.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="113.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.42%)</title><rect x="110.0" y="643.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.42%)</title><rect x="110.0" y="627.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="113.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.42%)</title><rect x="110.0" y="611.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="113.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.write (1 samples, 0.42%)</title><rect x="110.0" y="595.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.42%)</title><rect x="115.0" y="771.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.42%)</title><rect x="115.0" y="755.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="118.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (170 samples, 72.03%)</title><rect x="120.0" y="819.0" width="850.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="123.0" y="830.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (170 samples, 72.03%)</title><rect x="120.0" y="803.0" width="850.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="123.0" y="814.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (170 samples, 72.03%)</title><rect x="120.0" y="787.0" width="850.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.0" y="798.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (169 samples, 71.61%)</title><rect x="120.0" y="771.0" width="845.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.0" y="782.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (169 samples, 71.61%)</title><rect x="120.0" y="755.0" width="845.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.0" y="766.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (169 samples, 71.61%)</title><rect x="120.0" y="739.0" width="845.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.0" y="750.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (167 samples, 70.76%)</title><rect x="120.0" y="723.0" width="835.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.0" y="734.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.42%)</title><rect x="140.0" y="707.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.42%)</title><rect x="140.0" y="691.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="143.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/455509665.get (1 samples, 0.42%)</title><rect x="140.0" y="675.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.0" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.42%)</title><rect x="140.0" y="659.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.0" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.42%)</title><rect x="140.0" y="643.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="143.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (39 samples, 16.53%)</title><rect x="145.0" y="707.0" width="195.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="148.0" y="718.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (39 samples, 16.53%)</title><rect x="145.0" y="691.0" width="195.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.0" y="702.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (39 samples, 16.53%)</title><rect x="145.0" y="675.0" width="195.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.0" y="686.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 16.53%)</title><rect x="145.0" y="659.0" width="195.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.0" y="670.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 16.53%)</title><rect x="145.0" y="643.0" width="195.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="148.0" y="654.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (39 samples, 16.53%)</title><rect x="145.0" y="627.0" width="195.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.0" y="638.0">com/fasterxml/jackson/dat..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.54%)</title><rect x="145.0" y="611.0" width="30.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.0" y="622.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.85%)</title><rect x="155.0" y="595.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="158.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.85%)</title><rect x="155.0" y="579.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="158.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.85%)</title><rect x="155.0" y="563.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="158.0" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.85%)</title><rect x="155.0" y="547.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="158.0" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.85%)</title><rect x="155.0" y="531.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.0" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.85%)</title><rect x="155.0" y="515.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="158.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.85%)</title><rect x="165.0" y="595.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="168.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.85%)</title><rect x="165.0" y="579.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.85%)</title><rect x="165.0" y="563.0" width="10.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.85%)</title><rect x="165.0" y="547.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.85%)</title><rect x="165.0" y="531.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.0" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.85%)</title><rect x="165.0" y="515.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="168.0" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.42%)</title><rect x="170.0" y="499.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="173.0" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.42%)</title><rect x="170.0" y="483.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="173.0" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.42%)</title><rect x="170.0" y="467.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="173.0" y="478.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.42%)</title><rect x="170.0" y="451.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="173.0" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.42%)</title><rect x="170.0" y="435.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="173.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (33 samples, 13.98%)</title><rect x="175.0" y="611.0" width="165.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.0" y="622.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 2.54%)</title><rect x="175.0" y="595.0" width="30.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.0" y="606.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.42%)</title><rect x="205.0" y="595.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.42%)</title><rect x="205.0" y="579.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.42%)</title><rect x="205.0" y="563.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.42%)</title><rect x="205.0" y="547.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (26 samples, 11.02%)</title><rect x="210.0" y="595.0" width="130.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.0" y="606.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 2.97%)</title><rect x="210.0" y="579.0" width="35.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.0" y="590.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.85%)</title><rect x="210.0" y="563.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.85%)</title><rect x="210.0" y="547.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.85%)</title><rect x="210.0" y="531.0" width="10.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.85%)</title><rect x="210.0" y="515.0" width="10.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="213.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.42%)</title><rect x="215.0" y="499.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.69%)</title><rect x="220.0" y="563.0" width="20.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.85%)</title><rect x="220.0" y="547.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.85%)</title><rect x="220.0" y="531.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.85%)</title><rect x="230.0" y="547.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.85%)</title><rect x="230.0" y="531.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.85%)</title><rect x="230.0" y="515.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.85%)</title><rect x="230.0" y="499.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.42%)</title><rect x="240.0" y="563.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.42%)</title><rect x="240.0" y="547.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (19 samples, 8.05%)</title><rect x="245.0" y="579.0" width="95.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.0" y="590.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (19 samples, 8.05%)</title><rect x="245.0" y="563.0" width="95.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.0" y="574.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (19 samples, 8.05%)</title><rect x="245.0" y="547.0" width="95.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.0" y="558.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 3.39%)</title><rect x="255.0" y="531.0" width="40.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.0" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 2.54%)</title><rect x="255.0" y="515.0" width="30.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.0" y="526.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 2.54%)</title><rect x="255.0" y="499.0" width="30.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.0" y="510.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 2.54%)</title><rect x="255.0" y="483.0" width="30.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.0" y="494.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.85%)</title><rect x="255.0" y="467.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 1.69%)</title><rect x="265.0" y="467.0" width="20.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 1.69%)</title><rect x="265.0" y="451.0" width="20.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 1.69%)</title><rect x="265.0" y="435.0" width="20.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.42%)</title><rect x="280.0" y="419.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.42%)</title><rect x="285.0" y="515.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.42%)</title><rect x="285.0" y="499.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.42%)</title><rect x="285.0" y="483.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.42%)</title><rect x="290.0" y="515.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.42%)</title><rect x="290.0" y="499.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.27%)</title><rect x="295.0" y="531.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 1.27%)</title><rect x="295.0" y="515.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.27%)</title><rect x="295.0" y="499.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.27%)</title><rect x="295.0" y="483.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.0" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 1.27%)</title><rect x="295.0" y="467.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 1.27%)</title><rect x="310.0" y="531.0" width="15.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 1.27%)</title><rect x="310.0" y="515.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 1.27%)</title><rect x="310.0" y="499.0" width="15.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 1.27%)</title><rect x="310.0" y="483.0" width="15.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.0" y="494.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 1.27%)</title><rect x="310.0" y="467.0" width="15.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.0" y="478.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 1.27%)</title><rect x="310.0" y="451.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.0" y="462.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 1.27%)</title><rect x="310.0" y="435.0" width="15.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 1.27%)</title><rect x="325.0" y="531.0" width="15.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.27%)</title><rect x="325.0" y="515.0" width="15.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="328.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.27%)</title><rect x="325.0" y="499.0" width="15.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="328.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (117 samples, 49.58%)</title><rect x="340.0" y="707.0" width="585.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.0" y="718.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (16 samples, 6.78%)</title><rect x="340.0" y="691.0" width="80.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.0" y="702.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (13 samples, 5.51%)</title><rect x="355.0" y="675.0" width="65.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.0" y="686.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (10 samples, 4.24%)</title><rect x="370.0" y="659.0" width="50.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="373.0" y="670.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.42%)</title><rect x="375.0" y="643.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="378.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.42%)</title><rect x="375.0" y="627.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.42%)</title><rect x="375.0" y="611.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.42%)</title><rect x="375.0" y="595.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="378.0" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.42%)</title><rect x="375.0" y="579.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.42%)</title><rect x="375.0" y="563.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="378.0" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 3.39%)</title><rect x="380.0" y="643.0" width="40.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="383.0" y="654.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 3.39%)</title><rect x="380.0" y="627.0" width="40.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="383.0" y="638.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.27%)</title><rect x="405.0" y="611.0" width="15.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="408.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (32 samples, 13.56%)</title><rect x="420.0" y="691.0" width="160.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.0" y="702.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (30 samples, 12.71%)</title><rect x="425.0" y="675.0" width="150.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.0" y="686.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (14 samples, 5.93%)</title><rect x="430.0" y="659.0" width="70.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="433.0" y="670.0">com/line..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (14 samples, 5.93%)</title><rect x="430.0" y="643.0" width="70.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="433.0" y="654.0">java/lan..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 3.81%)</title><rect x="445.0" y="627.0" width="45.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="448.0" y="638.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 3.81%)</title><rect x="445.0" y="611.0" width="45.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.0" y="622.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 3.81%)</title><rect x="445.0" y="595.0" width="45.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.0" y="606.0">java..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 3.81%)</title><rect x="445.0" y="579.0" width="45.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="448.0" y="590.0">java..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 2.12%)</title><rect x="460.0" y="563.0" width="25.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="463.0" y="574.0">O..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 1.69%)</title><rect x="460.0" y="547.0" width="20.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="463.0" y="558.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 1.69%)</title><rect x="460.0" y="531.0" width="20.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="463.0" y="542.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 1.69%)</title><rect x="460.0" y="515.0" width="20.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="463.0" y="526.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.42%)</title><rect x="465.0" y="499.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="468.0" y="510.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.42%)</title><rect x="465.0" y="483.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="468.0" y="494.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.42%)</title><rect x="470.0" y="499.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="473.0" y="510.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.42%)</title><rect x="475.0" y="499.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="478.0" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.42%)</title><rect x="480.0" y="547.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="483.0" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="485.0" y="563.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="488.0" y="574.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.42%)</title><rect x="490.0" y="627.0" width="5.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="493.0" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="495.0" y="627.0" width="5.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="498.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.42%)</title><rect x="500.0" y="659.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="503.0" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.42%)</title><rect x="500.0" y="643.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="503.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.42%)</title><rect x="500.0" y="627.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="503.0" y="638.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="505.0" y="659.0" width="5.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="508.0" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 5.51%)</title><rect x="510.0" y="659.0" width="65.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="513.0" y="670.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 5.51%)</title><rect x="510.0" y="643.0" width="65.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="513.0" y="654.0">ch/qos/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 5.51%)</title><rect x="510.0" y="627.0" width="65.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="513.0" y="638.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 4.66%)</title><rect x="520.0" y="611.0" width="55.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="523.0" y="622.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 3.39%)</title><rect x="535.0" y="595.0" width="40.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="538.0" y="606.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.85%)</title><rect x="560.0" y="579.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="563.0" y="590.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.42%)</title><rect x="570.0" y="579.0" width="5.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="573.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.42%)</title><rect x="575.0" y="675.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (58 samples, 24.58%)</title><rect x="580.0" y="691.0" width="290.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="583.0" y="702.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (58 samples, 24.58%)</title><rect x="580.0" y="675.0" width="290.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.0" y="686.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (53 samples, 22.46%)</title><rect x="580.0" y="659.0" width="265.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="583.0" y="670.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (53 samples, 22.46%)</title><rect x="580.0" y="643.0" width="265.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="583.0" y="654.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (53 samples, 22.46%)</title><rect x="580.0" y="627.0" width="265.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="583.0" y="638.0">com/linecorp/decaton/benchmark/Reco..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.42%)</title><rect x="580.0" y="611.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="583.0" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.42%)</title><rect x="580.0" y="595.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="583.0" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.42%)</title><rect x="580.0" y="579.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="583.0" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.42%)</title><rect x="580.0" y="563.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.42%)</title><rect x="580.0" y="547.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="583.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (52 samples, 22.03%)</title><rect x="585.0" y="611.0" width="260.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="588.0" y="622.0">com/linecorp/decaton/benchmark/Reco..</text>
</g>
<g>
<title>java/lang/Thread.sleep (51 samples, 21.61%)</title><rect x="585.0" y="595.0" width="255.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.0" y="606.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (43 samples, 18.22%)</title><rect x="620.0" y="579.0" width="215.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="623.0" y="590.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.42%)</title><rect x="645.0" y="563.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="648.0" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="650.0" y="563.0" width="5.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="653.0" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.85%)</title><rect x="655.0" y="563.0" width="10.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="658.0" y="574.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.85%)</title><rect x="655.0" y="547.0" width="10.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="658.0" y="558.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.42%)</title><rect x="665.0" y="563.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="668.0" y="574.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (33 samples, 13.98%)</title><rect x="670.0" y="563.0" width="165.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="673.0" y="574.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.42%)</title><rect x="710.0" y="547.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="713.0" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="710.0" y="531.0" width="5.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="713.0" y="542.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.69%)</title><rect x="715.0" y="547.0" width="20.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="718.0" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.85%)</title><rect x="735.0" y="547.0" width="10.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="738.0" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 4.66%)</title><rect x="745.0" y="547.0" width="55.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="748.0" y="558.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.42%)</title><rect x="800.0" y="547.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="803.0" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.42%)</title><rect x="805.0" y="547.0" width="5.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="808.0" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.42%)</title><rect x="810.0" y="547.0" width="5.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="813.0" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.42%)</title><rect x="815.0" y="547.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="818.0" y="558.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.85%)</title><rect x="820.0" y="547.0" width="10.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="823.0" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.42%)</title><rect x="830.0" y="547.0" width="5.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="833.0" y="558.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.42%)</title><rect x="835.0" y="579.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="838.0" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.42%)</title><rect x="840.0" y="595.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="843.0" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="840.0" y="579.0" width="5.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="843.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.42%)</title><rect x="845.0" y="659.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="848.0" y="670.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.42%)</title><rect x="845.0" y="643.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="848.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.42%)</title><rect x="850.0" y="659.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="853.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.42%)</title><rect x="850.0" y="643.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="853.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1091952887.get$Lambda (1 samples, 0.42%)</title><rect x="850.0" y="627.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="853.0" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.42%)</title><rect x="850.0" y="611.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="853.0" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.42%)</title><rect x="850.0" y="595.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="853.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.42%)</title><rect x="850.0" y="579.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="853.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.42%)</title><rect x="850.0" y="563.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.0" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.42%)</title><rect x="850.0" y="547.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.0" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.42%)</title><rect x="850.0" y="531.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="853.0" y="542.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.42%)</title><rect x="850.0" y="515.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="853.0" y="526.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.42%)</title><rect x="850.0" y="499.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="853.0" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.42%)</title><rect x="855.0" y="659.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="858.0" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.42%)</title><rect x="855.0" y="643.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="858.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.42%)</title><rect x="855.0" y="627.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="858.0" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.42%)</title><rect x="860.0" y="659.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="863.0" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.42%)</title><rect x="865.0" y="659.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="868.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.42%)</title><rect x="870.0" y="691.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="873.0" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.42%)</title><rect x="870.0" y="675.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="873.0" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.42%)</title><rect x="870.0" y="659.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="873.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 4.24%)</title><rect x="875.0" y="691.0" width="50.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="878.0" y="702.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 4.24%)</title><rect x="875.0" y="675.0" width="50.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="878.0" y="686.0">java/..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.42%)</title><rect x="905.0" y="659.0" width="5.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="908.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.85%)</title><rect x="910.0" y="659.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="913.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/122129859.accept (2 samples, 0.85%)</title><rect x="910.0" y="643.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="913.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.85%)</title><rect x="910.0" y="627.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="913.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.85%)</title><rect x="910.0" y="611.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="913.0" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.85%)</title><rect x="910.0" y="595.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="913.0" y="606.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.85%)</title><rect x="910.0" y="579.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="913.0" y="590.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.42%)</title><rect x="920.0" y="659.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="923.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.54%)</title><rect x="925.0" y="707.0" width="30.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="928.0" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.54%)</title><rect x="925.0" y="691.0" width="30.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="928.0" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.42%)</title><rect x="950.0" y="675.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="953.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/122129859.accept (1 samples, 0.42%)</title><rect x="950.0" y="659.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="953.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.42%)</title><rect x="950.0" y="643.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="953.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.42%)</title><rect x="950.0" y="627.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="953.0" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.42%)</title><rect x="950.0" y="611.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="953.0" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.42%)</title><rect x="950.0" y="595.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="953.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.85%)</title><rect x="955.0" y="723.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="958.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.42%)</title><rect x="965.0" y="771.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="968.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.42%)</title><rect x="965.0" y="755.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="968.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.42%)</title><rect x="965.0" y="739.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="968.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.42%)</title><rect x="965.0" y="723.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="968.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.42%)</title><rect x="965.0" y="707.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="968.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.42%)</title><rect x="965.0" y="691.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="968.0" y="702.0"></text>
</g>
<g>
<title>start_thread (44 samples, 18.64%)</title><rect x="970.0" y="819.0" width="220.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="973.0" y="830.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (44 samples, 18.64%)</title><rect x="970.0" y="803.0" width="220.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="973.0" y="814.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 3.39%)</title><rect x="970.0" y="787.0" width="40.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.0" y="798.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 3.39%)</title><rect x="970.0" y="771.0" width="40.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.0" y="782.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.54%)</title><rect x="970.0" y="755.0" width="30.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="973.0" y="766.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.54%)</title><rect x="970.0" y="739.0" width="30.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="973.0" y="750.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.42%)</title><rect x="985.0" y="723.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.0" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.42%)</title><rect x="985.0" y="707.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.0" y="718.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.85%)</title><rect x="990.0" y="723.0" width="10.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="993.0" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.85%)</title><rect x="1000.0" y="755.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1003.0" y="766.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.85%)</title><rect x="1000.0" y="739.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1003.0" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.85%)</title><rect x="1000.0" y="723.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1003.0" y="734.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.85%)</title><rect x="1000.0" y="707.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1003.0" y="718.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.85%)</title><rect x="1000.0" y="691.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1003.0" y="702.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.85%)</title><rect x="1000.0" y="675.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1003.0" y="686.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.85%)</title><rect x="1000.0" y="659.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1003.0" y="670.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.85%)</title><rect x="1000.0" y="643.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1003.0" y="654.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (2 samples, 0.85%)</title><rect x="1000.0" y="627.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1003.0" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (36 samples, 15.25%)</title><rect x="1010.0" y="787.0" width="180.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.0" y="798.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (36 samples, 15.25%)</title><rect x="1010.0" y="771.0" width="180.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1013.0" y="782.0">JavaThread::thread_main..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (36 samples, 15.25%)</title><rect x="1010.0" y="755.0" width="180.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1013.0" y="766.0">CompileBroker::compiler..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (36 samples, 15.25%)</title><rect x="1010.0" y="739.0" width="180.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.0" y="750.0">CompileBroker::invoke_c..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (33 samples, 13.98%)</title><rect x="1010.0" y="723.0" width="165.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1013.0" y="734.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (33 samples, 13.98%)</title><rect x="1010.0" y="707.0" width="165.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.0" y="718.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 7.63%)</title><rect x="1010.0" y="691.0" width="90.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1013.0" y="702.0">Compile::C..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.85%)</title><rect x="1010.0" y="675.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1013.0" y="686.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.85%)</title><rect x="1010.0" y="659.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.0" y="670.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.85%)</title><rect x="1010.0" y="643.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.0" y="654.0"></text>
</g>
<g>
<title>CodeBuffer::initialize_section_size(CodeSection*, int) (1 samples, 0.42%)</title><rect x="1015.0" y="627.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.0" y="638.0"></text>
</g>
<g>
<title>MachNode::peephole(Block*, int, PhaseRegAlloc*, int&amp;, Compile*) (1 samples, 0.42%)</title><rect x="1020.0" y="675.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1023.0" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.27%)</title><rect x="1025.0" y="675.0" width="15.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1028.0" y="686.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.85%)</title><rect x="1025.0" y="659.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.0" y="670.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.42%)</title><rect x="1035.0" y="659.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1038.0" y="670.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.42%)</title><rect x="1035.0" y="643.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1038.0" y="654.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.42%)</title><rect x="1035.0" y="627.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (12 samples, 5.08%)</title><rect x="1040.0" y="675.0" width="60.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1043.0" y="686.0">PhaseC..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.42%)</title><rect x="1045.0" y="659.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.85%)</title><rect x="1050.0" y="659.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1053.0" y="670.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.42%)</title><rect x="1055.0" y="643.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.0" y="654.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.42%)</title><rect x="1055.0" y="627.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1058.0" y="638.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.42%)</title><rect x="1055.0" y="611.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1058.0" y="622.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.42%)</title><rect x="1055.0" y="595.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1058.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.85%)</title><rect x="1060.0" y="659.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.42%)</title><rect x="1065.0" y="643.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1068.0" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.42%)</title><rect x="1070.0" y="659.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.42%)</title><rect x="1070.0" y="643.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1073.0" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="1070.0" y="627.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.42%)</title><rect x="1075.0" y="659.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.0" y="670.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.42%)</title><rect x="1075.0" y="643.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.0" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.27%)</title><rect x="1080.0" y="659.0" width="15.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.42%)</title><rect x="1090.0" y="643.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.0" y="654.0"></text>
</g>
<g>
<title>indOffset8Oper::in_RegMask(int) const (1 samples, 0.42%)</title><rect x="1095.0" y="659.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1098.0" y="670.0"></text>
</g>
<g>
<title>Compile::Optimize() (10 samples, 4.24%)</title><rect x="1100.0" y="691.0" width="50.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.0" y="702.0">Compi..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.42%)</title><rect x="1100.0" y="675.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.0" y="686.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.42%)</title><rect x="1100.0" y="659.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.0" y="670.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.42%)</title><rect x="1100.0" y="643.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 2.97%)</title><rect x="1105.0" y="675.0" width="35.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.0" y="686.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.85%)</title><rect x="1105.0" y="659.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.0" y="670.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.42%)</title><rect x="1110.0" y="643.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.27%)</title><rect x="1115.0" y="659.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.85%)</title><rect x="1120.0" y="643.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.42%)</title><rect x="1125.0" y="627.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.0" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.42%)</title><rect x="1125.0" y="611.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.42%)</title><rect x="1130.0" y="659.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.42%)</title><rect x="1135.0" y="659.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.42%)</title><rect x="1135.0" y="643.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.0" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.42%)</title><rect x="1135.0" y="627.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.0" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.85%)</title><rect x="1140.0" y="675.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.0" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.85%)</title><rect x="1140.0" y="659.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.0" y="670.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1140.0" y="643.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.0" y="654.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1145.0" y="643.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.0" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.42%)</title><rect x="1145.0" y="627.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.0" y="638.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.42%)</title><rect x="1145.0" y="611.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.0" y="622.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.42%)</title><rect x="1145.0" y="595.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.0" y="606.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.42%)</title><rect x="1145.0" y="579.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.0" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.42%)</title><rect x="1145.0" y="563.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.0" y="574.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.42%)</title><rect x="1145.0" y="547.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.69%)</title><rect x="1150.0" y="691.0" width="20.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.69%)</title><rect x="1150.0" y="675.0" width="20.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.69%)</title><rect x="1150.0" y="659.0" width="20.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.69%)</title><rect x="1150.0" y="643.0" width="20.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.69%)</title><rect x="1150.0" y="627.0" width="20.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.69%)</title><rect x="1150.0" y="611.0" width="20.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.0" y="622.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.42%)</title><rect x="1150.0" y="595.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.0" y="606.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.42%)</title><rect x="1150.0" y="579.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.0" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.42%)</title><rect x="1150.0" y="563.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.85%)</title><rect x="1155.0" y="595.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.85%)</title><rect x="1155.0" y="579.0" width="10.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1155.0" y="563.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1155.0" y="547.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1155.0" y="531.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1155.0" y="515.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1155.0" y="499.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1155.0" y="483.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1155.0" y="467.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1155.0" y="451.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1155.0" y="435.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1155.0" y="419.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1155.0" y="403.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1155.0" y="387.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1155.0" y="371.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.0" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.42%)</title><rect x="1155.0" y="355.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="366.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1155.0" y="339.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.42%)</title><rect x="1160.0" y="563.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.0" y="574.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.42%)</title><rect x="1160.0" y="547.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.0" y="558.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1160.0" y="531.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.0" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1165.0" y="595.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1165.0" y="579.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1165.0" y="563.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1165.0" y="547.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1165.0" y="531.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1165.0" y="515.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1165.0" y="499.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1165.0" y="483.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1165.0" y="467.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1165.0" y="451.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1165.0" y="435.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1165.0" y="419.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1165.0" y="403.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1165.0" y="387.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1165.0" y="371.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1165.0" y="355.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1165.0" y="339.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1165.0" y="323.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1165.0" y="307.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1165.0" y="291.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1165.0" y="275.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1165.0" y="259.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1165.0" y="243.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1165.0" y="227.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1165.0" y="211.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1165.0" y="195.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.0" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1165.0" y="179.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1165.0" y="163.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1165.0" y="147.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1165.0" y="131.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.42%)</title><rect x="1165.0" y="115.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.42%)</title><rect x="1165.0" y="99.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.42%)</title><rect x="1165.0" y="83.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.42%)</title><rect x="1165.0" y="67.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.0" y="78.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.42%)</title><rect x="1165.0" y="51.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.0" y="62.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.42%)</title><rect x="1165.0" y="35.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1168.0" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.42%)</title><rect x="1170.0" y="691.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.0" y="702.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.42%)</title><rect x="1170.0" y="675.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.0" y="686.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.42%)</title><rect x="1170.0" y="659.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.0" y="670.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.27%)</title><rect x="1175.0" y="723.0" width="15.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="734.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.27%)</title><rect x="1175.0" y="707.0" width="15.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="718.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.27%)</title><rect x="1175.0" y="691.0" width="15.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.0" y="702.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.85%)</title><rect x="1175.0" y="675.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.0" y="686.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.85%)</title><rect x="1175.0" y="659.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="670.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.42%)</title><rect x="1175.0" y="643.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="654.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.42%)</title><rect x="1175.0" y="627.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="638.0"></text>
</g>
<g>
<title>LIRGenerator::do_LogicOp(LogicOp*) (1 samples, 0.42%)</title><rect x="1175.0" y="611.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.0" y="622.0"></text>
</g>
<g>
<title>LIRGenerator::walk(Instruction*) (1 samples, 0.42%)</title><rect x="1175.0" y="595.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="606.0"></text>
</g>
<g>
<title>Constant::as_Constant() (1 samples, 0.42%)</title><rect x="1175.0" y="579.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="590.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.42%)</title><rect x="1180.0" y="643.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="654.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.42%)</title><rect x="1180.0" y="627.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="638.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.42%)</title><rect x="1180.0" y="611.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="622.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.42%)</title><rect x="1180.0" y="595.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.0" y="606.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.42%)</title><rect x="1185.0" y="675.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.0" y="686.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.42%)</title><rect x="1185.0" y="659.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.0" y="670.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.42%)</title><rect x="1185.0" y="643.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.0" y="654.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.42%)</title><rect x="1185.0" y="627.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.0" y="638.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.42%)</title><rect x="1185.0" y="611.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.0" y="622.0"></text>
</g>
</g>
</svg>
